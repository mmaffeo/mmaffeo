/*****************************************************************************\
%This module maps the constant data structures available in the database.
%
%This file is auto-generated by read_CD2.pl.
%
%Built from:
%  database\ED1287_MXGateway.sadb
%  key: MX_GATEWAY
\*****************************************************************************/
#include "stdint.h"
#include <stddef.h>
#include "ap_cdata.h"
#include "cdata.h"
#include "bsp_rom.h"
#include "bsp_ecuid.h"

/// Number of 32bit words per section record
#define CD_SECT_RCRD_LEN            (2)
/// Index of RESERVED_0
#define CD_INDEX_RESERVED_0         (0)
///Index of NUMSECTIONS
#define CD_INDEX_NUMSECTIONS        (1)
/// Index of first Section ID
#define CD_INDEX_FIRST_ID           (2)
/// Index of First Section Offset
#define CD_INDEX_FIRST_OFFSET       (3)
/// Index of First Section Size
#define CD_INDEX_SECT_ID(s)         (CD_INDEX_FIRST_ID + ((s) * CD_SECT_RCRD_LEN))
/// Index of specific Section Offset
#define CD_INDEX_SECT_OFFSET(s)     (CD_INDEX_FIRST_OFFSET + ((s) * CD_SECT_RCRD_LEN))

#define CD_SID_CDATA                (0)
#define CD_SID(l)                   (offsetof(CONSTANT_DATA_t, l))

//******************************************************************************
// Static Function Prototypes
//******************************************************************************
static void const * getCDSection(uint32_t sectionID);


//******************************************************************************
// Static Variables
//******************************************************************************
static uintptr_t cdataAddress = 0;


//******************************************************************************
// Global Variables
//******************************************************************************
CONSTANT_DATA_t const * CONSTANT_DATA;
  uint16_t const *MXGTW_AUXHYD1;
  uint16_t const *MXGTW_AUXHYD2;
  uint16_t const *MXGTW_AUXHYD3;
  uint16_t const *MXGTW_ECTGAUGE;
  uint16_t const *MXGTW_ECTSNDINPUT;
  uint16_t const *MXGTW_ECTSNDOUTPUT;
  uint16_t const *MXGTW_EOPGAUGE;
  uint16_t const *MXGTW_EOPSHUTDOWN;
  uint16_t const *MXGTW_EOPSND;
  uint16_t const *MXGTW_EOPWARN;
  uint16_t const *MXGTW_FUEL_PULL_TIME;
  uint16_t const *MXGTW_FUELGAUGE;
  uint16_t const *MXGTW_FUELSND;
  uint16_t const *MXGTW_HOTGAUGE;
  uint16_t const *MXGTW_HOTSND;
  uint16_t const *MXGTW_OFFSET;
  uint8_t const *MXGTW_VBATTERYGAUGE;
  uint8_t const *MXGTW_OPT_HYD_XCHG;
  uint8_t const *MXGTW_OPT_ANG_BLD;
  uint8_t const *MXGTW_OPT_DIG_DEPTH;
  uint8_t const *MXGTW_OPT_AUTO_IDLE;
  uint8_t const *MXGTW_OPT_AUTO_SHIFT;
  uint8_t const *MXGTW_VITAL_DEFAULT_ICON;
  uint16_t const *MXGTW_VITAL_DEFAULT_SHUTDOWN;
  uint8_t const *MXGTW_VITAL_DEFAULT_UNITS;
  uint16_t const *MXGTW_VITAL_DEFAULT_WARNING;
  uint16_t const *MXGTW_SERVICE_DEFAULT_HOURS;
  uint8_t const *MXGTW_SERVICE_DEFAULT_ICON;
  uint8_t const *MXGTW_SERVICE_DEFAULT_TEXT;
  uint32_t const *MXGTW_GATEWAY_J1939_ID;
  uint32_t const *MXGTW_GATEWAY_J1939_MASK;
  uint8_t const *MXGTW_GATEWAY_DIRECTION;
  uint16_t const *MXGTW_HYD_RESPONSE_OUT4;
  uint16_t const *MXGTW_HYD_RESPONSE_OUT3;
  uint16_t const *MXGTW_HYD_RESPONSE_OUT2;
  uint16_t const *MXGTW_HYD_RESPONSE_OUT1;
  uint16_t const *MXGTW_HYD_RESPONSE_IN;
  uint8_t const *MXGTW_OPT_TWO_SPEED;
  uint16_t const *MXGTW_ECU_GLOW_TEMP;
  uint16_t const *MXGTW_ECU_GLOW_TIME;
  uint8_t const *MXGTW_OPT_AUX_OFFSET;
  uint16_t const *MXGTW_OFFSET_AUX;
  uint8_t const *MXGTW_OPT_HIGH_FLOW;
  uint8_t const *MXGTW_OPT_OVRLOAD;
  uint8_t const *MXGTW_OPT_S2_2NDAUX;
  uint16_t const *MXGTW_STARTER_AUTOMATED_OIL_TEMP;
  uint16_t const *MXGTW_STARTER_AUTOMATED_RPM_DISENGAGE_LEVEL;
  uint16_t const *MXGTW_STARTER_AUTOMATED_MAX_TIME;
  uint16_t const *MXGTW_STARTER_AUTOMATED_RPM_ENGAGE_LEVEL;
  uint16_t const *MXGTW_ECU_DERATE_RPM;
  uint16_t const *MXGTW_ECU_DERATE_TORQUE;
  uint8_t const *MXGTW_OPT_NA_2NDAUX;
  uint8_t const *MXGTW_OPT_KEYLESS;
  uint32_t const *GTW_PCODE_ECU_ASCIIPCODE;
  uint32_t const *GTW_PCODE_ECU_SPNLOOKUP;
  uint8_t const *MXGTW_OPT_DELUXE_M2;
  uint8_t const *MXGTW_OPT_CRANK_INHIBIT;
  uint8_t const *MXGTW_OPT_TRACK_TENSION;
  uint8_t const *MXGTW_OPT_EMEA_CONTROLS_A;
  uint8_t const *MXGTW_OPT_EMEA_CONTROLS_B;
  uint8_t const *MXGTW_OPT_EMEA_CONTROLS_C;
  uint16_t const *MXGTW_AUX2_FLOW;
  uint8_t const *MXGTW_OPT_HPMATCH;
  uint8_t const *MXGTW_OPT_AUX2_FLOW_LOW;
  uint8_t const *MXGTW_OPT_AUX2_FLOW_MED;
  uint8_t const *MXGTW_OPT_AUX2_FLOW_HI;
  uint32_t const *CDATA_MAP;

//******************************************************************************
// External Function Definitions
//******************************************************************************

//******************************************************************************
void ap_cdata_init(void)
{
  cdataAddress = bsp_rom_getStartAddr(bsp_ecuid->ap_sw_const_smask);

  // CONSTANT_DATA is always section ID 0
  CONSTANT_DATA = (CONSTANT_DATA_t const *)getCDSection(CD_SID_CDATA);

  // The remaining table sections IDs are determined the location of their reference in the CONSTANT_DATA structure
  MXGTW_AUXHYD1 = (uint16_t const *)getCDSection(967);
  MXGTW_AUXHYD2 = (uint16_t const *)getCDSection(968);
  MXGTW_AUXHYD3 = (uint16_t const *)getCDSection(969);
  MXGTW_ECTGAUGE = (uint16_t const *)getCDSection(493);
  MXGTW_ECTSNDINPUT = (uint16_t const *)getCDSection(491);
  MXGTW_ECTSNDOUTPUT = (uint16_t const *)getCDSection(492);
  MXGTW_EOPGAUGE = (uint16_t const *)getCDSection(582);
  MXGTW_EOPSHUTDOWN = (uint16_t const *)getCDSection(584);
  MXGTW_EOPSND = (uint16_t const *)getCDSection(581);
  MXGTW_EOPWARN = (uint16_t const *)getCDSection(583);
  MXGTW_FUEL_PULL_TIME = (uint16_t const *)getCDSection(370);
  MXGTW_FUELGAUGE = (uint16_t const *)getCDSection(801);
  MXGTW_FUELSND = (uint16_t const *)getCDSection(802);
  MXGTW_HOTGAUGE = (uint16_t const *)getCDSection(542);
  MXGTW_HOTSND = (uint16_t const *)getCDSection(541);
  MXGTW_OFFSET = (uint16_t const *)getCDSection(650);
  MXGTW_VBATTERYGAUGE = (uint8_t const *)getCDSection(280);
  MXGTW_OPT_HYD_XCHG = (uint8_t const *)getCDSection(2068);
  MXGTW_OPT_ANG_BLD = (uint8_t const *)getCDSection(2071);
  MXGTW_OPT_DIG_DEPTH = (uint8_t const *)getCDSection(2074);
  MXGTW_OPT_AUTO_IDLE = (uint8_t const *)getCDSection(2066);
  MXGTW_OPT_AUTO_SHIFT = (uint8_t const *)getCDSection(2067);
  MXGTW_VITAL_DEFAULT_ICON = (uint8_t const *)getCDSection(1195);
  MXGTW_VITAL_DEFAULT_SHUTDOWN = (uint16_t const *)getCDSection(1198);
  MXGTW_VITAL_DEFAULT_UNITS = (uint8_t const *)getCDSection(1196);
  MXGTW_VITAL_DEFAULT_WARNING = (uint16_t const *)getCDSection(1197);
  MXGTW_SERVICE_DEFAULT_HOURS = (uint16_t const *)getCDSection(1172);
  MXGTW_SERVICE_DEFAULT_ICON = (uint8_t const *)getCDSection(1173);
  MXGTW_SERVICE_DEFAULT_TEXT = (uint8_t const *)getCDSection(1174);
  MXGTW_GATEWAY_J1939_ID = (uint32_t const *)getCDSection(1716);
  MXGTW_GATEWAY_J1939_MASK = (uint32_t const *)getCDSection(1717);
  MXGTW_GATEWAY_DIRECTION = (uint8_t const *)getCDSection(1718);
  MXGTW_HYD_RESPONSE_OUT4 = (uint16_t const *)getCDSection(1733);
  MXGTW_HYD_RESPONSE_OUT3 = (uint16_t const *)getCDSection(1732);
  MXGTW_HYD_RESPONSE_OUT2 = (uint16_t const *)getCDSection(1731);
  MXGTW_HYD_RESPONSE_OUT1 = (uint16_t const *)getCDSection(1730);
  MXGTW_HYD_RESPONSE_IN = (uint16_t const *)getCDSection(1729);
  MXGTW_OPT_TWO_SPEED = (uint8_t const *)getCDSection(2072);
  MXGTW_ECU_GLOW_TEMP = (uint16_t const *)getCDSection(720);
  MXGTW_ECU_GLOW_TIME = (uint16_t const *)getCDSection(721);
  MXGTW_OPT_AUX_OFFSET = (uint8_t const *)getCDSection(2069);
  MXGTW_OFFSET_AUX = (uint16_t const *)getCDSection(652);
  MXGTW_OPT_HIGH_FLOW = (uint8_t const *)getCDSection(2070);
  MXGTW_OPT_OVRLOAD = (uint8_t const *)getCDSection(2073);
  MXGTW_OPT_S2_2NDAUX = (uint8_t const *)getCDSection(2075);
  MXGTW_STARTER_AUTOMATED_OIL_TEMP = (uint16_t const *)getCDSection(2020);
  MXGTW_STARTER_AUTOMATED_RPM_DISENGAGE_LEVEL = (uint16_t const *)getCDSection(2022);
  MXGTW_STARTER_AUTOMATED_MAX_TIME = (uint16_t const *)getCDSection(2023);
  MXGTW_STARTER_AUTOMATED_RPM_ENGAGE_LEVEL = (uint16_t const *)getCDSection(2021);
  MXGTW_ECU_DERATE_RPM = (uint16_t const *)getCDSection(1832);
  MXGTW_ECU_DERATE_TORQUE = (uint16_t const *)getCDSection(1833);
  MXGTW_OPT_NA_2NDAUX = (uint8_t const *)getCDSection(2076);
  MXGTW_OPT_KEYLESS = (uint8_t const *)getCDSection(2077);
  GTW_PCODE_ECU_ASCIIPCODE = (uint32_t const *)getCDSection(2078);
  GTW_PCODE_ECU_SPNLOOKUP = (uint32_t const *)getCDSection(2079);
  MXGTW_OPT_DELUXE_M2 = (uint8_t const *)getCDSection(2081);
  MXGTW_OPT_CRANK_INHIBIT = (uint8_t const *)getCDSection(2082);
  MXGTW_OPT_TRACK_TENSION = (uint8_t const *)getCDSection(2083);
  MXGTW_OPT_EMEA_CONTROLS_A = (uint8_t const *)getCDSection(2084);
  MXGTW_OPT_EMEA_CONTROLS_B = (uint8_t const *)getCDSection(2085);
  MXGTW_OPT_EMEA_CONTROLS_C = (uint8_t const *)getCDSection(2086);
  MXGTW_AUX2_FLOW = (uint16_t const *)getCDSection(2093);
  MXGTW_OPT_HPMATCH = (uint8_t const *)getCDSection(2080);
  MXGTW_OPT_AUX2_FLOW_LOW = (uint8_t const *)getCDSection(2090);
  MXGTW_OPT_AUX2_FLOW_MED = (uint8_t const *)getCDSection(2091);
  MXGTW_OPT_AUX2_FLOW_HI = (uint8_t const *)getCDSection(2092);
  CDATA_MAP = (uint32_t const *)getCDSection(126);
}


//******************************************************************************
// Static Function Definitions
//******************************************************************************

//******************************************************************************
/**
 * Get a pointer to a section of cdata
 *
 * param sectionID ID of requested cdata section
 *
 * return void const* pointer to cdata section
 ******************************************************************************/
static void const * getCDSection(uint32_t sectionID)
{
  void const *sectionLoc = NULL;
  uint32_t const * map = (uint32_t *)cdataAddress;

  if (map && map[CD_INDEX_RESERVED_0] == 0)
  {
    uint32_t sectIndex;
    uint32_t numSections = map[CD_INDEX_NUMSECTIONS];

    // Try to find matching ID
    for (sectIndex = 0; sectIndex < numSections; sectIndex++)
    {
      if (map[CD_INDEX_SECT_ID(sectIndex)] == sectionID)
      {
        // The section is in cdata at the offset indicated in the cdataMap
        uintptr_t tempSectLoc = cdataAddress;
        tempSectLoc += map[CD_INDEX_SECT_OFFSET(sectIndex)];
        sectionLoc = (void const *)tempSectLoc;
        break;
      }
    }
  }

  return sectionLoc;
}
