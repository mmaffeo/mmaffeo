//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : Chart


#include "Chart.h"
#include "Chart_private.h"

// Named constants for Chart: '<Root>/Chart'
#define Chart_IN_NO_ACTIVE_CHILD       ((uint8_T)0U)
#define Chart_IN_OPERATIONAL           ((uint8_T)1U)
#define Chart_IN_READY                 ((uint8_T)2U)
#define Chart_IN_RUN                   ((uint8_T)3U)
#define Chart_IN_STOP                  ((uint8_T)4U)

// Block states (auto storage)
DW_Chart_T Chart_DW;

// External inputs (root inport signals with auto storage)
ExtU_Chart_T Chart_U;

// External outputs (root outports fed by signals with auto storage)
ExtY_Chart_T Chart_Y;

// Real-time model
RT_MODEL_Chart_T Chart_M_;
RT_MODEL_Chart_T *const Chart_M = &Chart_M_;

// Model step function
void Chart_step(void)
{
  // Chart: '<Root>/Chart' incorporates:
  //   Inport: '<Root>/requested_Speed'
  //   Inport: '<Root>/requested_State'
  //   Inport: '<Root>/state_Inverter'

  // Gateway: Chart
  // During: Chart
  if (Chart_DW.bitsForTID0.is_active_c3_Chart == 0U) {
    // Entry: Chart
    Chart_DW.bitsForTID0.is_active_c3_Chart = 1U;

    // Entry Internal: Chart
    // Transition: '<S1>:3'
    Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_STOP;

    // Entry Internal 'STOP': '<S1>:21'
  } else {
    switch (Chart_DW.bitsForTID0.is_c3_Chart) {
     case Chart_IN_OPERATIONAL:
      // During 'OPERATIONAL': '<S1>:17'
      if (Chart_U.requested_State >= INVERTER_READY) {
        // Transition: '<S1>:11'
        Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_READY;
      } else {
        if (Chart_U.test < INVERTER_CONNECTED) {
          // Transition: '<S1>:15'
          Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_STOP;

          // Entry Internal 'STOP': '<S1>:21'
        }
      }
      break;

     case Chart_IN_READY:
      // During 'READY': '<S1>:18'
      if (Chart_U.test >= INVERTER_RUN_FWD) {
        // Transition: '<S1>:12'
        Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_RUN;
      } else {
        if (Chart_U.requested_State < INVERTER_READY) {
          // Transition: '<S1>:14'
          Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_OPERATIONAL;
        }
      }
      break;

     case Chart_IN_RUN:
      // During 'RUN': '<S1>:19'
      if ((Chart_U.test < INVERTER_RUN_FWD) || (Chart_U.requested_Speed == 0)) {
        // Transition: '<S1>:13'
        Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_READY;
      } else {
        // Outport: '<Root>/cmdInverter'
        Chart_Y.cmdInverter = 3U;
      }
      break;

     default:
      // During 'STOP': '<S1>:21'
      if (Chart_U.test >= INVERTER_CONNECTED) {
        // Transition: '<S1>:10'
        // Exit Internal 'STOP': '<S1>:21'
        Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_OPERATIONAL;
      } else {
        // Outport: '<Root>/cmdInverter'
        // During 'GOTO_OPERATIONAL': '<S1>:24'
        Chart_Y.cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      }
      break;
    }
  }

  // End of Chart: '<Root>/Chart'
}

// Model initialize function
void Chart_initialize(void)
{
  // Registration code

  // initialize error status
  rtmSetErrorStatus(Chart_M, (NULL));

  // states (dwork)
  (void) memset((void *)&Chart_DW, 0,
                sizeof(DW_Chart_T));

  // external inputs
  (void)memset((void *)&Chart_U, 0, sizeof(ExtU_Chart_T));

  // external outputs
  Chart_Y.cmdInverter = 0U;

  // SystemInitialize for Chart: '<Root>/Chart'
  Chart_DW.bitsForTID0.is_active_c3_Chart = 0U;
  Chart_DW.bitsForTID0.is_c3_Chart = Chart_IN_NO_ACTIVE_CHILD;
}

//
//  [EOF]

