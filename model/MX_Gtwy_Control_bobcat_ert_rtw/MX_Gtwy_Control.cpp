//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : MX_Gtwy_Control


#include "MX_Gtwy_Control.h"
#include "MX_Gtwy_Control_private.h"

// Named constants for Chart: '<S2>/Throttle Cal State'
#define MX_Gtwy_Control_IN_Ready       ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Wait_anea   ((uint8_T)2U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_agec ((uint8_T)0U)

// Named constants for Chart: '<S97>/Aux_Pot'
#define MX_Gtwy_C_IN_INACTIVE_WAIT_gks0 ((uint8_T)5U)
#define MX_Gtwy_Con_IN_AUX_FALLING_EDGE ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_INACTIVE_nzjc ((uint8_T)4U)
#define MX_Gtwy_Control_IN_DETENT      ((uint8_T)2U)
#define MX_Gtwy_Control_IN_HOLD_bxpr   ((uint8_T)3U)

// Exported block signals
real_T testOut;                        // '<S627>/Chart2'
uint16_T position_LeftPot;             // '<S76>/Saturation'
uint16_T cmd_Throttle;                 // '<S632>/Throttle_Command'
uint16_T PWD_NumberSelected;           // '<S630>/Panel_Lock'
uint16_T targetSpeed;                  // '<S627>/Chart1'
uint16_T rpm_Derate;                   // '<S625>/Derate'
uint16_T torque_Derate;                // '<S625>/Derate'
uint16_T level_StarterAutomatedEngage; // '<S295>/Starter_Engage_RPM'
uint16_T level_StarterAutomatedDisengage;// '<S295>/Starter_Disenage_RPM'
uint16_T time_StarterAutomated;        // '<S295>/Starter_Max_Time'
uint16_T count_GlowPlug;               // '<S288>/GlowPlug'
uint16_T pos_ThrottlePrimary_In;       // '<S265>/Lookup Table Dynamic'
uint16_T rm_ThrottlePrimary;           // '<S265>/Data Type Conversion4'
uint16_T pos_ThrottlePrimary;          // '<S94>/Throttle_Pos'
uint16_T percent_Throttle;             // '<S264>/Throttle_Limiter'
uint16_T rm_OffsetPot;                 // '<S91>/Multiport Switch2'
uint16_T position_OffsetPot;           // '<S91>/Saturation'
uint16_T psi_LoadSense;                // '<S254>/Data Type Conversion1'
uint16_T bar_LoadMoment;               // '<S244>/Data Type Conversion1'
uint16_T gau_HOT;                      // '<S213>/GaugeTable'
uint16_T flt_HOT;                      // '<S213>/ErrorDetection'
uint16_T rm_HOT;                       // '<S213>/HOT_Calculations'
uint16_T rm_FuelLevel;                 // '<S83>/Data Type Conversion4'
uint16_T gau_FuelLevel;                // '<S83>/Multiport Switch'
uint16_T calc_EngineSpeed;             // '<S196>/Divide'
uint16_T flt_EngineSpeed;              // '<S80>/EngineSpeed'
uint16_T flt_EOP;                      // '<S78>/sel_State1'
uint16_T gau_EOP;                      // '<S78>/sel_State2'
uint16_T level_ShutdownEOP;            // '<S175>/Sensor_Calculations'
uint16_T level_WarningEOP;             // '<S175>/Sensor_Calculations'
uint16_T rm_EOP;                       // '<S175>/Sensor_Calculations'
uint16_T rm_RightPot;                  // '<S170>/Switch'
uint16_T position_RightPot;            // '<S169>/Saturation'
uint16_T rm_LeftPot;                   // '<S165>/Switch'
uint16_T gau_ECT;                      // '<S75>/Multiport Switch'
uint16_T flt_ECT;                      // '<S75>/ErrorDetection'
uint16_T rm_ECT;                       // '<S151>/Data Type Conversion1'
uint16_T rm_Console;                   // '<S74>/Data Type Conversion1'
uint16_T position_AuxPot;              // '<S72>/Multiport Switch1'
uint16_T rm_AuxPot;                    // '<S72>/Multiport Switch3'
uint16_T count_AFPlugged;              // '<S70>/Filter'
uint16_T calc_VBattery;                // '<S95>/Divide1'
uint16_T calcFlt_VBattery;             // '<S95>/Data Type Conversion1'
uint16_T bar_LoadSense;                // '<S253>/Gain'
uint16_T calc_ifbk_OffsetRod;          // '<S517>/Divide'
uint16_T calc_ifbk_OffsetBase;         // '<S500>/Divide'
uint16_T calc_ifbk_DumpValve;          // '<S390>/Divide'
uint16_T calc_ifbk_AuxRod;             // '<S344>/Divide'
uint16_T calc_ifbk_AuxBase;            // '<S327>/Divide'
uint16_T duty_TwoSpeed;                // '<S570>/Divide1'
uint16_T hs_OffsetBase;                // '<S485>/hc_pair_control'
uint16_T hs_OffsetRod;                 // '<S485>/hc_pair_control1'
uint16_T hs_HydEnable;                 // '<S451>/output_pair_open_loop'
uint16_T hs_HydBypass;                 // '<S432>/output_pair_open_loop'
uint16_T duty_FuelSec;                 // '<S286>/Solenoid'
uint16_T hs_DumpValve;                 // '<S384>/hc_pair_control'
uint16_T hs_Diverter;                  // '<S364>/output_pair_open_loop'
uint16_T hs_AuxBase;                   // '<S299>/hc_pair_control'
uint16_T hs_AuxRod;                    // '<S299>/hc_pair_control1'
int16_T errorCC_OffsetBase;            // '<S485>/hc_pair_control'
int16_T errorCC_OffsetRod;             // '<S485>/hc_pair_control1'
int16_T errorCC_DumpValve;             // '<S384>/hc_pair_control'
int16_T errorCC_AuxBase;               // '<S299>/hc_pair_control'
int16_T errorCC_AuxRod;                // '<S299>/hc_pair_control1'
int8_T percent_Derate;                 // '<S625>/Derate'
uint8_T state_CommECU;                 // '<S6>/Unit Delay7'
uint8_T state_LoadMoment;              // '<S89>/Switch'
uint8_T state_TC;                      // '<S632>/Throttle_Command'
uint8_T state_MachineLock;             // '<S631>/Lock_Status'
uint8_T state_KSLock;                  // '<S630>/Panel_Lock'
uint8_T state_KSPassword;              // '<S630>/Panel_Lock'
uint8_T pwd_Position;                  // '<S630>/Panel_Lock'
uint8_T KSS_Display;                   // '<S630>/Panel_Lock'
uint8_T state_KeylessEntryPowerHold;   // '<S629>/Power_Hold'
uint8_T state_Engine;                  // '<S628>/Engine'
uint8_T state_TurboPrime;              // '<S628>/Engine'
uint8_T cmdInverter;                   // '<S627>/Chart1'
uint8_T disp_LeftControl;              // '<S660>/DisplayAuxMode'
uint8_T disp_RightControl;             // '<S660>/DisplayAuxMode'
uint8_T mode_LeftControl;              // '<S626>/Control Modes'
uint8_T mode_RightControl;             // '<S626>/Control Modes'
uint8_T state_EngineSpeedDerate;       // '<S625>/Derate'
uint8_T state_HPMatch;                 // '<S625>/Derate'
uint8_T state_CommSecondary;           // '<S624>/Controller_State'
uint8_T state_CommThrottle;            // '<S624>/Controller_State'
uint8_T state_CommStdPanel;            // '<S624>/Controller_State'
uint8_T state_CommJogShuttle;          // '<S624>/Controller_State'
uint8_T state_CommDeluxeG55;           // '<S624>/Controller_State'
uint8_T state_CommKeylessEntry;        // '<S624>/Controller_State'
uint8_T state_CANThrottleCalDiag;      // '<S646>/CAN_Throttle_Actuator'
uint8_T state_AuxEnable;               // '<S621>/Aux_Control'
uint8_T state_Detent;                  // '<S621>/Aux_Control'
uint8_T aux_Flow;                      // '<S621>/Aux_Control'
uint8_T state_DetentEnable;            // '<S621>/Aux_Control'
uint8_T cmd_AuxRelease;                // '<S621>/Aux_Control'
uint8_T state_AuxRelease;              // '<S621>/Aux_Control'
uint8_T cmd_AutoIdle;                  // '<S636>/Auto_Idle'
uint8_T state_Idle;                    // '<S636>/Auto_Idle'
uint8_T state_AutoIdleEnable;          // '<S635>/Auto_Idle'
uint8_T icon_Rabbit;                   // '<S595>/RabbitIcon'
uint8_T icon_Service;                  // '<S594>/Truth_Table'
uint8_T icon_Seatbelt;                 // '<S593>/Chart'
uint8_T icon_RPM;                      // '<S592>/RPM_ICON'
uint8_T icon_Lockout;                  // '<S591>/LockoutIcons'
uint8_T icon_JobClock2;                // '<S590>/Truth_Table'
uint8_T icon_JobClock1;                // '<S589>/Truth_Table'
uint8_T icon_Hydraulic;                // '<S588>/HydraulicIcon'
uint8_T icon_Hourmeter;                // '<S587>/Truth_Table'
uint8_T icon_GlowPlug;                 // '<S586>/GlowPlugIcon'
uint8_T icon_General;                  // '<S585>/WarningIcon'
uint8_T icon_Engine;                   // '<S583>/EngineIcon'
uint8_T icon_ECT;                      // '<S582>/WarningIcon'
uint8_T icon_Battery;                  // '<S581>/BatteryIcon'
uint8_T icon_Aux;                      // '<S580>/Truth_Table'
uint8_T state_InfoPrimary;             // '<S578>/Display_Type'
uint8_T state_InfoButton;              // '<S578>/Display_Type'
uint8_T state_InfoSecondary;           // '<S578>/Display_Type'
uint8_T state_RightButton;             // '<S578>/Display_Type'
uint8_T state_LeftButton;              // '<S578>/Display_Type'
uint8_T enable_RightLeft;              // '<S578>/Display_Type'
uint8_T level_DisplayBacklight;        // '<S576>/Backlighting'
uint8_T level_IconBacklight;           // '<S576>/Backlighting'
uint8_T ind_Aux2;                      // '<S575>/Aux2_Indicator'
uint8_T ind_Aux1;                      // '<S575>/Aux1_Indicator'
uint8_T ind_AutoIdle;                  // '<S574>/AutoIdle_Indicator'
uint8_T state_TwoSpeed;                // '<S561>/hc_Output'
uint8_T state_TwoSpeedIcon;            // '<S561>/TwoSpeed_Control'
uint8_T state_SwitchedPwrOutput;       // '<S556>/relay_error_state'
uint8_T state_SwitchedPwrRelay;        // '<S556>/relay_error_state'
uint8_T state_StarterOutput;           // '<S545>/relay_error_state'
uint8_T state_StarterRelay;            // '<S545>/relay_error_state'
uint8_T state_PBValveOutput;           // '<S294>/Switch'
uint8_T state_PBValveRelay;            // '<S539>/relay_error_state'
uint8_T state_OffsetBase;              // '<S485>/hc_pair_control'
uint8_T state_OffsetRod;               // '<S485>/hc_pair_control1'
uint8_T state_LightsOutput;            // '<S292>/Switch'
uint8_T state_LightsRelay;             // '<S480>/relay_error_state'
uint8_T state_HydExchange;             // '<S472>/Fault monitor'
uint8_T state_HydEnable;               // '<S451>/output_pair_open_loop'
uint8_T state_HydBypass;               // '<S432>/output_pair_open_loop'
uint8_T state_GlowPlugOutput;          // '<S428>/relay_error_state'
uint8_T state_GlowPlugRelay;           // '<S428>/relay_error_state'
uint8_T timer_FuelResolution;          // '<S287>/Timer'
uint8_T error_FuelSec;                 // '<S421>/Fault monitor'
uint8_T state_FuelSec;                 // '<S286>/Solenoid'
uint8_T state_ECUHold;                 // '<S286>/Solenoid'
uint8_T state_HVACOutput;              // '<S415>/Fault monitor'
uint8_T state_FuelPriOutput;           // '<S410>/relay_error_state'
uint8_T state_FuelPriRelay;            // '<S410>/relay_error_state'
uint8_T state_DumpValve;               // '<S384>/hc_pair_control'
uint8_T state_Diverter;                // '<S364>/output_pair_open_loop'
uint8_T state_AuxBase;                 // '<S299>/hc_pair_control'
uint8_T state_AuxRod;                  // '<S299>/hc_pair_control1'
uint8_T state_VBattery;                // '<S95>/VBattery_State'
uint8_T state_Alternator;              // '<S95>/VBattery_State'
uint8_T state_ThrottlePrimary;         // '<S94>/Throttle_Pos'
uint8_T derate_Throttle;               // '<S94>/Throttle_Pos'
uint8_T state_SensorSupply2;           // '<S93>/Sensor_Supply2_State'
uint8_T state_SensorSupply1;           // '<S92>/Sensor_Supply1_State'
uint8_T state_OffsetPot;               // '<S91>/Multiport Switch'
uint8_T volts_LoadSense;               // '<S255>/Data Type Conversion2'
uint8_T state_LoadSense;               // '<S250>/Pressure_Monitor'
uint8_T volts_LoadMoment;              // '<S245>/Data Type Conversion2'
uint8_T state_Key;                     // '<S88>/Key'
uint8_T state_HOT;                     // '<S86>/Switch'
uint8_T state_HCFilter1;               // '<S85>/Hyd1_Filter_State'
uint8_T state_FuelTemp;                // '<S84>/ErrorDetection'
uint8_T state_FuelLevel;               // '<S83>/Fuel_Level'
uint8_T state_EngineStart;             // '<S82>/Engine_Start'
uint8_T state_EOT;                     // '<S81>/ErrorDetection'
uint8_T gain_EngineSpeed;              // '<S80>/Gain'
uint8_T state_EngineSpeed;             // '<S80>/EngineSpeed'
uint8_T state_EcoMode;                 // '<S79>/Eco_Mode'
uint8_T state_EOP;                     // '<S78>/sel_State'
uint8_T state_RightPot;                // '<S169>/Right_Pot'
uint8_T state_LeftPot;                 // '<S163>/Pot'
uint8_T state_ECT;                     // '<S75>/ErrorDetection'
uint8_T state_Console;                 // '<S74>/Console_Sensor'
uint8_T state_PanelButtons;            // '<S73>/Switch1'
uint8_T state_AuxPot;                  // '<S72>/Multiport Switch'
uint8_T aux_DebounceButton;            // '<S97>/Aux_Pot'
uint8_T aux_DetentHold;                // '<S97>/Aux_Pot'
uint8_T state_AirFilter;               // '<S70>/Filter'
boolean_T mode_ControlChange;          // '<S633>/Logical Operator2'
boolean_T cabKeyDetect;                // '<S629>/CabKeyDetection'
boolean_T ind_KeylessEntryLock;        // '<S629>/Indicators'
boolean_T ind_KeylessEntryUnlock;      // '<S629>/Indicators'
boolean_T flag_AuxEnableFlash;         // '<S626>/Logical Operator1'
boolean_T flag_AuxModeReminder;        // '<S660>/DisplayAuxMode'
boolean_T check_LeftNeutral;           // '<S626>/Control Modes'
boolean_T check_RightNeutral;          // '<S626>/Control Modes'
boolean_T aux_Inhibit;                 // '<S626>/Control Modes'
boolean_T icon_Fuel;                   // '<S584>/FuelLevel'
boolean_T ind_Lock;                    // '<S579>/Keyless_Ind'
boolean_T ind_Unlock;                  // '<S579>/Keyless_Ind'
boolean_T ind_Light1;                  // '<S577>/LightIndicator'
boolean_T dout_SwitchedPwr;            // '<S297>/Relay'
boolean_T dout_Starter;                // '<S295>/Starter'
boolean_T dout_PBValve;                // '<S294>/PBValve'
boolean_T ls_OffsetBase;               // '<S485>/hc_pair_control'
boolean_T ls_OffsetRod;                // '<S485>/hc_pair_control1'
boolean_T dout_Lights;                 // '<S292>/Lights'
boolean_T dout_HydExchange;            // '<S291>/Hydraulic_Xchange'
boolean_T ls_HydEnable;                // '<S451>/output_pair_open_loop'
boolean_T ls_HydBypass;                // '<S432>/output_pair_open_loop'
boolean_T dout_GlowPlug;               // '<S288>/GlowPlug'
boolean_T dout_HVACOutput;             // '<S406>/RelaySolenoid'
boolean_T dout_FuelPri;                // '<S405>/RelaySolenoid'
boolean_T ls_DumpValve;                // '<S384>/hc_pair_control'
boolean_T cmd_Diverter;                // '<S364>/Diverter'
boolean_T ls_Diverter;                 // '<S364>/output_pair_open_loop'
boolean_T dout_Buzzer;                 // '<S282>/Buzzer'
boolean_T ls_AuxBase;                  // '<S299>/hc_pair_control'
boolean_T ls_AuxRod;                   // '<S299>/hc_pair_control1'
boolean_T outputSelect_HOT;            // '<S212>/Compare'
boolean_T outputSelect_EOP;            // '<S174>/Compare'
boolean_T button_AuxReleaseAck;        // '<S73>/Logical Operator17'
boolean_T button_AuxReleaseBack;       // '<S73>/Logical Operator18'
boolean_T button_AuxReleaseExit;       // '<S73>/Logical Operator19'
boolean_T button_Info;                 // '<S73>/Logical Operator4'
boolean_T button_Lights;               // '<S73>/Switch'
boolean_T button_AutoIdle;             // '<S73>/Switch2'
boolean_T button_Aux;                  // '<S73>/Switch6'

// Block signals (auto storage)
BlockIO_MX_Gtwy_Control MX_Gtwy_Control_B;

// Block states (auto storage)
D_Work_MX_Gtwy_Control MX_Gtwy_Control_DWork;

// External outputs (root outports fed by signals with auto storage)
ExternalOutputs_MX_Gtwy_Control MX_Gtwy_Control_Y;

// Real-time model
RT_MODEL_MX_Gtwy_Control MX_Gtwy_Control_M_;
RT_MODEL_MX_Gtwy_Control *const MX_Gtwy_Control_M = &MX_Gtwy_Control_M_;
static void rate_scheduler(void);

// Lookup Binary Search Utility BINARYSEARCH_U16_Near_iL
void BINARYSEARCH_U16_Near_iL(uint32_T *piLeft, uint16_T u, const uint16_T
  *pData, uint32_T iHi)
{
  uint32_T iRght;

  // Find the location of current input value in the data table.
  *piLeft = 0U;
  iRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( iRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + iRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        iRght = i;
      } else {
        *piLeft = i;
      }
    }

    // Adjust the left index, if necessary, so that it always gives
    // the index of the data point nearest the current input value.
    {
      uint32_T diffLeft, diffRght;
      diffLeft = u - pData[*piLeft];
      diffRght = pData[iRght] - u;
      if (diffRght <= diffLeft ) {
        *piLeft = iRght;
      }
    }
  }
}

// Lookup Binary Search Utility BINARYSEARCH_U16
void BINARYSEARCH_U16(uint32_T *piLeft, uint32_T *piRght, uint16_T u, const
                      uint16_T *pData, uint32_T iHi)
{
  // Find the location of current input value in the data table.
  *piLeft = 0U;
  *piRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
    *piRght = 0U;
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( *piRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + *piRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        *piRght = i;
      } else {
        *piLeft = i;
      }
    }
  }
}

// Lookup Interpolation INTERPOLATE_U16_U16
void INTERPOLATE_U16_U16(uint16_T *pY, uint16_T yL, uint16_T yR, uint16_T x,
  uint16_T xL, uint16_T xR)
{
  uint32_T bigProd;
  uint16_T yDiff;
  uint16_T xNum;
  uint16_T xDen;
  *pY = yL;

  // If x is not strictly between xR and xL
  //  then an interpolation calculation is not necessary x == xL
  //  or not valid.  The invalid situation is expected when the input
  //  is beyond the left or right end of the table.  The design is
  //  that yL holds the correct value for *pY
  //  in invalid situations.

  if ((xR > xL) && (x > xL) ) {
    xDen = xR;
    xDen = (uint16_T)(uint32_T)((uint32_T)xDen - (uint32_T)xL);
    xNum = x;
    xNum = (uint16_T)(uint32_T)((uint32_T)xNum - (uint32_T)xL);
    if (yR >= yL ) {
      yDiff = yR;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yL);
    } else {
      yDiff = yL;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yR);
    }

    bigProd = (uint32_T)((uint32_T)yDiff * (uint32_T)xNum);

    {
      uint32_T rtb_u32_tmp;
      rtb_u32_tmp = (uint32_T)xDen;
      yDiff = (uint16_T)(rtb_u32_tmp == 0U ? MAX_uint32_T : (uint32_T)(bigProd /
        rtb_u32_tmp));
    }

    if (yR >= yL ) {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
    } else {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY - (uint32_T)yDiff);
    }
  }
}

// Lookup Utility LookUp_U16_U16
void LookUp_U16_U16(uint16_T *pY, const uint16_T *pYData, uint16_T u, const
                    uint16_T *pUData, uint32_T iHi)
{
  uint32_T iLeft;
  uint32_T iRght;
  BINARYSEARCH_U16( &(iLeft), &(iRght), u, pUData, iHi);
  INTERPOLATE_U16_U16( pY, pYData[iLeft], pYData[iRght], u, pUData[iLeft],
                      pUData[iRght]);
}

// Lookup Evenly Spaced Interpolation INTERPOLATE_EVEN_U16_U16_SAT
void INTERPOLATE_EVEN_U16_U16_SAT(uint16_T *pY, uint16_T yL, uint16_T yR,
  uint16_T xMinusxL, uint16_T xSpacing)
{
  uint32_T bigProd;
  uint16_T yDiff;
  *pY = yL;
  if (yR >= yL ) {
    yDiff = yR;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)yDiff;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yL);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      yDiff = (uint16_T)rtb_u32_qY;
    }
  } else {
    yDiff = yL;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)yDiff;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yR);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      yDiff = (uint16_T)rtb_u32_qY;
    }
  }

  bigProd = (uint32_T)((uint32_T)yDiff * (uint32_T)xMinusxL);

  {
    uint32_T rtb_u32_tmp;
    rtb_u32_tmp = (uint32_T)xSpacing;
    rtb_u32_tmp = rtb_u32_tmp == 0U ? MAX_uint32_T : (uint32_T)(bigProd /
      rtb_u32_tmp);
    if (rtb_u32_tmp > 65535U) {
      rtb_u32_tmp = 65535U;
    }

    yDiff = (uint16_T)rtb_u32_tmp;
  }

  if (yR >= yL ) {
    {
      uint32_T rtb_u32_tmp;
      rtb_u32_tmp = (uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
      if (rtb_u32_tmp > 65535U) {
        rtb_u32_tmp = 65535U;
      }

      *pY = (uint16_T)rtb_u32_tmp;
    }
  } else {
    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)*pY;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yDiff);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      *pY = (uint16_T)rtb_u32_qY;
    }
  }
}

// Lookup 1D UtilityLookUpEven_U16_U16_SAT
void LookUpEven_U16_U16_SAT(uint16_T *pY, const uint16_T *pYData, uint16_T u,
  uint16_T valueLo, uint32_T iHi, uint16_T uSpacing)
{
  if (u <= valueLo ) {
    (*pY) = (*pYData);
  } else {
    uint32_T uAdjusted = u - valueLo;
    uint32_T iLeft = uAdjusted / uSpacing;
    if (iLeft >= iHi ) {
      (*pY) = pYData[iHi];
    } else {
      INTERPOLATE_EVEN_U16_U16_SAT( pY, pYData[iLeft], pYData[((iLeft)+1)],
        ((uint16_T)((uAdjusted-(iLeft*uSpacing)))), uSpacing);
    }
  }
}

// Lookup Interpolation INTERPOLATE_U16_U16_SAT
void INTERPOLATE_U16_U16_SAT(uint16_T *pY, uint16_T yL, uint16_T yR, uint16_T x,
  uint16_T xL, uint16_T xR)
{
  uint32_T bigProd;
  uint16_T yDiff;
  uint16_T xNum;
  uint16_T xDen;
  *pY = yL;

  // If x is not strictly between xR and xL
  //  then an interpolation calculation is not necessary x == xL
  //  or not valid.  The invalid situation is expected when the input
  //  is beyond the left or right end of the table.  The design is
  //  that yL holds the correct value for *pY
  //  in invalid situations.

  if ((xR > xL) && (x > xL) ) {
    xDen = xR;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)xDen;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)xL);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      xDen = (uint16_T)rtb_u32_qY;
    }

    xNum = x;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)xNum;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)xL);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      xNum = (uint16_T)rtb_u32_qY;
    }

    if (yR >= yL ) {
      yDiff = yR;

      {
        uint32_T rtb_u32_q0;
        uint32_T rtb_u32_qY;
        rtb_u32_q0 = (uint32_T)yDiff;
        rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yL);
        if (rtb_u32_qY > rtb_u32_q0) {
          rtb_u32_qY = 0U;
        }

        if (rtb_u32_qY > 65535U) {
          rtb_u32_qY = 65535U;
        }

        yDiff = (uint16_T)rtb_u32_qY;
      }
    } else {
      yDiff = yL;

      {
        uint32_T rtb_u32_q0;
        uint32_T rtb_u32_qY;
        rtb_u32_q0 = (uint32_T)yDiff;
        rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yR);
        if (rtb_u32_qY > rtb_u32_q0) {
          rtb_u32_qY = 0U;
        }

        if (rtb_u32_qY > 65535U) {
          rtb_u32_qY = 65535U;
        }

        yDiff = (uint16_T)rtb_u32_qY;
      }
    }

    bigProd = (uint32_T)((uint32_T)yDiff * (uint32_T)xNum);

    {
      uint32_T rtb_u32_tmp;
      rtb_u32_tmp = (uint32_T)xDen;
      rtb_u32_tmp = rtb_u32_tmp == 0U ? MAX_uint32_T : (uint32_T)(bigProd /
        rtb_u32_tmp);
      if (rtb_u32_tmp > 65535U) {
        rtb_u32_tmp = 65535U;
      }

      yDiff = (uint16_T)rtb_u32_tmp;
    }

    if (yR >= yL ) {
      {
        uint32_T rtb_u32_tmp;
        rtb_u32_tmp = (uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
        if (rtb_u32_tmp > 65535U) {
          rtb_u32_tmp = 65535U;
        }

        *pY = (uint16_T)rtb_u32_tmp;
      }
    } else {
      {
        uint32_T rtb_u32_q0;
        uint32_T rtb_u32_qY;
        rtb_u32_q0 = (uint32_T)*pY;
        rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yDiff);
        if (rtb_u32_qY > rtb_u32_q0) {
          rtb_u32_qY = 0U;
        }

        if (rtb_u32_qY > 65535U) {
          rtb_u32_qY = 65535U;
        }

        *pY = (uint16_T)rtb_u32_qY;
      }
    }
  }
}

// Lookup Utility LookUp_U16_U16_SAT
void LookUp_U16_U16_SAT(uint16_T *pY, const uint16_T *pYData, uint16_T u, const
  uint16_T *pUData, uint32_T iHi)
{
  uint32_T iLeft;
  uint32_T iRght;
  BINARYSEARCH_U16( &(iLeft), &(iRght), u, pUData, iHi);
  INTERPOLATE_U16_U16_SAT( pY, pYData[iLeft], pYData[iRght], u, pUData[iLeft],
    pUData[iRght]);
}

// Lookup Binary Search Utility BINARYSEARCH_U16_iL
void BINARYSEARCH_U16_iL(uint32_T *piLeft, uint16_T u, const uint16_T *pData,
  uint32_T iHi)
{
  uint32_T iRght;

  // Find the location of current input value in the data table.
  *piLeft = 0U;
  iRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( iRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + iRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        iRght = i;
      } else {
        *piLeft = i;
      }
    }
  }
}

// Lookup Binary Search Utility BINARYSEARCH_S16
void BINARYSEARCH_S16(uint32_T *piLeft, uint32_T *piRght, int16_T u, const
                      int16_T *pData, uint32_T iHi)
{
  // Find the location of current input value in the data table.
  *piLeft = 0U;
  *piRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
    *piRght = 0U;
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( *piRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + *piRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        *piRght = i;
      } else {
        *piLeft = i;
      }
    }
  }
}

// Lookup Interpolation INTERPOLATE_U16_S16
void INTERPOLATE_U16_S16(uint16_T *pY, uint16_T yL, uint16_T yR, int16_T x,
  int16_T xL, int16_T xR)
{
  int32_T bigProd;
  uint16_T yDiff;
  int16_T xNum;
  int16_T xDen;
  *pY = yL;

  // If x is not strictly between xR and xL
  //  then an interpolation calculation is not necessary x == xL
  //  or not valid.  The invalid situation is expected when the input
  //  is beyond the left or right end of the table.  The design is
  //  that yL holds the correct value for *pY
  //  in invalid situations.

  if ((xR > xL) && (x > xL) ) {
    xDen = xR;
    xDen = (int16_T)(int32_T)((int32_T)xDen - (int32_T)xL);
    xNum = x;
    xNum = (int16_T)(int32_T)((int32_T)xNum - (int32_T)xL);
    if (yR >= yL ) {
      yDiff = yR;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yL);
    } else {
      yDiff = yL;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yR);
    }

    bigProd = (int32_T)((int32_T)yDiff * (int32_T)xNum);
    yDiff = (uint16_T)div_s32_floor(bigProd, (int32_T)xDen);
    if (yR >= yL ) {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
    } else {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY - (uint32_T)yDiff);
    }
  }
}

// Lookup Utility LookUp_U16_S16
void LookUp_U16_S16(uint16_T *pY, const uint16_T *pYData, int16_T u, const
                    int16_T *pUData, uint32_T iHi)
{
  uint32_T iLeft;
  uint32_T iRght;
  BINARYSEARCH_S16( &(iLeft), &(iRght), u, pUData, iHi);
  INTERPOLATE_U16_S16( pY, pYData[iLeft], pYData[iRght], u, pUData[iLeft],
                      pUData[iRght]);
}

int32_T div_s32(int32_T numerator, int32_T denominator)
{
  int32_T quotient;
  uint32_T tempAbsQuotient;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    tempAbsQuotient = (uint32_T)((numerator < 0 ? (uint32_T)((uint32_T)
      ~(uint32_T)numerator + 1U) : (uint32_T)numerator) / (denominator < 0 ?
      (uint32_T)((uint32_T)~(uint32_T)denominator + 1U) : (uint32_T)denominator));
    quotient = (numerator < 0) != (denominator < 0) ? (int32_T)-(int32_T)
      tempAbsQuotient : (int32_T)tempAbsQuotient;
  }

  return quotient;
}

int16_T div_s16u32(uint32_T numerator, uint32_T denominator)
{
  int16_T quotient;
  if (denominator == 0U) {
    quotient = MAX_int16_T;

    // Divide by zero handler
  } else {
    quotient = (int16_T)(uint32_T)(numerator / denominator);
  }

  return quotient;
}

void mul_wide_su32(int32_T in0, uint32_T in1, uint32_T *ptrOutBitsHi, uint32_T
                   *ptrOutBitsLo)
{
  uint32_T outBitsLo;
  uint32_T absIn0;
  uint32_T in0Hi;
  uint32_T in1Lo;
  uint32_T in1Hi;
  uint32_T productHiLo;
  uint32_T productLoHi;
  absIn0 = in0 < 0 ? (uint32_T)((uint32_T)~(uint32_T)in0 + 1U) : (uint32_T)in0;
  in0Hi = (uint32_T)(absIn0 >> 16U);
  absIn0 &= 65535U;
  in1Hi = (uint32_T)(in1 >> 16U);
  in1Lo = (uint32_T)(in1 & 65535U);
  productHiLo = (uint32_T)(in0Hi * in1Lo);
  productLoHi = (uint32_T)(absIn0 * in1Hi);
  absIn0 *= in1Lo;
  in1Lo = 0U;
  outBitsLo = (uint32_T)((uint32_T)(productLoHi << 16U) + absIn0);
  if (outBitsLo < absIn0) {
    in1Lo = 1U;
  }

  absIn0 = outBitsLo;
  outBitsLo += (uint32_T)(productHiLo << 16U);
  if (outBitsLo < absIn0) {
    in1Lo++;
  }

  absIn0 = (uint32_T)((uint32_T)((uint32_T)((uint32_T)(productLoHi >> 16U) +
    (uint32_T)(productHiLo >> 16U)) + (uint32_T)(in0Hi * in1Hi)) + in1Lo);
  if (!((in1 == 0U) || (in0 >= 0))) {
    absIn0 = (uint32_T)~absIn0;
    outBitsLo = (uint32_T)~outBitsLo;
    outBitsLo++;
    if (outBitsLo == 0U) {
      absIn0++;
    }
  }

  *ptrOutBitsHi = absIn0;
  *ptrOutBitsLo = outBitsLo;
}

uint32_T mul_usu32_loSR(int32_T a, uint32_T b, uint32_T aShift)
{
  uint32_T result;
  uint32_T u32_chi;
  mul_wide_su32(a, b, &u32_chi, &result);
  return (uint32_T)((uint32_T)(u32_chi << (uint32_T)(32U - aShift)) | (uint32_T)
                    (result >> aShift));
}

int32_T div_repeat_s32_near(int32_T numerator, int32_T denominator, uint32_T
  nRepeatSub)
{
  int32_T quotient;
  uint32_T tempAbsQuotient;
  boolean_T quotientNeedsNegation;
  uint32_T absNumerator;
  uint32_T absDenominator;
  uint32_T iRepeatSub;
  boolean_T numeratorExtraBit;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    absNumerator = numerator < 0 ? (uint32_T)((uint32_T)~(uint32_T)numerator +
      1U) : (uint32_T)numerator;
    absDenominator = denominator < 0 ? (uint32_T)((uint32_T)~(uint32_T)
      denominator + 1U) : (uint32_T)denominator;
    quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
    tempAbsQuotient = (uint32_T)(absNumerator / absDenominator);
    absNumerator %= absDenominator;
    for (iRepeatSub = 0U; iRepeatSub < nRepeatSub; iRepeatSub++) {
      numeratorExtraBit = (absNumerator >= 2147483648U);
      absNumerator <<= 1U;
      tempAbsQuotient <<= 1U;
      if (numeratorExtraBit || (absNumerator >= absDenominator)) {
        tempAbsQuotient++;
        absNumerator -= absDenominator;
      }
    }

    numeratorExtraBit = (absNumerator >= 2147483648U);
    absNumerator <<= 1U;
    if (numeratorExtraBit || (quotientNeedsNegation ? absNumerator >
         absDenominator : absNumerator >= absDenominator)) {
      tempAbsQuotient++;
    }

    quotient = quotientNeedsNegation ? (int32_T)-(int32_T)tempAbsQuotient :
      (int32_T)tempAbsQuotient;
  }

  return quotient;
}

uint32_T div_u32_near(uint32_T numerator, uint32_T denominator)
{
  uint32_T quotient;
  if (denominator == 0U) {
    quotient = MAX_uint32_T;

    // Divide by zero handler
  } else {
    quotient = (uint32_T)(numerator / denominator);
    numerator %= denominator;
    if ((numerator > 2147483647U) || ((uint32_T)(numerator << 1U) >= denominator))
    {
      quotient++;
    }
  }

  return quotient;
}

void mul_wide_s32(int32_T in0, int32_T in1, uint32_T *ptrOutBitsHi, uint32_T
                  *ptrOutBitsLo)
{
  uint32_T absIn0;
  uint32_T absIn1;
  uint32_T in0Lo;
  uint32_T in0Hi;
  uint32_T in1Hi;
  uint32_T productHiLo;
  uint32_T productLoHi;
  absIn0 = in0 < 0 ? (uint32_T)((uint32_T)~(uint32_T)in0 + 1U) : (uint32_T)in0;
  absIn1 = in1 < 0 ? (uint32_T)((uint32_T)~(uint32_T)in1 + 1U) : (uint32_T)in1;
  in0Hi = (uint32_T)(absIn0 >> 16U);
  in0Lo = (uint32_T)(absIn0 & 65535U);
  in1Hi = (uint32_T)(absIn1 >> 16U);
  absIn0 = (uint32_T)(absIn1 & 65535U);
  productHiLo = (uint32_T)(in0Hi * absIn0);
  productLoHi = (uint32_T)(in0Lo * in1Hi);
  absIn0 *= in0Lo;
  absIn1 = 0U;
  in0Lo = (uint32_T)((uint32_T)(productLoHi << 16U) + absIn0);
  if (in0Lo < absIn0) {
    absIn1 = 1U;
  }

  absIn0 = in0Lo;
  in0Lo += (uint32_T)(productHiLo << 16U);
  if (in0Lo < absIn0) {
    absIn1++;
  }

  absIn0 = (uint32_T)((uint32_T)((uint32_T)((uint32_T)(productLoHi >> 16U) +
    (uint32_T)(productHiLo >> 16U)) + (uint32_T)(in0Hi * in1Hi)) + absIn1);
  if (!((in0 == 0) || ((in1 == 0) || ((in0 > 0) == (in1 > 0))))) {
    absIn0 = (uint32_T)~absIn0;
    in0Lo = (uint32_T)~in0Lo;
    in0Lo++;
    if (in0Lo == 0U) {
      absIn0++;
    }
  }

  *ptrOutBitsHi = absIn0;
  *ptrOutBitsLo = in0Lo;
}

int32_T mul_s32_hiSR(int32_T a, int32_T b, uint32_T aShift)
{
  uint32_T u32_chi;
  uint32_T u32_clo;
  mul_wide_s32(a, b, &u32_chi, &u32_clo);
  return (int32_T)((int32_T)u32_chi >> aShift);
}

int32_T div_s32_floor(int32_T numerator, int32_T denominator)
{
  int32_T quotient;
  uint32_T absNumerator;
  uint32_T absDenominator;
  uint32_T tempAbsQuotient;
  boolean_T quotientNeedsNegation;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    absNumerator = numerator < 0 ? (uint32_T)((uint32_T)~(uint32_T)numerator +
      1U) : (uint32_T)numerator;
    absDenominator = denominator < 0 ? (uint32_T)((uint32_T)~(uint32_T)
      denominator + 1U) : (uint32_T)denominator;
    quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
    tempAbsQuotient = (uint32_T)(absNumerator / absDenominator);
    if (quotientNeedsNegation) {
      absNumerator %= absDenominator;
      if (absNumerator > 0U) {
        tempAbsQuotient++;
      }
    }

    quotient = quotientNeedsNegation ? (int32_T)-(int32_T)tempAbsQuotient :
      (int32_T)tempAbsQuotient;
  }

  return quotient;
}

//
//    This function updates active task flag for each subrate.
//  The function is called at model base rate, hence the
//  generated code self-manages all its subrates.

static void rate_scheduler(void)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1])++;
  if ((MX_Gtwy_Control_M->Timing.TaskCounters.TID[1]) > 9) {// Sample time: [0.1s, 0.0s] 
    MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] = 0;
  }
}

// Model step function
void MX_Gtwy_Control_step(void)
{
  boolean_T rtb_LogicalOperator_auqu;
  boolean_T rtb_Compare_fj5y;
  int16_T rtb_DataTypeConversion;
  uint16_T rtb_Sum_prxc;
  uint16_T rtb_Sum_gq5g;
  uint16_T rtb_Sum_cu4h;
  uint16_T rtb_Sum_b3n3;
  uint16_T rtb_Sum_ijqy;
  uint16_T rtb_Sum_no2y;
  uint16_T rtb_Sum_kqg5;
  uint16_T rtb_Sum_nu4k;
  uint16_T rtb_Sum_eumg;
  uint16_T rtb_Sum_h1zs;
  uint16_T rtb_Sum_nexe;
  uint16_T rtb_Sum_e3ul;
  uint16_T rtb_Sum_jwvr;
  uint16_T rtb_Sum_acwp;
  uint16_T rtb_Sum_ott5;
  uint16_T rtb_Sum_n0s3;
  uint16_T rtb_Sum_cu42;
  uint16_T rtb_Sum_kxlz;
  uint16_T rtb_Sum_lhp5;
  uint16_T rtb_Sum_grfl;
  uint16_T rtb_Sum_gefh;
  uint16_T rtb_Sum_j4fq;
  uint16_T rtb_Sum_iovg;
  uint16_T rtb_Sum_cplh;
  uint16_T rtb_Sum_cubh;
  uint16_T rtb_Sum_kkgb;
  uint16_T rtb_Sum_owp0;
  uint16_T rtb_Sum_ienz;
  uint16_T rtb_Sum_dwgi;
  uint16_T rtb_Sum_pj43;
  uint16_T rtb_Sum_h3n3;
  uint16_T rtb_Sum_c3yn;
  uint16_T rtb_Sum_oxyi;
  uint16_T rtb_Sum_kgcr;
  uint16_T rtb_Sum_iwlw;
  uint16_T rtb_Sum_bf24;
  uint16_T rtb_Sum_em3o;
  uint16_T rtb_Sum_cwjn;
  uint16_T rtb_Sum_hhj0;
  uint16_T rtb_Sum_dqv5;
  uint16_T rtb_Sum_edgn;
  uint16_T rtb_Sum_bvfs;
  uint16_T rtb_Sum_m54o;
  uint16_T rtb_Sum_bzdq;
  uint16_T rtb_Sum_cms4;
  uint16_T rtb_Sum_kid3;
  uint16_T rtb_Sum_obdd;
  uint16_T rtb_Sum_i42b;
  uint16_T rtb_Sum_nosu;
  uint16_T rtb_Sum_klmp;
  uint16_T rtb_Sum_ot1k;
  uint16_T rtb_Sum_ijdq;
  uint16_T rtb_Sum_nw3e;
  uint16_T rtb_Sum_dauf;
  uint16_T rtb_Sum_fy5t;
  uint16_T rtb_Sum_bkpw;
  uint16_T rtb_Sum_mm3o;
  uint16_T rtb_Sum_ktbw;
  uint16_T rtb_Sum_e2cx;
  uint16_T rtb_Sum_eo4v;
  uint16_T rtb_Sum_guqg;
  uint16_T rtb_Sum_fahl;
  int32_T i;
  uint16_T u0;

  // RateTransition: '<S3>/Rate Transition39' incorporates:
  //   Inport: '<Root>/ain_VBattery'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition39 = ain_VBattery;

    // RateTransition: '<S3>/Rate Transition11' incorporates:
    //   Inport: '<Root>/ain_PrecisionReference'
    //   Inport: '<Root>/ain_VBattery'

    MX_Gtwy_Control_B.RateTransition11 = ain_PrecisionReference;
  }

  // End of RateTransition: '<S3>/Rate Transition39'

  // UnitDelay: '<S6>/Unit Delay7'
  state_CommECU = MX_Gtwy_Control_DWork.UnitDelay7_DSTATE_oa3i;

  // RateTransition: '<S3>/Rate Transition49' incorporates:
  //   Inport: '<Root>/adin_EOP'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition49 = adin_EOP;

    // RateTransition: '<S3>/Rate Transition27' incorporates:
    //   Inport: '<Root>/adin_EOP'
    //   Inport: '<Root>/ain_SensorSupply1'

    MX_Gtwy_Control_B.RateTransition27 = ain_SensorSupply1;

    // RateTransition: '<S3>/Rate Transition33' incorporates:
    //   Inport: '<Root>/ain_SensorSupply2'

    MX_Gtwy_Control_B.RateTransition33 = ain_SensorSupply2;

    // RateTransition: '<S3>/Rate Transition12' incorporates:
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition12 = state_System;

    // RateTransition: '<S3>/Rate Transition29' incorporates:
    //   Inport: '<Root>/ecu_EOP'

    MX_Gtwy_Control_B.RateTransition29 = ecu_EOP;

    // RateTransition: '<S3>/Rate Transition30'
    MX_Gtwy_Control_B.RateTransition30 = state_CommECU;

    // RateTransition: '<S3>/Rate Transition24' incorporates:
    //   Inport: '<Root>/ain_SensorSupply1'

    MX_Gtwy_Control_B.RateTransition24 = ain_SensorSupply1;

    // UnitDelay: '<S3>/Unit Delay6'
    MX_Gtwy_Control_B.UnitDelay7 = MX_Gtwy_Control_DWork.UnitDelay6_DSTATE;

    // Outputs for Atomic SubSystem: '<S3>/SensorSupply1'
    MX_Gtwy_Control_SensorSupply1();

    // End of Outputs for SubSystem: '<S3>/SensorSupply1'

    // RateTransition: '<S3>/Rate Transition15' incorporates:
    //   Inport: '<Root>/ain_SensorSupply2'

    MX_Gtwy_Control_B.RateTransition15 = ain_SensorSupply2;

    // UnitDelay: '<S3>/Unit Delay7'
    MX_Gtwy_Control_B.UnitDelay7 = MX_Gtwy_Control_DWork.UnitDelay7_DSTATE;

    // Outputs for Atomic SubSystem: '<S3>/SensorSupply2'
    MX_Gtwy_Control_SensorSupply2();

    // End of Outputs for SubSystem: '<S3>/SensorSupply2'
  }

  // End of RateTransition: '<S3>/Rate Transition49'

  // RateTransition: '<S3>/Rate Transition2' incorporates:
  //   UnitDelay: '<S3>/Unit Delay2'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition2 =
      MX_Gtwy_Control_DWork.UnitDelay2_DSTATE_he0j;
  }

  // End of RateTransition: '<S3>/Rate Transition2'

  // RateTransition: '<S3>/Rate Transition28' incorporates:
  //   UnitDelay: '<S3>/Unit Delay3'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition28 = MX_Gtwy_Control_DWork.UnitDelay3_DSTATE;

    // Outputs for Atomic SubSystem: '<S3>/EOP'
    MX_Gtwy_Control_EOP();

    // End of Outputs for SubSystem: '<S3>/EOP'
  }

  // End of RateTransition: '<S3>/Rate Transition28'

  // RateTransition: '<S3>/Rate Transition37'
  MX_Gtwy_Control_B.RateTransition37 = flt_EOP;

  // RateTransition: '<S3>/Rate Transition38'
  MX_Gtwy_Control_B.RateTransition38 = state_EOP;

  // RateTransition: '<S3>/Rate Transition35'
  MX_Gtwy_Control_B.RateTransition35 = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S3>/EngineSpeed'
  MX_Gtwy_Control_EngineSpeed();

  // End of Outputs for SubSystem: '<S3>/EngineSpeed'

  // RateTransition: '<S3>/Rate Transition47' incorporates:
  //   Inport: '<Root>/ain_ECT'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition47 = ain_ECT;

    // RateTransition: '<S3>/Rate Transition17' incorporates:
    //   Inport: '<Root>/ain_ECT'
    //   Inport: '<Root>/ain_SensorSupply1'

    MX_Gtwy_Control_B.RateTransition17 = ain_SensorSupply1;

    // RateTransition: '<S3>/Rate Transition14' incorporates:
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition14 = state_System;

    // RateTransition: '<S3>/Rate Transition32' incorporates:
    //   Inport: '<Root>/ecu_ECT'

    MX_Gtwy_Control_B.RateTransition32 = ecu_ECT;

    // RateTransition: '<S3>/Rate Transition31'
    MX_Gtwy_Control_B.RateTransition31 = state_CommECU;
  }

  // End of RateTransition: '<S3>/Rate Transition47'

  // RateTransition: '<S3>/Rate Transition59' incorporates:
  //   UnitDelay: '<S3>/Unit Delay12'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition59 =
      MX_Gtwy_Control_DWork.UnitDelay12_DSTATE;

    // Outputs for Atomic SubSystem: '<S3>/ECT'
    MX_Gtwy_Control_ECT();

    // End of Outputs for SubSystem: '<S3>/ECT'
  }

  // End of RateTransition: '<S3>/Rate Transition59'

  // RateTransition: '<S6>/Rate Transition13'
  MX_Gtwy_Control_B.RateTransition13_gcbk = state_ECT;

  // RateTransition: '<S6>/Rate Transition57'
  MX_Gtwy_Control_B.RateTransition57 = state_EOP;

  // RateTransition: '<S3>/Rate Transition48' incorporates:
  //   Inport: '<Root>/adin_HOT'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition48 = adin_HOT;

    // RateTransition: '<S3>/Rate Transition19' incorporates:
    //   Inport: '<Root>/adin_HOT'
    //   Inport: '<Root>/ain_SensorSupply1'

    MX_Gtwy_Control_B.RateTransition19 = ain_SensorSupply1;

    // RateTransition: '<S3>/Rate Transition13' incorporates:
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition13_f1pl = state_System;
  }

  // End of RateTransition: '<S3>/Rate Transition48'

  // RateTransition: '<S3>/Rate Transition41' incorporates:
  //   UnitDelay: '<S3>/Unit Delay11'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition41 =
      MX_Gtwy_Control_DWork.UnitDelay11_DSTATE;

    // Outputs for Atomic SubSystem: '<S3>/HydOilTemp'
    MX_Gtwy_Control_HydOilTemp();

    // End of Outputs for SubSystem: '<S3>/HydOilTemp'
  }

  // End of RateTransition: '<S3>/Rate Transition41'

  // RateTransition: '<S6>/Rate Transition19'
  MX_Gtwy_Control_B.RateTransition19_fh5v = state_HOT;

  // UnitDelay: '<S6>/Unit Delay5'
  MX_Gtwy_Control_B.UnitDelay2_nwqf = MX_Gtwy_Control_DWork.UnitDelay5_DSTATE;

  // UnitDelay: '<S6>/Unit Delay4'
  MX_Gtwy_Control_B.UnitDelay10_kkg2 = MX_Gtwy_Control_DWork.UnitDelay4_DSTATE;

  // Outputs for Atomic SubSystem: '<S6>/Machine_Lock'
  MX_Gtwy_Control_Machine_Lock();

  // End of Outputs for SubSystem: '<S6>/Machine_Lock'

  // UnitDelay: '<S3>/Unit Delay8'
  MX_Gtwy_Control_B.UnitDelay10_kkg2 = MX_Gtwy_Control_DWork.UnitDelay8_DSTATE;

  // Outputs for Atomic SubSystem: '<S3>/Engine_Start'
  Engine_Start();

  // End of Outputs for SubSystem: '<S3>/Engine_Start'

  // Outputs for Atomic SubSystem: '<S3>/Key'
  MX_Gtwy_Control_Key();

  // End of Outputs for SubSystem: '<S3>/Key'

  // RateTransition: '<S3>/Rate Transition64' incorporates:
  //   Inport: '<Root>/can_FuelTemp'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition64 = can_FuelTemp;

    // RateTransition: '<S3>/Rate Transition69' incorporates:
    //   Inport: '<Root>/can_FuelTemp'
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition69 = state_System;

    // RateTransition: '<S3>/Rate Transition70'
    MX_Gtwy_Control_B.RateTransition70 = state_CommECU;
  }

  // End of RateTransition: '<S3>/Rate Transition64'

  // RateTransition: '<S3>/Rate Transition71' incorporates:
  //   UnitDelay: '<S3>/Unit Delay5'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition71 =
      MX_Gtwy_Control_DWork.UnitDelay5_DSTATE_nojo;

    // Outputs for Atomic SubSystem: '<S3>/Fuel_Temperature'
    MX_Gtwy_Contro_Fuel_Temperature();

    // End of Outputs for SubSystem: '<S3>/Fuel_Temperature'
  }

  // End of RateTransition: '<S3>/Rate Transition71'

  // RateTransition: '<S6>/Rate Transition2'
  MX_Gtwy_Control_B.RateTransition2_c3je = state_FuelTemp;

  // RateTransition: '<S3>/Rate Transition62'
  MX_Gtwy_Control_B.RateTransition62 = state_SensorSupply1;

  // RateTransition: '<S3>/Rate Transition4'
  MX_Gtwy_Control_B.RateTransition4_nlao = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S3>/Console_Sensor'
  MX_Gtwy_Control_Console_Sensor();

  // End of Outputs for SubSystem: '<S3>/Console_Sensor'

  // UnitDelay: '<S6>/Unit Delay6'
  MX_Gtwy_Control_B.UnitDelay10_kkg2 =
    MX_Gtwy_Control_DWork.UnitDelay6_DSTATE_gv5d;

  // UnitDelay: '<S6>/Unit Delay2'
  MX_Gtwy_Control_B.UnitDelay2_nwqf =
    MX_Gtwy_Control_DWork.UnitDelay2_DSTATE_bf1p;

  // UnitDelay: '<S6>/Unit Delay3'
  MX_Gtwy_Control_B.UnitDelay9_hk24 =
    MX_Gtwy_Control_DWork.UnitDelay3_DSTATE_nlci;

  // Outputs for Atomic SubSystem: '<S6>/Engine'
  MX_Gtwy_Control_Engine();

  // End of Outputs for SubSystem: '<S6>/Engine'

  // RateTransition: '<S3>/Rate Transition3'
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition3_hfqm = state_Engine;

    // RateTransition: '<S3>/Rate Transition20'
    MX_Gtwy_Control_B.RateTransition20 = flt_EngineSpeed;

    // Outputs for Atomic SubSystem: '<S3>/VBattery'
    MX_Gtwy_Control_VBattery();

    // End of Outputs for SubSystem: '<S3>/VBattery'

    // RateTransition: '<S3>/Rate Transition46' incorporates:
    //   Inport: '<Root>/din_HCFilter1'

    MX_Gtwy_Control_B.RateTransition46 = din_HCFilter1;

    // RateTransition: '<S3>/Rate Transition22'
    MX_Gtwy_Control_B.RateTransition22 = state_Engine;

    // Outputs for Atomic SubSystem: '<S3>/HCFilter1'
    MX_Gtwy_Control_HCFilter1();

    // End of Outputs for SubSystem: '<S3>/HCFilter1'

    // RateTransition: '<S3>/Rate Transition50' incorporates:
    //   Inport: '<Root>/ain_FuelLevel'

    MX_Gtwy_Control_B.RateTransition50 = ain_FuelLevel;

    // RateTransition: '<S3>/Rate Transition52' incorporates:
    //   Inport: '<Root>/ain_SwitchedPower'

    MX_Gtwy_Control_B.RateTransition52 = ain_SwitchedPower;

    // RateTransition: '<S3>/Rate Transition5'
    MX_Gtwy_Control_B.RateTransition5_af5m = state_Console;

    // RateTransition: '<S3>/Rate Transition51'
    MX_Gtwy_Control_B.RateTransition51 = state_Engine;

    // Outputs for Atomic SubSystem: '<S3>/FuelLevel'
    MX_Gtwy_Control_FuelLevel();

    // End of Outputs for SubSystem: '<S3>/FuelLevel'

    // RateTransition: '<S3>/Rate Transition16' incorporates:
    //   Inport: '<Root>/ain_ThrottlePrimary'

    MX_Gtwy_Control_B.RateTransition16 = ain_ThrottlePrimary;

    // RateTransition: '<S3>/Rate Transition34' incorporates:
    //   Inport: '<Root>/ain_SensorSupply2'

    MX_Gtwy_Control_B.RateTransition34 = ain_SensorSupply2;

    // RateTransition: '<S3>/Rate Transition8' incorporates:
    //   Inport: '<Root>/din_GlowPlugRelay'

    MX_Gtwy_Control_B.RateTransition8_k12u = din_GlowPlugRelay;

    // RateTransition: '<S3>/Rate Transition6' incorporates:
    //   Inport: '<Root>/adin_TravelPressureSwitch'

    MX_Gtwy_Control_B.RateTransition6 = adin_TravelPressureSwitch;
  }

  // End of RateTransition: '<S3>/Rate Transition3'

  // RateTransition: '<S4>/Rate Transition14'
  MX_Gtwy_Control_B.RateTransition14_b2gt = state_VBattery;

  // Outputs for Atomic SubSystem: '<S4>/SwitchedPower'
  MX_Gtwy_Control_SwitchedPower();

  // End of Outputs for SubSystem: '<S4>/SwitchedPower'

  // RateTransition: '<S4>/Rate Transition42'
  MX_Gtwy_Control_B.RateTransition42 = state_VBattery;

  // RateTransition: '<S4>/Rate Transition7'
  MX_Gtwy_Control_B.RateTransition7 = calc_VBattery;

  // UnitDelay: '<S4>/Unit Delay9'
  MX_Gtwy_Control_B.UnitDelay9_hk24 = MX_Gtwy_Control_DWork.UnitDelay9_DSTATE;

  // UnitDelay: '<S4>/Unit Delay10'
  MX_Gtwy_Control_B.UnitDelay10_kkg2 = MX_Gtwy_Control_DWork.UnitDelay10_DSTATE;

  // Outputs for Atomic SubSystem: '<S4>/FuelSec_ECUHold'
  MX_Gtwy_Control_FuelSec_ECUHold();

  // End of Outputs for SubSystem: '<S4>/FuelSec_ECUHold'

  // Outputs for Atomic SubSystem: '<S6>/Controller_State'
  MX_Gtwy_Contro_Controller_State();

  // End of Outputs for SubSystem: '<S6>/Controller_State'

  // Outputs for Atomic SubSystem: '<S3>/Buttons'
  MX_Gtwy_Control_Buttons();

  // End of Outputs for SubSystem: '<S3>/Buttons'

  // Outputs for Atomic SubSystem: '<S3>/Eco_Mode'
  MX_Gtwy_Control_Eco_Mode();

  // End of Outputs for SubSystem: '<S3>/Eco_Mode'

  // RateTransition: '<S3>/Rate Transition63'
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition63 = state_EcoMode;

    // Outputs for Atomic SubSystem: '<S3>/Throttle'
    MX_Gtwy_Control_Throttle();

    // End of Outputs for SubSystem: '<S3>/Throttle'
  }

  // End of RateTransition: '<S3>/Rate Transition63'

  // Outputs for Atomic SubSystem: '<S3>/AirFilter'
  MX_Gtwy_Control_AirFilter();

  // End of Outputs for SubSystem: '<S3>/AirFilter'

  // UnitDelay: '<S3>/Unit Delay1'
  MX_Gtwy_Control_B.UnitDelay1 = MX_Gtwy_Control_DWork.UnitDelay1_DSTATE_hggw;

  // UnitDelay: '<S3>/Unit Delay4'
  MX_Gtwy_Control_B.UnitDelay4 = MX_Gtwy_Control_DWork.UnitDelay4_DSTATE_cldf;

  // Logic: '<S97>/Logical Operator' incorporates:
  //   Constant: '<S100>/Constant'
  //   Constant: '<S97>/Constant1'
  //   Constant: '<S97>/Constant2'
  //   Constant: '<S99>/Constant'
  //   Inport: '<Root>/cmd_AuxEnable_ACD'
  //   Inport: '<Root>/cmd_AuxEnable_ST'
  //   Logic: '<S97>/Logical Operator1'
  //   Logic: '<S97>/Logical Operator2'
  //   RelationalOperator: '<S100>/Compare'
  //   RelationalOperator: '<S101>/FixPt Relational Operator'
  //   RelationalOperator: '<S102>/FixPt Relational Operator'
  //   RelationalOperator: '<S99>/Compare'
  //   UnitDelay: '<S101>/Delay Input1'
  //   UnitDelay: '<S102>/Delay Input1'

  rtb_LogicalOperator_auqu = (button_Aux || ((cmd_AuxEnable_ST >
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE) && (CONSTANT_DATA->STAUX_FUNCTION
    != NON_FUNCTIONAL)) || ((cmd_AuxEnable_ACD >
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_e0ev) &&
    (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)));

  // Chart: '<S97>/Aux_Pot'
  // Gateway: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_j2wz < 65535U) {
    MX_Gtwy_Control_DWork.temporalCounter_i1_j2wz = (uint16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i1_j2wz + 1);
  }

  // During: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c76_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c76_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
    // Transition: '<S98>:132'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
      MX_Gtwy_Contro_IN_INACTIVE_nzjc;

    // Entry 'INACTIVE': '<S98>:142'
    aux_DebounceButton = INACTIVE;
    aux_DetentHold = INACTIVE;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control) {
     case MX_Gtwy_Con_IN_AUX_FALLING_EDGE:
      // During 'AUX_FALLING_EDGE': '<S98>:144'
      // Transition: '<S98>:134'
      MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
        MX_Gtwy_Contro_IN_INACTIVE_nzjc;

      // Entry 'INACTIVE': '<S98>:142'
      aux_DebounceButton = INACTIVE;
      aux_DetentHold = INACTIVE;
      break;

     case MX_Gtwy_Control_IN_DETENT:
      // During 'DETENT': '<S98>:146'
      if (!rtb_LogicalOperator_auqu) {
        // Transition: '<S98>:147'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
          MX_Gtwy_Contro_IN_INACTIVE_nzjc;

        // Entry 'INACTIVE': '<S98>:142'
        aux_DebounceButton = INACTIVE;
        aux_DetentHold = INACTIVE;
      } else {
        aux_DetentHold = INACTIVE;
      }
      break;

     case MX_Gtwy_Control_IN_HOLD_bxpr:
      // During 'HOLD': '<S98>:145'
      if (MX_Gtwy_Control_DWork.temporalCounter_i1_j2wz >=
          CONSTANT_DATA->AUX_DETENT_HOLD_TIME) {
        // Transition: '<S98>:138'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_DETENT;

        // Entry 'DETENT': '<S98>:146'
        aux_DetentHold = ACTIVE;
      } else {
        if (!rtb_LogicalOperator_auqu) {
          // Transition: '<S98>:139'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
            MX_Gtwy_Con_IN_AUX_FALLING_EDGE;

          // Entry 'AUX_FALLING_EDGE': '<S98>:144'
          aux_DebounceButton = ACTIVE;
        }
      }
      break;

     case MX_Gtwy_Contro_IN_INACTIVE_nzjc:
      aux_DebounceButton = INACTIVE;

      // During 'INACTIVE': '<S98>:142'
      if (rtb_LogicalOperator_auqu && (state_PanelButtons == NORMAL) &&
          (state_Console == ACTIVE)) {
        // Transition: '<S98>:136'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_HOLD_bxpr;
        MX_Gtwy_Control_DWork.temporalCounter_i1_j2wz = 0U;
      } else {
        if (rtb_LogicalOperator_auqu && (state_PanelButtons != NORMAL)) {
          // Transition: '<S98>:135'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
            MX_Gtwy_C_IN_INACTIVE_WAIT_gks0;
        }
      }
      break;

     default:
      // During 'INACTIVE_WAIT': '<S98>:143'
      if (!rtb_LogicalOperator_auqu) {
        // Transition: '<S98>:137'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
          MX_Gtwy_Contro_IN_INACTIVE_nzjc;

        // Entry 'INACTIVE': '<S98>:142'
        aux_DebounceButton = INACTIVE;
        aux_DetentHold = INACTIVE;
      }
      break;
    }
  }

  // End of Chart: '<S97>/Aux_Pot'

  // RateTransition: '<S3>/Rate Transition53'
  MX_Gtwy_Control_B.RateTransition53_nlqq = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S3>/Joystick_Pots'
  MX_Gtwy_Control_Joystick_Pots();

  // End of Outputs for SubSystem: '<S3>/Joystick_Pots'

  // Outputs for Atomic SubSystem: '<S3>/Aux_Pot'
  MX_Gtwy_Control_Aux_Pot();

  // End of Outputs for SubSystem: '<S3>/Aux_Pot'

  // RateTransition: '<S89>/Rate Transition53' incorporates:
  //   Inport: '<Root>/ain_LoadMoment'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition53 = ain_LoadMoment;

    // Logic: '<S89>/Logical Operator' incorporates:
    //   Constant: '<S233>/Constant'
    //   Constant: '<S235>/Constant'
    //   Constant: '<S89>/Constant2'
    //   Inport: '<Root>/ain_LoadMoment'
    //   Inport: '<Root>/state_System'
    //   RelationalOperator: '<S233>/Compare'
    //   RelationalOperator: '<S235>/Compare'

    MX_Gtwy_Control_B.LogicalOperator = ((state_System == SYS_NORMAL) &&
      (CONSTANT_DATA->LOAD_MOMENT_FUNCTION == SWITCH_INPUT));

    // Outputs for Enabled SubSystem: '<S89>/Load_Moment_Switch'
    MX_Gtwy_Cont_Load_Moment_Switch();

    // End of Outputs for SubSystem: '<S89>/Load_Moment_Switch'

    // RelationalOperator: '<S237>/Compare' incorporates:
    //   Constant: '<S237>/Constant'
    //   Constant: '<S89>/Constant3'

    rtb_Compare_fj5y = (CONSTANT_DATA->LOAD_MOMENT_FUNCTION == SWITCH_INPUT);
  }

  // End of RateTransition: '<S89>/Rate Transition53'

  // DataTypeConversion: '<S89>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/ain_LoadMoment'

  rtb_DataTypeConversion = (int16_T)ain_LoadMoment;

  // Outputs for Atomic SubSystem: '<S89>/LP_Filter_Adj_Gain'

  // Constant: '<S89>/Constant4'
  MX_Gtwy_Cont_LP_Filter_Adj_Gain(CONSTANT_DATA->LOAD_MOMENT_FILTER_GAIN,
    rtb_DataTypeConversion, &MX_Gtwy_Control_B.Output_ahzv,
    &MX_Gtwy_Control_DWork.LP_Filter_Adj_Gain);

  // End of Outputs for SubSystem: '<S89>/LP_Filter_Adj_Gain'

  // RateTransition: '<S89>/Rate Transition3'
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition3 = MX_Gtwy_Control_B.Output_ahzv;

    // RateTransition: '<S89>/Rate Transition4' incorporates:
    //   Inport: '<Root>/ain_SensorSupply2'

    MX_Gtwy_Control_B.RateTransition4 = ain_SensorSupply2;

    // RateTransition: '<S89>/Rate Transition5' incorporates:
    //   Inport: '<Root>/din_OWDEnableSw'

    MX_Gtwy_Control_B.RateTransition5_dkdc = din_OWDEnableSw;

    // Logic: '<S89>/Logical Operator1' incorporates:
    //   Constant: '<S234>/Constant'
    //   Constant: '<S236>/Constant'
    //   Constant: '<S89>/Constant1'
    //   Inport: '<Root>/state_System'
    //   RelationalOperator: '<S234>/Compare'
    //   RelationalOperator: '<S236>/Compare'

    MX_Gtwy_Control_B.LogicalOperator1 = ((state_System == SYS_NORMAL) &&
      (CONSTANT_DATA->LOAD_MOMENT_FUNCTION == SENDER));

    // Outputs for Enabled SubSystem: '<S89>/Load_Moment_Sensor'
    MX_Gtwy_Cont_Load_Moment_Sensor();

    // End of Outputs for SubSystem: '<S89>/Load_Moment_Sensor'

    // Switch: '<S89>/Switch'
    if (rtb_Compare_fj5y) {
      state_LoadMoment = MX_Gtwy_Control_B.OutportBufferForstate_LoadMomen;
    } else {
      state_LoadMoment = MX_Gtwy_Control_B.OutportBufferForstate_Load_dpi5;
    }

    // End of Switch: '<S89>/Switch'
  }

  // End of RateTransition: '<S89>/Rate Transition3'

  // RateTransition: '<S4>/Rate Transition13'
  MX_Gtwy_Control_B.RateTransition13 = calc_VBattery;

  // RateTransition: '<S4>/Rate Transition15'
  MX_Gtwy_Control_B.RateTransition15_ozmr = state_VBattery;

  // Outputs for Atomic SubSystem: '<S4>/Hyd_Enable'
  MX_Gtwy_Control_Hyd_Enable();

  // End of Outputs for SubSystem: '<S4>/Hyd_Enable'

  // RateTransition: '<S3>/Rate Transition56'
  MX_Gtwy_Control_B.RateTransition56 = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S3>/Offset_Pot'
  MX_Gtwy_Control_Offset_Pot();

  // End of Outputs for SubSystem: '<S3>/Offset_Pot'

  // RateTransition: '<S3>/Rate Transition60'
  MX_Gtwy_Control_B.RateTransition60 = state_SensorSupply1;

  // RateTransition: '<S3>/Rate Transition61'
  MX_Gtwy_Control_B.RateTransition61 = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S3>/Load_Sense'
  MX_Gtwy_Control_Load_Sense();

  // End of Outputs for SubSystem: '<S3>/Load_Sense'

  // RateTransition: '<S3>/Rate Transition72' incorporates:
  //   Inport: '<Root>/ecu_EOT'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition72 = ecu_EOT;

    // RateTransition: '<S3>/Rate Transition73' incorporates:
    //   Inport: '<Root>/ecu_EOT'
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition73 = state_System;

    // RateTransition: '<S3>/Rate Transition74' incorporates:
    //   Inport: '<Root>/state_ecuECT'

    MX_Gtwy_Control_B.RateTransition74 = state_ecuECT;

    // Outputs for Atomic SubSystem: '<S3>/Engine_Oil_Temperature'
    MX_Gtwy__Engine_Oil_Temperature();

    // End of Outputs for SubSystem: '<S3>/Engine_Oil_Temperature'
  }

  // End of RateTransition: '<S3>/Rate Transition72'

  // UnitDelay: '<S3>/Unit Delay17'
  MX_Gtwy_Control_B.UnitDelay17 = MX_Gtwy_Control_DWork.UnitDelay17_DSTATE;

  // UnitDelay: '<S3>/Unit Delay9'
  MX_Gtwy_Control_B.UnitDelay9 = MX_Gtwy_Control_DWork.UnitDelay9_DSTATE_jr45;

  // RateTransition: '<S3>/Rate Transition9'
  MX_Gtwy_Control_B.RateTransition9_nsj3 = state_SensorSupply2;

  // UnitDelay: '<S3>/Unit Delay15'
  MX_Gtwy_Control_B.UnitDelay15 = MX_Gtwy_Control_DWork.UnitDelay15_DSTATE;

  // UnitDelay: '<S3>/Unit Delay14'
  MX_Gtwy_Control_B.UnitDelay14 = MX_Gtwy_Control_DWork.UnitDelay14_DSTATE;

  // UnitDelay: '<S3>/Unit Delay10'
  MX_Gtwy_Control_B.UnitDelay10 = MX_Gtwy_Control_DWork.UnitDelay10_DSTATE_mnd3;

  // Logic: '<S77>/Logical Operator' incorporates:
  //   Constant: '<S167>/Constant'
  //   Constant: '<S168>/Constant'
  //   Constant: '<S77>/Constant2'
  //   Inport: '<Root>/state_System'
  //   RelationalOperator: '<S167>/Compare'
  //   RelationalOperator: '<S168>/Compare'

  MX_Gtwy_Control_B.LogicalOperator_gls4 = ((state_System == SYS_NORMAL) &&
    (CONSTANT_DATA->RIGHT_POT_FUNCTION != NON_FUNCTIONAL));

  // Outputs for Enabled SubSystem: '<S77>/Right Pot'
  MX_Gtwy_Control_RightPot();

  // End of Outputs for SubSystem: '<S77>/Right Pot'

  // RateTransition: '<S3>/Rate Transition10'
  MX_Gtwy_Control_B.RateTransition10_bex1 = state_SensorSupply2;

  // UnitDelay: '<S3>/Unit Delay13'
  MX_Gtwy_Control_B.UnitDelay13 = MX_Gtwy_Control_DWork.UnitDelay13_DSTATE;

  // Logic: '<S76>/Logical Operator' incorporates:
  //   Constant: '<S161>/Constant'
  //   Constant: '<S162>/Constant'
  //   Constant: '<S76>/Constant3'
  //   Inport: '<Root>/state_System'
  //   RelationalOperator: '<S161>/Compare'
  //   RelationalOperator: '<S162>/Compare'

  MX_Gtwy_Control_B.LogicalOperator_avca = ((state_System == SYS_NORMAL) &&
    (CONSTANT_DATA->LEFT_POT_FUNCTION != NON_FUNCTIONAL));

  // Outputs for Enabled SubSystem: '<S76>/Normal_Pot'
  MX_Gtwy_Control_Normal_Pot();

  // End of Outputs for SubSystem: '<S76>/Normal_Pot'

  // DataTypeConversion: '<S76>/Data Type Conversion3'
  u0 = (uint16_T)MX_Gtwy_Control_B.OutportBufferForposition_LeftPo;

  // Saturate: '<S76>/Saturation'
  if (u0 < ((uint16_T)1000U)) {
    position_LeftPot = u0;
  } else {
    position_LeftPot = ((uint16_T)1000U);
  }

  // End of Saturate: '<S76>/Saturation'

  // UnitDelay: '<S6>/Unit Delay1'
  MX_Gtwy_Control_B.UnitDelay1_gwnh =
    MX_Gtwy_Control_DWork.UnitDelay1_DSTATE_l0j2;

  // Outputs for Atomic SubSystem: '<S6>/Keyless_Start'
  MX_Gtwy_Control_Keyless_Start();

  // End of Outputs for SubSystem: '<S6>/Keyless_Start'

  // UnitDelay: '<S6>/Unit Delay8'
  MX_Gtwy_Control_B.UnitDelay8 = MX_Gtwy_Control_DWork.UnitDelay8_DSTATE_lznp;

  // UnitDelay: '<S6>/Unit Delay9'
  MX_Gtwy_Control_B.UnitDelay9_hk24 =
    MX_Gtwy_Control_DWork.UnitDelay9_DSTATE_lfbs;

  // RateTransition: '<S4>/Rate Transition16'
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition16_hyai = state_Engine;

    // RateTransition: '<S4>/Rate Transition29' incorporates:
    //   Inport: '<Root>/dfbk_GlowPlugOutput'

    MX_Gtwy_Control_B.RateTransition29_kajv = dfbk_GlowPlugOutput;

    // RateTransition: '<S4>/Rate Transition30' incorporates:
    //   Inport: '<Root>/din_GlowPlugRelay'

    MX_Gtwy_Control_B.RateTransition30_mgbl = din_GlowPlugRelay;

    // RateTransition: '<S4>/Rate Transition44' incorporates:
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition44 = state_System;

    // RateTransition: '<S4>/Rate Transition24' incorporates:
    //   Inport: '<Root>/ecu_GlowPlug'

    MX_Gtwy_Control_B.RateTransition24_bca5 = ecu_GlowPlug;

    // RateTransition: '<S4>/Rate Transition26' incorporates:
    //   Inport: '<Root>/ecu_ECT'

    MX_Gtwy_Control_B.RateTransition26 = ecu_ECT;

    // RateTransition: '<S4>/Rate Transition27' incorporates:
    //   Inport: '<Root>/state_ecuECT'

    MX_Gtwy_Control_B.RateTransition27_chza = state_ecuECT;

    // Outputs for Atomic SubSystem: '<S4>/GlowPlug'
    MX_Gtwy_Control_GlowPlug();

    // End of Outputs for SubSystem: '<S4>/GlowPlug'
  }

  // End of RateTransition: '<S4>/Rate Transition16'

  // RateTransition: '<S6>/Rate Transition12'
  MX_Gtwy_Control_B.RateTransition12_piek = dout_GlowPlug;

  // Outputs for Atomic SubSystem: '<S6>/EMEA Control Mode'
  MX_Gtwy_Control_EMEAControlMode();

  // End of Outputs for SubSystem: '<S6>/EMEA Control Mode'

  // Outputs for Atomic SubSystem: '<S6>/Aux_Enable'
  MX_Gtwy_Control_Aux_Enable();

  // End of Outputs for SubSystem: '<S6>/Aux_Enable'

  // RateTransition: '<S6>/Rate Transition23'
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition23 = psi_LoadSense;

    // RateTransition: '<S6>/Rate Transition1'
    MX_Gtwy_Control_B.RateTransition1_d4x3 = state_LoadSense;

    // RateTransition: '<S6>/Rate Transition24'
    MX_Gtwy_Control_B.RateTransition24_ohus = state_Console;

    // RateTransition: '<S6>/Rate Transition3'
    MX_Gtwy_Control_B.RateTransition3_hzvd = button_AutoIdle;

    // RateTransition: '<S6>/Rate Transition22'
    MX_Gtwy_Control_B.RateTransition22_aeuw = state_Engine;

    // RateTransition: '<S6>/Rate Transition64' incorporates:
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition64_ialx = state_System;

    // RateTransition: '<S6>/Rate Transition11' incorporates:
    //   Inport: '<Root>/flag_InitEERead'

    MX_Gtwy_Control_B.RateTransition11_e1mm = flag_InitEERead;

    // RateTransition: '<S6>/Rate Transition4' incorporates:
    //   Inport: '<Root>/dlx_G55_AutoIdleTime'

    MX_Gtwy_Control_B.RateTransition4_jajp = dlx_G55_AutoIdleTime;

    // RateTransition: '<S6>/Rate Transition9' incorporates:
    //   Inport: '<Root>/dlx_G55_AutoIdle'

    MX_Gtwy_Control_B.RateTransition9_oyjk = dlx_G55_AutoIdle;

    // Outputs for Atomic SubSystem: '<S6>/AutoIdle'
    MX_Gtwy_Control_AutoIdle();

    // End of Outputs for SubSystem: '<S6>/AutoIdle'
  }

  // End of RateTransition: '<S6>/Rate Transition23'

  // RateTransition: '<S6>/Rate Transition18'
  MX_Gtwy_Control_B.RateTransition18 = derate_Throttle;

  // Outputs for Atomic SubSystem: '<S6>/Derate'
  MX_Gtwy_Control_Derate();

  // End of Outputs for SubSystem: '<S6>/Derate'

  // RateTransition: '<S6>/Rate Transition17' incorporates:
  //   Inport: '<Root>/state_System'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition17_kjqh = state_System;

    // RateTransition: '<S6>/Rate Transition26' incorporates:
    //   Inport: '<Root>/flag_InitEERead'
    //   Inport: '<Root>/state_System'

    MX_Gtwy_Control_B.RateTransition26_pecm = flag_InitEERead;

    // RateTransition: '<S6>/Rate Transition27'
    MX_Gtwy_Control_B.RateTransition27_oxis = state_Engine;

    // RateTransition: '<S6>/Rate Transition28'
    MX_Gtwy_Control_B.RateTransition28_otac = state_CommThrottle;

    // Outputs for Atomic SubSystem: '<S6>/CAN_Throttle'
    MX_Gtwy_Control_CAN_Throttle();

    // End of Outputs for SubSystem: '<S6>/CAN_Throttle'

    // RateTransition: '<S6>/Rate Transition10'
    MX_Gtwy_Control_B.RateTransition10_mue4 = state_Engine;

    // RateTransition: '<S6>/Rate Transition20' incorporates:
    //   Inport: '<Root>/state_ecuEOP'

    MX_Gtwy_Control_B.RateTransition20_mrae = state_ecuEOP;

    // Outputs for Atomic SubSystem: '<S6>/Throttle_Command'
    MX_Gtwy_Contro_Throttle_Command();

    // End of Outputs for SubSystem: '<S6>/Throttle_Command'
  }

  // End of RateTransition: '<S6>/Rate Transition17'

  // RelationalOperator: '<S623>/Compare' incorporates:
  //   Constant: '<S623>/Constant'
  //   Constant: '<S6>/Constant2'

  MX_Gtwy_Control_B.Compare = (CONSTANT_DATA->KEYLESS_ENTRY_FUNCTION !=
    NON_FUNCTIONAL);

  // Outputs for Enabled SubSystem: '<S6>/Keyless_Entry'
  MX_Gtwy_Control_Keyless_Entry();

  // End of Outputs for SubSystem: '<S6>/Keyless_Entry'

  // RateTransition: '<S6>/Rate Transition5'
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition5_mczo = disp_LeftControl;

    // RateTransition: '<S6>/Rate Transition6'
    MX_Gtwy_Control_B.RateTransition6_h5c1 = disp_RightControl;

    // RateTransition: '<S6>/Rate Transition7'
    MX_Gtwy_Control_B.RateTransition7_obul = aux_Flow;

    // Logic: '<S633>/Logical Operator2' incorporates:
    //   Constant: '<S683>/Constant'
    //   Constant: '<S684>/Constant'
    //   Logic: '<S633>/Logical Operator'
    //   Logic: '<S633>/Logical Operator1'
    //   RateTransition: '<S6>/Rate Transition8'
    //   RelationalOperator: '<S683>/Compare'
    //   RelationalOperator: '<S684>/Compare'
    //   RelationalOperator: '<S685>/FixPt Relational Operator'
    //   RelationalOperator: '<S686>/FixPt Relational Operator'
    //   RelationalOperator: '<S687>/FixPt Relational Operator'
    //   RelationalOperator: '<S688>/FixPt Relational Operator'
    //   UnitDelay: '<S685>/Delay Input1'
    //   UnitDelay: '<S686>/Delay Input1'
    //   UnitDelay: '<S687>/Delay Input1'
    //   UnitDelay: '<S688>/Delay Input1'

    mode_ControlChange = ((!((MX_Gtwy_Control_B.RateTransition5_mczo ==
      MODE_LEFT_NONE) && (MX_Gtwy_Control_B.RateTransition6_h5c1 ==
                          MODE_RIGHT_NONE))) &&
                          ((MX_Gtwy_Control_B.RateTransition5_mczo !=
      MX_Gtwy_Control_DWork.DelayInput1_DSTATE_fsxx) ||
      (MX_Gtwy_Control_B.RateTransition6_h5c1 !=
       MX_Gtwy_Control_DWork.DelayInput1_DSTATE_aorm) ||
      (MX_Gtwy_Control_B.RateTransition7_obul !=
       MX_Gtwy_Control_DWork.DelayInput1_DSTATE_bihv) ||
      MX_Gtwy_Control_B.display_request || ((int32_T)dout_GlowPlug < (int32_T)
      MX_Gtwy_Control_DWork.DelayInput1_DSTATE_f0dm)));

    // Outputs for Atomic SubSystem: '<S6>/ElectricAutomation'
    MX_Gtwy_Cont_ElectricAutomation();

    // End of Outputs for SubSystem: '<S6>/ElectricAutomation'

    // RateTransition: '<S4>/Rate Transition25' incorporates:
    //   Inport: '<Root>/dfbk_LightsOutput'

    MX_Gtwy_Control_B.RateTransition25_a55f = dfbk_LightsOutput;

    // RateTransition: '<S4>/Rate Transition18' incorporates:
    //   Inport: '<Root>/din_LightsRelay'

    MX_Gtwy_Control_B.RateTransition18_etzj = din_LightsRelay;

    // RateTransition: '<S4>/Rate Transition36'
    MX_Gtwy_Control_B.RateTransition36_ijpl = button_Lights;

    // RateTransition: '<S4>/Rate Transition22'
    MX_Gtwy_Control_B.RateTransition22_crtc = state_PanelButtons;

    // Outputs for Atomic SubSystem: '<S4>/Lights'
    MX_Gtwy_Control_Lights();

    // End of Outputs for SubSystem: '<S4>/Lights'
  }

  // End of RateTransition: '<S6>/Rate Transition5'

  // RateTransition: '<S4>/Rate Transition20'
  MX_Gtwy_Control_B.RateTransition20_arnl = state_VBattery;

  // RateTransition: '<S4>/Rate Transition34'
  MX_Gtwy_Control_B.RateTransition34_jbuw = state_VBattery;

  // RateTransition: '<S4>/Rate Transition40'
  MX_Gtwy_Control_B.RateTransition40 = flt_ECT;
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    // UnitDelay: '<S4>/Unit Delay5'
    MX_Gtwy_Control_B.UnitDelay5_htxk =
      MX_Gtwy_Control_DWork.UnitDelay5_DSTATE_h0ih;
  }

  // RateTransition: '<S4>/Rate Transition41'
  MX_Gtwy_Control_B.RateTransition41_mpbl = MX_Gtwy_Control_B.UnitDelay5_htxk;

  // Outputs for Atomic SubSystem: '<S4>/FuelPri_HVAC'
  MX_Gtwy_Control_FuelPri_HVAC();

  // End of Outputs for SubSystem: '<S4>/FuelPri_HVAC'

  // Outputs for Atomic SubSystem: '<S4>/Starter'
  MX_Gtwy_Control_Starter();

  // End of Outputs for SubSystem: '<S4>/Starter'

  // RateTransition: '<S4>/Rate Transition33' incorporates:
  //   UnitDelay: '<S4>/Unit Delay3'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.dout_FuelPri_kx3h =
      MX_Gtwy_Control_DWork.UnitDelay3_DSTATE_lqze;

    // Outputs for Atomic SubSystem: '<S4>/Fuel_Resolution_Timer'
    MX_Gtwy_C_Fuel_Resolution_Timer();

    // End of Outputs for SubSystem: '<S4>/Fuel_Resolution_Timer'
  }

  // End of RateTransition: '<S4>/Rate Transition33'

  // Outputs for Atomic SubSystem: '<S4>/Buzzer'
  MX_Gtwy_Control_Buzzer();

  // End of Outputs for SubSystem: '<S4>/Buzzer'

  // RateTransition: '<S4>/Rate Transition2'
  MX_Gtwy_Control_B.RateTransition2_ad3t = state_VBattery;

  // RateTransition: '<S4>/Rate Transition3'
  MX_Gtwy_Control_B.RateTransition3_cdpa = calc_VBattery;

  // Outputs for Atomic SubSystem: '<S4>/Aux_Hydraulics'
  MX_Gtwy_Control_Aux_Hydraulics();

  // End of Outputs for SubSystem: '<S4>/Aux_Hydraulics'

  // RateTransition: '<S4>/Rate Transition4'
  MX_Gtwy_Control_B.RateTransition4_i0so = state_VBattery;

  // RateTransition: '<S4>/Rate Transition5'
  MX_Gtwy_Control_B.RateTransition5 = calc_VBattery;

  // RateTransition: '<S4>/Rate Transition45'
  MX_Gtwy_Control_B.RateTransition45 = calc_VBattery;

  // RateTransition: '<S4>/Rate Transition46'
  MX_Gtwy_Control_B.RateTransition46_p0ur = state_VBattery;

  // Outputs for Atomic SubSystem: '<S4>/Diverter'
  MX_Gtwy_Control_Diverter();

  // End of Outputs for SubSystem: '<S4>/Diverter'

  // Outputs for Atomic SubSystem: '<S4>/Offset'
  MX_Gtwy_Control_Offset();

  // End of Outputs for SubSystem: '<S4>/Offset'

  // RateTransition: '<S4>/Rate Transition6'
  MX_Gtwy_Control_B.RateTransition6_awvq = state_ECT;

  // RateTransition: '<S4>/Rate Transition8'
  MX_Gtwy_Control_B.RateTransition8 = state_HOT;

  // RateTransition: '<S4>/Rate Transition9'
  MX_Gtwy_Control_B.RateTransition9 = flt_HOT;

  // RateTransition: '<S4>/Rate Transition10'
  MX_Gtwy_Control_B.RateTransition10 = calc_VBattery;

  // RateTransition: '<S4>/Rate Transition11'
  MX_Gtwy_Control_B.RateTransition11_kahy = state_VBattery;

  // Outputs for Atomic SubSystem: '<S4>/Two_Speed'
  MX_Gtwy_Control_Two_Speed();

  // End of Outputs for SubSystem: '<S4>/Two_Speed'

  // RateTransition: '<S4>/Rate Transition17'
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition17_gzoi = state_Console;

    // RateTransition: '<S4>/Rate Transition21' incorporates:
    //   Inport: '<Root>/dfbk_HydExchange'

    MX_Gtwy_Control_B.RateTransition21_dojr = dfbk_HydExchange;

    // Outputs for Atomic SubSystem: '<S4>/Hydraulic_Exchange'
    MX_Gtwy_Cont_Hydraulic_Exchange();

    // End of Outputs for SubSystem: '<S4>/Hydraulic_Exchange'
  }

  // End of RateTransition: '<S4>/Rate Transition17'

  // RateTransition: '<S4>/Rate Transition1'
  MX_Gtwy_Control_B.RateTransition1 = calc_VBattery;

  // RateTransition: '<S4>/Rate Transition12'
  MX_Gtwy_Control_B.RateTransition12_a0us = state_VBattery;

  // Outputs for Atomic SubSystem: '<S4>/Hyd_Bypass'
  MX_Gtwy_Control_Hyd_Bypass();

  // End of Outputs for SubSystem: '<S4>/Hyd_Bypass'

  // RateTransition: '<S4>/Rate Transition28'
  MX_Gtwy_Control_B.RateTransition28_o4gy = calc_VBattery;

  // RateTransition: '<S4>/Rate Transition31'
  MX_Gtwy_Control_B.RateTransition31_aank = state_VBattery;

  // Outputs for Atomic SubSystem: '<S4>/Dump_Valve'
  MX_Gtwy_Control_Dump_Valve();

  // End of Outputs for SubSystem: '<S4>/Dump_Valve'

  // RateTransition: '<S4>/Rate Transition32' incorporates:
  //   Inport: '<Root>/dfbk_PBValveOutput'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition32_dkx3 = dfbk_PBValveOutput;

    // RateTransition: '<S4>/Rate Transition35' incorporates:
    //   Inport: '<Root>/dfbk_PBValveOutput'
    //   Inport: '<Root>/din_PBValveRelay'

    MX_Gtwy_Control_B.RateTransition35_gogg = din_PBValveRelay;

    // RateTransition: '<S4>/Rate Transition37' incorporates:
    //   Inport: '<Root>/adin_TravelPressureSwitch'

    MX_Gtwy_Control_B.RateTransition37_bstc = adin_TravelPressureSwitch;

    // RateTransition: '<S4>/Rate Transition38'
    MX_Gtwy_Control_B.RateTransition38_cu5w = aux_Flow;

    // RateTransition: '<S4>/Rate Transition39'
    MX_Gtwy_Control_B.RateTransition39_gsng = MX_Gtwy_Control_B.state_AuxFlow;

    // Outputs for Atomic SubSystem: '<S4>/PB_Valve'
    MX_Gtwy_Control_PB_Valve();

    // End of Outputs for SubSystem: '<S4>/PB_Valve'

    // RateTransition: '<S5>/Rate Transition35' incorporates:
    //   Inport: '<Root>/msg_PanelButtonState'

    for (i = 0; i < 8; i++) {
      MX_Gtwy_Control_B.RateTransition35_nxld[i] = msg_PanelButtonState[i];
    }

    // End of RateTransition: '<S5>/Rate Transition35'

    // RateTransition: '<S5>/Rate Transition31' incorporates:
    //   Inport: '<Root>/state_ServiceClock'

    MX_Gtwy_Control_B.RateTransition31_hc54 = state_ServiceClock;

    // RateTransition: '<S5>/Rate Transition24' incorporates:
    //   Inport: '<Root>/state_KeylessPanel'

    MX_Gtwy_Control_B.RateTransition24_nbsd = state_KeylessPanel;

    // RateTransition: '<S5>/Rate Transition22'
    MX_Gtwy_Control_B.RateTransition22_bwuf = state_Engine;

    // RateTransition: '<S5>/Rate Transition21'
    MX_Gtwy_Control_B.RateTransition21 = state_Detent;

    // RateTransition: '<S5>/Rate Transition33'
    MX_Gtwy_Control_B.RateTransition33_aqcg = state_DetentEnable;

    // RateTransition: '<S5>/Rate Transition23'
    MX_Gtwy_Control_B.RateTransition23_puo4 = KSS_Display;

    // RateTransition: '<S5>/Rate Transition25'
    MX_Gtwy_Control_B.RateTransition25_jx1a = state_MachineLock;

    // RateTransition: '<S5>/Rate Transition63'
    MX_Gtwy_Control_B.RateTransition63_jqha = mode_LeftControl;

    // RateTransition: '<S5>/Rate Transition64'
    MX_Gtwy_Control_B.RateTransition64_gsah = mode_RightControl;

    // RateTransition: '<S5>/Rate Transition29'
    MX_Gtwy_Control_B.RateTransition29_pq5l = cmd_Diverter;

    // RateTransition: '<S5>/Rate Transition19'
    MX_Gtwy_Control_B.RateTransition19_nllh = state_Key;

    // Outputs for Atomic SubSystem: '<S5>/InformationDisplay'
    MX_Gtwy_Cont_InformationDisplay();

    // End of Outputs for SubSystem: '<S5>/InformationDisplay'

    // Outputs for Atomic SubSystem: '<S5>/mod_BatteryIcon'
    MX_Gtwy_Control_mod_BatteryIcon();

    // End of Outputs for SubSystem: '<S5>/mod_BatteryIcon'

    // RateTransition: '<S5>/Rate Transition40' incorporates:
    //   Inport: '<Root>/ecu_GlowPlug'

    MX_Gtwy_Control_B.RateTransition40_flay = ecu_GlowPlug;

    // RateTransition: '<S5>/Rate Transition41'
    MX_Gtwy_Control_B.RateTransition41_oacy = state_Engine;

    // Outputs for Atomic SubSystem: '<S5>/mod_GlowPlugIcon'
    MX_Gtwy_Contro_mod_GlowPlugIcon();

    // End of Outputs for SubSystem: '<S5>/mod_GlowPlugIcon'

    // RateTransition: '<S5>/Rate Transition1'
    MX_Gtwy_Control_B.RateTransition1_na4t = state_EngineSpeed;

    // Outputs for Atomic SubSystem: '<S5>/mod_RPMIcon'
    MX_Gtwy_Control_mod_RPMIcon();

    // End of Outputs for SubSystem: '<S5>/mod_RPMIcon'

    // Outputs for Atomic SubSystem: '<S5>/mod_HourMeterIcon'
    MX_Gtwy_Contr_mod_HourMeterIcon();

    // End of Outputs for SubSystem: '<S5>/mod_HourMeterIcon'

    // Outputs for Atomic SubSystem: '<S5>/mod_JobClock1Icon'
    MX_Gtwy_Contr_mod_JobClock1Icon();

    // End of Outputs for SubSystem: '<S5>/mod_JobClock1Icon'

    // Outputs for Atomic SubSystem: '<S5>/mod_JobClock2Icon'
    MX_Gtwy_Contr_mod_JobClock2Icon();

    // End of Outputs for SubSystem: '<S5>/mod_JobClock2Icon'

    // Outputs for Atomic SubSystem: '<S5>/mod_SeatBeltIcon'
    MX_Gtwy_Contro_mod_SeatBeltIcon();

    // End of Outputs for SubSystem: '<S5>/mod_SeatBeltIcon'

    // RateTransition: '<S5>/Rate Transition2'
    MX_Gtwy_Control_B.RateTransition2_htgo = state_Console;

    // RateTransition: '<S5>/Rate Transition3' incorporates:
    //   Inport: '<Root>/state_ConsoleTest'

    MX_Gtwy_Control_B.RateTransition3_p0dx = state_ConsoleTest;

    // RateTransition: '<S5>/Rate Transition7'
    MX_Gtwy_Control_B.RateTransition7_kfld = state_HydEnable;

    // RateTransition: '<S5>/Rate Transition37'
    MX_Gtwy_Control_B.RateTransition37_hv2o = state_HydBypass;

    // Outputs for Atomic SubSystem: '<S5>/mod_LockoutIcon'
    MX_Gtwy_Control_mod_LockoutIcon();

    // End of Outputs for SubSystem: '<S5>/mod_LockoutIcon'

    // RateTransition: '<S5>/Rate Transition62'
    MX_Gtwy_Control_B.RateTransition62_d25a = state_FuelPriOutput;

    // RateTransition: '<S5>/Rate Transition61'
    MX_Gtwy_Control_B.RateTransition61_lxrm = state_FuelPriRelay;

    // RateTransition: '<S5>/Rate Transition60'
    MX_Gtwy_Control_B.RateTransition60_bzmo = error_FuelSec;

    // RateTransition: '<S5>/Rate Transition59'
    MX_Gtwy_Control_B.RateTransition59_dat2 = state_StarterOutput;

    // RateTransition: '<S5>/Rate Transition58'
    MX_Gtwy_Control_B.RateTransition58 = state_StarterRelay;

    // RateTransition: '<S5>/Rate Transition56'
    MX_Gtwy_Control_B.RateTransition56_kjuw = state_CommECU;

    // RateTransition: '<S5>/Rate Transition14'
    MX_Gtwy_Control_B.RateTransition14_nep3 = state_HPMatch;

    // RateTransition: '<S5>/Rate Transition36'
    MX_Gtwy_Control_B.RateTransition36 = state_EngineSpeedDerate;

    // RateTransition: '<S5>/Rate Transition67'
    MX_Gtwy_Control_B.RateTransition67 = state_TurboPrime;

    // RateTransition: '<S5>/Rate Transition15' incorporates:
    //   Inport: '<Root>/lamp_Engine'

    MX_Gtwy_Control_B.RateTransition15_jnsm = lamp_Engine;

    // Outputs for Atomic SubSystem: '<S5>/mod_EngineIcon'
    MX_Gtwy_Control_mod_EngineIcon();

    // End of Outputs for SubSystem: '<S5>/mod_EngineIcon'

    // Outputs for Atomic SubSystem: '<S5>/mod_HydraulicIcon'
    MX_Gtwy_Contr_mod_HydraulicIcon();

    // End of Outputs for SubSystem: '<S5>/mod_HydraulicIcon'

    // Outputs for Atomic SubSystem: '<S5>/mod_ECTIcon'
    MX_Gtwy_Control_mod_ECTIcon();

    // End of Outputs for SubSystem: '<S5>/mod_ECTIcon'

    // RateTransition: '<S5>/Rate Transition54'
    MX_Gtwy_Control_B.RateTransition54 = state_Key;

    // RateTransition: '<S5>/Rate Transition34'
    MX_Gtwy_Control_B.RateTransition34_ka0s = state_LoadSense;

    // RateTransition: '<S5>/Rate Transition11'
    MX_Gtwy_Control_B.RateTransition11_gpcw = state_OffsetPot;

    // RateTransition: '<S5>/Rate Transition17'
    MX_Gtwy_Control_B.RateTransition17_ptxy = state_AuxPot;

    // RateTransition: '<S5>/Rate Transition51'
    MX_Gtwy_Control_B.RateTransition51_ey4f = state_RightPot;

    // RateTransition: '<S5>/Rate Transition48'
    MX_Gtwy_Control_B.RateTransition48_lpnr = state_LeftPot;

    // RateTransition: '<S5>/Rate Transition53'
    MX_Gtwy_Control_B.RateTransition53_cphi = state_SwitchedPwrOutput;

    // RateTransition: '<S5>/Rate Transition52'
    MX_Gtwy_Control_B.RateTransition52_lf11 = state_SwitchedPwrRelay;

    // RateTransition: '<S5>/Rate Transition50'
    MX_Gtwy_Control_B.RateTransition50_dmt4 = state_HVACOutput;

    // RateTransition: '<S5>/Rate Transition9'
    MX_Gtwy_Control_B.RateTransition9_eqf3 = state_OffsetBase;

    // RateTransition: '<S5>/Rate Transition10'
    MX_Gtwy_Control_B.RateTransition10_gdiv = state_OffsetRod;

    // RateTransition: '<S5>/Rate Transition6'
    MX_Gtwy_Control_B.RateTransition6_b4bp = state_AuxBase;

    // RateTransition: '<S5>/Rate Transition13'
    MX_Gtwy_Control_B.RateTransition13_i410 = state_AuxRod;

    // RateTransition: '<S5>/Rate Transition28'
    if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
      MX_Gtwy_Control_B.RateTransition28_gkpf = state_PBValveOutput;
    }

    // End of RateTransition: '<S5>/Rate Transition28'

    // RateTransition: '<S5>/Rate Transition30'
    if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
      MX_Gtwy_Control_B.RateTransition30_hltz = state_PBValveRelay;
    }

    // End of RateTransition: '<S5>/Rate Transition30'

    // RateTransition: '<S5>/Rate Transition27'
    MX_Gtwy_Control_B.RateTransition27_egec = state_Diverter;

    // RateTransition: '<S5>/Rate Transition46' incorporates:
    //   Inport: '<Root>/state_ConstantData'

    MX_Gtwy_Control_B.RateTransition46_f0p4 = state_ConstantData;

    // RateTransition: '<S5>/Rate Transition45' incorporates:
    //   Inport: '<Root>/state_KeylessPanel'

    MX_Gtwy_Control_B.RateTransition45_eg14 = state_KeylessPanel;

    // RateTransition: '<S5>/Rate Transition43' incorporates:
    //   Inport: '<Root>/state_DeluxeG5'

    MX_Gtwy_Control_B.RateTransition43 = state_DeluxeG5;

    // RateTransition: '<S5>/Rate Transition12'
    MX_Gtwy_Control_B.RateTransition12_ftpz = state_CommThrottle;

    // RateTransition: '<S5>/Rate Transition16'
    MX_Gtwy_Control_B.RateTransition16_lryf = state_CommSecondary;

    // RateTransition: '<S5>/Rate Transition4'
    MX_Gtwy_Control_B.RateTransition4_kxeu = state_CommJogShuttle;

    // RateTransition: '<S5>/Rate Transition39' incorporates:
    //   Outport: '<Root>/state_CANThrottle'

    if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
      MX_Gtwy_Control_B.RateTransition39_oy3c =
        MX_Gtwy_Control_Y.state_CANThrottle;
    }

    // End of RateTransition: '<S5>/Rate Transition39'

    // RateTransition: '<S5>/Rate Transition44'
    MX_Gtwy_Control_B.RateTransition44_nwoc = state_CommStdPanel;

    // RateTransition: '<S5>/Rate Transition47'
    MX_Gtwy_Control_B.RateTransition47_j5gh = state_CommDeluxeG55;

    // RateTransition: '<S5>/Rate Transition32'
    MX_Gtwy_Control_B.RateTransition32_bo2v = state_AirFilter;

    // Outputs for Atomic SubSystem: '<S5>/mod_ServiceClockIcon'
    MX_Gtwy_Co_mod_ServiceClockIcon();

    // End of Outputs for SubSystem: '<S5>/mod_ServiceClockIcon'

    // Outputs for Atomic SubSystem: '<S5>/mod_GeneralWarningIcon'
    MX_Gtwy__mod_GeneralWarningIcon();

    // End of Outputs for SubSystem: '<S5>/mod_GeneralWarningIcon'

    // Outputs for Atomic SubSystem: '<S5>/FrontLight'
    MX_Gtwy_Control_FrontLight();

    // End of Outputs for SubSystem: '<S5>/FrontLight'

    // Outputs for Atomic SubSystem: '<S5>/mod_FuelLevelIcon'
    MX_Gtwy_Contr_mod_FuelLevelIcon();

    // End of Outputs for SubSystem: '<S5>/mod_FuelLevelIcon'

    // Outputs for Atomic SubSystem: '<S5>/Backlighting'
    MX_Gtwy_Control_Backlighting();

    // End of Outputs for SubSystem: '<S5>/Backlighting'

    // RateTransition: '<S5>/Rate Transition8'
    MX_Gtwy_Control_B.RateTransition8_iebw = state_TwoSpeed;

    // RateTransition: '<S5>/Rate Transition42'
    MX_Gtwy_Control_B.RateTransition42_loar = state_TwoSpeedIcon;

    // Outputs for Atomic SubSystem: '<S5>/mod_TwoSpeedIcon'
    MX_Gtwy_Contro_mod_TwoSpeedIcon();

    // End of Outputs for SubSystem: '<S5>/mod_TwoSpeedIcon'

    // RateTransition: '<S5>/Rate Transition65'
    MX_Gtwy_Control_B.RateTransition65 = state_KSPassword;

    // RateTransition: '<S5>/Rate Transition66'
    MX_Gtwy_Control_B.RateTransition66 = state_KSLock;

    // Outputs for Atomic SubSystem: '<S5>/Keyless_Indicators'
    MX_Gtwy_Cont_Keyless_Indicators();

    // End of Outputs for SubSystem: '<S5>/Keyless_Indicators'

    // RateTransition: '<S5>/Rate Transition5'
    MX_Gtwy_Control_B.RateTransition5_dpci = state_AuxEnable;

    // RateTransition: '<S5>/Rate Transition18'
    MX_Gtwy_Control_B.RateTransition18_dd31 = state_DetentEnable;

    // RateTransition: '<S5>/Rate Transition20'
    MX_Gtwy_Control_B.RateTransition20_je5d = state_Detent;

    // RateTransition: '<S5>/Rate Transition57'
    MX_Gtwy_Control_B.RateTransition57_doaz = flag_AuxEnableFlash;

    // Outputs for Atomic SubSystem: '<S5>/Aux_Ind'
    MX_Gtwy_Control_Aux_Ind();

    // End of Outputs for SubSystem: '<S5>/Aux_Ind'

    // Outputs for Atomic SubSystem: '<S5>/AutoIdle_Ind'
    MX_Gtwy_Control_AutoIdle_Ind();

    // End of Outputs for SubSystem: '<S5>/AutoIdle_Ind'

    // RateTransition: '<S5>/Rate Transition38'
    MX_Gtwy_Control_B.RateTransition38_fzvf = state_AuxEnable;

    // RateTransition: '<S5>/Rate Transition55'
    MX_Gtwy_Control_B.RateTransition55 = mode_RightControl;

    // Outputs for Atomic SubSystem: '<S5>/mod_AuxIcon'
    MX_Gtwy_Control_mod_AuxIcon();

    // End of Outputs for SubSystem: '<S5>/mod_AuxIcon'
  }

  // End of RateTransition: '<S4>/Rate Transition32'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode46'

  // Inport: '<Root>/state_ConstantData'
  MX_Gtwy_Control_ErrorCode(state_ConstantData, &rtb_Sum_prxc,
    FN_MAIN_CONTROLLER);

  // End of Outputs for SubSystem: '<S2>/ErrorCode46'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode47'

  // Inport: '<Root>/state_KeylessPanel'
  MX_Gtwy_Control_ErrorCode(state_KeylessPanel, &rtb_Sum_gq5g, FN_KEYLESS_PANEL);

  // End of Outputs for SubSystem: '<S2>/ErrorCode47'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode48'

  // Inport: '<Root>/state_DeluxeG5'
  MX_Gtwy_Control_ErrorCode(state_DeluxeG5, &rtb_Sum_cu4h, FN_DELUXE_PANEL_G5);

  // End of Outputs for SubSystem: '<S2>/ErrorCode48'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode49'

  // Inport: '<Root>/state_ConsoleTest'
  MX_Gtwy_Control_ErrorCode(state_ConsoleTest, &rtb_Sum_b3n3, FN_CONSOLE_SENSOR);

  // End of Outputs for SubSystem: '<S2>/ErrorCode49'

  // Chart: '<S2>/Throttle Cal State' incorporates:
  //   Inport: '<Root>/flag_InitEERead'

  // Gateway: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
  // During: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c41_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c41_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
    // Transition: '<S69>:4'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c41_MX_Gtwy_Control =
      MX_Gtwy_Control_IN_Wait_anea;

    // Entry 'Wait': '<S69>:1'
    MX_Gtwy_Control_B.state_ThrottleCal = NORMAL;
  } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_c41_MX_Gtwy_Control ==
             MX_Gtwy_Control_IN_Ready) {
    // During 'Ready': '<S69>:2'
    MX_Gtwy_Control_B.state_ThrottleCal = eeMirror.ee_ThrottleCalState;
  } else {
    // During 'Wait': '<S69>:1'
    if (flag_InitEERead && (CONSTANT_DATA->CAN_THROTTLE_FUNCTION !=
                            NON_FUNCTIONAL)) {
      // Transition: '<S69>:3'
      MX_Gtwy_Control_DWork.bitsForTID0.is_c41_MX_Gtwy_Control =
        MX_Gtwy_Control_IN_Ready;

      // Entry 'Ready': '<S69>:2'
      MX_Gtwy_Control_B.state_ThrottleCal = eeMirror.ee_ThrottleCalState;
    }
  }

  // End of Chart: '<S2>/Throttle Cal State'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode32'
  MX_Gtwy_Control_ErrorCode(MX_Gtwy_Control_B.state_ThrottleCal, &rtb_Sum_ijqy,
    FN_THROTTLE_CONTROLLER);

  // End of Outputs for SubSystem: '<S2>/ErrorCode32'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode'

  // RateTransition: '<S2>/Rate Transition22'
  MX_Gtwy_Control_ErrorCode(state_VBattery, &rtb_Sum_no2y, FN_BATTERY_VOLTAGE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode1'

  // RateTransition: '<S2>/Rate Transition1'
  MX_Gtwy_Control_ErrorCode(state_Alternator, &rtb_Sum_kqg5,
    FN_ALTERNATOR_VOLTAGE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode1'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode2'

  // RateTransition: '<S2>/Rate Transition2'
  MX_Gtwy_Control_ErrorCode(state_SensorSupply1, &rtb_Sum_nu4k,
    FN_SENSOR_SUPPLY_1);

  // End of Outputs for SubSystem: '<S2>/ErrorCode2'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode3'

  // RateTransition: '<S2>/Rate Transition3'
  MX_Gtwy_Control_ErrorCode(state_SensorSupply2, &rtb_Sum_eumg,
    FN_SENSOR_SUPPLY_2);

  // End of Outputs for SubSystem: '<S2>/ErrorCode3'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode4'
  MX_Gtwy_Control_ErrorCode(state_Key, &rtb_Sum_h1zs, FN_KEY_SWITCH);

  // End of Outputs for SubSystem: '<S2>/ErrorCode4'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode5'
  MX_Gtwy_Control_ErrorCode(state_Console, &rtb_Sum_nexe, FN_CONSOLE_SENSOR);

  // End of Outputs for SubSystem: '<S2>/ErrorCode5'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode6'
  MX_Gtwy_Control_ErrorCode(state_AirFilter, &rtb_Sum_e3ul, FN_AIR_FILTER);

  // End of Outputs for SubSystem: '<S2>/ErrorCode6'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode7'

  // RateTransition: '<S2>/Rate Transition5'
  MX_Gtwy_Control_ErrorCode(state_HCFilter1, &rtb_Sum_jwvr, FN_IMPLEMENT_FILTER);

  // End of Outputs for SubSystem: '<S2>/ErrorCode7'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode8'
  MX_Gtwy_Control_ErrorCode(state_EngineSpeed, &rtb_Sum_acwp, FN_ENGINE_SPEED);

  // End of Outputs for SubSystem: '<S2>/ErrorCode8'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode9'

  // RateTransition: '<S2>/Rate Transition7'
  MX_Gtwy_Control_ErrorCode(state_ECT, &rtb_Sum_ott5,
    FN_ENGINE_COOLANT_TEMPERATURE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode9'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode10'

  // RateTransition: '<S2>/Rate Transition8'
  MX_Gtwy_Control_ErrorCode(state_HOT, &rtb_Sum_n0s3,
    FN_HYDRAULIC_OIL_TEMPERATURE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode10'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode11'

  // RateTransition: '<S2>/Rate Transition9'
  MX_Gtwy_Control_ErrorCode(state_EOP, &rtb_Sum_cu42, FN_ENGINE_OIL_PRESSURE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode11'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode12'

  // RateTransition: '<S2>/Rate Transition10'
  MX_Gtwy_Control_ErrorCode(state_FuelLevel, &rtb_Sum_kxlz, FN_FUEL_LEVEL);

  // End of Outputs for SubSystem: '<S2>/ErrorCode12'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode13'

  // RateTransition: '<S2>/Rate Transition24'
  MX_Gtwy_Control_ErrorCode(state_ThrottlePrimary, &rtb_Sum_lhp5,
    FN_THROTTLE_PRIMARY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode13'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode57'
  MX_Gtwy_Control_ErrorCode(state_AuxPot, &rtb_Sum_grfl, FN_AUX_CONTROL);

  // End of Outputs for SubSystem: '<S2>/ErrorCode57'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode18'

  // RateTransition: '<S2>/Rate Transition6'
  MX_Gtwy_Control_ErrorCode(state_LoadMoment, &rtb_Sum_gefh, FN_LOAD_MOMENT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode18'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode19'
  MX_Gtwy_Control_ErrorCode(state_OffsetPot, &rtb_Sum_j4fq, FN_OFFSET_CONTROL);

  // End of Outputs for SubSystem: '<S2>/ErrorCode19'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode20'
  MX_Gtwy_Control_ErrorCode(state_LoadSense, &rtb_Sum_iovg, FN_LOAD_SENSE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode20'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode15'

  // RateTransition: '<S2>/Rate Transition13'
  MX_Gtwy_Control_ErrorCode(state_FuelTemp, &rtb_Sum_cplh, FN_FUEL_TEMP);

  // End of Outputs for SubSystem: '<S2>/ErrorCode15'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode61'
  MX_Gtwy_Control_ErrorCode(state_RightPot, &rtb_Sum_cubh, FN_RIGHT_CONTROL);

  // End of Outputs for SubSystem: '<S2>/ErrorCode61'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode60'
  MX_Gtwy_Control_ErrorCode(state_LeftPot, &rtb_Sum_kkgb, FN_LEFT_CONTROL);

  // End of Outputs for SubSystem: '<S2>/ErrorCode60'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode21'

  // RateTransition: '<S2>/Rate Transition12'
  MX_Gtwy_Control_ErrorCode(state_LightsOutput, &rtb_Sum_owp0,
    FN_FRONT_LIGHT_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode21'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode25'
  MX_Gtwy_Control_ErrorCode(state_StarterOutput, &rtb_Sum_ienz,
    FN_STARTER_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode25'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode26'
  MX_Gtwy_Control_ErrorCode(state_StarterRelay, &rtb_Sum_dwgi, FN_STARTER_RELAY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode26'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode27'
  MX_Gtwy_Control_ErrorCode(state_FuelPriOutput, &rtb_Sum_pj43,
    FN_FUEL_PRIMARY_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode27'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode24'
  MX_Gtwy_Control_ErrorCode(state_FuelPriRelay, &rtb_Sum_h3n3,
    FN_FUEL_PRIMARY_RELAY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode24'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode29'

  // RateTransition: '<S2>/Rate Transition18'
  MX_Gtwy_Control_ErrorCode(state_GlowPlugOutput, &rtb_Sum_c3yn,
    FN_GLOW_PLUG_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode29'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode30'

  // RateTransition: '<S2>/Rate Transition19'
  MX_Gtwy_Control_ErrorCode(state_GlowPlugRelay, &rtb_Sum_oxyi,
    FN_GLOW_PLUG_RELAY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode30'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode31'
  MX_Gtwy_Control_ErrorCode(state_FuelSec, &rtb_Sum_kgcr,
    FN_FUEL_SECONDARY_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode31'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode17'
  MX_Gtwy_Control_ErrorCode(state_HydEnable, &rtb_Sum_iwlw, FN_HYD_ENABLE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode17'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode70'
  MX_Gtwy_Control_ErrorCode(state_SwitchedPwrOutput, &rtb_Sum_bf24,
    FN_SWITCHED_POWER_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode70'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode34'
  MX_Gtwy_Control_ErrorCode(state_SwitchedPwrRelay, &rtb_Sum_em3o,
    FN_SWITCHED_POWER_RELAY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode34'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode35'
  MX_Gtwy_Control_ErrorCode(state_TwoSpeed, &rtb_Sum_cwjn, FN_TWO_SPEED);

  // End of Outputs for SubSystem: '<S2>/ErrorCode35'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode36'

  // RateTransition: '<S2>/Rate Transition11'
  MX_Gtwy_Control_ErrorCode(state_HydExchange, &rtb_Sum_hhj0, FN_HYD_EXCHANGE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode36'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode37'
  MX_Gtwy_Control_ErrorCode(state_ECUHold, &rtb_Sum_dqv5, FN_ECU_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode37'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode38'
  MX_Gtwy_Control_ErrorCode(state_HVACOutput, &rtb_Sum_edgn, FN_HVAC_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode38'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode39'
  MX_Gtwy_Control_ErrorCode(state_DumpValve, &rtb_Sum_bvfs, FN_DUMP_VALVE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode39'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode55'
  MX_Gtwy_Control_ErrorCode(state_AuxBase, &rtb_Sum_m54o, FN_AUX_BASE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode55'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode41'
  MX_Gtwy_Control_ErrorCode(state_AuxRod, &rtb_Sum_bzdq, FN_AUX_ROD);

  // End of Outputs for SubSystem: '<S2>/ErrorCode41'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode42'
  MX_Gtwy_Control_ErrorCode(state_OffsetBase, &rtb_Sum_cms4, FN_OFFSET_BASE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode42'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode43'
  MX_Gtwy_Control_ErrorCode(state_OffsetRod, &rtb_Sum_kid3, FN_OFFSET_ROD);

  // End of Outputs for SubSystem: '<S2>/ErrorCode43'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode14'
  MX_Gtwy_Control_ErrorCode(state_HydBypass, &rtb_Sum_obdd, FN_HYD_BYPASS);

  // End of Outputs for SubSystem: '<S2>/ErrorCode14'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode23'

  // RateTransition: '<S2>/Rate Transition14'
  MX_Gtwy_Control_ErrorCode(state_LightsRelay, &rtb_Sum_i42b,
    FN_FRONT_LIGHT_RELAY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode23'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode16'

  // RateTransition: '<S2>/Rate Transition16'
  MX_Gtwy_Control_ErrorCode(state_PBValveOutput, &rtb_Sum_nosu,
    FN_PBVALVE_OUTPUT);

  // End of Outputs for SubSystem: '<S2>/ErrorCode16'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode22'

  // RateTransition: '<S2>/Rate Transition20'
  MX_Gtwy_Control_ErrorCode(state_PBValveRelay, &rtb_Sum_klmp, FN_PBVALVE_RELAY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode22'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode28'
  MX_Gtwy_Control_ErrorCode(state_Diverter, &rtb_Sum_ot1k, FN_DIVERTER);

  // End of Outputs for SubSystem: '<S2>/ErrorCode28'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode50'
  MX_Gtwy_Control_ErrorCode(state_CommSecondary, &rtb_Sum_ijdq, FN_SECONDARY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode50'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode51'
  MX_Gtwy_Control_ErrorCode(state_CommECU, &rtb_Sum_nw3e, FN_ECU_FUNCTION);

  // End of Outputs for SubSystem: '<S2>/ErrorCode51'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode32_2'
  MX_Gtwy_Control_ErrorCode(state_CommThrottle, &rtb_Sum_dauf,
    FN_THROTTLE_CONTROLLER);

  // End of Outputs for SubSystem: '<S2>/ErrorCode32_2'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode54'
  MX_Gtwy_Control_ErrorCode(state_EngineSpeedDerate, &rtb_Sum_fy5t,
    FN_ENGINE_SPEED_DERATE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode54'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode32_3'

  // RateTransition: '<S2>/Rate Transition15' incorporates:
  //   Outport: '<Root>/state_CANThrottle'

  MX_Gtwy_Control_ErrorCode(MX_Gtwy_Control_Y.state_CANThrottle, &rtb_Sum_bkpw,
    FN_THROTTLE_CONTROLLER);

  // End of Outputs for SubSystem: '<S2>/ErrorCode32_3'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode40'
  MX_Gtwy_Control_ErrorCode(state_HPMatch, &rtb_Sum_mm3o, FN_HP_MATCH);

  // End of Outputs for SubSystem: '<S2>/ErrorCode40'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode58'
  MX_Gtwy_Control_ErrorCode(state_CommStdPanel, &rtb_Sum_ktbw,
    FN_STANDARD_DISPLAY_PANEL);

  // End of Outputs for SubSystem: '<S2>/ErrorCode58'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode45'
  MX_Gtwy_Control_ErrorCode(state_CommJogShuttle, &rtb_Sum_e2cx, FN_JOG_SHUTTLE);

  // End of Outputs for SubSystem: '<S2>/ErrorCode45'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode33'
  MX_Gtwy_Control_ErrorCode(state_CommDeluxeG55, &rtb_Sum_eo4v,
    FN_DELUXE_PANEL_G5);

  // End of Outputs for SubSystem: '<S2>/ErrorCode33'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode44'
  MX_Gtwy_Control_ErrorCode(state_CommKeylessEntry, &rtb_Sum_guqg,
    FN_KEYLESS_ENTRY);

  // End of Outputs for SubSystem: '<S2>/ErrorCode44'

  // Outputs for Atomic SubSystem: '<S2>/ErrorCode63'
  MX_Gtwy_Control_ErrorCode(state_TurboPrime, &rtb_Sum_fahl, FN_TURBO_PRIME);

  // End of Outputs for SubSystem: '<S2>/ErrorCode63'

  // Outport: '<Root>/Error_Codes'
  MX_Gtwy_Control_Y.Error_Codes[0] = rtb_Sum_prxc;
  MX_Gtwy_Control_Y.Error_Codes[1] = rtb_Sum_gq5g;
  MX_Gtwy_Control_Y.Error_Codes[2] = rtb_Sum_cu4h;
  MX_Gtwy_Control_Y.Error_Codes[3] = rtb_Sum_b3n3;
  MX_Gtwy_Control_Y.Error_Codes[4] = rtb_Sum_ijqy;
  MX_Gtwy_Control_Y.Error_Codes[5] = rtb_Sum_no2y;
  MX_Gtwy_Control_Y.Error_Codes[6] = rtb_Sum_kqg5;
  MX_Gtwy_Control_Y.Error_Codes[7] = rtb_Sum_nu4k;
  MX_Gtwy_Control_Y.Error_Codes[8] = rtb_Sum_eumg;
  MX_Gtwy_Control_Y.Error_Codes[9] = rtb_Sum_h1zs;
  MX_Gtwy_Control_Y.Error_Codes[10] = rtb_Sum_nexe;
  MX_Gtwy_Control_Y.Error_Codes[11] = rtb_Sum_e3ul;
  MX_Gtwy_Control_Y.Error_Codes[12] = rtb_Sum_jwvr;
  MX_Gtwy_Control_Y.Error_Codes[13] = rtb_Sum_acwp;
  MX_Gtwy_Control_Y.Error_Codes[14] = rtb_Sum_ott5;
  MX_Gtwy_Control_Y.Error_Codes[15] = rtb_Sum_n0s3;
  MX_Gtwy_Control_Y.Error_Codes[16] = rtb_Sum_cu42;
  MX_Gtwy_Control_Y.Error_Codes[17] = rtb_Sum_kxlz;
  MX_Gtwy_Control_Y.Error_Codes[18] = rtb_Sum_lhp5;
  MX_Gtwy_Control_Y.Error_Codes[19] = rtb_Sum_grfl;
  MX_Gtwy_Control_Y.Error_Codes[20] = rtb_Sum_gefh;
  MX_Gtwy_Control_Y.Error_Codes[21] = rtb_Sum_j4fq;
  MX_Gtwy_Control_Y.Error_Codes[22] = rtb_Sum_iovg;
  MX_Gtwy_Control_Y.Error_Codes[23] = rtb_Sum_cplh;
  MX_Gtwy_Control_Y.Error_Codes[24] = rtb_Sum_cubh;
  MX_Gtwy_Control_Y.Error_Codes[25] = rtb_Sum_kkgb;
  MX_Gtwy_Control_Y.Error_Codes[26] = rtb_Sum_owp0;
  MX_Gtwy_Control_Y.Error_Codes[27] = rtb_Sum_ienz;
  MX_Gtwy_Control_Y.Error_Codes[28] = rtb_Sum_dwgi;
  MX_Gtwy_Control_Y.Error_Codes[29] = rtb_Sum_pj43;
  MX_Gtwy_Control_Y.Error_Codes[30] = rtb_Sum_h3n3;
  MX_Gtwy_Control_Y.Error_Codes[31] = rtb_Sum_c3yn;
  MX_Gtwy_Control_Y.Error_Codes[32] = rtb_Sum_oxyi;
  MX_Gtwy_Control_Y.Error_Codes[33] = rtb_Sum_kgcr;
  MX_Gtwy_Control_Y.Error_Codes[34] = rtb_Sum_iwlw;
  MX_Gtwy_Control_Y.Error_Codes[35] = rtb_Sum_bf24;
  MX_Gtwy_Control_Y.Error_Codes[36] = rtb_Sum_em3o;
  MX_Gtwy_Control_Y.Error_Codes[37] = rtb_Sum_cwjn;
  MX_Gtwy_Control_Y.Error_Codes[38] = rtb_Sum_hhj0;
  MX_Gtwy_Control_Y.Error_Codes[39] = rtb_Sum_dqv5;
  MX_Gtwy_Control_Y.Error_Codes[40] = rtb_Sum_edgn;
  MX_Gtwy_Control_Y.Error_Codes[41] = rtb_Sum_bvfs;
  MX_Gtwy_Control_Y.Error_Codes[42] = rtb_Sum_m54o;
  MX_Gtwy_Control_Y.Error_Codes[43] = rtb_Sum_bzdq;
  MX_Gtwy_Control_Y.Error_Codes[44] = rtb_Sum_cms4;
  MX_Gtwy_Control_Y.Error_Codes[45] = rtb_Sum_kid3;
  MX_Gtwy_Control_Y.Error_Codes[46] = rtb_Sum_obdd;
  MX_Gtwy_Control_Y.Error_Codes[47] = rtb_Sum_i42b;
  MX_Gtwy_Control_Y.Error_Codes[48] = rtb_Sum_nosu;
  MX_Gtwy_Control_Y.Error_Codes[49] = rtb_Sum_klmp;
  MX_Gtwy_Control_Y.Error_Codes[50] = rtb_Sum_ot1k;
  MX_Gtwy_Control_Y.Error_Codes[51] = rtb_Sum_ijdq;
  MX_Gtwy_Control_Y.Error_Codes[52] = rtb_Sum_nw3e;
  MX_Gtwy_Control_Y.Error_Codes[53] = rtb_Sum_dauf;
  MX_Gtwy_Control_Y.Error_Codes[54] = rtb_Sum_fy5t;
  MX_Gtwy_Control_Y.Error_Codes[55] = rtb_Sum_bkpw;
  MX_Gtwy_Control_Y.Error_Codes[56] = rtb_Sum_mm3o;
  MX_Gtwy_Control_Y.Error_Codes[57] = rtb_Sum_ktbw;
  MX_Gtwy_Control_Y.Error_Codes[58] = rtb_Sum_e2cx;
  MX_Gtwy_Control_Y.Error_Codes[59] = rtb_Sum_eo4v;
  MX_Gtwy_Control_Y.Error_Codes[60] = rtb_Sum_guqg;
  MX_Gtwy_Control_Y.Error_Codes[61] = rtb_Sum_fahl;

  // RateTransition: '<S6>/Rate Transition25' incorporates:
  //   Inport: '<Root>/fdbk_CANThrottle'

  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    MX_Gtwy_Control_B.RateTransition25 = fdbk_CANThrottle;
  }

  // End of RateTransition: '<S6>/Rate Transition25'

  // Update for UnitDelay: '<S6>/Unit Delay7'
  MX_Gtwy_Control_DWork.UnitDelay7_DSTATE_oa3i =
    MX_Gtwy_Control_B.state_CommECU_njci;
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    // Update for UnitDelay: '<S3>/Unit Delay6'
    MX_Gtwy_Control_DWork.UnitDelay6_DSTATE = calc_VBattery;

    // Update for UnitDelay: '<S3>/Unit Delay7'
    MX_Gtwy_Control_DWork.UnitDelay7_DSTATE = calc_VBattery;
  }

  // Update for UnitDelay: '<S3>/Unit Delay2'
  MX_Gtwy_Control_DWork.UnitDelay2_DSTATE_he0j = state_Engine;

  // Update for UnitDelay: '<S3>/Unit Delay3'
  MX_Gtwy_Control_DWork.UnitDelay3_DSTATE = flt_EngineSpeed;

  // Update for UnitDelay: '<S3>/Unit Delay12'
  MX_Gtwy_Control_DWork.UnitDelay12_DSTATE = state_Engine;

  // Update for UnitDelay: '<S3>/Unit Delay11'
  MX_Gtwy_Control_DWork.UnitDelay11_DSTATE = state_Engine;

  // Update for UnitDelay: '<S6>/Unit Delay5'
  MX_Gtwy_Control_DWork.UnitDelay5_DSTATE = state_KSLock;

  // Update for UnitDelay: '<S6>/Unit Delay4'
  MX_Gtwy_Control_DWork.UnitDelay4_DSTATE = state_CommDeluxeG55;

  // Update for UnitDelay: '<S3>/Unit Delay8'
  MX_Gtwy_Control_DWork.UnitDelay8_DSTATE = state_Engine;

  // Update for UnitDelay: '<S3>/Unit Delay5'
  MX_Gtwy_Control_DWork.UnitDelay5_DSTATE_nojo = state_Engine;

  // Update for UnitDelay: '<S6>/Unit Delay6'
  MX_Gtwy_Control_DWork.UnitDelay6_DSTATE_gv5d = state_EngineSpeedDerate;

  // Update for UnitDelay: '<S6>/Unit Delay2'
  MX_Gtwy_Control_DWork.UnitDelay2_DSTATE_bf1p = state_CommStdPanel;

  // Update for UnitDelay: '<S6>/Unit Delay3'
  MX_Gtwy_Control_DWork.UnitDelay3_DSTATE_nlci = state_CommDeluxeG55;

  // Update for UnitDelay: '<S4>/Unit Delay9'
  MX_Gtwy_Control_DWork.UnitDelay9_DSTATE = state_StarterOutput;

  // Update for UnitDelay: '<S4>/Unit Delay10'
  MX_Gtwy_Control_DWork.UnitDelay10_DSTATE = state_StarterRelay;

  // Update for UnitDelay: '<S3>/Unit Delay1'
  MX_Gtwy_Control_DWork.UnitDelay1_DSTATE_hggw = state_AuxEnable;

  // Update for UnitDelay: '<S3>/Unit Delay4'
  MX_Gtwy_Control_DWork.UnitDelay4_DSTATE_cldf = aux_Flow;

  // Update for UnitDelay: '<S102>/Delay Input1' incorporates:
  //   Inport: '<Root>/cmd_AuxEnable_ST'

  MX_Gtwy_Control_DWork.DelayInput1_DSTATE = cmd_AuxEnable_ST;

  // Update for UnitDelay: '<S101>/Delay Input1' incorporates:
  //   Inport: '<Root>/cmd_AuxEnable_ACD'

  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_e0ev = cmd_AuxEnable_ACD;

  // Update for UnitDelay: '<S3>/Unit Delay17'
  MX_Gtwy_Control_DWork.UnitDelay17_DSTATE = state_AuxEnable;

  // Update for UnitDelay: '<S3>/Unit Delay9'
  MX_Gtwy_Control_DWork.UnitDelay9_DSTATE_jr45 = aux_Flow;

  // Update for UnitDelay: '<S3>/Unit Delay15'
  MX_Gtwy_Control_DWork.UnitDelay15_DSTATE = check_RightNeutral;

  // Update for UnitDelay: '<S3>/Unit Delay14'
  MX_Gtwy_Control_DWork.UnitDelay14_DSTATE = aux_Inhibit;

  // Update for UnitDelay: '<S3>/Unit Delay10'
  MX_Gtwy_Control_DWork.UnitDelay10_DSTATE_mnd3 = mode_RightControl;

  // Update for UnitDelay: '<S3>/Unit Delay13'
  MX_Gtwy_Control_DWork.UnitDelay13_DSTATE = check_LeftNeutral;

  // Update for UnitDelay: '<S6>/Unit Delay1'
  MX_Gtwy_Control_DWork.UnitDelay1_DSTATE_l0j2 = state_Engine;

  // Update for UnitDelay: '<S6>/Unit Delay8'
  MX_Gtwy_Control_DWork.UnitDelay8_DSTATE_lznp = state_AuxEnable;

  // Update for UnitDelay: '<S6>/Unit Delay9'
  MX_Gtwy_Control_DWork.UnitDelay9_DSTATE_lfbs = state_Diverter;
  if (MX_Gtwy_Control_M->Timing.TaskCounters.TID[1] == 0) {
    // Update for Atomic SubSystem: '<S6>/CAN_Throttle'
    MX_Gtwy_Con_CAN_Throttle_Update();

    // End of Update for SubSystem: '<S6>/CAN_Throttle'

    // Update for UnitDelay: '<S685>/Delay Input1'
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_fsxx =
      MX_Gtwy_Control_B.RateTransition5_mczo;

    // Update for UnitDelay: '<S686>/Delay Input1'
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_aorm =
      MX_Gtwy_Control_B.RateTransition6_h5c1;

    // Update for UnitDelay: '<S687>/Delay Input1'
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_bihv =
      MX_Gtwy_Control_B.RateTransition7_obul;

    // Update for UnitDelay: '<S688>/Delay Input1'
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_f0dm = dout_GlowPlug;

    // Update for UnitDelay: '<S4>/Unit Delay5'
    MX_Gtwy_Control_DWork.UnitDelay5_DSTATE_h0ih = timer_FuelResolution;
  }

  // Update for UnitDelay: '<S4>/Unit Delay3'
  MX_Gtwy_Control_DWork.UnitDelay3_DSTATE_lqze = dout_FuelPri;
  rate_scheduler();
}

// Model initialize function
void MX_Gtwy_Control_initialize(void)
{
  // Registration code

  // initialize real-time model
  (void) memset((void *)MX_Gtwy_Control_M, 0,
                sizeof(RT_MODEL_MX_Gtwy_Control));

  // block I/O
  (void) memset(((void *) &MX_Gtwy_Control_B), 0,
                sizeof(BlockIO_MX_Gtwy_Control));

  // exported global signals
  testOut = 0.0;
  position_LeftPot = 0U;
  cmd_Throttle = 0U;
  PWD_NumberSelected = 0U;
  targetSpeed = 0U;
  rpm_Derate = 0U;
  torque_Derate = 0U;
  level_StarterAutomatedEngage = 0U;
  level_StarterAutomatedDisengage = 0U;
  time_StarterAutomated = 0U;
  count_GlowPlug = 0U;
  pos_ThrottlePrimary_In = 0U;
  rm_ThrottlePrimary = 0U;
  pos_ThrottlePrimary = 0U;
  percent_Throttle = 0U;
  rm_OffsetPot = 0U;
  position_OffsetPot = 0U;
  psi_LoadSense = 0U;
  bar_LoadMoment = 0U;
  gau_HOT = 0U;
  flt_HOT = 0U;
  rm_HOT = 0U;
  rm_FuelLevel = 0U;
  gau_FuelLevel = 0U;
  calc_EngineSpeed = 0U;
  flt_EngineSpeed = 0U;
  flt_EOP = 0U;
  gau_EOP = 0U;
  level_ShutdownEOP = 0U;
  level_WarningEOP = 0U;
  rm_EOP = 0U;
  rm_RightPot = 0U;
  position_RightPot = 0U;
  rm_LeftPot = 0U;
  gau_ECT = 0U;
  flt_ECT = 0U;
  rm_ECT = 0U;
  rm_Console = 0U;
  position_AuxPot = 0U;
  rm_AuxPot = 0U;
  count_AFPlugged = 0U;
  calc_VBattery = 0U;
  calcFlt_VBattery = 0U;
  bar_LoadSense = 0U;
  calc_ifbk_OffsetRod = 0U;
  calc_ifbk_OffsetBase = 0U;
  calc_ifbk_DumpValve = 0U;
  calc_ifbk_AuxRod = 0U;
  calc_ifbk_AuxBase = 0U;
  duty_TwoSpeed = 0U;
  hs_OffsetBase = 0U;
  hs_OffsetRod = 0U;
  hs_HydEnable = 0U;
  hs_HydBypass = 0U;
  duty_FuelSec = 0U;
  hs_DumpValve = 0U;
  hs_Diverter = 0U;
  hs_AuxBase = 0U;
  hs_AuxRod = 0U;
  errorCC_OffsetBase = 0;
  errorCC_OffsetRod = 0;
  errorCC_DumpValve = 0;
  errorCC_AuxBase = 0;
  errorCC_AuxRod = 0;
  percent_Derate = 0;
  state_CommECU = 0U;
  state_LoadMoment = 0U;
  state_TC = 0U;
  state_MachineLock = 0U;
  state_KSLock = 0U;
  state_KSPassword = 0U;
  pwd_Position = 0U;
  KSS_Display = 0U;
  state_KeylessEntryPowerHold = 0U;
  state_Engine = 0U;
  state_TurboPrime = 0U;
  cmdInverter = 0U;
  disp_LeftControl = 0U;
  disp_RightControl = 0U;
  mode_LeftControl = 0U;
  mode_RightControl = 0U;
  state_EngineSpeedDerate = 0U;
  state_HPMatch = 0U;
  state_CommSecondary = 0U;
  state_CommThrottle = 0U;
  state_CommStdPanel = 0U;
  state_CommJogShuttle = 0U;
  state_CommDeluxeG55 = 0U;
  state_CommKeylessEntry = 0U;
  state_CANThrottleCalDiag = 0U;
  state_AuxEnable = 0U;
  state_Detent = 0U;
  aux_Flow = 0U;
  state_DetentEnable = 0U;
  cmd_AuxRelease = 0U;
  state_AuxRelease = 0U;
  cmd_AutoIdle = 0U;
  state_Idle = 0U;
  state_AutoIdleEnable = 0U;
  icon_Rabbit = 0U;
  icon_Service = 0U;
  icon_Seatbelt = 0U;
  icon_RPM = 0U;
  icon_Lockout = 0U;
  icon_JobClock2 = 0U;
  icon_JobClock1 = 0U;
  icon_Hydraulic = 0U;
  icon_Hourmeter = 0U;
  icon_GlowPlug = 0U;
  icon_General = 0U;
  icon_Engine = 0U;
  icon_ECT = 0U;
  icon_Battery = 0U;
  icon_Aux = 0U;
  state_InfoPrimary = 0U;
  state_InfoButton = 0U;
  state_InfoSecondary = 0U;
  state_RightButton = 0U;
  state_LeftButton = 0U;
  enable_RightLeft = 0U;
  level_DisplayBacklight = 0U;
  level_IconBacklight = 0U;
  ind_Aux2 = 0U;
  ind_Aux1 = 0U;
  ind_AutoIdle = 0U;
  state_TwoSpeed = 0U;
  state_TwoSpeedIcon = 0U;
  state_SwitchedPwrOutput = 0U;
  state_SwitchedPwrRelay = 0U;
  state_StarterOutput = 0U;
  state_StarterRelay = 0U;
  state_PBValveOutput = 0U;
  state_PBValveRelay = 0U;
  state_OffsetBase = 0U;
  state_OffsetRod = 0U;
  state_LightsOutput = 0U;
  state_LightsRelay = 0U;
  state_HydExchange = 0U;
  state_HydEnable = 0U;
  state_HydBypass = 0U;
  state_GlowPlugOutput = 0U;
  state_GlowPlugRelay = 0U;
  timer_FuelResolution = 0U;
  error_FuelSec = 0U;
  state_FuelSec = 0U;
  state_ECUHold = 0U;
  state_HVACOutput = 0U;
  state_FuelPriOutput = 0U;
  state_FuelPriRelay = 0U;
  state_DumpValve = 0U;
  state_Diverter = 0U;
  state_AuxBase = 0U;
  state_AuxRod = 0U;
  state_VBattery = 0U;
  state_Alternator = 0U;
  state_ThrottlePrimary = 0U;
  derate_Throttle = 0U;
  state_SensorSupply2 = 0U;
  state_SensorSupply1 = 0U;
  state_OffsetPot = 0U;
  volts_LoadSense = 0U;
  state_LoadSense = 0U;
  volts_LoadMoment = 0U;
  state_Key = 0U;
  state_HOT = 0U;
  state_HCFilter1 = 0U;
  state_FuelTemp = 0U;
  state_FuelLevel = 0U;
  state_EngineStart = 0U;
  state_EOT = 0U;
  gain_EngineSpeed = 0U;
  state_EngineSpeed = 0U;
  state_EcoMode = 0U;
  state_EOP = 0U;
  state_RightPot = 0U;
  state_LeftPot = 0U;
  state_ECT = 0U;
  state_Console = 0U;
  state_PanelButtons = 0U;
  state_AuxPot = 0U;
  aux_DebounceButton = 0U;
  aux_DetentHold = 0U;
  state_AirFilter = 0U;
  mode_ControlChange = false;
  cabKeyDetect = false;
  ind_KeylessEntryLock = false;
  ind_KeylessEntryUnlock = false;
  flag_AuxEnableFlash = false;
  flag_AuxModeReminder = false;
  check_LeftNeutral = false;
  check_RightNeutral = false;
  aux_Inhibit = false;
  icon_Fuel = false;
  ind_Lock = false;
  ind_Unlock = false;
  ind_Light1 = false;
  dout_SwitchedPwr = false;
  dout_Starter = false;
  dout_PBValve = false;
  ls_OffsetBase = false;
  ls_OffsetRod = false;
  dout_Lights = false;
  dout_HydExchange = false;
  ls_HydEnable = false;
  ls_HydBypass = false;
  dout_GlowPlug = false;
  dout_HVACOutput = false;
  dout_FuelPri = false;
  ls_DumpValve = false;
  cmd_Diverter = false;
  ls_Diverter = false;
  dout_Buzzer = false;
  ls_AuxBase = false;
  ls_AuxRod = false;
  outputSelect_HOT = false;
  outputSelect_EOP = false;
  button_AuxReleaseAck = false;
  button_AuxReleaseBack = false;
  button_AuxReleaseExit = false;
  button_Info = false;
  button_Lights = false;
  button_AutoIdle = false;
  button_Aux = false;

  // states (dwork)
  (void) memset((void *)&MX_Gtwy_Control_DWork, 0,
                sizeof(D_Work_MX_Gtwy_Control));

  // external outputs
  (void) memset((void *)&MX_Gtwy_Control_Y, 0,
                sizeof(ExternalOutputs_MX_Gtwy_Control));

  // SystemInitialize for Atomic SubSystem: '<S3>/SensorSupply1'
  MX_Gtwy_Cont_SensorSupply1_Init();

  // End of SystemInitialize for SubSystem: '<S3>/SensorSupply1'

  // SystemInitialize for Atomic SubSystem: '<S3>/SensorSupply2'
  MX_Gtwy_Cont_SensorSupply2_Init();

  // End of SystemInitialize for SubSystem: '<S3>/SensorSupply2'

  // SystemInitialize for Atomic SubSystem: '<S3>/EOP'
  MX_Gtwy_Control_EOP_Init();

  // End of SystemInitialize for SubSystem: '<S3>/EOP'

  // SystemInitialize for Atomic SubSystem: '<S3>/EngineSpeed'
  MX_Gtwy_Contro_EngineSpeed_Init();

  // End of SystemInitialize for SubSystem: '<S3>/EngineSpeed'

  // SystemInitialize for Atomic SubSystem: '<S3>/ECT'
  MX_Gtwy_Control_ECT_Init();

  // End of SystemInitialize for SubSystem: '<S3>/ECT'

  // SystemInitialize for Atomic SubSystem: '<S3>/HydOilTemp'
  MX_Gtwy_Control_HydOilTemp_Init();

  // End of SystemInitialize for SubSystem: '<S3>/HydOilTemp'

  // SystemInitialize for Atomic SubSystem: '<S6>/Machine_Lock'
  MX_Gtwy_Contr_Machine_Lock_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Machine_Lock'

  // SystemInitialize for Atomic SubSystem: '<S3>/Engine_Start'
  Engine_Start_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Engine_Start'

  // SystemInitialize for Atomic SubSystem: '<S3>/Key'
  MX_Gtwy_Control_Key_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Key'

  // SystemInitialize for Atomic SubSystem: '<S3>/Fuel_Temperature'
  MX_Gtwy_C_Fuel_Temperature_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Fuel_Temperature'

  // SystemInitialize for Atomic SubSystem: '<S3>/Console_Sensor'
  MX_Gtwy_Con_Console_Sensor_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Console_Sensor'

  // SystemInitialize for Atomic SubSystem: '<S6>/Engine'
  MX_Gtwy_Control_Engine_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Engine'

  // SystemInitialize for Atomic SubSystem: '<S3>/VBattery'
  MX_Gtwy_Control_VBattery_Init();

  // End of SystemInitialize for SubSystem: '<S3>/VBattery'

  // SystemInitialize for Atomic SubSystem: '<S3>/HCFilter1'
  MX_Gtwy_Control_HCFilter1_Init();

  // End of SystemInitialize for SubSystem: '<S3>/HCFilter1'

  // SystemInitialize for Atomic SubSystem: '<S3>/FuelLevel'
  MX_Gtwy_Control_FuelLevel_Init();

  // End of SystemInitialize for SubSystem: '<S3>/FuelLevel'

  // SystemInitialize for Atomic SubSystem: '<S4>/SwitchedPower'
  MX_Gtwy_Cont_SwitchedPower_Init();

  // End of SystemInitialize for SubSystem: '<S4>/SwitchedPower'

  // SystemInitialize for Atomic SubSystem: '<S4>/FuelSec_ECUHold'
  MX_Gtwy_Co_FuelSec_ECUHold_Init();

  // End of SystemInitialize for SubSystem: '<S4>/FuelSec_ECUHold'

  // SystemInitialize for Atomic SubSystem: '<S6>/Controller_State'
  MX_Gtwy_C_Controller_State_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Controller_State'

  // SystemInitialize for Atomic SubSystem: '<S3>/Buttons'
  MX_Gtwy_Control_Buttons_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Buttons'

  // SystemInitialize for Atomic SubSystem: '<S3>/Eco_Mode'
  MX_Gtwy_Control_Eco_Mode_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Eco_Mode'

  // SystemInitialize for Atomic SubSystem: '<S3>/Throttle'
  MX_Gtwy_Control_Throttle_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Throttle'

  // SystemInitialize for Atomic SubSystem: '<S3>/AirFilter'
  MX_Gtwy_Control_AirFilter_Init();

  // End of SystemInitialize for SubSystem: '<S3>/AirFilter'

  // SystemInitialize for Chart: '<S97>/Aux_Pot'
  MX_Gtwy_Control_DWork.temporalCounter_i1_j2wz = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c76_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c76_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_agec;
  aux_DebounceButton = 0U;
  aux_DetentHold = 0U;

  // SystemInitialize for Atomic SubSystem: '<S3>/Aux_Pot'
  MX_Gtwy_Control_Aux_Pot_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Aux_Pot'

  // SystemInitialize for Enabled SubSystem: '<S89>/Load_Moment_Switch'
  MX_Gtwy_Load_Moment_Switch_Init();

  // End of SystemInitialize for SubSystem: '<S89>/Load_Moment_Switch'

  // SystemInitialize for Atomic SubSystem: '<S89>/LP_Filter_Adj_Gain'
  MX_Gtwy_LP_Filter_Adj_Gain_Init(&MX_Gtwy_Control_B.Output_ahzv,
    &MX_Gtwy_Control_DWork.LP_Filter_Adj_Gain);

  // End of SystemInitialize for SubSystem: '<S89>/LP_Filter_Adj_Gain'

  // SystemInitialize for Enabled SubSystem: '<S89>/Load_Moment_Sensor'
  MX_Gtwy_Load_Moment_Sensor_Init();

  // End of SystemInitialize for SubSystem: '<S89>/Load_Moment_Sensor'

  // SystemInitialize for Atomic SubSystem: '<S4>/Hyd_Enable'
  MX_Gtwy_Control_Hyd_Enable_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Hyd_Enable'

  // SystemInitialize for Atomic SubSystem: '<S3>/Offset_Pot'
  MX_Gtwy_Control_Offset_Pot_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Offset_Pot'

  // SystemInitialize for Atomic SubSystem: '<S3>/Load_Sense'
  MX_Gtwy_Control_Load_Sense_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Load_Sense'

  // SystemInitialize for Atomic SubSystem: '<S3>/Engine_Oil_Temperature'
  MX__Engine_Oil_Temperature_Init();

  // End of SystemInitialize for SubSystem: '<S3>/Engine_Oil_Temperature'

  // SystemInitialize for Enabled SubSystem: '<S77>/Right Pot'
  MX_Gtwy_Control_RightPot_Init();

  // End of SystemInitialize for SubSystem: '<S77>/Right Pot'

  // SystemInitialize for Enabled SubSystem: '<S76>/Normal_Pot'
  MX_Gtwy_Control_Normal_Pot_Init();

  // End of SystemInitialize for SubSystem: '<S76>/Normal_Pot'

  // SystemInitialize for Atomic SubSystem: '<S6>/Keyless_Start'
  MX_Gtwy_Cont_Keyless_Start_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Keyless_Start'

  // SystemInitialize for Atomic SubSystem: '<S4>/GlowPlug'
  MX_Gtwy_Control_GlowPlug_Init();

  // End of SystemInitialize for SubSystem: '<S4>/GlowPlug'

  // SystemInitialize for Atomic SubSystem: '<S6>/EMEA Control Mode'
  MX_Gtwy_Co_EMEAControlMode_Init();

  // End of SystemInitialize for SubSystem: '<S6>/EMEA Control Mode'

  // SystemInitialize for Atomic SubSystem: '<S6>/Aux_Enable'
  MX_Gtwy_Control_Aux_Enable_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Aux_Enable'

  // SystemInitialize for Atomic SubSystem: '<S6>/AutoIdle'
  MX_Gtwy_Control_AutoIdle_Init();

  // End of SystemInitialize for SubSystem: '<S6>/AutoIdle'

  // SystemInitialize for Atomic SubSystem: '<S6>/Derate'
  MX_Gtwy_Control_Derate_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Derate'

  // SystemInitialize for Atomic SubSystem: '<S6>/CAN_Throttle'
  MX_Gtwy_Contr_CAN_Throttle_Init();

  // End of SystemInitialize for SubSystem: '<S6>/CAN_Throttle'

  // SystemInitialize for Atomic SubSystem: '<S6>/Throttle_Command'
  MX_Gtwy_C_Throttle_Command_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Throttle_Command'

  // SystemInitialize for Enabled SubSystem: '<S6>/Keyless_Entry'
  MX_Gtwy_Cont_Keyless_Entry_Init();

  // End of SystemInitialize for SubSystem: '<S6>/Keyless_Entry'

  // SystemInitialize for Atomic SubSystem: '<S6>/ElectricAutomation'
  MX_Gtwy_ElectricAutomation_Init();

  // End of SystemInitialize for SubSystem: '<S6>/ElectricAutomation'

  // SystemInitialize for Atomic SubSystem: '<S4>/Lights'
  MX_Gtwy_Control_Lights_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Lights'

  // SystemInitialize for Atomic SubSystem: '<S4>/FuelPri_HVAC'
  MX_Gtwy_Contr_FuelPri_HVAC_Init();

  // End of SystemInitialize for SubSystem: '<S4>/FuelPri_HVAC'

  // SystemInitialize for Atomic SubSystem: '<S4>/Starter'
  MX_Gtwy_Control_Starter_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Starter'

  // SystemInitialize for Atomic SubSystem: '<S4>/Fuel_Resolution_Timer'
  MX_G_Fuel_Resolution_Timer_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Fuel_Resolution_Timer'

  // SystemInitialize for Atomic SubSystem: '<S4>/Buzzer'
  MX_Gtwy_Control_Buzzer_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Buzzer'

  // SystemInitialize for Atomic SubSystem: '<S4>/Aux_Hydraulics'
  MX_Gtwy_Con_Aux_Hydraulics_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Aux_Hydraulics'

  // SystemInitialize for Atomic SubSystem: '<S4>/Diverter'
  MX_Gtwy_Control_Diverter_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Diverter'

  // SystemInitialize for Atomic SubSystem: '<S4>/Offset'
  MX_Gtwy_Control_Offset_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Offset'

  // SystemInitialize for Atomic SubSystem: '<S4>/Two_Speed'
  MX_Gtwy_Control_Two_Speed_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Two_Speed'

  // SystemInitialize for Atomic SubSystem: '<S4>/Hydraulic_Exchange'
  MX_Gtwy_Hydraulic_Exchange_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Hydraulic_Exchange'

  // SystemInitialize for Atomic SubSystem: '<S4>/Hyd_Bypass'
  MX_Gtwy_Control_Hyd_Bypass_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Hyd_Bypass'

  // SystemInitialize for Atomic SubSystem: '<S4>/Dump_Valve'
  MX_Gtwy_Control_Dump_Valve_Init();

  // End of SystemInitialize for SubSystem: '<S4>/Dump_Valve'

  // SystemInitialize for Atomic SubSystem: '<S4>/PB_Valve'
  MX_Gtwy_Control_PB_Valve_Init();

  // End of SystemInitialize for SubSystem: '<S4>/PB_Valve'

  // SystemInitialize for Atomic SubSystem: '<S5>/InformationDisplay'
  MX_Gtwy_InformationDisplay_Init();

  // End of SystemInitialize for SubSystem: '<S5>/InformationDisplay'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_BatteryIcon'
  MX_Gtwy_Co_mod_BatteryIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_BatteryIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_GlowPlugIcon'
  MX_Gtwy_C_mod_GlowPlugIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_GlowPlugIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_RPMIcon'
  MX_Gtwy_Contro_mod_RPMIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_RPMIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_SeatBeltIcon'
  MX_Gtwy_C_mod_SeatBeltIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_SeatBeltIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_LockoutIcon'
  MX_Gtwy_Co_mod_LockoutIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_LockoutIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_EngineIcon'
  MX_Gtwy_Con_mod_EngineIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_EngineIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_HydraulicIcon'
  MX_Gtwy__mod_HydraulicIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_HydraulicIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_ECTIcon'
  MX_Gtwy_Contro_mod_ECTIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_ECTIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_GeneralWarningIcon'
  MX__mod_GeneralWarningIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_GeneralWarningIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/FrontLight'
  MX_Gtwy_Control_FrontLight_Init();

  // End of SystemInitialize for SubSystem: '<S5>/FrontLight'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_FuelLevelIcon'
  MX_Gtwy__mod_FuelLevelIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_FuelLevelIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/Backlighting'
  MX_Gtwy_Contr_Backlighting_Init();

  // End of SystemInitialize for SubSystem: '<S5>/Backlighting'

  // SystemInitialize for Atomic SubSystem: '<S5>/mod_TwoSpeedIcon'
  MX_Gtwy_C_mod_TwoSpeedIcon_Init();

  // End of SystemInitialize for SubSystem: '<S5>/mod_TwoSpeedIcon'

  // SystemInitialize for Atomic SubSystem: '<S5>/Keyless_Indicators'
  MX_Gtwy_Keyless_Indicators_Init();

  // End of SystemInitialize for SubSystem: '<S5>/Keyless_Indicators'

  // SystemInitialize for Atomic SubSystem: '<S5>/Aux_Ind'
  MX_Gtwy_Control_Aux_Ind_Init();

  // End of SystemInitialize for SubSystem: '<S5>/Aux_Ind'

  // SystemInitialize for Atomic SubSystem: '<S5>/AutoIdle_Ind'
  MX_Gtwy_Contr_AutoIdle_Ind_Init();

  // End of SystemInitialize for SubSystem: '<S5>/AutoIdle_Ind'

  // SystemInitialize for Chart: '<S2>/Throttle Cal State'
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c41_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c41_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_agec;
}

//
//  [EOF]

