//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : MX_Gtwy_Control


#include "mod_System.h"

// Include model header file for global data
#include "MX_Gtwy_Control.h"
#include "MX_Gtwy_Control_private.h"

// Named constants for Chart: '<S635>/Auto_Idle'
#define MX_Gtwy_C_IN_NonFunctional_k5ri ((uint8_T)1U)
#define MX_Gtwy_Cont_IN_Deluxe_G55_dqoj ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Error       ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Normal_jadr ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Normal_jadrg ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Off_ltyw    ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Off_ltywd   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_On_fhbz     ((uint8_T)3U)
#define MX_Gtwy_Control_IN_On_fhbze    ((uint8_T)2U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_an2j ((uint8_T)0U)
#define MX_Gtwy__IN_NonFunctional_k5ri0 ((uint8_T)2U)

// Named constants for Chart: '<S636>/Auto_Idle'
#define MX_Gtwy_Cont_IN_Initialize_b3if ((uint8_T)5U)
#define MX_Gtwy_Contr_IN_Reset_Movement ((uint8_T)4U)
#define MX_Gtwy_Contro_IN_INACTIVE_p5he ((uint8_T)2U)
#define MX_Gtwy_Control_IN_ACTIVE_dc5j ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Armbar_Delay ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Change      ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Console_Up  ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Delay_hh0k  ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Idle        ((uint8_T)4U)
#define MX_Gtwy_Control_IN_Init_cr3r   ((uint8_T)2U)
#define MX_Gtwy_Control_IN_No_Change   ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Throttle    ((uint8_T)6U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_dkkf ((uint8_T)0U)
#define MX_Gtwy__IN_NON_FUNCTIONAL_aop1 ((uint8_T)3U)

// Named constants for Chart: '<S621>/Aux_Control'
#define IN_Inactive_Out_Of_Neutral_gquu ((uint8_T)4U)
#define MX_G_IN_Inactive_Out_Of_Neutral ((uint8_T)5U)
#define MX_Gtwy_C_IN_EMEA_CONTROLS_giio ((uint8_T)1U)
#define MX_Gtwy_C_IN_Standard_Flow_aw1n ((uint8_T)4U)
#define MX_Gtwy_C_IN_WAIT_FOR_AUX_PRESS ((uint8_T)3U)
#define MX_Gtwy_Co_event_disable_detent (1)
#define MX_Gtwy_Con_IN_Inactive_Latched ((uint8_T)1U)
#define MX_Gtwy_Con_IN_Medium_Flow_btkm ((uint8_T)3U)
#define MX_Gtwy_Cont_IN_Functional_jgxb ((uint8_T)3U)
#define MX_Gtwy_Cont_IN_NORMAL_CONTROLS ((uint8_T)2U)
#define MX_Gtwy_Contr_IN_Inactive_Fault ((uint8_T)4U)
#define MX_Gtwy_Contr_IN_Inactive_cs2c5 ((uint8_T)2U)
#define MX_Gtwy_Contr_IN_SIRIUS2_HIFLOW ((uint8_T)5U)
#define MX_Gtwy_Contr_event_disable_aux (0)
#define MX_Gtwy_Contro_IN_Active_Normal ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_Aux_Relief_G5 ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_Inactive_Temp ((uint8_T)2U)
#define MX_Gtwy_Contro_IN_Inactive_cs2c ((uint8_T)3U)
#define MX_Gtwy_Contro_IN_Low_Flow_m2d1 ((uint8_T)2U)
#define MX_Gtwy_Contro_IN_Standard_Flow ((uint8_T)3U)
#define MX_Gtwy_Control_CALL_EVENT_ivqv (-1)
#define MX_Gtwy_Control_IN_Ack         ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Active_nhnn ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Confirm     ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Detent_Base ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Detent_Rod  ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Disabled    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Enabled     ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Enabled_djid ((uint8_T)1U)
#define MX_Gtwy_Control_IN_High_Flow   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Low_Flow    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Medium_Flow ((uint8_T)2U)
#define MX_Gtwy_Control_IN_No_Detent   ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Not_Enabled ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Off_p5eh    ((uint8_T)2U)
#define MX_Gtwy_Control_IN_PHOENIX_K2  ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Release_Base ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Release_Rod ((uint8_T)4U)
#define MX_Gtwy_Control_IN_SIRIUS2     ((uint8_T)4U)
#define MX_Gtwy_Control_IN_Wait_dwz2   ((uint8_T)5U)
#define MX_Gtwy_IN_Aux_Enable_State_ACD ((uint8_T)1U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws ((uint8_T)0U)
#define MX_Gtwy_IN_Non_Functional_km5qd ((uint8_T)2U)
#define MX_Gtwy__IN_Aux_Enable_State_ST ((uint8_T)2U)
#define MX_Gtwy__IN_Inactive_Fault_h3so ((uint8_T)3U)
#define MX_Gtwy__IN_Non_Functional_km5q ((uint8_T)3U)

// Named constants for Chart: '<S646>/CAN_Throttle_Actuator'
#define MX_Gtwy_Co_IN_VALIDATE_POLARITY ((uint8_T)8U)
#define MX_Gtwy_Con_IN_RETRACT_ACTUATOR ((uint8_T)7U)
#define MX_Gtwy_Cont_IN_Cal_In_Progress ((uint8_T)2U)
#define MX_Gtwy_Cont_IN_EXTEND_ACTUATOR ((uint8_T)3U)
#define MX_Gtwy_Contr_IN_VALIDATE_RANGE ((uint8_T)9U)
#define MX_Gtwy_Contro_IN_Debounce_jp5a ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Cal_Check   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Cal_Fail    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Cal_Inhibit ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Cal_Mode    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Done        ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Fault       ((uint8_T)2U)
#define MX_Gtwy_Control_IN_INITIALIZE  ((uint8_T)4U)
#define MX_Gtwy_Control_IN_Init_Cal    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Normal_Mode ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Normal_pkv1 ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Pos_High    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Pos_Low     ((uint8_T)2U)
#define MX_Gtwy_Control_IN_RECORD_MAX  ((uint8_T)5U)
#define MX_Gtwy_Control_IN_RECORD_MIN  ((uint8_T)6U)
#define MX_Gtwy_Control_IN_Wait_ltfg   ((uint8_T)2U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq ((uint8_T)0U)

// Named constants for Chart: '<S624>/Controller_State'
#define MX_Gt_IN_NO_COMMUNICATION_fhkjk ((uint8_T)4U)
#define MX_Gtw_IN_NO_COMMUNICATION_fhkj ((uint8_T)3U)
#define MX_Gtwy_Cont_IN_FUNCTIONAL_a5dn ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_INACTIVE_nxrf ((uint8_T)2U)
#define MX_Gtwy_Control_IN_EVALUATE    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_NORMAL_dl5a ((uint8_T)2U)
#define MX_Gtwy_Control_IN_NORMAL_dl5am ((uint8_T)3U)
#define MX_Gtwy_IN_NON_FUNCTIONAL_mt1cz ((uint8_T)2U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf ((uint8_T)0U)
#define MX_Gtwy__IN_NON_FUNCTIONAL_mt1c ((uint8_T)1U)

// Named constants for Chart: '<S625>/Derate'
#define MX_Gtwy_Co_IN_UNRESPONSIVE_hw5u ((uint8_T)2U)
#define MX_Gtwy_Co_IN_WAIT_FOR_RESPONSE ((uint8_T)2U)
#define MX_Gtwy_Con_IN_REQUEST_RECEIVED ((uint8_T)4U)
#define MX_Gtwy_Contr_IN_DISABLE_DERATE ((uint8_T)2U)
#define MX_Gtwy_Contro_IN_Cranking_ibul ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_DEBOUNCE_h2c4 ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_SHUTDOWN_o0ld ((uint8_T)2U)
#define MX_Gtwy_Control_IN_DERATE      ((uint8_T)1U)
#define MX_Gtwy_Control_IN_DERATE_g4rc ((uint8_T)2U)
#define MX_Gtwy_Control_IN_ECU_o15r    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_NORMAL_nwss ((uint8_T)4U)
#define MX_Gtwy_Control_IN_NORMAL_nwssk ((uint8_T)1U)
#define MX_Gtwy_Control_IN_NO_ECU      ((uint8_T)2U)
#define MX_Gtwy_Control_IN_SEND_MESSAGE ((uint8_T)1U)
#define MX_Gtwy_Control_IN_SEND_REQUEST ((uint8_T)5U)
#define MX_Gtwy_Control_IN_UNRESPONSIVE ((uint8_T)3U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j ((uint8_T)0U)
#define MX_Gtwy__IN_NON_FUNCTIONAL_jyx5 ((uint8_T)3U)

// Named constants for Chart: '<S626>/Control Modes'
#define IN_Left_Control_or_Diverter_Fau ((uint8_T)4U)
#define MX_Gt_IN_Mode_Offset_Aux1_g0rtz ((uint8_T)3U)
#define MX_Gtw_IN_Mode_Aux4_Offset_bn0r ((uint8_T)3U)
#define MX_Gtw_IN_Mode_Offset_Aux1_g0rt ((uint8_T)1U)
#define MX_Gtw_IN_Mode_Offset_Aux4_kviy ((uint8_T)4U)
#define MX_Gtwy_Con_IN_INIT_SystemCheck ((uint8_T)3U)
#define MX_Gtwy_Con_IN_Mode_Aux4_Offset ((uint8_T)2U)
#define MX_Gtwy_Con_IN_Mode_None_Offset ((uint8_T)2U)
#define MX_Gtwy_Con_IN_Mode_Offset_Aux1 ((uint8_T)2U)
#define MX_Gtwy_Con_IN_Mode_Offset_Aux4 ((uint8_T)2U)
#define MX_Gtwy_Con_IN_Mode_Offset_None ((uint8_T)2U)
#define MX_Gtwy_Contr_IN_Mode_Aux2_Aux1 ((uint8_T)1U)
#define MX_Gtwy_Contr_IN_Mode_Aux2_Aux4 ((uint8_T)2U)
#define MX_Gtwy_Contr_IN_Mode_Aux4_Aux1 ((uint8_T)1U)
#define MX_Gtwy_Contr_IN_Mode_None_Aux1 ((uint8_T)2U)
#define MX_Gtwy_Contro_IN_Control_Fault ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Aux_Enabled ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Delay_n3pi  ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Enabled_p4xh ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Fault_Mode  ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Offset_Left ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Offset_Right ((uint8_T)3U)
#define MX_Gtwy_Control_IN_OptionA     ((uint8_T)2U)
#define MX_Gtwy_Control_IN_OptionB     ((uint8_T)3U)
#define MX_Gtwy_Control_IN_OptionC     ((uint8_T)4U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd ((uint8_T)0U)
#define MX_Gtwy__IN_Mode_Aux4_Aux1_j4zq ((uint8_T)2U)
#define MX_Gtwy__IN_Non_Functional_nbss ((uint8_T)1U)

// Named constants for Chart: '<S626>/Left Handle Switch'
#define MX_Gtw_IN_Default_InactiveCheck ((uint8_T)3U)
#define MX_Gtwy_Contro_IN_Inactive_aft1 ((uint8_T)4U)
#define MX_Gtwy_Control_IN_Active_cxwq ((uint8_T)1U)
#define MX_Gtwy__IN_DebounceActive_lwuo ((uint8_T)2U)

// Named constants for Chart: '<S660>/DisplayAuxMode'
#define MX_Gtwy_Cont_IN_A2FLASH_A1FLASH ((uint8_T)1U)
#define MX_Gtwy_Cont_IN_A2FLASH_A4FLASH ((uint8_T)2U)
#define MX_Gtwy_Cont_IN_A4FLASH_A1FLASH ((uint8_T)3U)
#define MX_Gtwy_Control_IN_A4FLASH_OF  ((uint8_T)4U)
#define MX_Gtwy_Control_IN_Default     ((uint8_T)5U)
#define MX_Gtwy_Control_IN_Expired     ((uint8_T)1U)
#define MX_Gtwy_Control_IN_GLOW_OFF    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_GlowCycle1  ((uint8_T)2U)
#define MX_Gtwy_Control_IN_GlowCycle2  ((uint8_T)3U)
#define MX_Gtwy_Control_IN_GlowOff     ((uint8_T)4U)
#define MX_Gtwy_Control_IN_GlowOff1    ((uint8_T)5U)
#define MX_Gtwy_Control_IN_Init_lslf   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_No_Glow     ((uint8_T)6U)
#define MX_Gtwy_Control_IN_Normal_jlzq ((uint8_T)2U)
#define MX_Gtwy_Control_IN_OFF_a3vv    ((uint8_T)2U)
#define MX_Gtwy_Control_IN_OF_A1FLASH  ((uint8_T)6U)
#define MX_Gtwy_Control_IN_OF_A4FLASH  ((uint8_T)7U)
#define MX_Gtwy_Control_IN_ON1         ((uint8_T)3U)
#define MX_Gtwy_Control_IN_ON_lgyf     ((uint8_T)3U)
#define MX_Gtwy_Control_IN_ON_lgyfn    ((uint8_T)2U)
#define MX_Gtwy_Control_IN_OffsetCheck ((uint8_T)3U)
#define MX_Gtwy__IN_ReminderOfLastState ((uint8_T)4U)

// Named constants for Chart: '<S626>/Right Handle Switch'
#define MX_Gtwy_Contro_IN_Inactive_jlip ((uint8_T)3U)
#define M_IN_Default_InactiveCheck_b5aa ((uint8_T)1U)

// Named constants for Chart: '<S627>/Chart1'
#define MX_Gtwy_Control_IN_CONNECTED   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_OPERATIONAL ((uint8_T)2U)
#define MX_Gtwy_Control_IN_READY       ((uint8_T)3U)
#define MX_Gtwy_Control_IN_RUN_FWD     ((uint8_T)4U)
#define MX_Gtwy_Control_IN_STOP        ((uint8_T)5U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_oq0v ((uint8_T)0U)

// Named constants for Chart: '<S627>/Chart2'
#define MX_Gtwy_Control_IN_prova       ((uint8_T)1U)
#define MX_Gtwy_Control_IN_prova1      ((uint8_T)2U)
#define MX_Gtwy_Control_IN_prova2      ((uint8_T)3U)

// Named constants for Chart: '<S628>/Engine'
#define MX_G_IN_PREVENT_FUEL_MSG_ACTIVE ((uint8_T)4U)
#define MX_Gtwy_Con_IN_CHECK_HOUR_METER ((uint8_T)1U)
#define MX_Gtwy_Con_IN_NOT_RUNNING_psez ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_CRANKING_in3g ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_SHUTDOWN_k1ph ((uint8_T)2U)
#define MX_Gtwy_Contro_IN_WAIT_TO_START ((uint8_T)2U)
#define MX_Gtwy_Control_IN_NORMAL_om4i ((uint8_T)1U)
#define MX_Gtwy_Control_IN_NOT_RUNNING ((uint8_T)2U)
#define MX_Gtwy_Control_IN_PAUSE       ((uint8_T)3U)
#define MX_Gtwy_Control_IN_RUNNING     ((uint8_T)3U)
#define MX_Gtwy_Control_IN_ST_SHUTDOWN ((uint8_T)3U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb ((uint8_T)0U)
#define MX_Gtwy__IN_HOUR_METER_EXCEEDED ((uint8_T)2U)
#define MX_IN_PREVENT_FUEL_MSG_INACTIVE ((uint8_T)5U)

// Named constants for Chart: '<S629>/CabKeyDetection'
#define MX_Gtwy_C_IN_Engine_Not_Running ((uint8_T)2U)
#define MX_Gtwy_Control_IN_CabKeyCycle ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Detected    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_Timer       ((uint8_T)2U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri ((uint8_T)0U)
#define MX_Gtwy_IN_WaitForSwitchedPower ((uint8_T)3U)

// Named constants for Chart: '<S629>/Indicators'
#define MX_Gtwy_Contro_IN_INACTIVE_k4dz ((uint8_T)2U)
#define MX_Gtwy_Control_IN_ACTIVE_ai5f ((uint8_T)1U)
#define MX_Gtwy_Control_IN_BOTH_OFF    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_FAIL_pabs   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_FLASHING    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_LOCK        ((uint8_T)2U)
#define MX_Gtwy_Control_IN_NORMAL_e2vv ((uint8_T)2U)
#define MX_Gtwy_Control_IN_TIMEOUT     ((uint8_T)2U)
#define MX_Gtwy_Control_IN_UNLOCK      ((uint8_T)3U)

// Named constants for Chart: '<S629>/Power_Hold'
#define MX_G_IN_KEYLESS_ENTRY_POWER_OFF ((uint8_T)2U)
#define MX_Gt_IN_KEYLESS_ENTRY_DETECTED ((uint8_T)1U)
#define MX_Gt_IN_WAIT_FOR_KEYLESS_ENTRY ((uint8_T)5U)
#define MX_Gtwy_Co_IN_WAIT_FOR_NO_PRESS ((uint8_T)6U)
#define MX_Gtwy__IN_KEYLESS_ENTRY_VALID ((uint8_T)3U)
#define MX_Gtwy__IN_NON_FUNCTIONAL_k1dx ((uint8_T)4U)

// Named constants for Chart: '<S630>/Panel_Lock'
#define MX_Gt_IN_OWNER_USER_SELECT_gzm1 ((uint8_T)2U)
#define MX_Gtwy_C_IN_VERIFY_FIRST_ENTRY ((uint8_T)5U)
#define MX_Gtwy_Co_IN_OWNER_USER_SELECT ((uint8_T)3U)
#define MX_Gtwy_Co_IN_WAIT_UNLOCK_CHART ((uint8_T)6U)
#define MX_Gtwy_Con_IN_BUTTON_CHANGE_DB ((uint8_T)1U)
#define MX_Gtwy_Con_IN_DISPLAY_ASTRISK1 ((uint8_T)2U)
#define MX_Gtwy_Cont_IN_DISPLAY_ASTRISK ((uint8_T)1U)
#define MX_Gtwy_Contr_IN_DISPLAY_DELAY1 ((uint8_T)2U)
#define MX_Gtwy_Contr_IN_DISPLAY_DELAY2 ((uint8_T)3U)
#define MX_Gtwy_Contr_IN_MACHINE_UNLOCK ((uint8_T)7U)
#define MX_Gtwy_Contro_IN_DISPLAY_DELAY ((uint8_T)1U)
#define MX_Gtwy_Contro_IN_DISPLAY_ENTER ((uint8_T)2U)
#define MX_Gtwy_Contro_IN_DISPLAY_OWNER ((uint8_T)4U)
#define MX_Gtwy_Contro_IN_DISPLAY_USER1 ((uint8_T)5U)
#define MX_Gtwy_Contro_IN_DISPLAY_USER2 ((uint8_T)6U)
#define MX_Gtwy_Control_IN_ASTERISK    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_BUTTON_0    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_BUTTON_1    ((uint8_T)2U)
#define MX_Gtwy_Control_IN_BUTTON_2    ((uint8_T)3U)
#define MX_Gtwy_Control_IN_BUTTON_3    ((uint8_T)4U)
#define MX_Gtwy_Control_IN_BUTTON_4    ((uint8_T)5U)
#define MX_Gtwy_Control_IN_BUTTON_5    ((uint8_T)6U)
#define MX_Gtwy_Control_IN_BUTTON_6    ((uint8_T)7U)
#define MX_Gtwy_Control_IN_BUTTON_74   ((uint8_T)8U)
#define MX_Gtwy_Control_IN_BUTTON_8    ((uint8_T)9U)
#define MX_Gtwy_Control_IN_BUTTON_9    ((uint8_T)10U)
#define MX_Gtwy_Control_IN_CHANGE      ((uint8_T)1U)
#define MX_Gtwy_Control_IN_CHANGE_hqcz ((uint8_T)2U)
#define MX_Gtwy_Control_IN_CODE        ((uint8_T)2U)
#define MX_Gtwy_Control_IN_CODE_ERROR  ((uint8_T)2U)
#define MX_Gtwy_Control_IN_CODE_ERROR1 ((uint8_T)1U)
#define MX_Gtwy_Control_IN_CODE_ERROR2 ((uint8_T)2U)
#define MX_Gtwy_Control_IN_DISPLAY_CODE ((uint8_T)2U)
#define MX_Gtwy_Control_IN_ENTER_OWNER ((uint8_T)1U)
#define MX_Gtwy_Control_IN_FAIL_nxgn   ((uint8_T)2U)
#define MX_Gtwy_Control_IN_GOOD_NEW    ((uint8_T)2U)
#define MX_Gtwy_Control_IN_GOOD_UNLOCK ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Init_k1cp   ((uint8_T)3U)
#define MX_Gtwy_Control_IN_LOCK_DB     ((uint8_T)5U)
#define MX_Gtwy_Control_IN_LOCK_o1ud   ((uint8_T)4U)
#define MX_Gtwy_Control_IN_MACHINE_LOCK ((uint8_T)6U)
#define MX_Gtwy_Control_IN_NONE        ((uint8_T)11U)
#define MX_Gtwy_Control_IN_NOORMAL     ((uint8_T)3U)
#define MX_Gtwy_Control_IN_NOTHING     ((uint8_T)4U)
#define MX_Gtwy_Control_IN_NOTHING_njh0 ((uint8_T)8U)
#define MX_Gtwy_Control_IN_NOT_PRESSED ((uint8_T)1U)
#define MX_Gtwy_Control_IN_PASSWORD    ((uint8_T)4U)
#define MX_Gtwy_Control_IN_PRESSED     ((uint8_T)2U)
#define MX_Gtwy_Control_IN_RESET       ((uint8_T)3U)
#define MX_Gtwy_Control_IN_STORE       ((uint8_T)4U)
#define MX_Gtwy_Control_IN_UNLOCK_DB   ((uint8_T)10U)
#define MX_Gtwy_Control_IN_UNLOCK_gi5x ((uint8_T)9U)
#define MX_Gtwy_Control_IN_WAIT_NEW    ((uint8_T)7U)
#define MX_Gtwy_Control_IN_WAIT_NEW1   ((uint8_T)8U)
#define MX_Gtwy_Control_IN_WAIT_NEW2   ((uint8_T)9U)
#define MX_Gtwy_Control_IN_WAIT_UNLOCK ((uint8_T)5U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i ((uint8_T)0U)
#define MX_Gtwy__IN_DISPLAY_DELAY_OWNER ((uint8_T)1U)
#define MX_Gtwy__IN_DISPLAY_DELAY_USER1 ((uint8_T)1U)
#define MX_Gtwy__IN_DISPLAY_DELAY_USER2 ((uint8_T)1U)
#define MX_Gtwy__IN_VERIFY_SECOND_ENTRY ((uint8_T)6U)

// Named constants for Chart: '<S631>/Lock_Status'
#define MX_Gtwy_Control_IN_DELUXE_G55  ((uint8_T)1U)
#define MX_Gtwy_Control_IN_LOCK_pixy   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_UNLOCK_dcz1 ((uint8_T)2U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_ja4m ((uint8_T)0U)
#define MX_Gtwy__IN_KEYLESS_GENV_DELUXE ((uint8_T)2U)
#define MX_Gtwy__IN_NON_FUNCTIONAL_iweg ((uint8_T)3U)

// Named constants for Chart: '<S632>/Throttle_Command'
#define MX_Gtw_IN_CAN_Throttle_Actuator ((uint8_T)1U)
#define MX_Gtwy_Co_IN_AutoIdle_Reversed ((uint8_T)2U)
#define MX_Gtwy_Co_IN_Throttle_Actuator ((uint8_T)4U)
#define MX_Gtwy_Cont_IN_Normal_Throttle ((uint8_T)2U)
#define MX_Gtwy_Contr_IN_CHECK_THROTTLE ((uint8_T)1U)
#define MX_Gtwy_Contr_IN_EXTREMELY_COLD ((uint8_T)2U)
#define MX_Gtwy_Contr_IN_THROTTLE_MOVED ((uint8_T)2U)
#define MX_Gtwy_Contro_IN_Normal_bkdx2g ((uint8_T)3U)
#define MX_Gtwy_Contro_IN_TC_PROTECTION ((uint8_T)2U)
#define MX_Gtwy_Control_IN_AutoIdle    ((uint8_T)1U)
#define MX_Gtwy_Control_IN_COLD_cwet   ((uint8_T)1U)
#define MX_Gtwy_Control_IN_G2_Engine   ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Invalid_nww4 ((uint8_T)3U)
#define MX_Gtwy_Control_IN_Normal_bkdx ((uint8_T)2U)
#define MX_Gtwy_Control_IN_Normal_bkdx2 ((uint8_T)1U)
#define MX_Gtwy_Control_IN_TIMER_RESET ((uint8_T)3U)
#define MX_Gtwy_Control_IN_WAIT_FOR_EOT ((uint8_T)3U)
#define MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq ((uint8_T)0U)
#define M_IN_WAIT_FOR_THROTTLE_MOVEMENT ((uint8_T)4U)

// Forward declaration for local functions
static void MX_Gtwy_Control_Enabled(void);
static void MX_Gtwy_Contr_Functional_f20sl3(void);
static void MX_Gtwy__enter_internal_Enabled(void);
static void MX_Gtwy_Control_Functional(void);
static void MX__enter_internal_Enabled_ls1c(void);
static void MX_Gtwy_Control_Functional_f20s(void);
static void MX_Gtwy_Control_SIRIUS2(void);
static void MX_enter_internal_Enabled_ls1cz(void);
static void MX_Gtwy_Contro_Functional_f20sl(void);
static void MX_Gtwy_Control_SIRIUS2_HIFLOW(void);
static void MX_Gtwy_Contro_Aux_Enable_State(void);
static void MX_Gtwy_Control_Detent_State(const uint8_T *FixPtRelationalOperator);

// Forward declaration for local functions
static void MX_Gt_DiverterFaultOverrideLeft(void);
static void enter_internal_Aux_Enable_cso3u(void);
static void MX_G_enter_internal_Offset_Left(void);
static void MX_G_DiverterFaultOverrideRight(void);
static void enter_internal_Aux_Enabl_cso3up(void);
static void MX__enter_internal_Offset_Right(void);
static void MX_Gtwy_Contr_Offset_Right_jefh(const boolean_T *LogicalOperator2,
  const boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gtwy_Control_Aux_Enabled(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n);
static void MX_Gtwy_Control_OptionC(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gtwy_Control_OptionA(const boolean_T *LogicalOperator2);
static void MX_G_enter_internal_Aux_Enabled(void);
static void enter_internal_Aux_Enabled_cso3(void);
static void MX_Gtwy_Control_Offset_Right(const boolean_T *LogicalOperator2,
  const boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gtwy_Control_Offset_Left(const boolean_T *LogicalOperator2_ee3n);
static void MX_Gtwy_Control_OptionB(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gtwy_Con_ReminderOfLastState(void);

// Forward declaration for local functions
static void MX_Gtwy_Control_KEYPAD(void);
static void MX_Gtwy_Control_CHANGE(void);

// System initialize for atomic system: '<S620>/Auto_Idle_Enable'
void MX_Gtwy_C_Auto_Idle_Enable_Init(void)
{
  // InitializeConditions for UnitDelay: '<S639>/Delay Input1'
  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_n1b2 = true;

  // SystemInitialize for Chart: '<S635>/Auto_Idle'
  MX_Gtwy_Control_DWork.bitsForTID1.is_Deluxe_G55 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_an2j;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_boqo =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_an2j;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_fbep =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_an2j;
  MX_Gtwy_Control_DWork.bitsForTID1.is_active_c2_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_c2_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_an2j;
  state_AutoIdleEnable = 0U;
}

// Output and update for atomic system: '<S620>/Auto_Idle_Enable'
void MX_Gtwy_Contro_Auto_Idle_Enable(void)
{
  uint8_T rtb_FixPtRelationalOperato_cugd;

  // RelationalOperator: '<S639>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S639>/Delay Input1'

  rtb_FixPtRelationalOperato_cugd = (uint8_T)((int32_T)
    MX_Gtwy_Control_B.RateTransition3_hzvd > (int32_T)
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_n1b2);

  // Chart: '<S635>/Auto_Idle'
  // Gateway: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle
  // During: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID1.is_active_c2_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle
    MX_Gtwy_Control_DWork.bitsForTID1.is_active_c2_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle 
    // Transition: '<S638>:75'
    if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL) {
      // Transition: '<S638>:76'
      MX_Gtwy_Control_DWork.bitsForTID1.is_c2_MX_Gtwy_Control =
        MX_Gtwy_Control_IN_Normal_jadr;

      // Entry Internal 'Normal': '<S638>:73'
      // Transition: '<S638>:69'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_fbep =
        MX_Gtwy_C_IN_NonFunctional_k5ri;

      // Entry 'NonFunctional': '<S638>:68'
      state_AutoIdleEnable = INACTIVE;
    } else {
      // Transition: '<S638>:89'
      MX_Gtwy_Control_DWork.bitsForTID1.is_c2_MX_Gtwy_Control =
        MX_Gtwy_Cont_IN_Deluxe_G55_dqoj;

      // Entry Internal 'Deluxe_G55': '<S638>:77'
      // Transition: '<S638>:79'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Deluxe_G55 =
        MX_Gtwy__IN_NonFunctional_k5ri0;

      // Entry 'NonFunctional': '<S638>:86'
      state_AutoIdleEnable = INACTIVE;
    }
  } else if (MX_Gtwy_Control_DWork.bitsForTID1.is_c2_MX_Gtwy_Control ==
             MX_Gtwy_Cont_IN_Deluxe_G55_dqoj) {
    // During 'Deluxe_G55': '<S638>:77'
    switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Deluxe_G55) {
     case MX_Gtwy_Control_IN_Error:
      state_AutoIdleEnable = IN_ERROR;

      // During 'Error': '<S638>:91'
      if (MX_Gtwy_Control_B.RateTransition1_d4x3 == NORMAL) {
        // Transition: '<S638>:93'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Deluxe_G55 =
          MX_Gtwy_Control_IN_Normal_jadrg;

        // Entry Internal 'Normal': '<S638>:90'
        // Transition: '<S638>:96'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_boqo =
          MX_Gtwy_Control_IN_Off_ltywd;

        // Entry 'Off': '<S638>:88'
        state_AutoIdleEnable = INACTIVE;
      }
      break;

     case MX_Gtwy__IN_NonFunctional_k5ri0:
      state_AutoIdleEnable = INACTIVE;

      // During 'NonFunctional': '<S638>:86'
      if (CONSTANT_DATA->AUTOIDLE_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S638>:80'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Deluxe_G55 =
          MX_Gtwy_Control_IN_Normal_jadrg;

        // Entry Internal 'Normal': '<S638>:90'
        // Transition: '<S638>:96'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_boqo =
          MX_Gtwy_Control_IN_Off_ltywd;

        // Entry 'Off': '<S638>:88'
      }
      break;

     default:
      // During 'Normal': '<S638>:90'
      if (MX_Gtwy_Control_B.RateTransition1_d4x3 != NORMAL) {
        // Transition: '<S638>:85'
        // Exit Internal 'Normal': '<S638>:90'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_boqo =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_an2j;
        MX_Gtwy_Control_DWork.bitsForTID1.is_Deluxe_G55 =
          MX_Gtwy_Control_IN_Error;

        // Entry 'Error': '<S638>:91'
        state_AutoIdleEnable = IN_ERROR;
      } else if (MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_boqo ==
                 MX_Gtwy_Control_IN_Off_ltywd) {
        state_AutoIdleEnable = INACTIVE;

        // During 'Off': '<S638>:88'
        if (MX_Gtwy_Control_B.RateTransition9_oyjk == ACTIVE) {
          // Transition: '<S638>:83'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_boqo =
            MX_Gtwy_Control_IN_On_fhbze;

          // Entry 'On': '<S638>:87'
          state_AutoIdleEnable = ACTIVE;
        }
      } else {
        state_AutoIdleEnable = ACTIVE;

        // During 'On': '<S638>:87'
        if (MX_Gtwy_Control_B.RateTransition9_oyjk != ACTIVE) {
          // Transition: '<S638>:84'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_boqo =
            MX_Gtwy_Control_IN_Off_ltywd;

          // Entry 'Off': '<S638>:88'
          state_AutoIdleEnable = INACTIVE;
        }
      }
      break;
    }
  } else {
    // During 'Normal': '<S638>:73'
    switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_fbep) {
     case MX_Gtwy_C_IN_NonFunctional_k5ri:
      state_AutoIdleEnable = INACTIVE;

      // During 'NonFunctional': '<S638>:68'
      if ((CONSTANT_DATA->AUTOIDLE_FUNCTION != NON_FUNCTIONAL) &&
          MX_Gtwy_Control_B.RateTransition11_e1mm) {
        // Transition: '<S638>:8'
        if ((int32_T)eeMirror.ee_AutoIdleEnabled != 0) {
          // Transition: '<S638>:11'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_fbep =
            MX_Gtwy_Control_IN_On_fhbz;

          // Entry 'On': '<S638>:10'
          state_AutoIdleEnable = ACTIVE;
          eeMirror.ee_AutoIdleEnabled = (int8_T)ACTIVE;
          matlab_UpdateEEVar();
        } else {
          // Transition: '<S638>:9'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_fbep =
            MX_Gtwy_Control_IN_Off_ltyw;

          // Entry 'Off': '<S638>:4'
          eeMirror.ee_AutoIdleEnabled = (int8_T)INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case MX_Gtwy_Control_IN_Off_ltyw:
      state_AutoIdleEnable = INACTIVE;

      // During 'Off': '<S638>:4'
      if (((int32_T)rtb_FixPtRelationalOperato_cugd != 0) &&
          (MX_Gtwy_Control_B.RateTransition1_d4x3 == NORMAL)) {
        // Transition: '<S638>:12'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_fbep =
          MX_Gtwy_Control_IN_On_fhbz;

        // Entry 'On': '<S638>:10'
        state_AutoIdleEnable = ACTIVE;
        eeMirror.ee_AutoIdleEnabled = (int8_T)ACTIVE;
        matlab_UpdateEEVar();
      }
      break;

     default:
      state_AutoIdleEnable = ACTIVE;

      // During 'On': '<S638>:10'
      if ((MX_Gtwy_Control_B.RateTransition1_d4x3 != NORMAL) || ((int32_T)
           rtb_FixPtRelationalOperato_cugd != 0)) {
        // Transition: '<S638>:30'
        // Transition: '<S638>:13'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_fbep =
          MX_Gtwy_Control_IN_Off_ltyw;

        // Entry 'Off': '<S638>:4'
        state_AutoIdleEnable = INACTIVE;
        eeMirror.ee_AutoIdleEnabled = (int8_T)INACTIVE;
        matlab_UpdateEEVar();
      }
      break;
    }
  }

  // End of Chart: '<S635>/Auto_Idle'

  // Update for UnitDelay: '<S639>/Delay Input1'
  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_n1b2 =
    MX_Gtwy_Control_B.RateTransition3_hzvd;
}

// System initialize for atomic system: '<S6>/AutoIdle'
void MX_Gtwy_Control_AutoIdle_Init(void)
{
  // SystemInitialize for Atomic SubSystem: '<S620>/Auto_Idle_Enable'
  MX_Gtwy_C_Auto_Idle_Enable_Init();

  // End of SystemInitialize for SubSystem: '<S620>/Auto_Idle_Enable'

  // SystemInitialize for Enabled SubSystem: '<S620>/Auto_Idle_Function'
  // SystemInitialize for Chart: '<S636>/Auto_Idle'
  MX_Gtwy_Control_DWork.bitsForTID1.is_Control = MX_Gtwy_IN_NO_ACTIVE_CHILD_dkkf;
  MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_IDLE_STATE =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_dkkf;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_dkkf;
  MX_Gtwy_Control_DWork.temporalCounter_i1_okcq = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_active_c106_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.potMotion = false;
  MX_Gtwy_Control_DWork.previous_Throttle = 0;
  MX_Gtwy_Control_DWork.debounceIdle = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
  MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = 0U;

  // End of SystemInitialize for SubSystem: '<S620>/Auto_Idle_Function'
}

// Output and update for atomic system: '<S6>/AutoIdle'
void MX_Gtwy_Control_AutoIdle(void)
{
  boolean_T b;
  boolean_T c;
  boolean_T d;
  uint8_T rtb_state_Idle;
  uint16_T rtb_AutoIdleTime;
  uint16_T rtb_Switch_g1tt;

  // Truth Table: '<S620>/AutoIdleTime'
  // Truth Table Function 'MX_Gtwy_Control/System/AutoIdle/AutoIdleTime': '<S634>:1' 
  //  Gen5_5 Deluxe Display
  // Condition '#1': '<S634>:1:11'
  //  Gen5 Deluxe Display
  if ((CONSTANT_DATA->DELUXE_GEN5_FUNCTION != NON_FUNCTIONAL) &&
      (eeMirror.deluxe_G5 == ACTIVE)) {
    // Condition '#2': '<S634>:1:15'
    b = true;
  } else {
    b = false;
  }

  //  Gen5_5 data valid
  if (((int32_T)MX_Gtwy_Control_B.RateTransition4_jajp >= 4) && ((int32_T)
       MX_Gtwy_Control_B.RateTransition4_jajp <= 250)) {
    // Condition '#3': '<S634>:1:19'
    c = true;
  } else {
    c = false;
  }

  //  Gen5 data valid
  if (((int32_T)eeMirror.ee_autoIdleTime >= 4) && ((int32_T)
       eeMirror.ee_autoIdleTime <= 250)) {
    // Condition '#4': '<S634>:1:23'
    d = true;
  } else {
    d = false;
  }

  if ((CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) && c) {
    // Decision 'D1': '<S634>:1:25'
    //  Use can value
    //  (x10 for 100msec counts)
    //  Gen5_5 Display
    // Action '1': '<S634>:1:39'
    rtb_AutoIdleTime = (uint16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_B.RateTransition4_jajp * 10);
  } else if (b && d) {
    //  Use eeprom value
    //  (x10 for 100msec counts)
    //  Gen5 Display
    // Action '2': '<S634>:1:47'
    rtb_AutoIdleTime = (uint16_T)(int32_T)((int32_T)eeMirror.ee_autoIdleTime *
      10);
  } else {
    //  Default
    //  Use constant data
    //  Standard Display
    // Action '3': '<S634>:1:54'
    rtb_AutoIdleTime = (uint16_T)CONSTANT_DATA->AUTOIDLE_IDLE_DELAY;
  }

  // End of Truth Table: '<S620>/AutoIdleTime'

  // Outputs for Atomic SubSystem: '<S620>/Auto_Idle_Enable'
  MX_Gtwy_Contro_Auto_Idle_Enable();

  // End of Outputs for SubSystem: '<S620>/Auto_Idle_Enable'

  // Outputs for Enabled SubSystem: '<S620>/Auto_Idle_Function' incorporates:
  //   EnablePort: '<S636>/Enable'

  // RelationalOperator: '<S637>/Compare' incorporates:
  //   Constant: '<S637>/Constant'

  if (MX_Gtwy_Control_B.RateTransition64_ialx == SYS_NORMAL) {
    if (!MX_Gtwy_Control_DWork.Auto_Idle_Function_MODE) {
      // SystemReset for Chart: '<S636>/Auto_Idle'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_dkkf;
      MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr = 0U;
      MX_Gtwy_Control_DWork.bitsForTID1.is_IDLE_STATE =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_dkkf;
      MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_dkkf;
      MX_Gtwy_Control_DWork.temporalCounter_i1_okcq = 0U;
      MX_Gtwy_Control_DWork.bitsForTID1.is_active_c106_MX_Gtwy_Control = 0U;
      MX_Gtwy_Control_DWork.bitsForTID1.potMotion = false;
      MX_Gtwy_Control_DWork.previous_Throttle = 0;
      MX_Gtwy_Control_DWork.debounceIdle = 0U;
      MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
      MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = 0U;
      MX_Gtwy_Control_DWork.Auto_Idle_Function_MODE = true;
    }

    // Switch: '<S636>/Switch' incorporates:
    //   Constant: '<S636>/Constant1'
    //   Constant: '<S636>/Constant2'
    //   Constant: '<S641>/Constant'
    //   RelationalOperator: '<S641>/Compare'

    if (CONSTANT_DATA->THROTTLE_PRIMARY_FUNCTION == NON_FUNCTIONAL) {
      rtb_Switch_g1tt = WORD_UNAVAIL;
    } else {
      rtb_Switch_g1tt = percent_Throttle;
    }

    // End of Switch: '<S636>/Switch'

    // Chart: '<S636>/Auto_Idle'
    // Gateway: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle
    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_okcq < 65535U) {
      MX_Gtwy_Control_DWork.temporalCounter_i1_okcq = (uint16_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_okcq + 1);
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr < 65535U) {
      MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr = (uint16_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr + 1);
    }

    // During: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle
    if ((uint32_T)
        MX_Gtwy_Control_DWork.bitsForTID1.is_active_c106_MX_Gtwy_Control == 0U)
    {
      // Entry: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle
      MX_Gtwy_Control_DWork.bitsForTID1.is_active_c106_MX_Gtwy_Control = 1U;

      // Entry Internal: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle 
      // Entry Internal 'Pot_Motion': '<S640>:76'
      // Transition: '<S640>:78'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
        MX_Gtwy_Control_IN_Init_cr3r;
      MX_Gtwy_Control_DWork.temporalCounter_i1_okcq = 0U;

      // Entry 'Init': '<S640>:77'
      MX_Gtwy_Control_DWork.bitsForTID1.potMotion = false;

      // Entry Internal 'Control': '<S640>:75'
      // Transition: '<S640>:17'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
        MX_Gtwy_Cont_IN_Initialize_b3if;

      // Entry 'Initialize': '<S640>:70'
      MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = INACTIVE;
      MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = true;

      // Entry Internal 'IDLE_STATE': '<S640>:116'
      // Transition: '<S640>:132'
      MX_Gtwy_Control_DWork.bitsForTID1.is_IDLE_STATE =
        MX_Gtwy__IN_NON_FUNCTIONAL_aop1;

      // Entry 'NON_FUNCTIONAL': '<S640>:131'
      rtb_state_Idle = NON_FUNCTIONAL;

      // Entry Internal 'ENGINE_STARTED': '<S640>:140'
      // Transition: '<S640>:141'
      if (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_CRANKING) {
        // Transition: '<S640>:161'
        // Transition: '<S640>:164'
        MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = true;

        // Transition: '<S640>:166'
      } else {
        // Transition: '<S640>:165'
      }

      // Transition: '<S640>:168'
    } else {
      // During 'Pot_Motion': '<S640>:76'
      switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion) {
       case MX_Gtwy_Control_IN_Change:
        // During 'Change': '<S640>:81'
        // Transition: '<S640>:172'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
          MX_Gtwy_Contr_IN_Reset_Movement;
        MX_Gtwy_Control_DWork.temporalCounter_i1_okcq = 0U;

        // Entry 'Reset_Movement': '<S640>:173'
        MX_Gtwy_Control_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        break;

       case MX_Gtwy_Control_IN_Init_cr3r:
        // During 'Init': '<S640>:77'
        if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_okcq >= 5) &&
            (CONSTANT_DATA->THROTTLE_PRIMARY_FUNCTION != NON_FUNCTIONAL)) {
          // Transition: '<S640>:80'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
            MX_Gtwy_Control_IN_No_Change;

          // Entry 'No_Change': '<S640>:79'
          MX_Gtwy_Control_DWork.bitsForTID1.potMotion = false;
          MX_Gtwy_Control_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        }
        break;

       case MX_Gtwy_Control_IN_No_Change:
        // During 'No_Change': '<S640>:79'
        if (((int32_T)(int16_T)rtb_Switch_g1tt > (int32_T)((int32_T)
              MX_Gtwy_Control_DWork.previous_Throttle + 25)) || ((int32_T)
             (int16_T)rtb_Switch_g1tt < (int32_T)((int32_T)
              MX_Gtwy_Control_DWork.previous_Throttle - 25))) {
          // Transition: '<S640>:82'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
            MX_Gtwy_Control_IN_Change;

          // Entry 'Change': '<S640>:81'
          MX_Gtwy_Control_DWork.bitsForTID1.potMotion = true;
          MX_Gtwy_Control_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        }
        break;

       default:
        // During 'Reset_Movement': '<S640>:173'
        if ((MX_Gtwy_Control_DWork.temporalCounter_i1_okcq >= rtb_AutoIdleTime) ||
            (MX_Gtwy_Control_B.RateTransition24_ohus == ACTIVE)) {
          // Transition: '<S640>:175'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
            MX_Gtwy_Control_IN_No_Change;

          // Entry 'No_Change': '<S640>:79'
          MX_Gtwy_Control_DWork.bitsForTID1.potMotion = false;
          MX_Gtwy_Control_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        } else {
          if (((int32_T)(int16_T)rtb_Switch_g1tt > (int32_T)((int32_T)
                MX_Gtwy_Control_DWork.previous_Throttle + 10)) || ((int32_T)
               (int16_T)rtb_Switch_g1tt < (int32_T)((int32_T)
                MX_Gtwy_Control_DWork.previous_Throttle - 10))) {
            // Transition: '<S640>:174'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Pot_Motion =
              MX_Gtwy_Contr_IN_Reset_Movement;
            MX_Gtwy_Control_DWork.temporalCounter_i1_okcq = 0U;

            // Entry 'Reset_Movement': '<S640>:173'
            MX_Gtwy_Control_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
          }
        }
        break;
      }

      // During 'Control': '<S640>:75'
      switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Control) {
       case MX_Gtwy_Control_IN_Armbar_Delay:
        // During 'Armbar_Delay': '<S640>:47'
        if (MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr >=
            CONSTANT_DATA->AUTOIDLE_ARMBAR_DELAY) {
          // Transition: '<S640>:46'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control = MX_Gtwy_Control_IN_Idle;

          // Entry 'Idle': '<S640>:20'
          MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = ACTIVE;
          MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
        } else {
          if (MX_Gtwy_Control_B.RateTransition24_ohus != ACTIVE) {
            // Transition: '<S640>:48'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
              MX_Gtwy_Control_IN_Console_Up;

            // Entry 'Console_Up': '<S640>:43'
            MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = ACTIVE;
            MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
          }
        }
        break;

       case MX_Gtwy_Control_IN_Console_Up:
        MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = ACTIVE;

        // During 'Console_Up': '<S640>:43'
        if (MX_Gtwy_Control_B.RateTransition24_ohus == ACTIVE) {
          // Transition: '<S640>:49'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
            MX_Gtwy_Control_IN_Armbar_Delay;
          MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr = 0U;
        } else {
          if ((state_AutoIdleEnable != ACTIVE) ||
              (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_CRANKING) ||
              (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
              MX_Gtwy_Control_DWork.bitsForTID1.potMotion) {
            // Transition: '<S640>:45'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
              MX_Gtwy_Control_IN_Throttle;

            // Entry 'Throttle': '<S640>:16'
            MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = INACTIVE;
          }
        }
        break;

       case MX_Gtwy_Control_IN_Delay_hh0k:
        // During 'Delay': '<S640>:33'
        b = !MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted;
        if ((MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr >= rtb_AutoIdleTime) ||
            ((MX_Gtwy_Control_B.RateTransition24_ohus != ACTIVE) && b)) {
          // Transition: '<S640>:35'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control = MX_Gtwy_Control_IN_Idle;

          // Entry 'Idle': '<S640>:20'
          MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = ACTIVE;
          MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
        } else {
          if ((MX_Gtwy_Control_B.RateTransition23 >=
               CONSTANT_DATA->AUTOIDLE_PRESSURE_OFF) || (state_AutoIdleEnable !=
               ACTIVE) || (MX_Gtwy_Control_B.RateTransition22_aeuw ==
                           ENGINE_CRANKING) ||
              (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
              MX_Gtwy_Control_DWork.bitsForTID1.potMotion) {
            // Transition: '<S640>:34'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
              MX_Gtwy_Control_IN_Throttle;

            // Entry 'Throttle': '<S640>:16'
            MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = INACTIVE;
          }
        }
        break;

       case MX_Gtwy_Control_IN_Idle:
        MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = ACTIVE;

        // During 'Idle': '<S640>:20'
        if (MX_Gtwy_Control_B.RateTransition24_ohus != ACTIVE) {
          // Transition: '<S640>:44'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
            MX_Gtwy_Control_IN_Console_Up;

          // Entry 'Console_Up': '<S640>:43'
          MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
        } else {
          if ((MX_Gtwy_Control_B.RateTransition23 >=
               CONSTANT_DATA->AUTOIDLE_PRESSURE_OFF) || (state_AutoIdleEnable !=
               ACTIVE) || (MX_Gtwy_Control_B.RateTransition22_aeuw ==
                           ENGINE_CRANKING) ||
              (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
              MX_Gtwy_Control_DWork.bitsForTID1.potMotion) {
            // Transition: '<S640>:24'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
              MX_Gtwy_Control_IN_Throttle;

            // Entry 'Throttle': '<S640>:16'
            MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = INACTIVE;
          }
        }
        break;

       case MX_Gtwy_Cont_IN_Initialize_b3if:
        MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = INACTIVE;

        // During 'Initialize': '<S640>:70'
        if ((state_AutoIdleEnable == ACTIVE) &&
            (CONSTANT_DATA->AUTOIDLE_LOW_IDLE_START != NON_FUNCTIONAL)) {
          // Transition: '<S640>:58'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control = MX_Gtwy_Control_IN_Idle;

          // Entry 'Idle': '<S640>:20'
          MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = ACTIVE;
          MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
        } else {
          // Transition: '<S640>:59'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
            MX_Gtwy_Control_IN_Throttle;

          // Entry 'Throttle': '<S640>:16'
        }
        break;

       default:
        MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = INACTIVE;

        // During 'Throttle': '<S640>:16'
        b = !MX_Gtwy_Control_DWork.bitsForTID1.potMotion;
        if ((MX_Gtwy_Control_B.RateTransition23 <
             CONSTANT_DATA->AUTOIDLE_PRESSURE_ON) && (state_AutoIdleEnable ==
             ACTIVE) && (MX_Gtwy_Control_B.RateTransition22_aeuw ==
                         ENGINE_RUNNING) && b) {
          // Transition: '<S640>:21'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
            MX_Gtwy_Control_IN_Delay_hh0k;
          MX_Gtwy_Control_DWork.temporalCounter_i2_hzvr = 0U;
        } else {
          b = !MX_Gtwy_Control_DWork.bitsForTID1.potMotion;
          c = !MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted;
          if ((MX_Gtwy_Control_B.RateTransition24_ohus != ACTIVE) &&
              (state_AutoIdleEnable == ACTIVE) &&
              (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_RUNNING) && c &&
              b) {
            // Transition: '<S640>:138'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Control =
              MX_Gtwy_Control_IN_Console_Up;

            // Entry 'Console_Up': '<S640>:43'
            MX_Gtwy_Control_B.cmd_AutoIdle_gn3f = ACTIVE;
            MX_Gtwy_Control_DWork.bitsForTID1.flag_EngineJustStarted = false;
          }
        }
        break;
      }

      // During 'IDLE_STATE': '<S640>:116'
      switch (MX_Gtwy_Control_DWork.bitsForTID1.is_IDLE_STATE) {
       case MX_Gtwy_Control_IN_ACTIVE_dc5j:
        rtb_state_Idle = ACTIVE;

        // During 'ACTIVE': '<S640>:130'
        if ((MX_Gtwy_Control_B.RateTransition23 >=
             CONSTANT_DATA->AUTOIDLE_PRESSURE_OFF) ||
            (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_CRANKING) ||
            (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
            MX_Gtwy_Control_DWork.bitsForTID1.potMotion) {
          // Transition: '<S640>:119'
          MX_Gtwy_Control_DWork.bitsForTID1.is_IDLE_STATE =
            MX_Gtwy_Contro_IN_INACTIVE_p5he;

          // Entry 'INACTIVE': '<S640>:120'
          rtb_state_Idle = INACTIVE;
          MX_Gtwy_Control_DWork.debounceIdle = 0U;
        }
        break;

       case MX_Gtwy_Contro_IN_INACTIVE_p5he:
        rtb_state_Idle = INACTIVE;

        // During 'INACTIVE': '<S640>:120'
        if ((MX_Gtwy_Control_DWork.debounceIdle >=
             CONSTANT_DATA->IDLE_DEBOUNCE_ACTIVE) &&
            (CONSTANT_DATA->IDLE_DEBOUNCE_ACTIVE != UNLIMITED)) {
          // Transition: '<S640>:118'
          MX_Gtwy_Control_DWork.bitsForTID1.is_IDLE_STATE =
            MX_Gtwy_Control_IN_ACTIVE_dc5j;

          // Entry 'ACTIVE': '<S640>:130'
          rtb_state_Idle = ACTIVE;
        } else {
          // Transition: '<S640>:125'
          b = !MX_Gtwy_Control_DWork.bitsForTID1.potMotion;
          if ((MX_Gtwy_Control_B.RateTransition23 <
               CONSTANT_DATA->AUTOIDLE_PRESSURE_ON) &&
              (MX_Gtwy_Control_B.RateTransition22_aeuw == ENGINE_RUNNING) && b)
          {
            // Transition: '<S640>:126'
            // Transition: '<S640>:128'
            MX_Gtwy_Control_DWork.debounceIdle = (uint16_T)(int32_T)((int32_T)
              MX_Gtwy_Control_DWork.debounceIdle + 1);

            // Transition: '<S640>:129'
          } else {
            // Transition: '<S640>:127'
            MX_Gtwy_Control_DWork.debounceIdle = 0U;
          }
        }
        break;

       default:
        rtb_state_Idle = NON_FUNCTIONAL;

        // During 'NON_FUNCTIONAL': '<S640>:131'
        if (CONSTANT_DATA->IDLE_TIME_FUNCTION != NON_FUNCTIONAL) {
          // Transition: '<S640>:117'
          MX_Gtwy_Control_DWork.bitsForTID1.is_IDLE_STATE =
            MX_Gtwy_Contro_IN_INACTIVE_p5he;

          // Entry 'INACTIVE': '<S640>:120'
          rtb_state_Idle = INACTIVE;
          MX_Gtwy_Control_DWork.debounceIdle = 0U;
        }
        break;
      }

      // During 'ENGINE_STARTED': '<S640>:140'
    }

    // End of Chart: '<S636>/Auto_Idle'

    // SignalConversion: '<S636>/OutportBufferForcmd_AutoIdle'
    cmd_AutoIdle = MX_Gtwy_Control_B.cmd_AutoIdle_gn3f;

    // SignalConversion: '<S636>/OutportBufferForstate_Idle'
    state_Idle = rtb_state_Idle;
  } else {
    if (MX_Gtwy_Control_DWork.Auto_Idle_Function_MODE) {
      MX_Gtwy_Control_DWork.Auto_Idle_Function_MODE = false;
    }
  }

  // End of RelationalOperator: '<S637>/Compare'
  // End of Outputs for SubSystem: '<S620>/Auto_Idle_Function'
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Control_Enabled(void)
{
  boolean_T guard1 = false;

  // Inport: '<Root>/state_System'
  // During 'Enabled': '<S642>:1179'
  if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
      (state_Console != ACTIVE)) {
    // Transition: '<S642>:1165'
    // Exit Internal 'Enabled': '<S642>:1179'
    // Exit Internal 'Active': '<S642>:1197'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
      MX_Gtwy_Contr_IN_Inactive_cs2c5;

    // Entry 'Inactive': '<S642>:1209'
    state_AuxEnable = INACTIVE;
    cmd_AuxRelease = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;
    state_AuxRelease = INACTIVE;
  } else if ((state_RightPot == OORH) || (state_RightPot == OORL)) {
    // Transition: '<S642>:1164'
    // Exit Internal 'Enabled': '<S642>:1179'
    // Exit Internal 'Active': '<S642>:1197'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
      MX_Gtwy__IN_Inactive_Fault_h3so;

    // Entry 'Inactive_Fault': '<S642>:1210'
    state_AuxEnable = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;
  } else if (state_RightPot == NOT_IN_NEUTRAL) {
    // Transition: '<S642>:1167'
    // Exit Internal 'Enabled': '<S642>:1179'
    // Exit Internal 'Active': '<S642>:1197'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
      IN_Inactive_Out_Of_Neutral_gquu;

    // Entry 'Inactive_Out_Of_Neutral': '<S642>:1211'
    state_AuxEnable = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;
  } else {
    guard1 = false;
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3) {
     case MX_Gtwy_Control_IN_Active_nhnn:
      // During 'Active': '<S642>:1197'
      if ((MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux) ||
          (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb || aux_Inhibit)) {
        // Transition: '<S642>:1190'
        // Transition: '<S642>:1254'
        guard1 = true;
      } else if (((int32_T)aux_DebounceButton != 0) && (mode_RightControl !=
                  MODE_RIGHT_AUX1)) {
        // Transition: '<S642>:1256'
        state_Buzzer = SINGLE_SHORT_BEEP;
        guard1 = true;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz) {
         case MX_Gtwy_Control_IN_Low_Flow:
          aux_Flow = AUX_FLOW_LOW;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Low_Flow': '<S642>:1206'
          if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
               ACTIVE)) {
            // Transition: '<S642>:1201'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
              MX_Gtwy_Contro_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S642>:1208'
            aux_Flow = AUX_FLOW_STANDARD;
            eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
            matlab_UpdateEEVar();
          } else {
            if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                 ACTIVE)) {
              // Transition: '<S642>:1187'
              state_Buzzer = SINGLE_SHORT_BEEP;
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
              MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
                MX_Gtwy_Control_IN_Off_p5eh;

              // Entry 'Off': '<S642>:1196'
              aux_Flow = AUX_FLOW_INACTIVE;
              state_AuxEnable = INACTIVE;
              eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
              matlab_UpdateEEVar();
            }
          }
          break;

         case MX_Gtwy_Control_IN_Medium_Flow:
          aux_Flow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Medium_Flow': '<S642>:1207'
          if ((int32_T)aux_DebounceButton != 0) {
            // Transition: '<S642>:1200'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
              MX_Gtwy_Control_IN_Low_Flow;

            // Entry 'Low_Flow': '<S642>:1206'
            aux_Flow = AUX_FLOW_LOW;
            eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gtwy_Contro_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S642>:1208'
          if ((int32_T)aux_DebounceButton != 0) {
            // Transition: '<S642>:1205'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
              MX_Gtwy_Control_IN_Medium_Flow;

            // Entry 'Medium_Flow': '<S642>:1207'
            aux_Flow = AUX_FLOW_MEDIUM;
            eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
            matlab_UpdateEEVar();
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy_Control_IN_Off_p5eh:
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;

      // During 'Off': '<S642>:1196'
      if ((!aux_Inhibit) && (((int32_T)aux_DebounceButton != 0) || ((int32_T)
            MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0))) {
        // Transition: '<S642>:1189'
        state_Buzzer = SINGLE_SHORT_BEEP;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
          MX_Gtwy_Control_IN_Active_nhnn;

        // Entry 'Active': '<S642>:1197'
        MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
            MX_Gtwy_Contro_IN_Standard_Flow) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
            MX_Gtwy_Contro_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S642>:1208'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
          matlab_UpdateEEVar();
        }
      }
      break;

     case MX_Gtwy_C_IN_WAIT_FOR_AUX_PRESS:
      // During 'WAIT_FOR_AUX_PRESS': '<S642>:1287'
      if ((!aux_Inhibit) && (((int32_T)aux_DebounceButton != 0) || ((int32_T)
            MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0))) {
        // Transition: '<S642>:1292'
        state_Buzzer = SINGLE_SHORT_BEEP;

        // Transition: '<S642>:1331'
        if ((eeMirror.ee_AuxFlow == AUX_FLOW_LOW) && (!((int32_T)
              eeMirror.deluxe_G5 != 0)) && (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION
             != NON_FUNCTIONAL)) {
          // Transition: '<S642>:1281'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
            MX_Gtwy_Control_IN_Active_nhnn;

          // Entry 'Active': '<S642>:1197'
          MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
          if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
              MX_Gtwy_Control_IN_Low_Flow) {
          } else {
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
              MX_Gtwy_Control_IN_Low_Flow;

            // Entry 'Low_Flow': '<S642>:1206'
            aux_Flow = AUX_FLOW_LOW;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
            matlab_UpdateEEVar();
          }
        } else {
          // Transition: '<S642>:1275'
          if ((eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) && (!((int32_T)
                eeMirror.deluxe_G5 != 0)) &&
              (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
            // Transition: '<S642>:1270'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
              MX_Gtwy_Control_IN_Active_nhnn;

            // Entry 'Active': '<S642>:1197'
            MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
                MX_Gtwy_Control_IN_Medium_Flow) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
                MX_Gtwy_Control_IN_Medium_Flow;

              // Entry 'Medium_Flow': '<S642>:1207'
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;
              eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
              matlab_UpdateEEVar();
            }
          } else {
            // Transition: '<S642>:1272'
            // Transition: '<S642>:1274'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
              MX_Gtwy_Control_IN_Active_nhnn;

            // Entry 'Active': '<S642>:1197'
            MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
                MX_Gtwy_Contro_IN_Standard_Flow) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
                MX_Gtwy_Contro_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S642>:1208'
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              matlab_UpdateEEVar();
            }
          }
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }

    if (guard1) {
      // Exit Internal 'Active': '<S642>:1197'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
        MX_Gtwy_Control_IN_Off_p5eh;

      // Entry 'Off': '<S642>:1196'
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  }

  // End of Inport: '<Root>/state_System'
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Contr_Functional_f20sl3(void)
{
  // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
  //   Inport: '<Root>/cmd_AuxEnable_ACD'
  //   Inport: '<Root>/state_ACD_CAN'
  //   Inport: '<Root>/state_ST_CAN'

  // During 'Functional': '<S642>:1156'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:1152'
    // Exit Internal 'Functional': '<S642>:1156'
    // Exit Internal 'Enabled': '<S642>:1179'
    // Exit Internal 'Active': '<S642>:1197'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS =
      MX_Gtwy__IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S642>:1235'
    // Transition: '<S642>:1236'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:1243'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:1154'
    // Exit Internal 'Functional': '<S642>:1156'
    // Exit Internal 'Enabled': '<S642>:1179'
    // Exit Internal 'Active': '<S642>:1197'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS =
      MX_Gtwy_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S642>:1244'
    // Transition: '<S642>:1245'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:1252'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
    }
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz) {
     case MX_Gtwy_Control_IN_Enabled_djid:
      MX_Gtwy_Control_Enabled();
      break;

     case MX_Gtwy_Contr_IN_Inactive_cs2c5:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxRelease = INACTIVE;

      // Inport: '<Root>/state_System' incorporates:
      //   Inport: '<Root>/flag_InitEERead'

      // During 'Inactive': '<S642>:1209'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (state_Console == ACTIVE) && flag_InitEERead) {
        // Transition: '<S642>:1163'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
          MX_Gtwy_Control_IN_Enabled_djid;

        // Entry Internal 'Enabled': '<S642>:1179'
        // Transition: '<S642>:1280'
        if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
          // Transition: '<S642>:1273'
          if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 ==
              MX_Gtwy_Control_IN_Off_p5eh) {
          } else {
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
              MX_Gtwy_Control_IN_Off_p5eh;

            // Entry 'Off': '<S642>:1196'
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
        } else {
          // Transition: '<S642>:1288'
          if (((CONSTANT_DATA->EMEA_CONTROLS_OPTION_B == NON_FUNCTIONAL) &&
               (CONSTANT_DATA->EMEA_CONTROLS_OPTION_C == NON_FUNCTIONAL)) ||
              MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive) {
            // Transition: '<S642>:1271'
            // Transition: '<S642>:1331'
            if ((eeMirror.ee_AuxFlow == AUX_FLOW_LOW) && (!((int32_T)
                  eeMirror.deluxe_G5 != 0)) &&
                (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
              // Transition: '<S642>:1281'
              if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 ==
                  MX_Gtwy_Control_IN_Active_nhnn) {
              } else {
                MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
                  MX_Gtwy_Control_IN_Active_nhnn;

                // Entry 'Active': '<S642>:1197'
                MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
              }

              if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
                  MX_Gtwy_Control_IN_Low_Flow) {
              } else {
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
                  MX_Gtwy_Control_IN_Low_Flow;

                // Entry 'Low_Flow': '<S642>:1206'
                aux_Flow = AUX_FLOW_LOW;
                state_AuxEnable = ACTIVE_MODE_ONE;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
            } else {
              // Transition: '<S642>:1275'
              if ((eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) && (!((int32_T)
                    eeMirror.deluxe_G5 != 0)) &&
                  (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
                // Transition: '<S642>:1270'
                if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 ==
                    MX_Gtwy_Control_IN_Active_nhnn) {
                } else {
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
                    MX_Gtwy_Control_IN_Active_nhnn;

                  // Entry 'Active': '<S642>:1197'
                  MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
                }

                if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
                    MX_Gtwy_Control_IN_Medium_Flow) {
                } else {
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
                    MX_Gtwy_Control_IN_Medium_Flow;

                  // Entry 'Medium_Flow': '<S642>:1207'
                  aux_Flow = AUX_FLOW_MEDIUM;
                  state_AuxEnable = ACTIVE_MODE_ONE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                  matlab_UpdateEEVar();
                }
              } else {
                // Transition: '<S642>:1272'
                // Transition: '<S642>:1274'
                if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 ==
                    MX_Gtwy_Control_IN_Active_nhnn) {
                } else {
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
                    MX_Gtwy_Control_IN_Active_nhnn;

                  // Entry 'Active': '<S642>:1197'
                  MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
                }

                if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
                    MX_Gtwy_Contro_IN_Standard_Flow) {
                } else {
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
                    MX_Gtwy_Contro_IN_Standard_Flow;

                  // Entry 'Standard_Flow': '<S642>:1208'
                  aux_Flow = AUX_FLOW_STANDARD;
                  state_AuxEnable = ACTIVE_MODE_ONE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                  matlab_UpdateEEVar();
                }
              }
            }
          } else {
            // Transition: '<S642>:1291'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
              MX_Gtwy_C_IN_WAIT_FOR_AUX_PRESS;
          }
        }
      }
      break;

     case MX_Gtwy__IN_Inactive_Fault_h3so:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // Inport: '<Root>/state_System'
      // During 'Inactive_Fault': '<S642>:1210'
      if ((state_RightPot != OORH) && (state_RightPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S642>:1162'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
          MX_Gtwy_Control_IN_Enabled_djid;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 ==
            MX_Gtwy_Control_IN_Off_p5eh) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
            MX_Gtwy_Control_IN_Off_p5eh;

          // Entry 'Off': '<S642>:1196'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case IN_Inactive_Out_Of_Neutral_gquu:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S642>:1211'
      if (state_Console != ACTIVE) {
        // Transition: '<S642>:1174'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:1209'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      } else if ((state_RightPot == OORH) || (state_RightPot == OORL)) {
        // Transition: '<S642>:1166'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
          MX_Gtwy__IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S642>:1210'
      } else {
        if (state_RightPot != NOT_IN_NEUTRAL) {
          // Transition: '<S642>:1170'
          if ((!aux_Inhibit) && (((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0))) {
            // Transition: '<S642>:1169'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
              MX_Gtwy_Control_IN_Enabled_djid;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 ==
                MX_Gtwy_Control_IN_Active_nhnn) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
                MX_Gtwy_Control_IN_Active_nhnn;

              // Entry 'Active': '<S642>:1197'
              MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = true;
            }

            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz ==
                MX_Gtwy_Contro_IN_Standard_Flow) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
                MX_Gtwy_Contro_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S642>:1208'
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              matlab_UpdateEEVar();
            }
          } else {
            // Transition: '<S642>:1172'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
              MX_Gtwy_Control_IN_Enabled_djid;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 ==
                MX_Gtwy_Control_IN_Off_p5eh) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
                MX_Gtwy_Control_IN_Off_p5eh;

              // Entry 'Off': '<S642>:1196'
              eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
              matlab_UpdateEEVar();
            }
          }
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }

  // End of Inport: '<Root>/cmd_AuxEnable_ST'
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy__enter_internal_Enabled(void)
{
  // Entry Internal 'Enabled': '<S642>:310'
  // Transition: '<S642>:375'
  if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
    // Transition: '<S642>:425'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut ==
        MX_Gtwy_Control_IN_Off_p5eh) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
        MX_Gtwy_Control_IN_Off_p5eh;

      // Entry 'Off': '<S642>:295'
      aux_Flow = AUX_FLOW_INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    // Transition: '<S642>:424'
    if ((eeMirror.ee_AuxFlow == AUX_FLOW_LOW) &&
        (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
      // Transition: '<S642>:222'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
        MX_Gtwy_Control_IN_Active_nhnn;
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj ==
          MX_Gtwy_Control_IN_Low_Flow) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
          MX_Gtwy_Control_IN_Low_Flow;

        // Entry 'Low_Flow': '<S642>:229'
        aux_Flow = AUX_FLOW_LOW;
        eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
        state_AuxEnable = ACTIVE_MODE_ONE;
        matlab_UpdateEEVar();
      }
    } else {
      // Transition: '<S642>:387'
      if ((eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) &&
          (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
        // Transition: '<S642>:225'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
          MX_Gtwy_Control_IN_Active_nhnn;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj ==
            MX_Gtwy_Control_IN_Medium_Flow) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
            MX_Gtwy_Control_IN_Medium_Flow;

          // Entry 'Medium_Flow': '<S642>:230'
          aux_Flow = AUX_FLOW_MEDIUM;
          eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      } else {
        // Transition: '<S642>:388'
        // Transition: '<S642>:362'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
          MX_Gtwy_Control_IN_Active_nhnn;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj ==
            MX_Gtwy_Contro_IN_Standard_Flow) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
            MX_Gtwy_Contro_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S642>:231'
          aux_Flow = AUX_FLOW_STANDARD;
          eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      }
    }
  }
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Control_Functional(void)
{
  // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
  //   Inport: '<Root>/cmd_AuxEnable_ACD'
  //   Inport: '<Root>/state_ACD_CAN'
  //   Inport: '<Root>/state_ST_CAN'

  // During 'Functional': '<S642>:395'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:535'
    // Exit Internal 'Functional': '<S642>:395'
    // Exit Internal 'Aux_Relief_G5': '<S642>:573'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;

    // Exit Internal 'Enabled': '<S642>:310'
    // Exit Internal 'Active': '<S642>:452'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2 =
      MX_Gtwy__IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S642>:519'
    // Transition: '<S642>:520'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:526'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:537'
    // Exit Internal 'Functional': '<S642>:395'
    // Exit Internal 'Aux_Relief_G5': '<S642>:573'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;

    // Exit Internal 'Enabled': '<S642>:310'
    // Exit Internal 'Active': '<S642>:452'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2 =
      MX_Gtwy_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S642>:527'
    // Transition: '<S642>:528'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:534'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional) {
     case MX_Gtwy_Contro_IN_Aux_Relief_G5:
      // Inport: '<Root>/state_System'
      // During 'Aux_Relief_G5': '<S642>:573'
      if (((state_Engine != ENGINE_NOT_RUNNING) && (state_Engine !=
            ENGINE_INITIALIZE)) || (state_EngineSpeed == NO_SIGNAL) ||
          (state_System != SYS_NORMAL)) {
        // Transition: '<S642>:575'
        // Exit Internal 'Aux_Relief_G5': '<S642>:573'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Contro_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S642>:232'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
        state_AuxRelease = INACTIVE;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5) {
         case MX_Gtwy_Control_IN_Ack:
          aux_Flow = AUX_RELEASE_ACK;

          // During 'Ack': '<S642>:578'
          if (button_AuxReleaseAck) {
            // Transition: '<S642>:581'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
              MX_Gtwy_Control_IN_Release_Base;
            MX_Gtwy_Control_DWork.temporalCounter_i2_lljs = 0U;

            // Entry 'Release_Base': '<S642>:580'
            aux_Flow = AUX_RELEASE_IN_PROGRESS;
            cmd_AuxRelease = BASE_ACTIVE;
          } else {
            if (button_AuxReleaseBack) {
              // Transition: '<S642>:584'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
                MX_Gtwy_Control_IN_Wait_dwz2;

              // Entry 'Wait': '<S642>:576'
              aux_Flow = AUX_RELEASE_WAIT;
              cmd_AuxRelease = INACTIVE;
            }
          }
          break;

         case MX_Gtwy_Control_IN_Confirm:
          aux_Flow = AUX_RELEASE_CONFIRM;
          cmd_AuxRelease = INACTIVE;

          // During 'Confirm': '<S642>:589'
          if ((MX_Gtwy_Control_DWork.temporalCounter_i2_lljs >=
               CONSTANT_DATA->AUX_CONFIRM_TIME) || button_AuxReleaseExit) {
            // Transition: '<S642>:592'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
              MX_Gtwy_Control_IN_Wait_dwz2;

            // Entry 'Wait': '<S642>:576'
            aux_Flow = AUX_RELEASE_WAIT;
          }
          break;

         case MX_Gtwy_Control_IN_Release_Base:
          aux_Flow = AUX_RELEASE_IN_PROGRESS;
          cmd_AuxRelease = BASE_ACTIVE;

          // During 'Release_Base': '<S642>:580'
          if (MX_Gtwy_Control_DWork.temporalCounter_i2_lljs >=
              CONSTANT_DATA->AUX_RELEASE_TIME) {
            // Transition: '<S642>:583'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
              MX_Gtwy_Control_IN_Release_Rod;
            MX_Gtwy_Control_DWork.temporalCounter_i2_lljs = 0U;

            // Entry 'Release_Rod': '<S642>:582'
            cmd_AuxRelease = ROD_ACTIVE;
          }
          break;

         case MX_Gtwy_Control_IN_Release_Rod:
          cmd_AuxRelease = ROD_ACTIVE;

          // During 'Release_Rod': '<S642>:582'
          if (MX_Gtwy_Control_DWork.temporalCounter_i2_lljs >=
              CONSTANT_DATA->AUX_RELEASE_TIME) {
            // Transition: '<S642>:590'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
              MX_Gtwy_Control_IN_Confirm;
            MX_Gtwy_Control_DWork.temporalCounter_i2_lljs = 0U;

            // Entry 'Confirm': '<S642>:589'
            aux_Flow = AUX_RELEASE_CONFIRM;
            cmd_AuxRelease = INACTIVE;
          }
          break;

         case MX_Gtwy_Control_IN_Wait_dwz2:
          aux_Flow = AUX_RELEASE_WAIT;
          cmd_AuxRelease = INACTIVE;

          // During 'Wait': '<S642>:576'
          if ((int32_T)MX_Gtwy_Control_B.FixPtRelationalOperator_cuej != 0) {
            // Transition: '<S642>:579'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
              MX_Gtwy_Control_IN_Ack;

            // Entry 'Ack': '<S642>:578'
            aux_Flow = AUX_RELEASE_ACK;
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy_Control_IN_Enabled:
      // Inport: '<Root>/state_System'
      // During 'Enabled': '<S642>:310'
      if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
          (state_Console != ACTIVE)) {
        // Transition: '<S642>:216'
        // Exit Internal 'Enabled': '<S642>:310'
        // Exit Internal 'Active': '<S642>:452'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Contro_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S642>:232'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
        state_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S642>:392'
        // Exit Internal 'Enabled': '<S642>:310'
        // Exit Internal 'Active': '<S642>:452'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Contr_IN_Inactive_Fault;

        // Entry 'Inactive_Fault': '<S642>:391'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if (state_AuxPot == NOT_IN_NEUTRAL) {
        // Transition: '<S642>:405'
        // Exit Internal 'Enabled': '<S642>:310'
        // Exit Internal 'Active': '<S642>:452'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_G_IN_Inactive_Out_Of_Neutral;

        // Entry 'Inactive_Out_Of_Neutral': '<S642>:404'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut) {
         case MX_Gtwy_Control_IN_Active_nhnn:
          // During 'Active': '<S642>:452'
          if (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux)
          {
            // Transition: '<S642>:451'
            // Exit Internal 'Active': '<S642>:452'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
              MX_Gtwy_Control_IN_Off_p5eh;

            // Entry 'Off': '<S642>:295'
            aux_Flow = AUX_FLOW_INACTIVE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            state_AuxEnable = INACTIVE;
            matlab_UpdateEEVar();
          } else {
            switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj) {
             case MX_Gtwy_Control_IN_Low_Flow:
              aux_Flow = AUX_FLOW_LOW;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Low_Flow': '<S642>:229'
              if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
                   ACTIVE)) {
                // Transition: '<S642>:214'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
                  MX_Gtwy_Contro_IN_Standard_Flow;

                // Entry 'Standard_Flow': '<S642>:231'
                aux_Flow = AUX_FLOW_STANDARD;
                eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                     ACTIVE)) {
                  // Transition: '<S642>:314'
                  state_Buzzer = SINGLE_SHORT_BEEP;
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
                    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
                    MX_Gtwy_Control_IN_Off_p5eh;

                  // Entry 'Off': '<S642>:295'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             case MX_Gtwy_Control_IN_Medium_Flow:
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Medium_Flow': '<S642>:230'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S642>:224'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
                  MX_Gtwy_Control_IN_Low_Flow;

                // Entry 'Low_Flow': '<S642>:229'
                aux_Flow = AUX_FLOW_LOW;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gtwy_Contro_IN_Standard_Flow:
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Standard_Flow': '<S642>:231'
              if (((int32_T)aux_DebounceButton != 0) &&
                  (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
                // Transition: '<S642>:227'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
                  MX_Gtwy_Control_IN_Medium_Flow;

                // Entry 'Medium_Flow': '<S642>:230'
                aux_Flow = AUX_FLOW_MEDIUM;
                eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) &&
                    (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION == NON_FUNCTIONAL)) {
                  // Transition: '<S642>:443'
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
                    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
                    MX_Gtwy_Control_IN_Off_p5eh;

                  // Entry 'Off': '<S642>:295'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             default:
              // Unreachable state, for coverage only
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
              break;
            }
          }
          break;

         case MX_Gtwy_Control_IN_Off_p5eh:
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxEnable = INACTIVE;

          // During 'Off': '<S642>:295'
          if (((int32_T)aux_DebounceButton != 0) || ((int32_T)
               MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0)) {
            // Transition: '<S642>:296'
            if (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION == NON_FUNCTIONAL) {
              // Transition: '<S642>:462'
              // Transition: '<S642>:461'
            } else {
              // Transition: '<S642>:459'
              state_Buzzer = SINGLE_SHORT_BEEP;
            }

            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
              MX_Gtwy_Control_IN_Active_nhnn;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj ==
                MX_Gtwy_Contro_IN_Standard_Flow) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
                MX_Gtwy_Contro_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S642>:231'
              aux_Flow = AUX_FLOW_STANDARD;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              matlab_UpdateEEVar();
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy_Contro_IN_Inactive_cs2c:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxRelease = INACTIVE;

      // Inport: '<Root>/state_System' incorporates:
      //   Inport: '<Root>/flag_InitEERead'

      // During 'Inactive': '<S642>:232'
      if ((state_Engine != ENGINE_CRANKING) && ((state_Engine == ENGINE_RUNNING)
           || (CONSTANT_DATA->AUX_RELEASE_FUNCTION == NON_FUNCTIONAL) ||
           ((!((int32_T)eeMirror.deluxe_G5 != 0)) &&
            (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL))) &&
          (state_System == SYS_NORMAL) && (state_Console == ACTIVE) &&
          flag_InitEERead) {
        // Transition: '<S642>:215'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Control_IN_Enabled;
        MX_Gtwy__enter_internal_Enabled();
      } else {
        if ((CONSTANT_DATA->AUX_RELEASE_FUNCTION != NON_FUNCTIONAL) &&
            ((state_Engine == ENGINE_NOT_RUNNING) || (state_Engine ==
              ENGINE_INITIALIZE)) && (state_EngineSpeed != NO_SIGNAL) &&
            (state_System == SYS_NORMAL) && ((int32_T)eeMirror.deluxe_G5 != 0) &&
            flag_InitEERead && (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION ==
                                NON_FUNCTIONAL)) {
          // Transition: '<S642>:574'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
            MX_Gtwy_Contro_IN_Aux_Relief_G5;

          // Entry Internal 'Aux_Relief_G5': '<S642>:573'
          // Transition: '<S642>:577'
          if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 ==
              MX_Gtwy_Control_IN_Wait_dwz2) {
          } else {
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
              MX_Gtwy_Control_IN_Wait_dwz2;

            // Entry 'Wait': '<S642>:576'
            aux_Flow = AUX_RELEASE_WAIT;
          }
        }
      }
      break;

     case MX_Gtwy_Contr_IN_Inactive_Fault:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // Inport: '<Root>/state_System'
      // During 'Inactive_Fault': '<S642>:391'
      if ((state_AuxPot != OORH) && (state_AuxPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S642>:393'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Control_IN_Enabled;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut ==
            MX_Gtwy_Control_IN_Off_p5eh) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
            MX_Gtwy_Control_IN_Off_p5eh;

          // Entry 'Off': '<S642>:295'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case MX_G_IN_Inactive_Out_Of_Neutral:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S642>:404'
      if (state_Console != ACTIVE) {
        // Transition: '<S642>:449'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Contro_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S642>:232'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S642>:408'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Contr_IN_Inactive_Fault;

        // Entry 'Inactive_Fault': '<S642>:391'
      } else {
        if (state_AuxPot != NOT_IN_NEUTRAL) {
          // Transition: '<S642>:410'
          if ((((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0)) &&
              (aux_Flow != AUX_FLOW_INACTIVE)) {
            // Transition: '<S642>:419'
            // Transition: '<S642>:420'
            state_Buzzer = SINGLE_SHORT_BEEP;
          } else {
            // Transition: '<S642>:418'
            // Transition: '<S642>:421'
          }

          // Transition: '<S642>:406'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
            MX_Gtwy_Control_IN_Enabled;
          MX_Gtwy__enter_internal_Enabled();
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }

  // End of Inport: '<Root>/cmd_AuxEnable_ST'
}

// Function for Chart: '<S621>/Aux_Control'
static void MX__enter_internal_Enabled_ls1c(void)
{
  // Entry Internal 'Enabled': '<S642>:865'
  // Transition: '<S642>:871'
  if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
    // Transition: '<S642>:872'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 ==
        MX_Gtwy_Control_IN_Off_p5eh) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
        MX_Gtwy_Control_IN_Off_p5eh;

      // Entry 'Off': '<S642>:884'
      aux_Flow = AUX_FLOW_INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    // Transition: '<S642>:873'
    if (eeMirror.ee_AuxFlow == AUX_FLOW_LOW) {
      // Transition: '<S642>:877'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
        MX_Gtwy_Control_IN_Active_nhnn;
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn ==
          MX_Gtwy_Control_IN_Low_Flow) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
          MX_Gtwy_Control_IN_Low_Flow;

        // Entry 'Low_Flow': '<S642>:890'
        aux_Flow = AUX_FLOW_LOW;
        eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
        state_AuxEnable = ACTIVE_MODE_ONE;
        matlab_UpdateEEVar();
      }
    } else {
      // Transition: '<S642>:878'
      if (eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) {
        // Transition: '<S642>:879'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
          MX_Gtwy_Control_IN_Active_nhnn;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn ==
            MX_Gtwy_Control_IN_Medium_Flow) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
            MX_Gtwy_Control_IN_Medium_Flow;

          // Entry 'Medium_Flow': '<S642>:891'
          aux_Flow = AUX_FLOW_MEDIUM;
          eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      } else {
        // Transition: '<S642>:880'
        // Transition: '<S642>:881'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
          MX_Gtwy_Control_IN_Active_nhnn;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn ==
            MX_Gtwy_Contro_IN_Standard_Flow) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
            MX_Gtwy_Contro_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S642>:892'
          aux_Flow = AUX_FLOW_STANDARD;
          eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      }
    }
  }
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Control_Functional_f20s(void)
{
  // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
  //   Inport: '<Root>/cmd_AuxEnable_ACD'
  //   Inport: '<Root>/state_ACD_CAN'
  //   Inport: '<Root>/state_ST_CAN'

  // During 'Functional': '<S642>:846'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:842'
    // Exit Internal 'Functional': '<S642>:846'
    // Exit Internal 'Enabled': '<S642>:865'
    // Exit Internal 'Active': '<S642>:885'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2 =
      MX_Gtwy__IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S642>:897'
    // Transition: '<S642>:898'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:905'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:844'
    // Exit Internal 'Functional': '<S642>:846'
    // Exit Internal 'Enabled': '<S642>:865'
    // Exit Internal 'Active': '<S642>:885'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2 =
      MX_Gtwy_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S642>:906'
    // Transition: '<S642>:907'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:914'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl) {
     case MX_Gtwy_Control_IN_Enabled_djid:
      // Inport: '<Root>/state_System'
      // During 'Enabled': '<S642>:865'
      if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
          (state_Console != ACTIVE)) {
        // Transition: '<S642>:855'
        // Exit Internal 'Enabled': '<S642>:865'
        // Exit Internal 'Active': '<S642>:885'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:894'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S642>:854'
        // Exit Internal 'Enabled': '<S642>:865'
        // Exit Internal 'Active': '<S642>:885'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy__IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S642>:895'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if (state_AuxPot == NOT_IN_NEUTRAL) {
        // Transition: '<S642>:857'
        // Exit Internal 'Enabled': '<S642>:865'
        // Exit Internal 'Active': '<S642>:885'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          IN_Inactive_Out_Of_Neutral_gquu;

        // Entry 'Inactive_Out_Of_Neutral': '<S642>:896'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0) {
         case MX_Gtwy_Control_IN_Active_nhnn:
          // During 'Active': '<S642>:885'
          if (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux)
          {
            // Transition: '<S642>:875'
            // Exit Internal 'Active': '<S642>:885'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
              MX_Gtwy_Control_IN_Off_p5eh;

            // Entry 'Off': '<S642>:884'
            aux_Flow = AUX_FLOW_INACTIVE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            state_AuxEnable = INACTIVE;
            matlab_UpdateEEVar();
          } else {
            switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn) {
             case MX_Gtwy_Control_IN_Low_Flow:
              aux_Flow = AUX_FLOW_LOW;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Low_Flow': '<S642>:890'
              if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
                   ACTIVE)) {
                // Transition: '<S642>:887'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
                  MX_Gtwy_Contro_IN_Standard_Flow;

                // Entry 'Standard_Flow': '<S642>:892'
                aux_Flow = AUX_FLOW_STANDARD;
                eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                     ACTIVE)) {
                  // Transition: '<S642>:874'
                  state_Buzzer = SINGLE_SHORT_BEEP;
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
                    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
                    MX_Gtwy_Control_IN_Off_p5eh;

                  // Entry 'Off': '<S642>:884'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             case MX_Gtwy_Control_IN_Medium_Flow:
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Medium_Flow': '<S642>:891'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S642>:886'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
                  MX_Gtwy_Control_IN_Low_Flow;

                // Entry 'Low_Flow': '<S642>:890'
                aux_Flow = AUX_FLOW_LOW;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gtwy_Contro_IN_Standard_Flow:
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Standard_Flow': '<S642>:892'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S642>:888'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
                  MX_Gtwy_Control_IN_Medium_Flow;

                // Entry 'Medium_Flow': '<S642>:891'
                aux_Flow = AUX_FLOW_MEDIUM;
                eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                matlab_UpdateEEVar();
              }
              break;

             default:
              // Unreachable state, for coverage only
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
              break;
            }
          }
          break;

         case MX_Gtwy_Control_IN_Off_p5eh:
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxEnable = INACTIVE;

          // During 'Off': '<S642>:884'
          if (((int32_T)aux_DebounceButton != 0) || ((int32_T)
               MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0)) {
            // Transition: '<S642>:876'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
              MX_Gtwy_Control_IN_Active_nhnn;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn ==
                MX_Gtwy_Contro_IN_Standard_Flow) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
                MX_Gtwy_Contro_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S642>:892'
              aux_Flow = AUX_FLOW_STANDARD;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              matlab_UpdateEEVar();
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy_Contr_IN_Inactive_cs2c5:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // Inport: '<Root>/state_System' incorporates:
      //   Inport: '<Root>/flag_InitEERead'

      // During 'Inactive': '<S642>:894'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (state_Console == ACTIVE) && flag_InitEERead) {
        // Transition: '<S642>:853'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy_Control_IN_Enabled_djid;
        MX__enter_internal_Enabled_ls1c();
      }
      break;

     case MX_Gtwy__IN_Inactive_Fault_h3so:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // Inport: '<Root>/state_System'
      // During 'Inactive_Fault': '<S642>:895'
      if ((state_AuxPot != OORH) && (state_AuxPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S642>:852'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy_Control_IN_Enabled_djid;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 ==
            MX_Gtwy_Control_IN_Off_p5eh) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
            MX_Gtwy_Control_IN_Off_p5eh;

          // Entry 'Off': '<S642>:884'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case IN_Inactive_Out_Of_Neutral_gquu:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S642>:896'
      if (state_Console != ACTIVE) {
        // Transition: '<S642>:864'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:894'
        cmd_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S642>:856'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy__IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S642>:895'
      } else {
        if (state_AuxPot != NOT_IN_NEUTRAL) {
          // Transition: '<S642>:860'
          if ((((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0)) &&
              (aux_Flow != AUX_FLOW_INACTIVE)) {
            // Transition: '<S642>:859'
            // Transition: '<S642>:861'
            state_Buzzer = SINGLE_SHORT_BEEP;
          } else {
            // Transition: '<S642>:862'
            // Transition: '<S642>:863'
          }

          // Transition: '<S642>:858'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
            MX_Gtwy_Control_IN_Enabled_djid;
          MX__enter_internal_Enabled_ls1c();
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }

  // End of Inport: '<Root>/cmd_AuxEnable_ST'
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Control_SIRIUS2(void)
{
  // During 'SIRIUS2': '<S642>:840'
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2) {
   case MX_Gtwy_IN_Aux_Enable_State_ACD:
    // Inport: '<Root>/cmd_AuxEnable_ACD' incorporates:
    //   Inport: '<Root>/state_ACD_CAN'
    //   Inport: '<Root>/state_System'

    // During 'Aux_Enable_State_ACD': '<S642>:906'
    if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
      // Transition: '<S642>:845'
      // Exit Internal 'Aux_Enable_State_ACD': '<S642>:906'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2 =
        MX_Gtwy_Cont_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S642>:846'
      // Transition: '<S642>:851'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl ==
          MX_Gtwy_Contr_IN_Inactive_cs2c5) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:894'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz) {
       case MX_Gtwy_Con_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S642>:912'
        break;

       case MX_Gtwy_Contro_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S642>:913'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S642>:911'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz =
            MX_Gtwy_Contro_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S642>:914'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gtwy_Contro_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S642>:914'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S642>:908'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz =
            MX_Gtwy_Contro_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S642>:913'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux))
          {
            // Transition: '<S642>:909'
            // Transition: '<S642>:910'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz =
              MX_Gtwy_Con_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S642>:912'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }

    // End of Inport: '<Root>/cmd_AuxEnable_ACD'
    break;

   case MX_Gtwy__IN_Aux_Enable_State_ST:
    // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
    //   Inport: '<Root>/state_ST_CAN'
    //   Inport: '<Root>/state_System'

    // During 'Aux_Enable_State_ST': '<S642>:897'
    if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
      // Transition: '<S642>:843'
      // Exit Internal 'Aux_Enable_State_ST': '<S642>:897'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2 =
        MX_Gtwy_Cont_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S642>:846'
      // Transition: '<S642>:851'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl ==
          MX_Gtwy_Contr_IN_Inactive_cs2c5) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:894'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t) {
       case MX_Gtwy_Con_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S642>:903'
        break;

       case MX_Gtwy_Contro_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S642>:904'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S642>:901'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t =
            MX_Gtwy_Contro_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S642>:905'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gtwy_Contro_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S642>:905'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S642>:899'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t =
            MX_Gtwy_Contro_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S642>:904'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux))
          {
            // Transition: '<S642>:900'
            // Transition: '<S642>:902'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t =
              MX_Gtwy_Con_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S642>:903'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }

    // End of Inport: '<Root>/cmd_AuxEnable_ST'
    break;

   case MX_Gtwy_Cont_IN_Functional_jgxb:
    MX_Gtwy_Control_Functional_f20s();
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_enter_internal_Enabled_ls1cz(void)
{
  // Entry Internal 'Enabled': '<S642>:687'
  // Transition: '<S642>:692'
  if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
    // Transition: '<S642>:693'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz ==
        MX_Gtwy_Control_IN_Off_p5eh) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
        MX_Gtwy_Control_IN_Off_p5eh;

      // Entry 'Off': '<S642>:704'
      aux_Flow = AUX_FLOW_INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    // Transition: '<S642>:694'
    if (eeMirror.ee_AuxFlow == AUX_FLOW_LOW) {
      // Transition: '<S642>:699'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
        MX_Gtwy_Control_IN_Active_nhnn;
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active ==
          MX_Gtwy_Contro_IN_Low_Flow_m2d1) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
          MX_Gtwy_Contro_IN_Low_Flow_m2d1;

        // Entry 'Low_Flow': '<S642>:714'
        aux_Flow = AUX_FLOW_LOW;
        eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
        state_AuxEnable = ACTIVE_MODE_ONE;
        matlab_UpdateEEVar();
      }
    } else {
      // Transition: '<S642>:700'
      if (eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) {
        // Transition: '<S642>:701'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
          MX_Gtwy_Control_IN_Active_nhnn;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active ==
            MX_Gtwy_Con_IN_Medium_Flow_btkm) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
            MX_Gtwy_Con_IN_Medium_Flow_btkm;

          // Entry 'Medium_Flow': '<S642>:715'
          aux_Flow = AUX_FLOW_MEDIUM;
          eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      } else {
        // Transition: '<S642>:702'
        if (eeMirror.ee_AuxFlow == AUX_FLOW_STANDARD) {
          // Transition: '<S642>:703'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
            MX_Gtwy_Control_IN_Active_nhnn;
          if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active ==
              MX_Gtwy_C_IN_Standard_Flow_aw1n) {
          } else {
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
              MX_Gtwy_C_IN_Standard_Flow_aw1n;

            // Entry 'Standard_Flow': '<S642>:716'
            aux_Flow = AUX_FLOW_STANDARD;
            eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            matlab_UpdateEEVar();
          }
        } else {
          // Transition: '<S642>:837'
          // Transition: '<S642>:836'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
            MX_Gtwy_Control_IN_Active_nhnn;
          if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active ==
              MX_Gtwy_Control_IN_High_Flow) {
          } else {
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
              MX_Gtwy_Control_IN_High_Flow;

            // Entry 'High_Flow': '<S642>:834'
            aux_Flow = AUX_FLOW_HIGH;
            eeMirror.ee_AuxFlow = AUX_FLOW_HIGH;
            state_AuxEnable = ACTIVE_MODE_ONE;
            matlab_UpdateEEVar();
          }
        }
      }
    }
  }
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Contro_Functional_f20sl(void)
{
  // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
  //   Inport: '<Root>/cmd_AuxEnable_ACD'
  //   Inport: '<Root>/state_ACD_CAN'
  //   Inport: '<Root>/state_ST_CAN'

  // During 'Functional': '<S642>:666'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:662'
    // Exit Internal 'Functional': '<S642>:666'
    // Exit Internal 'Enabled': '<S642>:687'
    // Exit Internal 'Active': '<S642>:705'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW =
      MX_Gtwy__IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S642>:733'
    // Transition: '<S642>:734'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:741'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S642>:664'
    // Exit Internal 'Functional': '<S642>:666'
    // Exit Internal 'Enabled': '<S642>:687'
    // Exit Internal 'Active': '<S642>:705'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW =
      MX_Gtwy_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S642>:742'
    // Transition: '<S642>:743'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq ==
        MX_Gtwy_Contro_IN_Standard_Flow) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq =
        MX_Gtwy_Contro_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S642>:750'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij) {
     case MX_Gtwy_Control_IN_Enabled_djid:
      // Inport: '<Root>/state_System'
      // During 'Enabled': '<S642>:687'
      if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
          (state_Console != ACTIVE)) {
        // Transition: '<S642>:675'
        // Exit Internal 'Enabled': '<S642>:687'
        // Exit Internal 'Active': '<S642>:705'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:717'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S642>:674'
        // Exit Internal 'Enabled': '<S642>:687'
        // Exit Internal 'Active': '<S642>:705'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy__IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S642>:718'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if (state_AuxPot == NOT_IN_NEUTRAL) {
        // Transition: '<S642>:677'
        // Exit Internal 'Enabled': '<S642>:687'
        // Exit Internal 'Active': '<S642>:705'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          IN_Inactive_Out_Of_Neutral_gquu;

        // Entry 'Inactive_Out_Of_Neutral': '<S642>:719'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz) {
         case MX_Gtwy_Control_IN_Active_nhnn:
          // During 'Active': '<S642>:705'
          if (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux)
          {
            // Transition: '<S642>:697'
            // Exit Internal 'Active': '<S642>:705'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
              MX_Gtwy_Control_IN_Off_p5eh;

            // Entry 'Off': '<S642>:704'
            aux_Flow = AUX_FLOW_INACTIVE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            state_AuxEnable = INACTIVE;
            matlab_UpdateEEVar();
          } else {
            switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Active) {
             case MX_Gtwy_Control_IN_High_Flow:
              aux_Flow = AUX_FLOW_HIGH;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'High_Flow': '<S642>:834'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S642>:838'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
                  MX_Gtwy_C_IN_Standard_Flow_aw1n;

                // Entry 'Standard_Flow': '<S642>:716'
                aux_Flow = AUX_FLOW_STANDARD;
                eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gtwy_Contro_IN_Low_Flow_m2d1:
              aux_Flow = AUX_FLOW_LOW;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Low_Flow': '<S642>:714'
              if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
                   ACTIVE)) {
                // Transition: '<S642>:709'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
                  MX_Gtwy_Control_IN_High_Flow;

                // Entry 'High_Flow': '<S642>:834'
                aux_Flow = AUX_FLOW_HIGH;
                eeMirror.ee_AuxFlow = AUX_FLOW_HIGH;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                     ACTIVE)) {
                  // Transition: '<S642>:695'
                  state_Buzzer = SINGLE_SHORT_BEEP;
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
                    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
                    MX_Gtwy_Control_IN_Off_p5eh;

                  // Entry 'Off': '<S642>:704'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             case MX_Gtwy_Con_IN_Medium_Flow_btkm:
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Medium_Flow': '<S642>:715'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S642>:708'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
                  MX_Gtwy_Contro_IN_Low_Flow_m2d1;

                // Entry 'Low_Flow': '<S642>:714'
                aux_Flow = AUX_FLOW_LOW;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gtwy_C_IN_Standard_Flow_aw1n:
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Standard_Flow': '<S642>:716'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S642>:713'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
                  MX_Gtwy_Con_IN_Medium_Flow_btkm;

                // Entry 'Medium_Flow': '<S642>:715'
                aux_Flow = AUX_FLOW_MEDIUM;
                eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                matlab_UpdateEEVar();
              }
              break;

             default:
              // Unreachable state, for coverage only
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
              break;
            }
          }
          break;

         case MX_Gtwy_Control_IN_Off_p5eh:
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxEnable = INACTIVE;

          // During 'Off': '<S642>:704'
          if (((int32_T)aux_DebounceButton != 0) || ((int32_T)
               MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0)) {
            // Transition: '<S642>:830'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
              MX_Gtwy_Control_IN_Active_nhnn;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active ==
                MX_Gtwy_Control_IN_High_Flow) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active =
                MX_Gtwy_Control_IN_High_Flow;

              // Entry 'High_Flow': '<S642>:834'
              aux_Flow = AUX_FLOW_HIGH;
              eeMirror.ee_AuxFlow = AUX_FLOW_HIGH;
              state_AuxEnable = ACTIVE_MODE_ONE;
              matlab_UpdateEEVar();
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy_Contr_IN_Inactive_cs2c5:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // Inport: '<Root>/state_System' incorporates:
      //   Inport: '<Root>/flag_InitEERead'

      // During 'Inactive': '<S642>:717'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (state_Console == ACTIVE) && flag_InitEERead) {
        // Transition: '<S642>:673'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy_Control_IN_Enabled_djid;
        MX_enter_internal_Enabled_ls1cz();
      }
      break;

     case MX_Gtwy__IN_Inactive_Fault_h3so:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // Inport: '<Root>/state_System'
      // During 'Inactive_Fault': '<S642>:718'
      if ((state_AuxPot != OORH) && (state_AuxPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S642>:672'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy_Control_IN_Enabled_djid;
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz ==
            MX_Gtwy_Control_IN_Off_p5eh) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
            MX_Gtwy_Control_IN_Off_p5eh;

          // Entry 'Off': '<S642>:704'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case IN_Inactive_Out_Of_Neutral_gquu:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S642>:719'
      if (state_Console != ACTIVE) {
        // Transition: '<S642>:684'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:717'
        cmd_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S642>:676'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy__IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S642>:718'
      } else {
        if (state_AuxPot != NOT_IN_NEUTRAL) {
          // Transition: '<S642>:680'
          if ((((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q != 0)) &&
              (aux_Flow != AUX_FLOW_INACTIVE)) {
            // Transition: '<S642>:679'
            // Transition: '<S642>:681'
            state_Buzzer = SINGLE_SHORT_BEEP;
          } else {
            // Transition: '<S642>:682'
            // Transition: '<S642>:683'
          }

          // Transition: '<S642>:678'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
            MX_Gtwy_Control_IN_Enabled_djid;
          MX_enter_internal_Enabled_ls1cz();
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }

  // End of Inport: '<Root>/cmd_AuxEnable_ST'
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Control_SIRIUS2_HIFLOW(void)
{
  // During 'SIRIUS2_HIFLOW': '<S642>:660'
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW) {
   case MX_Gtwy_IN_Aux_Enable_State_ACD:
    // Inport: '<Root>/cmd_AuxEnable_ACD' incorporates:
    //   Inport: '<Root>/state_ACD_CAN'
    //   Inport: '<Root>/state_System'

    // During 'Aux_Enable_State_ACD': '<S642>:742'
    if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
      // Transition: '<S642>:665'
      // Exit Internal 'Aux_Enable_State_ACD': '<S642>:742'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW =
        MX_Gtwy_Cont_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S642>:666'
      // Transition: '<S642>:671'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij ==
          MX_Gtwy_Contr_IN_Inactive_cs2c5) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:717'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq) {
       case MX_Gtwy_Con_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S642>:748'
        break;

       case MX_Gtwy_Contro_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S642>:749'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S642>:747'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq =
            MX_Gtwy_Contro_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S642>:750'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gtwy_Contro_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S642>:750'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S642>:744'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq =
            MX_Gtwy_Contro_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S642>:749'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux))
          {
            // Transition: '<S642>:745'
            // Transition: '<S642>:746'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq =
              MX_Gtwy_Con_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S642>:748'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }

    // End of Inport: '<Root>/cmd_AuxEnable_ACD'
    break;

   case MX_Gtwy__IN_Aux_Enable_State_ST:
    // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
    //   Inport: '<Root>/state_ST_CAN'
    //   Inport: '<Root>/state_System'

    // During 'Aux_Enable_State_ST': '<S642>:733'
    if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
      // Transition: '<S642>:663'
      // Exit Internal 'Aux_Enable_State_ST': '<S642>:733'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW =
        MX_Gtwy_Cont_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S642>:666'
      // Transition: '<S642>:671'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij ==
          MX_Gtwy_Contr_IN_Inactive_cs2c5) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:717'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin) {
       case MX_Gtwy_Con_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S642>:739'
        break;

       case MX_Gtwy_Contro_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S642>:740'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S642>:737'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin =
            MX_Gtwy_Contro_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S642>:741'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gtwy_Contro_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S642>:741'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S642>:735'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin =
            MX_Gtwy_Contro_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S642>:740'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Contr_event_disable_aux))
          {
            // Transition: '<S642>:736'
            // Transition: '<S642>:738'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin =
              MX_Gtwy_Con_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S642>:739'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }

    // End of Inport: '<Root>/cmd_AuxEnable_ST'
    break;

   case MX_Gtwy_Cont_IN_Functional_jgxb:
    MX_Gtwy_Contro_Functional_f20sl();
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Contro_Aux_Enable_State(void)
{
  // During 'Aux_Enable_State': '<S642>:210'
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State) {
   case MX_Gtwy_C_IN_EMEA_CONTROLS_giio:
    // During 'EMEA_CONTROLS': '<S642>:1150'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS) {
     case MX_Gtwy_IN_Aux_Enable_State_ACD:
      // Inport: '<Root>/cmd_AuxEnable_ACD' incorporates:
      //   Inport: '<Root>/state_ACD_CAN'
      //   Inport: '<Root>/state_System'

      // During 'Aux_Enable_State_ACD': '<S642>:1244'
      if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
        // Transition: '<S642>:1155'
        // Exit Internal 'Aux_Enable_State_ACD': '<S642>:1244'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS =
          MX_Gtwy_Cont_IN_Functional_jgxb;

        // Entry 'Functional': '<S642>:1156'
        MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = false;

        // Entry Internal 'Functional': '<S642>:1156'
        // Transition: '<S642>:1161'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz ==
            MX_Gtwy_Contr_IN_Inactive_cs2c5) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
            MX_Gtwy_Contr_IN_Inactive_cs2c5;

          // Entry 'Inactive': '<S642>:1209'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41)
        {
         case MX_Gtwy_Con_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S642>:1250'
          break;

         case MX_Gtwy_Contro_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S642>:1251'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S642>:1249'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 =
              MX_Gtwy_Contro_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S642>:1252'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
          }
          break;

         case MX_Gtwy_Contro_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S642>:1252'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S642>:1246'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 =
              MX_Gtwy_Contro_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S642>:1251'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gtwy_Control_DWork.sfEvent ==
                    MX_Gtwy_Contr_event_disable_aux)) {
              // Transition: '<S642>:1247'
              // Transition: '<S642>:1248'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 =
                MX_Gtwy_Con_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S642>:1250'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy__IN_Aux_Enable_State_ST:
      // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
      //   Inport: '<Root>/state_ST_CAN'
      //   Inport: '<Root>/state_System'

      // During 'Aux_Enable_State_ST': '<S642>:1235'
      if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
        // Transition: '<S642>:1153'
        // Exit Internal 'Aux_Enable_State_ST': '<S642>:1235'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS =
          MX_Gtwy_Cont_IN_Functional_jgxb;

        // Entry 'Functional': '<S642>:1156'
        MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = false;

        // Entry Internal 'Functional': '<S642>:1156'
        // Transition: '<S642>:1161'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz ==
            MX_Gtwy_Contr_IN_Inactive_cs2c5) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
            MX_Gtwy_Contr_IN_Inactive_cs2c5;

          // Entry 'Inactive': '<S642>:1209'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq) {
         case MX_Gtwy_Con_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S642>:1241'
          break;

         case MX_Gtwy_Contro_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S642>:1242'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S642>:1239'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq =
              MX_Gtwy_Contro_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S642>:1243'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gtwy_Contro_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S642>:1243'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S642>:1237'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq =
              MX_Gtwy_Contro_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S642>:1242'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gtwy_Control_DWork.sfEvent ==
                    MX_Gtwy_Contr_event_disable_aux)) {
              // Transition: '<S642>:1238'
              // Transition: '<S642>:1240'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq =
                MX_Gtwy_Con_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S642>:1241'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy_Cont_IN_Functional_jgxb:
      MX_Gtwy_Contr_Functional_f20sl3();
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
    break;

   case MX_Gtwy_IN_Non_Functional_km5qd:
    state_AuxEnable = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;

    // During 'Non_Functional': '<S642>:217'
    if (CONSTANT_DATA->AUX_FUNCTION == AUX_EMEA_CONTROLS) {
      // Transition: '<S642>:1042'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State =
        MX_Gtwy_C_IN_EMEA_CONTROLS_giio;

      // Entry Internal 'EMEA_CONTROLS': '<S642>:1150'
      // Transition: '<S642>:1151'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS ==
          MX_Gtwy_Cont_IN_Functional_jgxb) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS =
          MX_Gtwy_Cont_IN_Functional_jgxb;

        // Entry 'Functional': '<S642>:1156'
        MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = false;
      }

      // Entry Internal 'Functional': '<S642>:1156'
      // Transition: '<S642>:1161'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz ==
          MX_Gtwy_Contr_IN_Inactive_cs2c5) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
          MX_Gtwy_Contr_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S642>:1209'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      }
    } else if (CONSTANT_DATA->AUX_FUNCTION == AUX_PHOENIX_K2) {
      // Transition: '<S642>:213'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State =
        MX_Gtwy_Control_IN_PHOENIX_K2;

      // Entry Internal 'PHOENIX_K2': '<S642>:658'
      // Transition: '<S642>:659'
      MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2 =
        MX_Gtwy_Cont_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S642>:395'
      // Transition: '<S642>:401'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional ==
          MX_Gtwy_Contro_IN_Inactive_cs2c) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
          MX_Gtwy_Contro_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S642>:232'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      }
    } else {
      if (CONSTANT_DATA->AUX_FUNCTION == AUX_SIRIUS2) {
        // Transition: '<S642>:751'
        if (CONSTANT_DATA->AUX_HIGH_FLOW == NON_FUNCTIONAL) {
          // Transition: '<S642>:825'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State =
            MX_Gtwy_Control_IN_SIRIUS2;

          // Entry Internal 'SIRIUS2': '<S642>:840'
          // Transition: '<S642>:841'
          MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2 =
            MX_Gtwy_Cont_IN_Functional_jgxb;

          // Entry Internal 'Functional': '<S642>:846'
          // Transition: '<S642>:851'
          if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl ==
              MX_Gtwy_Contr_IN_Inactive_cs2c5) {
          } else {
            MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
              MX_Gtwy_Contr_IN_Inactive_cs2c5;

            // Entry 'Inactive': '<S642>:894'
            cmd_AuxRelease = INACTIVE;
          }
        } else {
          // Transition: '<S642>:826'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State =
            MX_Gtwy_Contr_IN_SIRIUS2_HIFLOW;

          // Entry Internal 'SIRIUS2_HIFLOW': '<S642>:660'
          // Transition: '<S642>:661'
          MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW =
            MX_Gtwy_Cont_IN_Functional_jgxb;

          // Entry Internal 'Functional': '<S642>:666'
          // Transition: '<S642>:671'
          if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij ==
              MX_Gtwy_Contr_IN_Inactive_cs2c5) {
          } else {
            MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
              MX_Gtwy_Contr_IN_Inactive_cs2c5;

            // Entry 'Inactive': '<S642>:717'
            cmd_AuxRelease = INACTIVE;
          }
        }
      }
    }
    break;

   case MX_Gtwy_Control_IN_PHOENIX_K2:
    // During 'PHOENIX_K2': '<S642>:658'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2) {
     case MX_Gtwy_IN_Aux_Enable_State_ACD:
      // Inport: '<Root>/cmd_AuxEnable_ACD' incorporates:
      //   Inport: '<Root>/state_ACD_CAN'
      //   Inport: '<Root>/state_System'

      // During 'Aux_Enable_State_ACD': '<S642>:527'
      if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
        // Transition: '<S642>:538'
        // Exit Internal 'Aux_Enable_State_ACD': '<S642>:527'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2 =
          MX_Gtwy_Cont_IN_Functional_jgxb;

        // Entry Internal 'Functional': '<S642>:395'
        // Transition: '<S642>:401'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional ==
            MX_Gtwy_Contro_IN_Inactive_cs2c) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
            MX_Gtwy_Contro_IN_Inactive_cs2c;

          // Entry 'Inactive': '<S642>:232'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD) {
         case MX_Gtwy_Con_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S642>:532'
          break;

         case MX_Gtwy_Contro_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S642>:533'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S642>:531'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD =
              MX_Gtwy_Contro_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S642>:534'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gtwy_Contro_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S642>:534'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S642>:529'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD =
              MX_Gtwy_Contro_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S642>:533'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gtwy_Control_DWork.sfEvent ==
                    MX_Gtwy_Contr_event_disable_aux)) {
              // Transition: '<S642>:530'
              // Transition: '<S642>:568'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD =
                MX_Gtwy_Con_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S642>:532'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy__IN_Aux_Enable_State_ST:
      // Inport: '<Root>/cmd_AuxEnable_ST' incorporates:
      //   Inport: '<Root>/state_ST_CAN'
      //   Inport: '<Root>/state_System'

      // During 'Aux_Enable_State_ST': '<S642>:519'
      if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
        // Transition: '<S642>:536'
        // Exit Internal 'Aux_Enable_State_ST': '<S642>:519'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2 =
          MX_Gtwy_Cont_IN_Functional_jgxb;

        // Entry Internal 'Functional': '<S642>:395'
        // Transition: '<S642>:401'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Functional ==
            MX_Gtwy_Contro_IN_Inactive_cs2c) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
            MX_Gtwy_Contro_IN_Inactive_cs2c;

          // Entry 'Inactive': '<S642>:232'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST) {
         case MX_Gtwy_Con_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S642>:524'
          break;

         case MX_Gtwy_Contro_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S642>:525'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S642>:523'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST =
              MX_Gtwy_Contro_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S642>:526'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gtwy_Contro_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S642>:526'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S642>:521'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST =
              MX_Gtwy_Contro_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S642>:525'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gtwy_Control_DWork.sfEvent ==
                    MX_Gtwy_Contr_event_disable_aux)) {
              // Transition: '<S642>:522'
              // Transition: '<S642>:567'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST =
                MX_Gtwy_Con_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S642>:524'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gtwy_Cont_IN_Functional_jgxb:
      MX_Gtwy_Control_Functional();
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2 =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
    break;

   case MX_Gtwy_Control_IN_SIRIUS2:
    MX_Gtwy_Control_SIRIUS2();
    break;

   case MX_Gtwy_Contr_IN_SIRIUS2_HIFLOW:
    MX_Gtwy_Control_SIRIUS2_HIFLOW();
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// Function for Chart: '<S621>/Aux_Control'
static void MX_Gtwy_Control_Detent_State(const uint8_T *FixPtRelationalOperator)
{
  int32_T b_previousEvent;
  boolean_T guard1 = false;

  // During 'Detent_State': '<S642>:262'
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_State) {
   case MX_Gtwy_C_IN_EMEA_CONTROLS_giio:
    // During 'EMEA_CONTROLS': '<S642>:1293'
    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Enable == 0U) {
    } else {
      // During 'Enable': '<S642>:282'
      guard1 = false;
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enable) {
       case MX_Gtwy_Control_IN_Disabled:
        state_DetentEnable = INACTIVE;

        // During 'Disabled': '<S642>:283'
        if ((state_AuxEnable == ACTIVE_MODE_ONE) &&
            (MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q == ACTIVE) &&
            (state_PanelButtons == NORMAL) && (mode_RightControl ==
             MODE_RIGHT_AUX1)) {
          // Transition: '<S642>:285'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enable =
            MX_Gtwy_Control_IN_Enabled;

          // Entry 'Enabled': '<S642>:284'
          state_DetentEnable = ACTIVE;
        }
        break;

       case MX_Gtwy_Control_IN_Enabled:
        state_DetentEnable = ACTIVE;

        // During 'Enabled': '<S642>:284'
        if ((state_PanelButtons != NORMAL) || (state_AuxEnable == INACTIVE) ||
            (state_Console != ACTIVE)) {
          // Transition: '<S642>:286'
          guard1 = true;
        } else if (MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q == ACTIVE) {
          // Transition: '<S642>:450'
          b_previousEvent = MX_Gtwy_Control_DWork.sfEvent;
          MX_Gtwy_Control_DWork.sfEvent = MX_Gtwy_Contr_event_disable_aux;
          if ((uint32_T)
              MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Enable_State == 0U)
          {
          } else {
            MX_Gtwy_Contro_Aux_Enable_State();
          }

          MX_Gtwy_Control_DWork.sfEvent = b_previousEvent;
          state_Buzzer = SINGLE_SHORT_BEEP;
          guard1 = true;
        } else {
          if ((MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Co_event_disable_detent)
              || (mode_RightControl != MODE_RIGHT_AUX1)) {
            // Transition: '<S642>:614'
            // Transition: '<S642>:1260'
            guard1 = true;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enable =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }

      if (guard1) {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enable =
          MX_Gtwy_Control_IN_Disabled;

        // Entry 'Disabled': '<S642>:283'
        state_DetentEnable = INACTIVE;
      }
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent == 0U) {
    } else {
      // During 'Detent': '<S642>:920'
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Detent) {
       case MX_Gtwy_Contro_IN_Active_Normal:
        // During 'Active_Normal': '<S642>:271'
        if (((int32_T)aux_DebounceButton != 0) || (state_DetentEnable ==
             INACTIVE) || (state_AuxEnable == INACTIVE)) {
          // Transition: '<S642>:269'
          // Exit Internal 'Active_Normal': '<S642>:271'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
            MX_Gtwy_Control_IN_No_Detent;

          // Entry 'No_Detent': '<S642>:279'
          state_Detent = NO_DETENT;
        } else {
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal) {
           case MX_Gtwy_Control_IN_Detent_Base:
            state_Detent = BASE_DETENT;

            // During 'Detent_Base': '<S642>:277'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_RightPot ==
                 ROD_ACTIVE)) {
              // Transition: '<S642>:275'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
                MX_Gtwy_Control_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S642>:278'
              state_Detent = ROD_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S642>:265'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
                  MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
                  MX_Gtwy_Control_IN_No_Detent;

                // Entry 'No_Detent': '<S642>:279'
                state_Detent = NO_DETENT;
              }
            }
            break;

           case MX_Gtwy_Control_IN_Detent_Rod:
            state_Detent = ROD_DETENT;

            // During 'Detent_Rod': '<S642>:278'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_AuxPot ==
                 BASE_ACTIVE)) {
              // Transition: '<S642>:274'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
                MX_Gtwy_Control_IN_Detent_Base;

              // Entry 'Detent_Base': '<S642>:277'
              state_Detent = BASE_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S642>:267'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
                  MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
                  MX_Gtwy_Control_IN_No_Detent;

                // Entry 'No_Detent': '<S642>:279'
                state_Detent = NO_DETENT;
              }
            }
            break;

           default:
            // Unreachable state, for coverage only
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
            break;
          }
        }
        break;

       case MX_Gtwy_Control_IN_No_Detent:
        state_Detent = NO_DETENT;

        // During 'No_Detent': '<S642>:279'
        if (((int32_T)*FixPtRelationalOperator != 0) && (mode_RightControl ==
             MODE_RIGHT_AUX1) && (state_DetentEnable == ACTIVE) &&
            (state_AuxEnable == ACTIVE_MODE_ONE) && (state_RightPot !=
             NOT_IN_NEUTRAL)) {
          // Transition: '<S642>:266'
          if (state_RightPot == ROD_ACTIVE) {
            // Transition: '<S642>:276'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
              MX_Gtwy_Contro_IN_Active_Normal;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal ==
                MX_Gtwy_Control_IN_Detent_Rod) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
                MX_Gtwy_Control_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S642>:278'
              state_Detent = ROD_DETENT;
            }
          } else {
            // Transition: '<S642>:273'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
              MX_Gtwy_Contro_IN_Active_Normal;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal ==
                MX_Gtwy_Control_IN_Detent_Base) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
                MX_Gtwy_Control_IN_Detent_Base;

              // Entry 'Detent_Base': '<S642>:277'
              state_Detent = BASE_DETENT;
            }
          }
        } else {
          if (((int32_T)*FixPtRelationalOperator != 0) && (mode_RightControl ==
               MODE_RIGHT_AUX1) && (state_DetentEnable == INACTIVE) &&
              (state_AuxEnable == ACTIVE_MODE_ONE) && (state_RightPot !=
               NOT_IN_NEUTRAL)) {
            // Transition: '<S642>:289'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
              MX_Gtwy_Control_IN_Not_Enabled;
            MX_Gtwy_Control_DWork.temporalCounter_i1_deha = 0U;

            // Entry 'Not_Enabled': '<S642>:288'
            state_Detent = ERR_DETENT;
            state_Buzzer = DOUBLE_SHORT_BEEP;
          }
        }
        break;

       case MX_Gtwy_Control_IN_Not_Enabled:
        state_Detent = ERR_DETENT;

        // During 'Not_Enabled': '<S642>:288'
        if (MX_Gtwy_Control_DWork.temporalCounter_i1_deha >= (uint32_T)(int32_T)
            ((int32_T)CONSTANT_DATA->AUX_DETENT_FLASH_TIME * 10)) {
          // Transition: '<S642>:290'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
            MX_Gtwy_Control_IN_No_Detent;

          // Entry 'No_Detent': '<S642>:279'
          state_Detent = NO_DETENT;
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gtwy_Cont_IN_NORMAL_CONTROLS:
    // During 'NORMAL_CONTROLS': '<S642>:1301'
    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Enable_bqpi == 0U)
    {
    } else {
      // During 'Enable': '<S642>:1302'
      guard1 = false;
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enable_paeh) {
       case MX_Gtwy_Control_IN_Disabled:
        state_DetentEnable = INACTIVE;

        // During 'Disabled': '<S642>:1308'
        if ((state_AuxEnable == ACTIVE_MODE_ONE) &&
            (MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q == ACTIVE) &&
            (state_PanelButtons == NORMAL)) {
          // Transition: '<S642>:1304'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enable_paeh =
            MX_Gtwy_Control_IN_Enabled;

          // Entry 'Enabled': '<S642>:1309'
          state_DetentEnable = ACTIVE;
        }
        break;

       case MX_Gtwy_Control_IN_Enabled:
        state_DetentEnable = ACTIVE;

        // During 'Enabled': '<S642>:1309'
        if ((state_PanelButtons != NORMAL) || (state_AuxEnable == INACTIVE) ||
            (state_Console != ACTIVE)) {
          // Transition: '<S642>:1305'
          guard1 = true;
        } else if (MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q == ACTIVE) {
          // Transition: '<S642>:1306'
          b_previousEvent = MX_Gtwy_Control_DWork.sfEvent;
          MX_Gtwy_Control_DWork.sfEvent = MX_Gtwy_Contr_event_disable_aux;
          if ((uint32_T)
              MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Enable_State == 0U)
          {
          } else {
            MX_Gtwy_Contro_Aux_Enable_State();
          }

          MX_Gtwy_Control_DWork.sfEvent = b_previousEvent;
          guard1 = true;
        } else {
          if (MX_Gtwy_Control_DWork.sfEvent == MX_Gtwy_Co_event_disable_detent)
          {
            // Transition: '<S642>:1307'
            guard1 = true;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enable_paeh =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }

      if (guard1) {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enable_paeh =
          MX_Gtwy_Control_IN_Disabled;

        // Entry 'Disabled': '<S642>:1308'
        state_DetentEnable = INACTIVE;
      }
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_dfp0 == 0U)
    {
    } else {
      // During 'Detent': '<S642>:1310'
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d) {
       case MX_Gtwy_Contro_IN_Active_Normal:
        // During 'Active_Normal': '<S642>:1318'
        if (((int32_T)aux_DebounceButton != 0) || (state_DetentEnable ==
             INACTIVE) || (state_AuxEnable == INACTIVE)) {
          // Transition: '<S642>:1317'
          // Exit Internal 'Active_Normal': '<S642>:1318'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
            MX_Gtwy_Control_IN_No_Detent;

          // Entry 'No_Detent': '<S642>:1326'
          state_Detent = NO_DETENT;
        } else {
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21) {
           case MX_Gtwy_Control_IN_Detent_Base:
            state_Detent = BASE_DETENT;

            // During 'Detent_Base': '<S642>:1324'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_AuxPot ==
                 ROD_ACTIVE)) {
              // Transition: '<S642>:1322'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
                MX_Gtwy_Control_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S642>:1325'
              state_Detent = ROD_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S642>:1312'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
                  MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
                  MX_Gtwy_Control_IN_No_Detent;

                // Entry 'No_Detent': '<S642>:1326'
                state_Detent = NO_DETENT;
              }
            }
            break;

           case MX_Gtwy_Control_IN_Detent_Rod:
            state_Detent = ROD_DETENT;

            // During 'Detent_Rod': '<S642>:1325'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_AuxPot ==
                 BASE_ACTIVE)) {
              // Transition: '<S642>:1321'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
                MX_Gtwy_Control_IN_Detent_Base;

              // Entry 'Detent_Base': '<S642>:1324'
              state_Detent = BASE_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S642>:1316'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
                  MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
                  MX_Gtwy_Control_IN_No_Detent;

                // Entry 'No_Detent': '<S642>:1326'
                state_Detent = NO_DETENT;
              }
            }
            break;

           default:
            // Unreachable state, for coverage only
            MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
            break;
          }
        }
        break;

       case MX_Gtwy_Control_IN_No_Detent:
        state_Detent = NO_DETENT;

        // During 'No_Detent': '<S642>:1326'
        if (((int32_T)*FixPtRelationalOperator != 0) && (state_DetentEnable ==
             ACTIVE) && (state_AuxEnable == ACTIVE_MODE_ONE) && (state_AuxPot !=
             NOT_IN_NEUTRAL)) {
          // Transition: '<S642>:1314'
          if (state_AuxPot == ROD_ACTIVE) {
            // Transition: '<S642>:1323'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
              MX_Gtwy_Contro_IN_Active_Normal;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 ==
                MX_Gtwy_Control_IN_Detent_Rod) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
                MX_Gtwy_Control_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S642>:1325'
              state_Detent = ROD_DETENT;
            }
          } else {
            // Transition: '<S642>:1320'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
              MX_Gtwy_Contro_IN_Active_Normal;
            if (MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 ==
                MX_Gtwy_Control_IN_Detent_Base) {
            } else {
              MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
                MX_Gtwy_Control_IN_Detent_Base;

              // Entry 'Detent_Base': '<S642>:1324'
              state_Detent = BASE_DETENT;
            }
          }
        } else {
          if (((int32_T)*FixPtRelationalOperator != 0) && (state_DetentEnable ==
               INACTIVE) && (state_AuxEnable == ACTIVE_MODE_ONE) &&
              (state_AuxPot != NOT_IN_NEUTRAL)) {
            // Transition: '<S642>:1313'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
              MX_Gtwy_Control_IN_Not_Enabled;
            MX_Gtwy_Control_DWork.temporalCounter_i1_deha = 0U;

            // Entry 'Not_Enabled': '<S642>:1327'
            state_Detent = ERR_DETENT;
            state_Buzzer = DOUBLE_SHORT_BEEP;
          }
        }
        break;

       case MX_Gtwy_Control_IN_Not_Enabled:
        state_Detent = ERR_DETENT;

        // During 'Not_Enabled': '<S642>:1327'
        if (MX_Gtwy_Control_DWork.temporalCounter_i1_deha >= (uint32_T)(int32_T)
            ((int32_T)CONSTANT_DATA->AUX_DETENT_FLASH_TIME * 10)) {
          // Transition: '<S642>:1315'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
            MX_Gtwy_Control_IN_No_Detent;

          // Entry 'No_Detent': '<S642>:1326'
          state_Detent = NO_DETENT;
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gtwy__IN_Non_Functional_km5q:
    state_DetentEnable = INACTIVE;
    state_Detent = NO_DETENT;

    // During 'Non_Functional': '<S642>:1297'
    // Transition: '<S642>:1300'
    if (CONSTANT_DATA->RIGHT_POT_FUNCTION != NON_FUNCTIONAL) {
      // Transition: '<S642>:1294'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_State =
        MX_Gtwy_C_IN_EMEA_CONTROLS_giio;

      // Entry Internal 'EMEA_CONTROLS': '<S642>:1293'
      MX_Gtwy_Control_DWork.bitsForTID0.is_active_Enable = 1U;

      // Entry Internal 'Enable': '<S642>:282'
      // Transition: '<S642>:287'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enable ==
          MX_Gtwy_Control_IN_Disabled) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enable =
          MX_Gtwy_Control_IN_Disabled;

        // Entry 'Disabled': '<S642>:283'
      }

      MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent = 1U;

      // Entry Internal 'Detent': '<S642>:920'
      // Transition: '<S642>:263'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Detent ==
          MX_Gtwy_Control_IN_No_Detent) {
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Detent =
          MX_Gtwy_Control_IN_No_Detent;

        // Entry 'No_Detent': '<S642>:279'
      }
    } else {
      if (CONSTANT_DATA->AUX_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S642>:1329'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_State =
          MX_Gtwy_Cont_IN_NORMAL_CONTROLS;

        // Entry Internal 'NORMAL_CONTROLS': '<S642>:1301'
        MX_Gtwy_Control_DWork.bitsForTID0.is_active_Enable_bqpi = 1U;

        // Entry Internal 'Enable': '<S642>:1302'
        // Transition: '<S642>:1303'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enable_paeh ==
            MX_Gtwy_Control_IN_Disabled) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enable_paeh =
            MX_Gtwy_Control_IN_Disabled;

          // Entry 'Disabled': '<S642>:1308'
        }

        MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_dfp0 = 1U;

        // Entry Internal 'Detent': '<S642>:1310'
        // Transition: '<S642>:1311'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d ==
            MX_Gtwy_Control_IN_No_Detent) {
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
            MX_Gtwy_Control_IN_No_Detent;

          // Entry 'No_Detent': '<S642>:1326'
        }
      }
    }
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_State =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// System initialize for atomic system: '<S6>/Aux_Enable'
void MX_Gtwy_Control_Aux_Enable_Init(void)
{
  // SystemInitialize for Chart: '<S621>/Aux_Control'
  MX_Gtwy_Control_DWork.sfEvent = MX_Gtwy_Control_CALL_EVENT_ivqv;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Enable_State = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_EMEA_CONTROLS =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_cd41 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_bsaq =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_gnsz =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_gte3 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_evlz =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_PHOENIX_K2 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Functional =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Relief_G5 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.temporalCounter_i2_lljs = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_a0ut =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_facj =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2 = MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_bpwz =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_k11t =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_ovtl =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_loo0 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_fumn =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_SIRIUS2_HIFLOW =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ACD_oudq =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State_ST_dwin =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Functional_l0ij =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_ohjz =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Active = MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Reset = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_State = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_State =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Detent = MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_Enable = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enable = MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_dfp0 = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_my1d =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Active_Normal_jd21 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.temporalCounter_i1_deha = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_Enable_bqpi = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enable_paeh =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c42_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.state_ACD_old = 0U;
  MX_Gtwy_Control_DWork.state_ST_old = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.previouslyActive = false;
  state_AuxEnable = 0U;
  state_Detent = 0U;
  aux_Flow = 0U;
  state_DetentEnable = 0U;
  cmd_AuxRelease = 0U;
  state_AuxRelease = 0U;
}

// Output and update for atomic system: '<S6>/Aux_Enable'
void MX_Gtwy_Control_Aux_Enable(void)
{
  int32_T b_previousEvent;
  uint8_T FixPtRelationalOperator;

  // RelationalOperator: '<S644>/FixPt Relational Operator' incorporates:
  //   Inport: '<Root>/din_Detent'
  //   UnitDelay: '<S644>/Delay Input1'

  FixPtRelationalOperator = (uint8_T)(din_Detent >
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_ebj2);

  // RelationalOperator: '<S645>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S645>/Delay Input1'

  MX_Gtwy_Control_B.FixPtRelationalOperator_ac0q = (uint8_T)(aux_DetentHold >
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_nxd0);

  // RelationalOperator: '<S643>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S643>/Delay Input1'

  MX_Gtwy_Control_B.FixPtRelationalOperator_cuej = (uint8_T)((int32_T)button_Aux
    < (int32_T)MX_Gtwy_Control_DWork.DelayInput1_DSTATE_di23);

  // Chart: '<S621>/Aux_Control' incorporates:
  //   Inport: '<Root>/state_ACD_CAN'
  //   Inport: '<Root>/state_ST_CAN'

  // Gateway: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
  MX_Gtwy_Control_DWork.sfEvent = MX_Gtwy_Control_CALL_EVENT_ivqv;
  if (MX_Gtwy_Control_DWork.temporalCounter_i1_deha < MAX_uint32_T) {
    MX_Gtwy_Control_DWork.temporalCounter_i1_deha++;
  }

  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i2_lljs < 65535U) {
    MX_Gtwy_Control_DWork.temporalCounter_i2_lljs = (uint16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i2_lljs + 1);
  }

  // During: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c42_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c42_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Enable_State = 1U;

    // Entry Internal 'Aux_Enable_State': '<S642>:210'
    // Transition: '<S642>:212'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State ==
        MX_Gtwy_IN_Non_Functional_km5qd) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enable_State =
        MX_Gtwy_IN_Non_Functional_km5qd;

      // Entry 'Non_Functional': '<S642>:217'
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;
    }

    MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_State = 1U;

    // Entry Internal 'Detent_State': '<S642>:262'
    // Transition: '<S642>:1295'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_State ==
        MX_Gtwy__IN_Non_Functional_km5q) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Detent_State =
        MX_Gtwy__IN_Non_Functional_km5q;

      // Entry 'Non_Functional': '<S642>:1297'
      state_DetentEnable = INACTIVE;
      state_Detent = NO_DETENT;
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Reset == 1U) {
    } else {
      MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Reset = 1U;

      // Entry 'Aux_Reset': '<S642>:545'
      MX_Gtwy_Control_DWork.state_ACD_old = state_ACD_CAN;
      MX_Gtwy_Control_DWork.state_ST_old = state_ST_CAN;
    }
  } else {
    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Enable_State ==
        0U) {
    } else {
      MX_Gtwy_Contro_Aux_Enable_State();
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_State == 0U)
    {
    } else {
      MX_Gtwy_Control_Detent_State(&FixPtRelationalOperator);
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Aux_Reset == 0U) {
    } else {
      // During 'Aux_Reset': '<S642>:545'
      // Transition: '<S642>:547'
      if ((CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL) && (state_ACD_CAN !=
           MX_Gtwy_Control_DWork.state_ACD_old)) {
        // Transition: '<S642>:556'
        // Transition: '<S642>:557'
        b_previousEvent = MX_Gtwy_Control_DWork.sfEvent;
        MX_Gtwy_Control_DWork.sfEvent = MX_Gtwy_Co_event_disable_detent;
        if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_State ==
            0U) {
        } else {
          MX_Gtwy_Control_Detent_State(&FixPtRelationalOperator);
        }

        MX_Gtwy_Control_DWork.sfEvent = b_previousEvent;
        MX_Gtwy_Control_DWork.state_ACD_old = state_ACD_CAN;

        // Transition: '<S642>:558'
      } else {
        // Transition: '<S642>:549'
      }

      // Transition: '<S642>:559'
      if ((CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL) && (state_ST_CAN !=
           MX_Gtwy_Control_DWork.state_ST_old)) {
        // Transition: '<S642>:560'
        // Transition: '<S642>:561'
        b_previousEvent = MX_Gtwy_Control_DWork.sfEvent;
        MX_Gtwy_Control_DWork.sfEvent = MX_Gtwy_Co_event_disable_detent;
        if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_Detent_State ==
            0U) {
        } else {
          MX_Gtwy_Control_Detent_State(&FixPtRelationalOperator);
        }

        MX_Gtwy_Control_DWork.sfEvent = b_previousEvent;
        MX_Gtwy_Control_DWork.state_ST_old = state_ST_CAN;

        // Transition: '<S642>:562'
      } else {
        // Transition: '<S642>:563'
      }

      // Transition: '<S642>:566'
    }
  }

  // End of Chart: '<S621>/Aux_Control'

  // Update for UnitDelay: '<S644>/Delay Input1' incorporates:
  //   Inport: '<Root>/din_Detent'

  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_ebj2 = din_Detent;

  // Update for UnitDelay: '<S645>/Delay Input1'
  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_nxd0 = aux_DetentHold;

  // Update for UnitDelay: '<S643>/Delay Input1'
  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_di23 = button_Aux;
}

// System initialize for atomic system: '<S6>/CAN_Throttle'
void MX_Gtwy_Contr_CAN_Throttle_Init(void)
{
  // SystemInitialize for Enabled SubSystem: '<S622>/CAN_Throttle'
  // SystemInitialize for Chart: '<S646>/CAN_Throttle_Actuator'
  MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Start =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gtwy_Control_DWork.temporalCounter_i1_h35t = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Control_mfgs =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Get_Cal_Values =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Monitor_nibw =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gtwy_Control_DWork.temporalCounter_i2_a2cf = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_active_c78_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.count = 0U;
  MX_Gtwy_Control_DWork.previous_cal_state = 0U;
  MX_Gtwy_Control_DWork.range = 0U;
  MX_Gtwy_Control_B.cmd_CANThrottle = 0U;
  MX_Gtwy_Control_B.state_CANThrottle = 0U;
  MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 0U;

  // SystemInitialize for Outport: '<Root>/state_CANThrottle' incorporates:
  //   Outport: '<S646>/state_CANThrottle'

  MX_Gtwy_Control_Y.state_CANThrottle = ((uint8_T)8U);

  // End of SystemInitialize for SubSystem: '<S622>/CAN_Throttle'
}

// Outputs for atomic system: '<S6>/CAN_Throttle'
void MX_Gtwy_Control_CAN_Throttle(void)
{
  // local block i/o variables
  uint16_T rtb_Throttle_Cal_Scaling;
  uint16_T rtb_UnitDelay2;
  boolean_T rtb_Compare_ex0x;
  uint16_T rtb_Abs;
  int16_T rtb_Sum_btad;
  uint16_T rtb_TmpSignalConversionAtThrott[2];
  uint16_T rtb_TmpSignalConversionAtT_klno[2];
  boolean_T guard1 = false;

  // UnitDelay: '<S622>/Unit Delay2'
  rtb_UnitDelay2 = MX_Gtwy_Control_DWork.UnitDelay2_DSTATE;

  // Outputs for Enabled SubSystem: '<S622>/CAN_Throttle' incorporates:
  //   EnablePort: '<S646>/Enable'

  // Logic: '<S622>/Logical Operator1' incorporates:
  //   Constant: '<S622>/Constant2'
  //   Constant: '<S647>/Constant'
  //   Constant: '<S648>/Constant'
  //   RelationalOperator: '<S647>/Compare'
  //   RelationalOperator: '<S648>/Compare'

  if ((CONSTANT_DATA->CAN_THROTTLE_FUNCTION != NON_FUNCTIONAL) &&
      (MX_Gtwy_Control_B.RateTransition17_kjqh == SYS_NORMAL)) {
    if (!MX_Gtwy_Control_DWork.CAN_Throttle_MODE) {
      // SystemReset for Chart: '<S646>/CAN_Throttle_Actuator'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Start =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gtwy_Control_DWork.temporalCounter_i1_h35t = 0U;
      MX_Gtwy_Control_DWork.bitsForTID1.is_Control_mfgs =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g = 0U;
      MX_Gtwy_Control_DWork.bitsForTID1.is_Get_Cal_Values =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gtwy_Control_DWork.bitsForTID1.is_Monitor_nibw =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gtwy_Control_DWork.temporalCounter_i2_a2cf = 0U;
      MX_Gtwy_Control_DWork.bitsForTID1.is_active_c78_MX_Gtwy_Control = 0U;
      MX_Gtwy_Control_DWork.count = 0U;
      MX_Gtwy_Control_DWork.previous_cal_state = 0U;
      MX_Gtwy_Control_DWork.range = 0U;
      MX_Gtwy_Control_B.cmd_CANThrottle = 0U;
      MX_Gtwy_Control_B.state_CANThrottle = 0U;
      MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 0U;
      MX_Gtwy_Control_DWork.CAN_Throttle_MODE = true;
    }

    // Sum: '<S646>/Sum' incorporates:
    //   UnitDelay: '<S622>/Unit Delay1'

    rtb_Sum_btad = (int16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.UnitDelay1_DSTATE - (int32_T)rtb_UnitDelay2);

    // Abs: '<S646>/Abs'
    if ((int32_T)rtb_Sum_btad < 0) {
      rtb_Abs = (uint16_T)(int32_T)-(int32_T)rtb_Sum_btad;
    } else {
      rtb_Abs = (uint16_T)rtb_Sum_btad;
    }

    // End of Abs: '<S646>/Abs'

    // SignalConversion: '<S646>/TmpSignal ConversionAtThrottle_Cal_ScalingInport2' incorporates:
    //   Constant: '<S646>/THROTTLE_HIGH_IDLE'
    //   Constant: '<S646>/THROTTLE_LOW_IDLE'

    rtb_TmpSignalConversionAtThrott[0] = ((uint16_T)0U);
    rtb_TmpSignalConversionAtThrott[1] = ((uint16_T)1000U);

    // RelationalOperator: '<S650>/Compare' incorporates:
    //   Constant: '<S646>/THROTTLE_RETRACTED1'
    //   Constant: '<S650>/Constant'

    rtb_Compare_ex0x = (CONSTANT_DATA->CAN_THROTTLE_REVERSE == NON_FUNCTIONAL);

    // Switch: '<S646>/Switch'
    if (rtb_Compare_ex0x) {
      // SignalConversion: '<S646>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S646>/Data Store Read1'

      rtb_TmpSignalConversionAtT_klno[0] = eeMirror.ee_ThrottleCalExtended;
    } else {
      // SignalConversion: '<S646>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S646>/Data Store Read'

      rtb_TmpSignalConversionAtT_klno[0] = eeMirror.ee_ThrottleCalRetracted;
    }

    // End of Switch: '<S646>/Switch'

    // Switch: '<S646>/Switch1'
    if (rtb_Compare_ex0x) {
      // SignalConversion: '<S646>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S646>/Data Store Read'

      rtb_TmpSignalConversionAtT_klno[1] = eeMirror.ee_ThrottleCalRetracted;
    } else {
      // SignalConversion: '<S646>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S646>/Data Store Read1'

      rtb_TmpSignalConversionAtT_klno[1] = eeMirror.ee_ThrottleCalExtended;
    }

    // End of Switch: '<S646>/Switch1'

    // S-Function (sfix_look1_dyn): '<S646>/Throttle_Cal_Scaling'
    // Dynamic Look-Up Table Block: '<S646>/Throttle_Cal_Scaling'
    //  Input0  Data Type:  Integer        U16
    //  Input1  Data Type:  Integer        U16
    //  Input2  Data Type:  Integer        U16
    //  Output0 Data Type:  Integer        U16
    //  Lookup Method: Linear_Endpoint
    //

    LookUp_U16_U16( &(rtb_Throttle_Cal_Scaling),
                   &rtb_TmpSignalConversionAtT_klno[0], pos_ThrottlePrimary,
                   &rtb_TmpSignalConversionAtThrott[0], 1U);

    // Chart: '<S646>/CAN_Throttle_Actuator'
    // Gateway: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_h35t < 65535U) {
      MX_Gtwy_Control_DWork.temporalCounter_i1_h35t = (uint16_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_h35t + 1);
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i2_a2cf < 65535U) {
      MX_Gtwy_Control_DWork.temporalCounter_i2_a2cf = (uint16_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i2_a2cf + 1);
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g < 31U) {
      MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g = (uint8_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g + 1);
    }

    // During: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
    if ((uint32_T)
        MX_Gtwy_Control_DWork.bitsForTID1.is_active_c78_MX_Gtwy_Control == 0U) {
      // Entry: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
      MX_Gtwy_Control_DWork.bitsForTID1.is_active_c78_MX_Gtwy_Control = 1U;

      // Entry Internal: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
      // Entry Internal 'Get_Cal_Values': '<S649>:34'
      // Transition: '<S649>:35'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Get_Cal_Values =
        MX_Gtwy_Control_IN_Wait_ltfg;

      // Entry Internal 'Cal_Start': '<S649>:1'
      // Transition: '<S649>:31'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Start =
        MX_Gtwy_Control_IN_Cal_Check;

      // Entry 'Cal_Check': '<S649>:2'
      MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 0U;
      MX_Gtwy_Control_DWork.count = 0U;

      // Entry Internal 'Cal_Check': '<S649>:2'
      // Transition: '<S649>:5'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check =
        MX_Gtwy_Control_IN_Pos_Low;

      // Entry Internal 'Monitor': '<S649>:30'
      // Transition: '<S649>:87'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Monitor_nibw =
        MX_Gtwy_Control_IN_Normal_pkv1;

      // Entry 'Normal': '<S649>:86'
      MX_Gtwy_Control_B.state_CANThrottle = NORMAL;

      // Entry Internal 'Control': '<S649>:29'
      // Transition: '<S649>:63'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Control_mfgs =
        MX_Gtwy_Control_IN_Normal_Mode;

      // Entry 'Normal_Mode': '<S649>:60'
      MX_Gtwy_Control_B.cmd_CANThrottle = rtb_Throttle_Cal_Scaling;
    } else {
      // During 'Get_Cal_Values': '<S649>:34'
      if ((MX_Gtwy_Control_DWork.bitsForTID1.is_Get_Cal_Values ==
           MX_Gtwy_Control_IN_Init_Cal) ||
          (!MX_Gtwy_Control_B.RateTransition26_pecm)) {
        // During 'Init_Cal': '<S649>:37'
        // During 'Init_Complete': '<S649>:140'
      } else {
        // During 'Wait': '<S649>:49'
        // Transition: '<S649>:36'
        MX_Gtwy_Control_DWork.bitsForTID1.is_Get_Cal_Values =
          MX_Gtwy_Control_IN_Init_Cal;

        // Entry Internal 'Init_Cal': '<S649>:37'
        // Transition: '<S649>:43'
        guard1 = false;
        if ((eeMirror.ee_ThrottleCalState == NORMAL) &&
            (eeMirror.ee_ThrottleCalExtended > eeMirror.ee_ThrottleCalRetracted)
            && (eeMirror.ee_ThrottleCalExtended <
                CONSTANT_DATA->CAN_THROTTLE_CAL_MAX) &&
            (eeMirror.ee_ThrottleCalRetracted >
             CONSTANT_DATA->CAN_THROTTLE_CAL_MIN)) {
          // Transition: '<S649>:44'
          // Transition: '<S649>:46'
          MX_Gtwy_Control_DWork.range = (uint16_T)(int32_T)((int32_T)
            eeMirror.ee_ThrottleCalExtended - (int32_T)
            eeMirror.ee_ThrottleCalRetracted);
          if (((int32_T)MX_Gtwy_Control_DWork.range < (int32_T)((int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM + (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL)) && ((int32_T)
               MX_Gtwy_Control_DWork.range > (int32_T)((int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM - (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL))) {
            // Transition: '<S649>:58'
            // Transition: '<S649>:59'
            // Transition: '<S649>:47'
          } else {
            // Transition: '<S649>:55'
            guard1 = true;
          }
        } else {
          // Transition: '<S649>:54'
          guard1 = true;
        }

        if (guard1) {
          // Transition: '<S649>:45'
          // use default values from constant data
          eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
          eeMirror.ee_ThrottleCalExtended =
            CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
          eeMirror.ee_ThrottleCalRetracted =
            CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
          matlab_UpdateEEVar();
        }

        // Transition: '<S649>:48'
      }

      // During 'Cal_Start': '<S649>:1'
      guard1 = false;
      switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Start) {
       case MX_Gtwy_Control_IN_Cal_Check:
        // During 'Cal_Check': '<S649>:2'
        if ((MX_Gtwy_Control_B.RateTransition27_oxis == ENGINE_CRANKING) ||
            (MX_Gtwy_Control_B.RateTransition27_oxis == ENGINE_RUNNING)) {
          // Transition: '<S649>:10'
          // Exit Internal 'Cal_Check': '<S649>:2'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
          MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Start =
            MX_Gtwy_Control_IN_Cal_Inhibit;
          MX_Gtwy_Control_DWork.temporalCounter_i1_h35t = 0U;
        } else if ((int32_T)MX_Gtwy_Control_DWork.count > 3) {
          // Transition: '<S649>:13'
          // Exit Internal 'Cal_Check': '<S649>:2'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
          MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Start =
            MX_Gtwy_Cont_IN_Cal_In_Progress;

          // Entry 'Cal_In_Progress': '<S649>:32'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.previous_cal_state =
            eeMirror.ee_ThrottleCalState;
          eeMirror.ee_ThrottleCalState = IN_CAL_MODE;
          matlab_UpdateEEVar();
        } else if (MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check ==
                   MX_Gtwy_Control_IN_Pos_High) {
          // During 'Pos_High': '<S649>:4'
          if ((int32_T)pos_ThrottlePrimary < 475) {
            // Transition: '<S649>:7'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check =
              MX_Gtwy_Control_IN_Pos_Low;
          }
        } else {
          // During 'Pos_Low': '<S649>:3'
          if ((int32_T)pos_ThrottlePrimary > 525) {
            // Transition: '<S649>:6'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Check =
              MX_Gtwy_Control_IN_Pos_High;

            // Entry 'Pos_High': '<S649>:4'
            MX_Gtwy_Control_DWork.count = (uint8_T)(int32_T)((int32_T)
              MX_Gtwy_Control_DWork.count + 1);
          }
        }
        break;

       case MX_Gtwy_Cont_IN_Cal_In_Progress:
        // During 'Cal_In_Progress': '<S649>:32'
        if ((MX_Gtwy_Control_B.RateTransition28_otac != NORMAL) ||
            (MX_Gtwy_Control_B.state_CANThrottle != NORMAL) ||
            (MX_Gtwy_Control_B.RateTransition27_oxis == ENGINE_CRANKING) ||
            (MX_Gtwy_Control_B.RateTransition27_oxis == ENGINE_RUNNING)) {
          // Transition: '<S649>:28'
          eeMirror.ee_ThrottleCalState =
            MX_Gtwy_Control_DWork.previous_cal_state;
          matlab_UpdateEEVar();
          guard1 = true;
        } else {
          if (eeMirror.ee_ThrottleCalState != IN_CAL_MODE) {
            // Transition: '<S649>:50'
            guard1 = true;
          }
        }
        break;

       default:
        // During 'Cal_Inhibit': '<S649>:8'
        if (MX_Gtwy_Control_DWork.temporalCounter_i1_h35t >=
            CONSTANT_DATA->CAN_THROTTLE_CAL_DIAG_TIME) {
          MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 0U;
        }
        break;
      }

      if (guard1) {
        MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Start =
          MX_Gtwy_Control_IN_Cal_Inhibit;
        MX_Gtwy_Control_DWork.temporalCounter_i1_h35t = 0U;
      }

      // During 'Monitor': '<S649>:30'
      switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Monitor_nibw) {
       case MX_Gtwy_Contro_IN_Debounce_jp5a:
        // During 'Debounce': '<S649>:91'
        if ((rtb_Abs < CONSTANT_DATA->CAN_THROTTLE_ERROR_MAX) ||
            (eeMirror.ee_ThrottleCalState != NORMAL)) {
          // Transition: '<S649>:92'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Monitor_nibw =
            MX_Gtwy_Control_IN_Normal_pkv1;

          // Entry 'Normal': '<S649>:86'
          MX_Gtwy_Control_B.state_CANThrottle = NORMAL;
        } else {
          if (MX_Gtwy_Control_DWork.temporalCounter_i2_a2cf >=
              CONSTANT_DATA->CAN_THROTTLE_DEBOUNCE_FAILURE) {
            // Transition: '<S649>:93'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Monitor_nibw =
              MX_Gtwy_Control_IN_Fault;

            // Entry 'Fault': '<S649>:88'
            MX_Gtwy_Control_B.state_CANThrottle = FAILURE;
          }
        }
        break;

       case MX_Gtwy_Control_IN_Fault:
        MX_Gtwy_Control_B.state_CANThrottle = FAILURE;

        // During 'Fault': '<S649>:88'
        break;

       default:
        MX_Gtwy_Control_B.state_CANThrottle = NORMAL;

        // During 'Normal': '<S649>:86'
        if ((rtb_Abs > CONSTANT_DATA->CAN_THROTTLE_ERROR_MAX) &&
            (eeMirror.ee_ThrottleCalState == NORMAL)) {
          // Transition: '<S649>:89'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Monitor_nibw =
            MX_Gtwy_Contro_IN_Debounce_jp5a;
          MX_Gtwy_Control_DWork.temporalCounter_i2_a2cf = 0U;
        }
        break;
      }

      // During 'Control': '<S649>:29'
      if (MX_Gtwy_Control_DWork.bitsForTID1.is_Control_mfgs ==
          MX_Gtwy_Control_IN_Cal_Mode) {
        // During 'Cal_Mode': '<S649>:12'
        if ((eeMirror.ee_ThrottleCalState == NOT_CALIBRATED) ||
            (eeMirror.ee_ThrottleCalState == NORMAL)) {
          // Transition: '<S649>:62'
          // Exit Internal 'Cal_Mode': '<S649>:12'
          switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode) {
           case MX_Gtwy_Control_IN_RECORD_MAX:
            // Exit 'RECORD_MAX': '<S649>:19'
            eeMirror.ee_ThrottleCalExtended = (uint16_T)(int32_T)((int32_T)
              rtb_UnitDelay2 - (int32_T)CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
            matlab_UpdateEEVar();
            MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
            break;

           case MX_Gtwy_Control_IN_RECORD_MIN:
            // Exit 'RECORD_MIN': '<S649>:18'
            eeMirror.ee_ThrottleCalRetracted = (uint16_T)(int32_T)((int32_T)
              rtb_UnitDelay2 + (int32_T)CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
            matlab_UpdateEEVar();
            MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
            break;

           default:
            MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_owkq;
            break;
          }

          MX_Gtwy_Control_DWork.bitsForTID1.is_Control_mfgs =
            MX_Gtwy_Control_IN_Normal_Mode;

          // Entry 'Normal_Mode': '<S649>:60'
          MX_Gtwy_Control_B.cmd_CANThrottle = rtb_Throttle_Cal_Scaling;
        } else {
          switch (MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode) {
           case MX_Gtwy_Control_IN_Cal_Fail:
            // During 'Cal_Fail': '<S649>:64'
            break;

           case MX_Gtwy_Control_IN_Done:
            // During 'Done': '<S649>:84'
            break;

           case MX_Gtwy_Cont_IN_EXTEND_ACTUATOR:
            // During 'EXTEND_ACTUATOR': '<S649>:15'
            if ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g >= 20) {
              // Transition: '<S649>:25'
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Control_IN_RECORD_MAX;
              MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g = 0U;
            }
            break;

           case MX_Gtwy_Control_IN_INITIALIZE:
            // During 'INITIALIZE': '<S649>:14'
            // Transition: '<S649>:22'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
              MX_Gtwy_Cont_IN_EXTEND_ACTUATOR;
            MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g = 0U;

            // Entry 'EXTEND_ACTUATOR': '<S649>:15'
            MX_Gtwy_Control_B.cmd_CANThrottle = 1000U;

            // Extend 100%
            break;

           case MX_Gtwy_Control_IN_RECORD_MAX:
            // During 'RECORD_MAX': '<S649>:19'
            if (rtb_UnitDelay2 > CONSTANT_DATA->CAN_THROTTLE_CAL_MAX) {
              // Transition: '<S649>:65'
              MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 1U;

              // Exit 'RECORD_MAX': '<S649>:19'
              eeMirror.ee_ThrottleCalExtended = (uint16_T)(int32_T)((int32_T)
                rtb_UnitDelay2 - (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
              matlab_UpdateEEVar();
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Control_IN_Cal_Fail;

              // Entry 'Cal_Fail': '<S649>:64'
              MX_Gtwy_Control_B.cmd_CANThrottle = 0U;
              eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
              eeMirror.ee_ThrottleCalExtended =
                CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
              eeMirror.ee_ThrottleCalRetracted =
                CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
              matlab_UpdateEEVar();
            } else {
              if ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g >= 10)
              {
                // Transition: '<S649>:24'
                // Exit 'RECORD_MAX': '<S649>:19'
                eeMirror.ee_ThrottleCalExtended = (uint16_T)(int32_T)((int32_T)
                  rtb_UnitDelay2 - (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
                matlab_UpdateEEVar();
                MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                  MX_Gtwy_Con_IN_RETRACT_ACTUATOR;
                MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g = 0U;

                // Entry 'RETRACT_ACTUATOR': '<S649>:16'
                MX_Gtwy_Control_B.cmd_CANThrottle = 0U;

                // Retract 0%
              }
            }
            break;

           case MX_Gtwy_Control_IN_RECORD_MIN:
            // During 'RECORD_MIN': '<S649>:18'
            if ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g >= 10) {
              // Transition: '<S649>:23'
              // Exit 'RECORD_MIN': '<S649>:18'
              eeMirror.ee_ThrottleCalRetracted = (uint16_T)(int32_T)((int32_T)
                rtb_UnitDelay2 + (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
              matlab_UpdateEEVar();
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Co_IN_VALIDATE_POLARITY;
            } else {
              if (rtb_UnitDelay2 < CONSTANT_DATA->CAN_THROTTLE_CAL_MIN) {
                // Transition: '<S649>:66'
                MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 2U;

                // Exit 'RECORD_MIN': '<S649>:18'
                eeMirror.ee_ThrottleCalRetracted = (uint16_T)(int32_T)((int32_T)
                  rtb_UnitDelay2 + (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
                matlab_UpdateEEVar();
                MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                  MX_Gtwy_Control_IN_Cal_Fail;

                // Entry 'Cal_Fail': '<S649>:64'
                MX_Gtwy_Control_B.cmd_CANThrottle = 0U;
                eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
                eeMirror.ee_ThrottleCalExtended =
                  CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
                eeMirror.ee_ThrottleCalRetracted =
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
                matlab_UpdateEEVar();
              }
            }
            break;

           case MX_Gtwy_Con_IN_RETRACT_ACTUATOR:
            // During 'RETRACT_ACTUATOR': '<S649>:16'
            if ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g >= 20) {
              // Transition: '<S649>:26'
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Control_IN_RECORD_MIN;
              MX_Gtwy_Control_DWork.temporalCounter_i3_oc3g = 0U;
            }
            break;

           case MX_Gtwy_Co_IN_VALIDATE_POLARITY:
            // During 'VALIDATE_POLARITY': '<S649>:137'
            if (eeMirror.ee_ThrottleCalExtended <=
                eeMirror.ee_ThrottleCalRetracted) {
              // Transition: '<S649>:139'
              MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 3U;
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Control_IN_Cal_Fail;

              // Entry 'Cal_Fail': '<S649>:64'
              MX_Gtwy_Control_B.cmd_CANThrottle = 0U;
              eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
              eeMirror.ee_ThrottleCalExtended =
                CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
              eeMirror.ee_ThrottleCalRetracted =
                CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S649>:138'
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Contr_IN_VALIDATE_RANGE;

              // Entry 'VALIDATE_RANGE': '<S649>:17'
              MX_Gtwy_Control_DWork.range = (uint16_T)(int32_T)((int32_T)
                eeMirror.ee_ThrottleCalExtended - (int32_T)
                eeMirror.ee_ThrottleCalRetracted);
            }
            break;

           default:
            // During 'VALIDATE_RANGE': '<S649>:17'
            if (((int32_T)MX_Gtwy_Control_DWork.range > (int32_T)((int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM + (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL)) || ((int32_T)
                 MX_Gtwy_Control_DWork.range < (int32_T)((int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM - (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL))) {
              // Transition: '<S649>:67'
              MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3 = 4U;
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Control_IN_Cal_Fail;

              // Entry 'Cal_Fail': '<S649>:64'
              MX_Gtwy_Control_B.cmd_CANThrottle = 0U;
              eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
              eeMirror.ee_ThrottleCalExtended =
                CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
              eeMirror.ee_ThrottleCalRetracted =
                CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S649>:85'
              MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
                MX_Gtwy_Control_IN_Done;

              // Entry 'Done': '<S649>:84'
              eeMirror.ee_ThrottleCalState = NORMAL;
              state_Buzzer = DOUBLE_SHORT_BEEP;
              matlab_UpdateEEVar();
            }
            break;
          }
        }
      } else {
        // During 'Normal_Mode': '<S649>:60'
        if (eeMirror.ee_ThrottleCalState == IN_CAL_MODE) {
          // Transition: '<S649>:61'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Control_mfgs =
            MX_Gtwy_Control_IN_Cal_Mode;

          // Entry Internal 'Cal_Mode': '<S649>:12'
          // Transition: '<S649>:21'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Cal_Mode =
            MX_Gtwy_Control_IN_INITIALIZE;

          // Entry 'INITIALIZE': '<S649>:14'
          MX_Gtwy_Control_B.cmd_CANThrottle = 0U;
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.previous_cal_state =
            eeMirror.ee_ThrottleCalState;
          eeMirror.ee_ThrottleCalState = IN_CAL_MODE;
          matlab_UpdateEEVar();
        } else {
          MX_Gtwy_Control_B.cmd_CANThrottle = rtb_Throttle_Cal_Scaling;
        }
      }
    }

    // End of Chart: '<S646>/CAN_Throttle_Actuator'

    // SignalConversion: '<S646>/OutportBufferForcmd_CANThrottle'
    MX_Gtwy_Control_B.OutportBufferForcmd_CANThrottle =
      MX_Gtwy_Control_B.cmd_CANThrottle;

    // Outport: '<Root>/state_CANThrottle' incorporates:
    //   SignalConversion: '<S646>/OutportBufferForstate_CANThrottle'

    MX_Gtwy_Control_Y.state_CANThrottle = MX_Gtwy_Control_B.state_CANThrottle;

    // SignalConversion: '<S646>/OutportBufferForstate_CANThrottleCalDiag'
    state_CANThrottleCalDiag = MX_Gtwy_Control_B.state_CANThrottleCalDiag_jqz3;
  } else {
    if (MX_Gtwy_Control_DWork.CAN_Throttle_MODE) {
      // Disable for Outport: '<S646>/cmd_CANThrottle'
      MX_Gtwy_Control_B.OutportBufferForcmd_CANThrottle = ((uint16_T)0U);

      // Disable for Outport: '<Root>/state_CANThrottle' incorporates:
      //   Outport: '<S646>/state_CANThrottle'

      MX_Gtwy_Control_Y.state_CANThrottle = ((uint8_T)8U);

      // Disable for Outport: '<S646>/state_CANThrottleCalDiag'
      state_CANThrottleCalDiag = ((uint8_T)0U);
      MX_Gtwy_Control_DWork.CAN_Throttle_MODE = false;
    }
  }

  // End of Logic: '<S622>/Logical Operator1'
  // End of Outputs for SubSystem: '<S622>/CAN_Throttle'
}

// Update for atomic system: '<S6>/CAN_Throttle'
void MX_Gtwy_Con_CAN_Throttle_Update(void)
{
  // Update for UnitDelay: '<S622>/Unit Delay2'
  MX_Gtwy_Control_DWork.UnitDelay2_DSTATE = MX_Gtwy_Control_B.RateTransition25;

  // Update for UnitDelay: '<S622>/Unit Delay1'
  MX_Gtwy_Control_DWork.UnitDelay1_DSTATE = cmd_Throttle;
}

// System initialize for atomic system: '<S6>/Controller_State'
void MX_Gtwy_C_Controller_State_Init(void)
{
  // SystemInitialize for Chart: '<S624>/Controller_State'
  MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55_fvjc =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.bitsForTID0.is_ENGINE = MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.bitsForTID0.is_JOG_SHUTTLE =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_ENTRY =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.bitsForTID0.is_SECONDARY =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.temporalCounter_i1 = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_STD_PANEL =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.bitsForTID0.is_THROTTLE =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c29_MX_Gtwy_Control = 0U;
  state_CommSecondary = 0U;
  MX_Gtwy_Control_B.state_CommECU_njci = 0U;
  state_CommThrottle = 0U;
  state_CommStdPanel = 0U;
  state_CommJogShuttle = 0U;
  state_CommDeluxeG55 = 0U;
  state_CommKeylessEntry = 0U;
}

// Output and update for atomic system: '<S6>/Controller_State'
void MX_Gtwy_Contro_Controller_State(void)
{
  // Chart: '<S624>/Controller_State' incorporates:
  //   Inport: '<Root>/flag_InitEERead'
  //   Inport: '<Root>/msgAge_DeluxeG55'
  //   Inport: '<Root>/msgAge_ECU'
  //   Inport: '<Root>/msgAge_JogShuttle'
  //   Inport: '<Root>/msgAge_KeylessEntry'
  //   Inport: '<Root>/msgAge_Secondary'
  //   Inport: '<Root>/msgAge_StdDisplay'
  //   Inport: '<Root>/msgAge_Throttle'
  //   Inport: '<Root>/state_System'

  if (MX_Gtwy_Control_DWork.temporalCounter_i1 < MAX_uint32_T) {
    MX_Gtwy_Control_DWork.temporalCounter_i1++;
  }

  // Gateway: MX_Gtwy_Control/System/Controller_State/Controller_State
  // During: MX_Gtwy_Control/System/Controller_State/Controller_State
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c29_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/Controller_State/Controller_State
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c29_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Controller_State/Controller_State
    // Entry Internal 'SECONDARY': '<S651>:45'
    // Transition: '<S651>:46'
    MX_Gtwy_Control_DWork.bitsForTID0.is_SECONDARY =
      MX_Gtwy__IN_NON_FUNCTIONAL_mt1c;
    MX_Gtwy_Control_DWork.temporalCounter_i1 = 0U;

    // Entry 'NON_FUNCTIONAL': '<S651>:49'
    state_CommSecondary = INACTIVE;

    // Entry Internal 'THROTTLE': '<S651>:82'
    // Transition: '<S651>:83'
    MX_Gtwy_Control_DWork.bitsForTID0.is_THROTTLE =
      MX_Gtwy__IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S651>:86'
    state_CommThrottle = INACTIVE;

    // Entry Internal 'ENGINE': '<S651>:95'
    // Transition: '<S651>:96'
    MX_Gtwy_Control_DWork.bitsForTID0.is_ENGINE =
      MX_Gtwy__IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S651>:100'
    MX_Gtwy_Control_B.state_CommECU_njci = INACTIVE;

    // Entry Internal 'STD_PANEL': '<S651>:108'
    // Transition: '<S651>:109'
    MX_Gtwy_Control_DWork.bitsForTID0.is_STD_PANEL =
      MX_Gtwy__IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S651>:112'
    state_CommStdPanel = INACTIVE;

    // Entry Internal 'JOG_SHUTTLE': '<S651>:128'
    // Transition: '<S651>:129'
    MX_Gtwy_Control_DWork.bitsForTID0.is_JOG_SHUTTLE =
      MX_Gtwy__IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S651>:132'
    state_CommJogShuttle = INACTIVE;

    // Entry Internal 'DELUXE_G55': '<S651>:135'
    // Transition: '<S651>:136'
    MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55_fvjc =
      MX_Gtwy_IN_NON_FUNCTIONAL_mt1cz;

    // Entry 'NON_FUNCTIONAL': '<S651>:139'
    state_CommDeluxeG55 = INACTIVE;

    // Entry Internal 'KEYLESS_ENTRY': '<S651>:143'
    // Transition: '<S651>:144'
    MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_ENTRY =
      MX_Gtwy__IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S651>:147'
    state_CommKeylessEntry = INACTIVE;
  } else {
    // During 'SECONDARY': '<S651>:45'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_SECONDARY) {
     case MX_Gtwy__IN_NON_FUNCTIONAL_mt1c:
      state_CommSecondary = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S651>:49'
      if ((CONSTANT_DATA->SECONDARY_FUNCTION != NON_FUNCTIONAL) &&
          (msgAge_Secondary < CONSTANT_DATA->SECONDARY_DEBOUNCE_MISSING)) {
        // Transition: '<S651>:47'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SECONDARY =
          MX_Gtwy_Control_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S651>:51'
        state_CommSecondary = NORMAL;
      } else {
        if ((CONSTANT_DATA->SECONDARY_FUNCTION != NON_FUNCTIONAL) && ((uint32_T)
             (MX_Gtwy_Control_DWork.temporalCounter_i1 * 10U) >= (uint32_T)
             CONSTANT_DATA->SECONDARY_DEBOUNCE_MISSING) && (state_System ==
             SYS_NORMAL)) {
          // Transition: '<S651>:155'
          MX_Gtwy_Control_DWork.bitsForTID0.is_SECONDARY =
            MX_Gtw_IN_NO_COMMUNICATION_fhkj;

          // Entry 'NO_COMMUNICATION': '<S651>:50'
          state_CommSecondary = NO_COMMUNICATION;
        }
      }
      break;

     case MX_Gtwy_Control_IN_NORMAL_dl5a:
      state_CommSecondary = NORMAL;

      // During 'NORMAL': '<S651>:51'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_Secondary >= CONSTANT_DATA->SECONDARY_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S651>:48'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SECONDARY =
          MX_Gtw_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S651>:50'
        state_CommSecondary = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommSecondary = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S651>:50'
      break;
    }

    // During 'THROTTLE': '<S651>:82'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_THROTTLE) {
     case MX_Gtwy__IN_NON_FUNCTIONAL_mt1c:
      state_CommThrottle = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S651>:86'
      if ((CONSTANT_DATA->THROTTLE_TYPE == ACTUATOR) ||
          (CONSTANT_DATA->THROTTLE_TYPE == CAN_ACTUATOR)) {
        // Transition: '<S651>:84'
        MX_Gtwy_Control_DWork.bitsForTID0.is_THROTTLE =
          MX_Gtwy_Control_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S651>:88'
        state_CommThrottle = NORMAL;
      }
      break;

     case MX_Gtwy_Control_IN_NORMAL_dl5a:
      state_CommThrottle = NORMAL;

      // During 'NORMAL': '<S651>:88'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_Throttle >= CONSTANT_DATA->THROTTLE_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S651>:85'
        MX_Gtwy_Control_DWork.bitsForTID0.is_THROTTLE =
          MX_Gtw_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S651>:87'
        state_CommThrottle = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommThrottle = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S651>:87'
      break;
    }

    // During 'ENGINE': '<S651>:95'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_ENGINE) {
     case MX_Gtwy__IN_NON_FUNCTIONAL_mt1c:
      MX_Gtwy_Control_B.state_CommECU_njci = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S651>:100'
      if ((CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) && (msgAge_ECU <
           CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_RUNNING)) {
        // Transition: '<S651>:98'
        MX_Gtwy_Control_DWork.bitsForTID0.is_ENGINE =
          MX_Gtwy_Control_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S651>:101'
        MX_Gtwy_Control_B.state_CommECU_njci = NORMAL;
      } else {
        if ((CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) && (((msgAge_ECU >=
               CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_NOT_RUNNING) &&
              (state_Engine == ENGINE_NOT_RUNNING)) || ((msgAge_ECU >=
               CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_RUNNING) &&
              (state_Engine == ENGINE_RUNNING))) && (state_System == SYS_NORMAL)
            && ((int32_T)msgAge_ECU != 65535) && (error_FuelSec == NORMAL) &&
            (state_ECUHold == ACTIVE)) {
          // Transition: '<S651>:97'
          MX_Gtwy_Control_DWork.bitsForTID0.is_ENGINE =
            MX_Gtw_IN_NO_COMMUNICATION_fhkj;

          // Entry 'NO_COMMUNICATION': '<S651>:102'
          MX_Gtwy_Control_B.state_CommECU_njci = NO_COMMUNICATION;
        }
      }
      break;

     case MX_Gtwy_Control_IN_NORMAL_dl5a:
      MX_Gtwy_Control_B.state_CommECU_njci = NORMAL;

      // During 'NORMAL': '<S651>:101'
      if ((state_System == SYS_NORMAL) && (((msgAge_ECU >=
             CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_NOT_RUNNING) &&
            (state_Engine == ENGINE_NOT_RUNNING)) || ((msgAge_ECU >=
             CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_RUNNING) &&
            (state_Engine == ENGINE_RUNNING))) && (error_FuelSec == NORMAL) &&
          (state_ECUHold == ACTIVE)) {
        // Transition: '<S651>:99'
        MX_Gtwy_Control_DWork.bitsForTID0.is_ENGINE =
          MX_Gtw_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S651>:102'
        MX_Gtwy_Control_B.state_CommECU_njci = NO_COMMUNICATION;
      }
      break;

     default:
      MX_Gtwy_Control_B.state_CommECU_njci = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S651>:102'
      break;
    }

    // During 'STD_PANEL': '<S651>:108'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_STD_PANEL) {
     case MX_Gtwy__IN_NON_FUNCTIONAL_mt1c:
      state_CommStdPanel = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S651>:112'
      if ((eeMirror.deluxe_G5 != ACTIVE) && flag_InitEERead &&
          (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL)) {
        // Transition: '<S651>:110'
        MX_Gtwy_Control_DWork.bitsForTID0.is_STD_PANEL =
          MX_Gtwy_Control_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S651>:114'
        state_CommStdPanel = NORMAL;
      }
      break;

     case MX_Gtwy_Control_IN_NORMAL_dl5a:
      state_CommStdPanel = NORMAL;

      // During 'NORMAL': '<S651>:114'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_StdDisplay >= CONSTANT_DATA->PANEL_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S651>:111'
        MX_Gtwy_Control_DWork.bitsForTID0.is_STD_PANEL =
          MX_Gtw_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S651>:113'
        state_CommStdPanel = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommStdPanel = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S651>:113'
      break;
    }

    // During 'JOG_SHUTTLE': '<S651>:128'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_JOG_SHUTTLE) {
     case MX_Gtwy__IN_NON_FUNCTIONAL_mt1c:
      state_CommJogShuttle = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S651>:132'
      if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S651>:130'
        MX_Gtwy_Control_DWork.bitsForTID0.is_JOG_SHUTTLE =
          MX_Gtwy_Control_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S651>:134'
        state_CommJogShuttle = NORMAL;
      }
      break;

     case MX_Gtwy_Control_IN_NORMAL_dl5a:
      state_CommJogShuttle = NORMAL;

      // During 'NORMAL': '<S651>:134'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_JogShuttle >= CONSTANT_DATA->JOG_SHUTTLE_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S651>:131'
        MX_Gtwy_Control_DWork.bitsForTID0.is_JOG_SHUTTLE =
          MX_Gtw_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S651>:133'
        state_CommJogShuttle = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommJogShuttle = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S651>:133'
      break;
    }

    // During 'DELUXE_G55': '<S651>:135'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55_fvjc ==
        MX_Gtwy_Cont_IN_FUNCTIONAL_a5dn) {
      // During 'FUNCTIONAL': '<S651>:191'
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL) {
       case MX_Gtwy_Control_IN_EVALUATE:
        // During 'EVALUATE': '<S651>:193'
        if (msgAge_DeluxeG55 < CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)
        {
          // Transition: '<S651>:137'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
            MX_Gtwy_Control_IN_NORMAL_dl5am;

          // Entry 'NORMAL': '<S651>:141'
          state_CommDeluxeG55 = NORMAL;
        } else if (((state_Engine == ENGINE_RUNNING) && (msgAge_DeluxeG55 >=
                     CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)) ||
                   ((state_Engine == ENGINE_NOT_RUNNING) && (msgAge_DeluxeG55 >=
          CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_NOT_RUNNING))) {
          // Transition: '<S651>:171'
          // Transition: '<S651>:168'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
            MX_Gt_IN_NO_COMMUNICATION_fhkjk;

          // Entry 'NO_COMMUNICATION': '<S651>:140'
          state_CommDeluxeG55 = NO_COMMUNICATION;
        } else {
          if ((state_System != SYS_NORMAL) || (state_SwitchedPwrOutput != NORMAL)
              || (state_SwitchedPwrRelay != NORMAL)) {
            // Transition: '<S651>:195'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
              MX_Gtwy_Contro_IN_INACTIVE_nxrf;

            // Entry 'INACTIVE': '<S651>:192'
            state_CommDeluxeG55 = INACTIVE;
          }
        }
        break;

       case MX_Gtwy_Contro_IN_INACTIVE_nxrf:
        state_CommDeluxeG55 = INACTIVE;

        // During 'INACTIVE': '<S651>:192'
        if ((state_System == SYS_NORMAL) && (state_SwitchedPwrOutput == NORMAL) &&
            (state_SwitchedPwrRelay == NORMAL)) {
          // Transition: '<S651>:138'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
            MX_Gtwy_Control_IN_EVALUATE;
        }
        break;

       case MX_Gtwy_Control_IN_NORMAL_dl5am:
        state_CommDeluxeG55 = NORMAL;

        // During 'NORMAL': '<S651>:141'
        if (msgAge_DeluxeG55 >= CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)
        {
          // Transition: '<S651>:196'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
            MX_Gtwy_Control_IN_EVALUATE;
        }
        break;

       default:
        state_CommDeluxeG55 = NO_COMMUNICATION;

        // During 'NO_COMMUNICATION': '<S651>:140'
        if (msgAge_DeluxeG55 < CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)
        {
          // Transition: '<S651>:172'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
            MX_Gtwy_Control_IN_NORMAL_dl5am;

          // Entry 'NORMAL': '<S651>:141'
          state_CommDeluxeG55 = NORMAL;
        }
        break;
      }
    } else {
      state_CommDeluxeG55 = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S651>:139'
      if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S651>:182'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55_fvjc =
          MX_Gtwy_Cont_IN_FUNCTIONAL_a5dn;

        // Entry Internal 'FUNCTIONAL': '<S651>:191'
        // Transition: '<S651>:194'
        MX_Gtwy_Control_DWork.bitsForTID0.is_FUNCTIONAL =
          MX_Gtwy_Contro_IN_INACTIVE_nxrf;

        // Entry 'INACTIVE': '<S651>:192'
      }
    }

    // During 'KEYLESS_ENTRY': '<S651>:143'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_ENTRY) {
     case MX_Gtwy__IN_NON_FUNCTIONAL_mt1c:
      state_CommKeylessEntry = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S651>:147'
      if (CONSTANT_DATA->KEYLESS_ENTRY_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S651>:145'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_ENTRY =
          MX_Gtwy_Control_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S651>:149'
        state_CommKeylessEntry = NORMAL;
      }
      break;

     case MX_Gtwy_Control_IN_NORMAL_dl5a:
      state_CommKeylessEntry = NORMAL;

      // During 'NORMAL': '<S651>:149'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_KeylessEntry >= CONSTANT_DATA->KEYLESS_ENTRY_DEBOUNCE_MISSING)
          && (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S651>:146'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_ENTRY =
          MX_Gtw_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S651>:148'
        state_CommKeylessEntry = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommKeylessEntry = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S651>:148'
      break;
    }
  }

  // End of Chart: '<S624>/Controller_State'
}

// System initialize for atomic system: '<S6>/Derate'
void MX_Gtwy_Control_Derate_Init(void)
{
  // SystemInitialize for Chart: '<S625>/Derate'
  MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gtwy_Control_DWork.bitsForTID0.is_RPM_FAULT =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gtwy_Control_DWork.bitsForTID0.is_SHUTDOWN =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gtwy_Control_DWork.bitsForTID0.is_UNRESPONSIVE =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_MSG =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c63_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c63_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gtwy_Control_DWork.debounceCount_ndty = 0U;
  MX_Gtwy_Control_DWork.derate_HPMatch = 0U;
  MX_Gtwy_Control_DWork.num_Trys = 0U;
  MX_Gtwy_Control_DWork.debounceRequest = 0U;
  percent_Derate = 0;
  rpm_Derate = 0U;
  state_EngineSpeedDerate = 0U;
  state_HPMatch = 0U;
  torque_Derate = 0U;
}

// Output and update for atomic system: '<S6>/Derate'
void MX_Gtwy_Control_Derate(void)
{
  // local block i/o variables
  uint16_T rtb_Torque;

  // Lookup: '<S625>/Torque'
  //
  //  About '<S625>/Torque':
  //  Input0  Data Type:  Integer        U16
  //  Output0 Data Type:  Integer        U16
  //  Lookup Method: Below
  //
  //  XData parameter uses the same data type and scaling as Input0
  //  YData parameter uses the same data type and scaling as Output0

  {
    uint32_T iLeft;
    BINARYSEARCH_U16_iL( &(iLeft), flt_EngineSpeed, (&(MXGTW_ECU_DERATE_RPM[0])),
                        19U);
    rtb_Torque = MXGTW_ECU_DERATE_TORQUE[iLeft];
  }

  // Chart: '<S625>/Derate' incorporates:
  //   Inport: '<Root>/ecu_HP'
  //   Inport: '<Root>/ecu_isocMaxRPM'
  //   Inport: '<Root>/ecu_isocMinRPM'

  // Gateway: MX_Gtwy_Control/System/Derate/Derate
  // During: MX_Gtwy_Control/System/Derate/Derate
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c63_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/Derate/Derate
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c63_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Derate/Derate
    // Transition: '<S652>:436'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c63_MX_Gtwy_Control =
      MX_Gtwy_Control_IN_NO_ECU;

    // Entry 'NO_ECU': '<S652>:435'
    state_HPMatch = NORMAL;
  } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_c63_MX_Gtwy_Control ==
             MX_Gtwy_Control_IN_ECU_o15r) {
    // During 'ECU': '<S652>:351'
    // During 'DERATE_LEVEL': '<S652>:353'
    // Transition: '<S652>:370'
    percent_Derate = 100;

    // Transition: '<S652>:373'
    if ((int32_T)MX_Gtwy_Control_B.RateTransition18 < (int32_T)percent_Derate) {
      // Transition: '<S652>:383'
      // Transition: '<S652>:384'
      percent_Derate = (int8_T)MX_Gtwy_Control_B.RateTransition18;
    } else {
      // Transition: '<S652>:385'
    }

    // Transition: '<S652>:480'
    if ((CONSTANT_DATA->HP_MATCH_FUNCTION != NON_FUNCTIONAL) && ((int32_T)
         MX_Gtwy_Control_DWork.derate_HPMatch < (int32_T)percent_Derate)) {
      // Transition: '<S652>:465'
      // Transition: '<S652>:466'
      percent_Derate = (int8_T)MX_Gtwy_Control_DWork.derate_HPMatch;
    } else {
      // Transition: '<S652>:463'
    }

    // Transition: '<S652>:390'
    if ((int32_T)CONSTANT_DATA->DERATE_METHOD == 1) {
      // Transition: '<S652>:490'
      // Transition: '<S652>:494'
      torque_Derate = (uint16_T)(int32_T)((int32_T)(uint32_T)((uint32_T)
        rtb_Torque * (uint32_T)(uint16_T)percent_Derate) / 100);
    } else {
      // Transition: '<S652>:492'
      torque_Derate = (uint16_T)percent_Derate;
    }

    // Transition: '<S652>:493'
    rpm_Derate = (uint16_T)(uint32_T)((uint32_T)ecu_isocMinRPM + (uint32_T)
      ((uint32_T)((uint32_T)(int32_T)((int32_T)ecu_isocMaxRPM - (int32_T)
      ecu_isocMinRPM) * (uint32_T)percent_Derate) / 100U));

    // During 'SEND_MSG': '<S652>:391'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_MSG) {
     case MX_Gtwy_Control_IN_DERATE:
      // During 'DERATE': '<S652>:399'
      if ((int32_T)percent_Derate == 100) {
        // Transition: '<S652>:396'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_MSG =
          MX_Gtwy_Contr_IN_DISABLE_DERATE;

        // Entry 'DISABLE_DERATE': '<S652>:400'
        SendMsg_Derate_Now();
      } else {
        SendMsg_Derate_Now();
      }
      break;

     case MX_Gtwy_Contr_IN_DISABLE_DERATE:
      // During 'DISABLE_DERATE': '<S652>:400'
      // Transition: '<S652>:395'
      MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_MSG =
        MX_Gtwy_Control_IN_NORMAL_nwss;
      break;

     case MX_Gtwy__IN_NON_FUNCTIONAL_jyx5:
      // During 'NON_FUNCTIONAL': '<S652>:397'
      if (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S652>:393'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_MSG =
          MX_Gtwy_Control_IN_NORMAL_nwss;
      }
      break;

     default:
      // During 'NORMAL': '<S652>:398'
      if ((int32_T)percent_Derate < 100) {
        // Transition: '<S652>:394'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_MSG =
          MX_Gtwy_Control_IN_DERATE;
      }
      break;
    }

    // During 'RPM_FAULT': '<S652>:401'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_RPM_FAULT) {
     case MX_Gtwy_Control_IN_NORMAL_nwssk:
      state_EngineSpeedDerate = NORMAL;

      // During 'NORMAL': '<S652>:412'
      if (((int32_T)percent_Derate < 100) && ((int32_T)flt_EngineSpeed >=
           (int32_T)((int32_T)rpm_Derate + (int32_T)
                     CONSTANT_DATA->DERATE_ENGINE_SPEED_HIGH_OFFSET))) {
        // Transition: '<S652>:403'
        MX_Gtwy_Control_DWork.bitsForTID0.is_RPM_FAULT =
          MX_Gtwy_Control_IN_UNRESPONSIVE;

        // Entry Internal 'UNRESPONSIVE': '<S652>:407'
        // Transition: '<S652>:408'
        MX_Gtwy_Control_DWork.bitsForTID0.is_UNRESPONSIVE =
          MX_Gtwy_Contro_IN_DEBOUNCE_h2c4;

        // Entry 'DEBOUNCE': '<S652>:411'
        MX_Gtwy_Control_DWork.debounceCount_ndty = 0U;
      }
      break;

     case MX_Gtwy_Contro_IN_SHUTDOWN_o0ld:
      // During 'SHUTDOWN': '<S652>:413'
      if ((state_EngineSpeedDerate != SHUTDOWN) && (((int32_T)percent_Derate ==
            100) || ((int32_T)flt_EngineSpeed < (int32_T)((int32_T)rpm_Derate +
             (int32_T)CONSTANT_DATA->DERATE_ENGINE_SPEED_HIGH_OFFSET)))) {
        // Transition: '<S652>:406'
        // Exit Internal 'SHUTDOWN': '<S652>:413'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SHUTDOWN =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gtwy_Control_DWork.bitsForTID0.is_RPM_FAULT =
          MX_Gtwy_Control_IN_NORMAL_nwssk;

        // Entry 'NORMAL': '<S652>:412'
        state_EngineSpeedDerate = NORMAL;
      } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_SHUTDOWN ==
                 MX_Gtwy_Contro_IN_DEBOUNCE_h2c4) {
        // During 'DEBOUNCE': '<S652>:417'
        if (MX_Gtwy_Control_DWork.debounceCount_ndty >=
            CONSTANT_DATA->DERATE_ENGINE_SPEED_DEBOUNCE_SHUTDOWN) {
          // Transition: '<S652>:415'
          MX_Gtwy_Control_DWork.bitsForTID0.is_SHUTDOWN =
            MX_Gtwy_Contro_IN_SHUTDOWN_o0ld;

          // Entry 'SHUTDOWN': '<S652>:416'
          state_EngineSpeedDerate = SHUTDOWN;
        } else {
          MX_Gtwy_Control_DWork.debounceCount_ndty = (uint16_T)(int32_T)
            ((int32_T)MX_Gtwy_Control_DWork.debounceCount_ndty + 1);
        }
      } else {
        state_EngineSpeedDerate = SHUTDOWN;

        // During 'SHUTDOWN': '<S652>:416'
      }
      break;

     default:
      // During 'UNRESPONSIVE': '<S652>:407'
      if (state_EngineSpeedDerate == UNRESPONSIVE) {
        // Transition: '<S652>:405'
        // Exit Internal 'UNRESPONSIVE': '<S652>:407'
        MX_Gtwy_Control_DWork.bitsForTID0.is_UNRESPONSIVE =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gtwy_Control_DWork.bitsForTID0.is_RPM_FAULT =
          MX_Gtwy_Contro_IN_SHUTDOWN_o0ld;

        // Entry Internal 'SHUTDOWN': '<S652>:413'
        // Transition: '<S652>:414'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SHUTDOWN =
          MX_Gtwy_Contro_IN_DEBOUNCE_h2c4;

        // Entry 'DEBOUNCE': '<S652>:417'
        MX_Gtwy_Control_DWork.debounceCount_ndty = 0U;
      } else if (((int32_T)percent_Derate == 100) || ((int32_T)flt_EngineSpeed <
                  (int32_T)((int32_T)rpm_Derate + (int32_T)
                            CONSTANT_DATA->DERATE_ENGINE_SPEED_HIGH_OFFSET))) {
        // Transition: '<S652>:404'
        // Exit Internal 'UNRESPONSIVE': '<S652>:407'
        MX_Gtwy_Control_DWork.bitsForTID0.is_UNRESPONSIVE =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gtwy_Control_DWork.bitsForTID0.is_RPM_FAULT =
          MX_Gtwy_Control_IN_NORMAL_nwssk;

        // Entry 'NORMAL': '<S652>:412'
        state_EngineSpeedDerate = NORMAL;
      } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_UNRESPONSIVE ==
                 MX_Gtwy_Contro_IN_DEBOUNCE_h2c4) {
        // During 'DEBOUNCE': '<S652>:411'
        if (MX_Gtwy_Control_DWork.debounceCount_ndty >=
            CONSTANT_DATA->DERATE_ENGINE_SPEED_DEBOUNCE_HIGH) {
          // Transition: '<S652>:409'
          MX_Gtwy_Control_DWork.bitsForTID0.is_UNRESPONSIVE =
            MX_Gtwy_Co_IN_UNRESPONSIVE_hw5u;

          // Entry 'UNRESPONSIVE': '<S652>:410'
          state_EngineSpeedDerate = UNRESPONSIVE;
        } else {
          MX_Gtwy_Control_DWork.debounceCount_ndty = (uint16_T)(int32_T)
            ((int32_T)MX_Gtwy_Control_DWork.debounceCount_ndty + 1);
        }
      } else {
        state_EngineSpeedDerate = UNRESPONSIVE;

        // During 'UNRESPONSIVE': '<S652>:410'
      }
      break;
    }

    // During 'HP_MATCH': '<S652>:445'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH) {
     case MX_Gtwy_Contro_IN_Cranking_ibul:
      // During 'Cranking': '<S652>:481'
      if (state_Engine != ENGINE_CRANKING) {
        // Transition: '<S652>:483'
        MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
          MX_Gtwy_Control_IN_SEND_REQUEST;

        // Entry 'SEND_REQUEST': '<S652>:447'
        MX_Gtwy_Control_DWork.num_Trys = 0U;

        // Entry Internal 'SEND_REQUEST': '<S652>:447'
        // Transition: '<S652>:457'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
          MX_Gtwy_Control_IN_SEND_MESSAGE;

        // Entry 'SEND_MESSAGE': '<S652>:455'
        SendMsg_SOFTRequest_Now();
      }
      break;

     case MX_Gtwy_Control_IN_DERATE_g4rc:
      state_HPMatch = FAILURE;

      // During 'DERATE': '<S652>:449'
      break;

     case MX_Gtwy__IN_NON_FUNCTIONAL_jyx5:
      state_HPMatch = NORMAL;

      // During 'NON_FUNCTIONAL': '<S652>:446'
      if (CONSTANT_DATA->HP_MATCH_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S652>:451'
        MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
          MX_Gtwy_Control_IN_SEND_REQUEST;

        // Entry 'SEND_REQUEST': '<S652>:447'
        MX_Gtwy_Control_DWork.num_Trys = 0U;

        // Entry Internal 'SEND_REQUEST': '<S652>:447'
        // Transition: '<S652>:457'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
          MX_Gtwy_Control_IN_SEND_MESSAGE;

        // Entry 'SEND_MESSAGE': '<S652>:455'
        SendMsg_SOFTRequest_Now();
      }
      break;

     case MX_Gtwy_Con_IN_REQUEST_RECEIVED:
      // During 'REQUEST_RECEIVED': '<S652>:448'
      if (ecu_HP != CONSTANT_DATA->MACHINE_HP) {
        // Transition: '<S652>:453'
        MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
          MX_Gtwy_Control_IN_DERATE_g4rc;

        // Entry 'DERATE': '<S652>:449'
        MX_Gtwy_Control_DWork.derate_HPMatch =
          CONSTANT_DATA->MATCH_DERATE_PERCENT;
        state_HPMatch = FAILURE;
      }
      break;

     default:
      // During 'SEND_REQUEST': '<S652>:447'
      if (ecu_HP != UNDEFINED) {
        // Transition: '<S652>:452'
        // Exit Internal 'SEND_REQUEST': '<S652>:447'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
          MX_Gtwy_Con_IN_REQUEST_RECEIVED;
      } else if ((int32_T)MX_Gtwy_Control_DWork.num_Trys > 3) {
        // Transition: '<S652>:454'
        // Exit Internal 'SEND_REQUEST': '<S652>:447'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
          MX_Gtwy_Control_IN_DERATE_g4rc;

        // Entry 'DERATE': '<S652>:449'
        MX_Gtwy_Control_DWork.derate_HPMatch =
          CONSTANT_DATA->MATCH_DERATE_PERCENT;
        state_HPMatch = FAILURE;
      } else if (state_Engine == ENGINE_CRANKING) {
        // Transition: '<S652>:482'
        // Exit Internal 'SEND_REQUEST': '<S652>:447'
        MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
          MX_Gtwy_Contro_IN_Cranking_ibul;
      } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST ==
                 MX_Gtwy_Control_IN_SEND_MESSAGE) {
        // During 'SEND_MESSAGE': '<S652>:455'
        if ((state_CommECU == NORMAL) && (state_ECUHold == ACTIVE)) {
          // Transition: '<S652>:458'
          MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
            MX_Gtwy_Co_IN_WAIT_FOR_RESPONSE;

          // Entry 'WAIT_FOR_RESPONSE': '<S652>:456'
          MX_Gtwy_Control_DWork.debounceRequest = 0U;
        }
      } else {
        // During 'WAIT_FOR_RESPONSE': '<S652>:456'
        if ((int32_T)MX_Gtwy_Control_DWork.debounceRequest >= 180) {
          // Transition: '<S652>:459'
          MX_Gtwy_Control_DWork.num_Trys = (uint8_T)(int32_T)((int32_T)
            MX_Gtwy_Control_DWork.num_Trys + 1);
          MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_REQUEST =
            MX_Gtwy_Control_IN_SEND_MESSAGE;

          // Entry 'SEND_MESSAGE': '<S652>:455'
          SendMsg_SOFTRequest_Now();
        } else {
          MX_Gtwy_Control_DWork.debounceRequest = (uint16_T)(int32_T)((int32_T)
            MX_Gtwy_Control_DWork.debounceRequest + 1);
        }
      }
      break;
    }
  } else {
    state_HPMatch = NORMAL;

    // During 'NO_ECU': '<S652>:435'
    if (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) {
      // Transition: '<S652>:437'
      MX_Gtwy_Control_DWork.bitsForTID0.is_c63_MX_Gtwy_Control =
        MX_Gtwy_Control_IN_ECU_o15r;

      // Entry Internal 'ECU': '<S652>:351'
      // Entry Internal 'SEND_MSG': '<S652>:391'
      // Transition: '<S652>:392'
      MX_Gtwy_Control_DWork.bitsForTID0.is_SEND_MSG =
        MX_Gtwy__IN_NON_FUNCTIONAL_jyx5;

      // Entry Internal 'RPM_FAULT': '<S652>:401'
      // Transition: '<S652>:402'
      MX_Gtwy_Control_DWork.bitsForTID0.is_RPM_FAULT =
        MX_Gtwy_Control_IN_NORMAL_nwssk;

      // Entry 'NORMAL': '<S652>:412'
      state_EngineSpeedDerate = NORMAL;

      // Entry Internal 'HP_MATCH': '<S652>:445'
      // Transition: '<S652>:450'
      MX_Gtwy_Control_DWork.bitsForTID0.is_HP_MATCH =
        MX_Gtwy__IN_NON_FUNCTIONAL_jyx5;

      // Entry 'NON_FUNCTIONAL': '<S652>:446'
      MX_Gtwy_Control_DWork.derate_HPMatch = 100U;
    }
  }

  // End of Chart: '<S625>/Derate'
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gt_DiverterFaultOverrideLeft(void)
{
  // Graphical Function 'DiverterFaultOverrideLeft': '<S656>:1457'
  // Transition: '<S656>:1459'
  if (MX_Gtwy_Control_B.LogicalOperator_ns15) {
    // Transition: '<S656>:1461'
    // Transition: '<S656>:1467'
    mode_LeftControl = MODE_LEFT_NONE;

    // Transition: '<S656>:1468'
  } else {
    // Transition: '<S656>:1466'
  }

  // Transition: '<S656>:1465'
}

// Function for Chart: '<S626>/Control Modes'
static void enter_internal_Aux_Enable_cso3u(void)
{
  // Entry Internal 'Aux_Enabled': '<S656>:276'
  if (eeMirror.ee_ControlMode == EE_LT_OF_A4) {
    // Transition: '<S656>:1135'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
      MX_Gtw_IN_Mode_Offset_Aux4_kviy;

    // Entry 'Mode_Offset_Aux4': '<S656>:264'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX4;
    eeMirror.ee_ControlMode = EE_LT_OF_A4;
    matlab_UpdateEEVar();
    MX_Gt_DiverterFaultOverrideLeft();
  } else if (eeMirror.ee_ControlMode == EE_LT_A2_A1) {
    // Transition: '<S656>:1136'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
      MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

    // Entry 'Mode_Aux2_Aux1': '<S656>:280'
    mode_LeftControl = MODE_LEFT_AUX2;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_LT_A2_A1;
    matlab_UpdateEEVar();
    MX_Gt_DiverterFaultOverrideLeft();
  } else if (eeMirror.ee_ControlMode == EE_LT_A2_A4) {
    // Transition: '<S656>:1137'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
      MX_Gtwy_Contr_IN_Mode_Aux2_Aux4;

    // Entry 'Mode_Aux2_Aux4': '<S656>:281'
    mode_LeftControl = MODE_LEFT_AUX2;
    mode_RightControl = MODE_RIGHT_AUX4;
    eeMirror.ee_ControlMode = EE_LT_A2_A4;
    matlab_UpdateEEVar();
    MX_Gt_DiverterFaultOverrideLeft();
  } else {
    // Transition: '<S656>:277'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
      MX_Gt_IN_Mode_Offset_Aux1_g0rtz;

    // Entry 'Mode_Offset_Aux1': '<S656>:263'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_LT_OF_A1;
    matlab_UpdateEEVar();
    MX_Gt_DiverterFaultOverrideLeft();
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX_G_enter_internal_Offset_Left(void)
{
  boolean_T guard1 = false;

  // Entry Internal 'Offset_Left': '<S656>:254'
  guard1 = false;
  if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
    // Transition: '<S656>:255'
    if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
      // Transition: '<S656>:1155'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
        MX_Gtwy_Control_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S656>:276'
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      enter_internal_Aux_Enable_cso3u();
    } else {
      // Transition: '<S656>:1158'
      aux_Inhibit = true;

      // Note 4
      // Transition: '<S656>:1156'
      guard1 = true;
    }
  } else {
    // Transition: '<S656>:1134'
    guard1 = true;
  }

  if (guard1) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
      MX_Gtwy_Con_IN_Mode_Offset_None;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S656>:262'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
    MX_Gt_DiverterFaultOverrideLeft();
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX_G_DiverterFaultOverrideRight(void)
{
  // Graphical Function 'DiverterFaultOverrideRight': '<S656>:1475'
  // Transition: '<S656>:1483'
  if (MX_Gtwy_Control_B.LogicalOperator_ns15) {
    // Transition: '<S656>:1484'
    // Transition: '<S656>:1488'
    mode_RightControl = MODE_RIGHT_NONE;

    // Transition: '<S656>:1489'
  } else {
    // Transition: '<S656>:1486'
  }

  // Transition: '<S656>:1491'
}

// Function for Chart: '<S626>/Control Modes'
static void enter_internal_Aux_Enabl_cso3up(void)
{
  // Entry Internal 'Aux_Enabled': '<S656>:287'
  if (eeMirror.ee_ControlMode == EE_RT_A4_A1) {
    // Transition: '<S656>:1138'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
      MX_Gtwy__IN_Mode_Aux4_Aux1_j4zq;

    // Entry 'Mode_Aux4_Aux1': '<S656>:274'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_RT_A4_A1;
    matlab_UpdateEEVar();
  } else if (eeMirror.ee_ControlMode == EE_RT_A2_A1) {
    // Transition: '<S656>:1139'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
      MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Aux2_Aux1': '<S656>:290'
    mode_LeftControl = MODE_LEFT_AUX2;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_RT_A2_A1;
    matlab_UpdateEEVar();
    MX_Gt_DiverterFaultOverrideLeft();
  } else {
    // Transition: '<S656>:325'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
      MX_Gtw_IN_Mode_Aux4_Offset_bn0r;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Aux4_Offset': '<S656>:275'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_OFFSET;
    eeMirror.ee_ControlMode = EE_RT_A4_OF;
    matlab_UpdateEEVar();
    MX_G_DiverterFaultOverrideRight();
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX__enter_internal_Offset_Right(void)
{
  boolean_T guard1 = false;

  // Entry Internal 'Offset_Right': '<S656>:265'
  guard1 = false;
  if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
    // Transition: '<S656>:1140'
    if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
      // Transition: '<S656>:1163'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
        MX_Gtwy_Control_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S656>:287'
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      enter_internal_Aux_Enabl_cso3up();
    } else {
      // Transition: '<S656>:1162'
      aux_Inhibit = true;

      // Note 4
      // Transition: '<S656>:1161'
      guard1 = true;
    }
  } else {
    // Transition: '<S656>:266'
    guard1 = true;
  }

  if (guard1) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
      MX_Gtwy_Con_IN_Mode_None_Offset;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S656>:273'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
    MX_G_DiverterFaultOverrideRight();
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gtwy_Contr_Offset_Right_jefh(const boolean_T *LogicalOperator2,
  const boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  boolean_T guard4 = false;

  // Update for Inport: '<Root>/can_OffsetSelectSw'
  // During 'Offset_Right': '<S656>:265'
  if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
       (int32_T)OFFSET_SELECT_LEFT)) {
    // Transition: '<S656>:417'
    check_LeftNeutral = true;

    // Transition: '<S656>:422'
    if (*LogicalOperator2) {
      // Transition: '<S656>:423'
      state_Buzzer = SINGLE_MEDIUM_BEEP;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

      // Exit Internal 'Offset_Right': '<S656>:265'
      // Exit Internal 'Aux_Enabled': '<S656>:287'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
        MX_Gtwy_Control_IN_Offset_Left;
      MX_G_enter_internal_Offset_Left();
    } else {
      // Transition: '<S656>:418'
      // Exit Internal 'Offset_Right': '<S656>:265'
      // Exit Internal 'Aux_Enabled': '<S656>:287'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
        MX_Gtwy_Contro_IN_Control_Fault;

      // Entry 'Control_Fault': '<S656>:429'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      aux_Inhibit = true;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();
    }
  } else {
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r ==
        MX_Gtwy_Control_IN_Aux_Enabled) {
      // During 'Aux_Enabled': '<S656>:287'
      if (MX_Gtwy_Control_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S656>:271'
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();

        // Exit Internal 'Aux_Enabled': '<S656>:287'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
          MX_Gtwy_Con_IN_Mode_None_Offset;
        MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_None_Offset': '<S656>:273'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_OFFSET;
        MX_G_DiverterFaultOverrideRight();
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S656>:521'
        // Transition: '<S656>:512'
        // Transition: '<S656>:515'
        // Exit Internal 'Aux_Enabled': '<S656>:287'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
          MX_Gtwy_Contro_IN_Control_Fault;

        // Entry 'Control_Fault': '<S656>:429'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp) {
         case MX_Gtwy_Contr_IN_Mode_Aux2_Aux1:
          // During 'Mode_Aux2_Aux1': '<S656>:290'
          if (MX_Gtwy_Control_B.request) {
            // Transition: '<S656>:293'
            state_Buzzer = TRIPLE_SHORT_BEEP;
            MX_Gtwy_Control_B.display_request = true;
            guard3 = true;
          } else if (MX_Gtwy_Control_B.request_itgm) {
            // Transition: '<S656>:475'
            check_LeftNeutral = true;
            if (*LogicalOperator2) {
              // Transition: '<S656>:470'
              state_Buzzer = SINGLE_SHORT_BEEP;
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
                MX_Gtwy__IN_Mode_Aux4_Aux1_j4zq;

              // Entry 'Mode_Aux4_Aux1': '<S656>:274'
              mode_LeftControl = MODE_LEFT_AUX4;
              mode_RightControl = MODE_RIGHT_AUX1;
              eeMirror.ee_ControlMode = EE_RT_A4_A1;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S656>:474'
              guard3 = true;
            }
          } else {
            check_LeftNeutral = false;
            MX_Gt_DiverterFaultOverrideLeft();
            if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U)
            {
              MX_Gtwy_Control_B.display_request = false;
            }
          }
          break;

         case MX_Gtwy__IN_Mode_Aux4_Aux1_j4zq:
          // During 'Mode_Aux4_Aux1': '<S656>:274'
          if (MX_Gtwy_Control_B.request) {
            // Transition: '<S656>:469'
            check_RightNeutral = true;
            if (*LogicalOperator2_ee3n) {
              // Transition: '<S656>:466'
              state_Buzzer = SINGLE_SHORT_BEEP;
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
                MX_Gtw_IN_Mode_Aux4_Offset_bn0r;
              MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

              // Entry 'Mode_Aux4_Offset': '<S656>:275'
              mode_LeftControl = MODE_LEFT_AUX4;
              mode_RightControl = MODE_RIGHT_OFFSET;
              eeMirror.ee_ControlMode = EE_RT_A4_OF;
              matlab_UpdateEEVar();
              MX_G_DiverterFaultOverrideRight();
            } else {
              // Transition: '<S656>:467'
              guard4 = true;
            }
          } else if (MX_Gtwy_Control_B.request_itgm &&
                     (!MX_Gtwy_Control_B.LogicalOperator_ns15)) {
            // Transition: '<S656>:476'
            check_LeftNeutral = true;
            if (*LogicalOperator2) {
              // Transition: '<S656>:477'
              state_Buzzer = DOUBLE_SHORT_BEEP;
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
                MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;
              MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

              // Entry 'Mode_Aux2_Aux1': '<S656>:290'
              mode_LeftControl = MODE_LEFT_AUX2;
              mode_RightControl = MODE_RIGHT_AUX1;
              eeMirror.ee_ControlMode = EE_RT_A2_A1;
              matlab_UpdateEEVar();
              MX_Gt_DiverterFaultOverrideLeft();
            } else {
              // Transition: '<S656>:472'
              guard4 = true;
            }
          } else {
            check_LeftNeutral = false;
            check_RightNeutral = false;
          }
          break;

         default:
          // During 'Mode_Aux4_Offset': '<S656>:275'
          if (MX_Gtwy_Control_B.request_itgm) {
            // Transition: '<S656>:288'
            state_Buzzer = TRIPLE_SHORT_BEEP;
            MX_Gtwy_Control_B.display_request = true;
            guard2 = true;
          } else if (MX_Gtwy_Control_B.request) {
            // Transition: '<S656>:468'
            check_RightNeutral = true;
            if (*LogicalOperator2_ee3n) {
              // Transition: '<S656>:462'
              state_Buzzer = DOUBLE_SHORT_BEEP;
              MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
                MX_Gtwy__IN_Mode_Aux4_Aux1_j4zq;

              // Entry 'Mode_Aux4_Aux1': '<S656>:274'
              mode_LeftControl = MODE_LEFT_AUX4;
              mode_RightControl = MODE_RIGHT_AUX1;
              eeMirror.ee_ControlMode = EE_RT_A4_A1;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S656>:464'
              guard2 = true;
            }
          } else {
            check_LeftNeutral = false;
            check_RightNeutral = false;
            MX_G_DiverterFaultOverrideRight();
            if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U)
            {
              MX_Gtwy_Control_B.display_request = false;
            }
          }
          break;
        }
      }
    } else {
      // During 'Mode_None_Offset': '<S656>:273'
      if (MX_Gtwy_Control_B.request_itgm || MX_Gtwy_Control_B.request) {
        // Transition: '<S656>:269'
        state_Buzzer = TRIPLE_SHORT_BEEP;
        MX_Gtwy_Control_B.display_request = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;
        guard1 = true;
      } else if ((*FixPtRelationalOperator_l3ss) &&
                 (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) &&
                 (state_CommSecondary == NORMAL)) {
        // Transition: '<S656>:483'
        check_LeftNeutral = true;

        // Note 3
        if (*LogicalOperator2) {
          // Transition: '<S656>:481'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
            MX_Gtwy_Control_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S656>:287'
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          enter_internal_Aux_Enabl_cso3up();
        } else {
          // Transition: '<S656>:480'
          aux_Inhibit = true;
          guard1 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        aux_Inhibit = false;
        MX_G_DiverterFaultOverrideRight();
        if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U) {
          MX_Gtwy_Control_B.display_request = false;
        }

        if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 200U) {
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        }
      }
    }

    if (guard4) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
        MX_Gtwy__IN_Mode_Aux4_Aux1_j4zq;

      // Entry 'Mode_Aux4_Aux1': '<S656>:274'
      mode_LeftControl = MODE_LEFT_AUX4;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_RT_A4_A1;
      matlab_UpdateEEVar();
    }

    if (guard3) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
        MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;
      MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Aux2_Aux1': '<S656>:290'
      mode_LeftControl = MODE_LEFT_AUX2;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_RT_A2_A1;
      matlab_UpdateEEVar();
      MX_Gt_DiverterFaultOverrideLeft();
    }

    if (guard2) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
        MX_Gtw_IN_Mode_Aux4_Offset_bn0r;
      MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Aux4_Offset': '<S656>:275'
      mode_LeftControl = MODE_LEFT_AUX4;
      mode_RightControl = MODE_RIGHT_OFFSET;
      eeMirror.ee_ControlMode = EE_RT_A4_OF;
      matlab_UpdateEEVar();
      MX_G_DiverterFaultOverrideRight();
    }

    if (guard1) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
        MX_Gtwy_Con_IN_Mode_None_Offset;
      MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_None_Offset': '<S656>:273'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_OFFSET;
      MX_G_DiverterFaultOverrideRight();
    }
  }

  // End of Update for Inport: '<Root>/can_OffsetSelectSw'
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gtwy_Control_Aux_Enabled(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  boolean_T guard4 = false;

  // During 'Aux_Enabled': '<S656>:276'
  if (MX_Gtwy_Control_B.UnitDelay8 == INACTIVE) {
    // Transition: '<S656>:260'
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();

    // Exit Internal 'Aux_Enabled': '<S656>:276'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
      MX_Gtwy_Con_IN_Mode_Offset_None;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S656>:262'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
    MX_Gt_DiverterFaultOverrideLeft();
  } else {
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled) {
     case MX_Gtwy_Contr_IN_Mode_Aux2_Aux1:
      // During 'Mode_Aux2_Aux1': '<S656>:280'
      if (MX_Gtwy_Control_B.request && (state_CommSecondary == NORMAL)) {
        // Transition: '<S656>:446'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:440'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gtwy_Contr_IN_Mode_Aux2_Aux4;

          // Entry 'Mode_Aux2_Aux4': '<S656>:281'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_A2_A4;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:442'
          guard2 = true;
        }
      } else if (MX_Gtwy_Control_B.request_itgm &&
                 (!MX_Gtwy_Control_B.LogicalOperator_ns15)) {
        // Transition: '<S656>:452'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S656>:282'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gt_IN_Mode_Offset_Aux1_g0rtz;

          // Entry 'Mode_Offset_Aux1': '<S656>:263'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:453'
          guard2 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Gt_DiverterFaultOverrideLeft();
      }
      break;

     case MX_Gtwy_Contr_IN_Mode_Aux2_Aux4:
      // During 'Mode_Aux2_Aux4': '<S656>:281'
      if (MX_Gtwy_Control_B.request_itgm &&
          (!MX_Gtwy_Control_B.LogicalOperator_ns15)) {
        // Transition: '<S656>:459'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S656>:457'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gtw_IN_Mode_Offset_Aux4_kviy;

          // Entry 'Mode_Offset_Aux4': '<S656>:264'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:460'
          guard3 = true;
        }
      } else if (MX_Gtwy_Control_B.request) {
        // Transition: '<S656>:447'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:444'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

          // Entry 'Mode_Aux2_Aux1': '<S656>:280'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_A2_A1;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:445'
          guard3 = true;
        }
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S656>:511'
        // Transition: '<S656>:512'
        // Transition: '<S656>:515'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
          MX_Gtwy_Contro_IN_Control_Fault;

        // Entry 'Control_Fault': '<S656>:429'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Gt_DiverterFaultOverrideLeft();
      }
      break;

     case MX_Gt_IN_Mode_Offset_Aux1_g0rtz:
      // During 'Mode_Offset_Aux1': '<S656>:263'
      if (MX_Gtwy_Control_B.request_itgm &&
          (!MX_Gtwy_Control_B.LogicalOperator_ns15)) {
        // Transition: '<S656>:283'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S656>:449'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

          // Entry 'Mode_Aux2_Aux1': '<S656>:280'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_A2_A1;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:450'
          guard4 = true;
        }
      } else if (MX_Gtwy_Control_B.request && (state_CommSecondary == NORMAL)) {
        // Transition: '<S656>:435'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:432'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gtw_IN_Mode_Offset_Aux4_kviy;

          // Entry 'Mode_Offset_Aux4': '<S656>:264'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:433'
          guard4 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Gt_DiverterFaultOverrideLeft();
      }
      break;

     default:
      // During 'Mode_Offset_Aux4': '<S656>:264'
      if (MX_Gtwy_Control_B.request) {
        // Transition: '<S656>:439'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:436'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gt_IN_Mode_Offset_Aux1_g0rtz;

          // Entry 'Mode_Offset_Aux1': '<S656>:263'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:438'
          guard1 = true;
        }
      } else if (MX_Gtwy_Control_B.request_itgm &&
                 (!MX_Gtwy_Control_B.LogicalOperator_ns15)) {
        // Transition: '<S656>:456'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S656>:454'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
            MX_Gtwy_Contr_IN_Mode_Aux2_Aux4;

          // Entry 'Mode_Aux2_Aux4': '<S656>:281'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_A2_A4;
          matlab_UpdateEEVar();
          MX_Gt_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S656>:458'
          guard1 = true;
        }
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S656>:518'
        // Transition: '<S656>:519'
        // Transition: '<S656>:520'
        // Transition: '<S656>:512'
        // Transition: '<S656>:515'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
          MX_Gtwy_Contro_IN_Control_Fault;

        // Entry 'Control_Fault': '<S656>:429'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Gt_DiverterFaultOverrideLeft();
      }
      break;
    }

    if (guard4) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
        MX_Gt_IN_Mode_Offset_Aux1_g0rtz;

      // Entry 'Mode_Offset_Aux1': '<S656>:263'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_LT_OF_A1;
      matlab_UpdateEEVar();
      MX_Gt_DiverterFaultOverrideLeft();
    }

    if (guard3) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
        MX_Gtwy_Contr_IN_Mode_Aux2_Aux4;

      // Entry 'Mode_Aux2_Aux4': '<S656>:281'
      mode_LeftControl = MODE_LEFT_AUX2;
      mode_RightControl = MODE_RIGHT_AUX4;
      eeMirror.ee_ControlMode = EE_LT_A2_A4;
      matlab_UpdateEEVar();
      MX_Gt_DiverterFaultOverrideLeft();
    }

    if (guard2) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
        MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

      // Entry 'Mode_Aux2_Aux1': '<S656>:280'
      mode_LeftControl = MODE_LEFT_AUX2;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_LT_A2_A1;
      matlab_UpdateEEVar();
      MX_Gt_DiverterFaultOverrideLeft();
    }

    if (guard1) {
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
        MX_Gtw_IN_Mode_Offset_Aux4_kviy;

      // Entry 'Mode_Offset_Aux4': '<S656>:264'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_AUX4;
      eeMirror.ee_ControlMode = EE_LT_OF_A4;
      matlab_UpdateEEVar();
      MX_Gt_DiverterFaultOverrideLeft();
    }
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gtwy_Control_OptionC(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;

  // During 'OptionC': '<S656>:247'
  guard1 = false;
  guard2 = false;
  guard3 = false;
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC) {
   case MX_Gtwy_Control_IN_Delay_n3pi:
    // During 'Delay': '<S656>:522'
    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 20U) {
      // Transition: '<S656>:523'
      if (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_RIGHT) {
        // Transition: '<S656>:407'
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:396'
          // Transition: '<S656>:413'
          // Transition: '<S656>:416'
          MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
            MX_Gtwy_Control_IN_Enabled_p4xh;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
            MX_Gtwy_Control_IN_Offset_Right;
          MX__enter_internal_Offset_Right();
        } else {
          // Transition: '<S656>:409'
          check_RightNeutral = true;
          guard1 = true;
        }
      } else {
        // Transition: '<S656>:402'
        guard3 = true;
      }
    } else {
      if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S656>:524'
        guard3 = true;
      }
    }
    break;

   case MX_Gtwy_Control_IN_Enabled_p4xh:
    // During 'Enabled': '<S656>:395'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S656>:410'
      // Exit Internal 'Enabled': '<S656>:395'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu ==
          MX_Gtwy_Contro_IN_Control_Fault) {
        // Exit 'Control_Fault': '<S656>:429'
        aux_Inhibit = false;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Left': '<S656>:254'
        // Exit Internal 'Aux_Enabled': '<S656>:276'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Right': '<S656>:265'
        // Exit Internal 'Aux_Enabled': '<S656>:287'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      }

      MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
        MX_Gtwy_Con_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S656>:406'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      aux_Inhibit = false;
      MX_Gtwy_Control_B.display_request = false;
      check_LeftNeutral = false;
      check_RightNeutral = false;
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu) {
       case MX_Gtwy_Contro_IN_Control_Fault:
        // During 'Control_Fault': '<S656>:429'
        if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb &&
            (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_RIGHT) &&
            (state_CommSecondary == NORMAL)) {
          // Transition: '<S656>:430'
          check_RightNeutral = true;

          // Transition: '<S656>:428'
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S656>:426'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S656>:429'
            aux_Inhibit = false;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
              MX_Gtwy_Control_IN_Offset_Right;
            MX__enter_internal_Offset_Right();
          } else {
            // Transition: '<S656>:427'
            guard2 = true;
          }
        } else if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb &&
                   (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_LEFT) &&
                   (state_CommSecondary == NORMAL)) {
          // Transition: '<S656>:431'
          check_LeftNeutral = true;

          // Transition: '<S656>:422'
          if (*LogicalOperator2) {
            // Transition: '<S656>:423'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S656>:429'
            aux_Inhibit = false;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
              MX_Gtwy_Control_IN_Offset_Left;
            MX_G_enter_internal_Offset_Left();
          } else {
            // Transition: '<S656>:418'
            guard2 = true;
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;

          // Note 2
        }
        break;

       case MX_Gtwy_Control_IN_Offset_Left:
        // Update for Inport: '<Root>/can_OffsetSelectSw'
        // During 'Offset_Left': '<S656>:254'
        if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb &&
            (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_RIGHT) &&
            (state_CommSecondary == NORMAL)) {
          // Transition: '<S656>:424'
          check_RightNeutral = true;

          // Transition: '<S656>:428'
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S656>:426'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

            // Exit Internal 'Offset_Left': '<S656>:254'
            // Exit Internal 'Aux_Enabled': '<S656>:276'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
              MX_Gtwy_Control_IN_Offset_Right;
            MX__enter_internal_Offset_Right();
          } else {
            // Transition: '<S656>:427'
            // Exit Internal 'Offset_Left': '<S656>:254'
            // Exit Internal 'Aux_Enabled': '<S656>:276'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
              MX_Gtwy_Contro_IN_Control_Fault;

            // Entry 'Control_Fault': '<S656>:429'
            mode_LeftControl = MODE_LEFT_NONE;
            mode_RightControl = MODE_RIGHT_NONE;
            aux_Inhibit = true;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_NA_NA;
            matlab_UpdateEEVar();
          }
        } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 ==
                   MX_Gtwy_Control_IN_Aux_Enabled) {
          MX_Gtwy_Control_Aux_Enabled(LogicalOperator2, LogicalOperator2_ee3n);
        } else {
          // During 'Mode_Offset_None': '<S656>:262'
          if (MX_Gtwy_Control_B.request_itgm || MX_Gtwy_Control_B.request) {
            // Transition: '<S656>:257'
            state_Buzzer = TRIPLE_SHORT_BEEP;
            MX_Gtwy_Control_B.display_request = true;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
              MX_Gtwy_Con_IN_Mode_Offset_None;
            MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

            // Entry 'Mode_Offset_None': '<S656>:262'
            mode_LeftControl = MODE_LEFT_OFFSET;
            mode_RightControl = MODE_RIGHT_NONE;
            MX_Gt_DiverterFaultOverrideLeft();
          } else if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
            // Transition: '<S656>:256'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
              MX_Gtwy_Control_IN_Aux_Enabled;

            // Entry 'Aux_Enabled': '<S656>:276'
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
            enter_internal_Aux_Enable_cso3u();
          } else {
            check_LeftNeutral = false;
            check_RightNeutral = false;
            aux_Inhibit = false;
            MX_Gt_DiverterFaultOverrideLeft();
            if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U)
            {
              MX_Gtwy_Control_B.display_request = false;
            }

            if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 200U)
            {
              MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
            }
          }
        }

        // End of Update for Inport: '<Root>/can_OffsetSelectSw'
        break;

       default:
        MX_Gtwy_Contr_Offset_Right_jefh(LogicalOperator2, LogicalOperator2_ee3n,
          FixPtRelationalOperator_l3ss);
        break;
      }
    }
    break;

   default:
    // Inport: '<Root>/state_System' incorporates:
    //   Inport: '<Root>/flag_InitEERead'

    // During 'INIT_SystemCheck': '<S656>:406'
    if ((state_Console == ACTIVE) && (state_System == SYS_NORMAL) &&
        (state_Engine != ENGINE_CRANKING) && flag_InitEERead) {
      // Transition: '<S656>:405'
      if (state_CommSecondary == NORMAL) {
        // Transition: '<S656>:494'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
          MX_Gtwy_Control_IN_Delay_n3pi;
        MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;
      } else {
        // Transition: '<S656>:495'
        if (state_CommSecondary == NO_COMMUNICATION) {
          // Transition: '<S656>:497'
          // Transition: '<S656>:408'
          // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
          if (*LogicalOperator2) {
            // Transition: '<S656>:398'
            MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
              MX_Gtwy_Control_IN_Enabled_p4xh;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
              MX_Gtwy_Control_IN_Offset_Left;
            MX_G_enter_internal_Offset_Left();
          } else {
            // Transition: '<S656>:412'
            check_LeftNeutral = true;

            // Transition: '<S656>:489'
            // Transition: '<S656>:491'
            // Transition: '<S656>:492'
            MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
              MX_Gtwy_Control_IN_Enabled_p4xh;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
              MX_Gtwy_Contro_IN_Control_Fault;

            // Entry 'Control_Fault': '<S656>:429'
            mode_LeftControl = MODE_LEFT_NONE;
            mode_RightControl = MODE_RIGHT_NONE;
            aux_Inhibit = true;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_NA_NA;
            matlab_UpdateEEVar();
          }
        }
      }
    }

    // End of Inport: '<Root>/state_System'
    break;
  }

  if (guard3) {
    // Transition: '<S656>:408'
    // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
    if (*LogicalOperator2) {
      // Transition: '<S656>:398'
      MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
        MX_Gtwy_Control_IN_Enabled_p4xh;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
        MX_Gtwy_Control_IN_Offset_Left;
      MX_G_enter_internal_Offset_Left();
    } else {
      // Transition: '<S656>:412'
      check_LeftNeutral = true;
      guard1 = true;
    }
  }

  if (guard2) {
    // Exit 'Control_Fault': '<S656>:429'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
      MX_Gtwy_Contro_IN_Control_Fault;

    // Entry 'Control_Fault': '<S656>:429'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }

  if (guard1) {
    // Transition: '<S656>:489'
    // Transition: '<S656>:491'
    // Transition: '<S656>:492'
    MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
      MX_Gtwy_Control_IN_Enabled_p4xh;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
      MX_Gtwy_Contro_IN_Control_Fault;

    // Entry 'Control_Fault': '<S656>:429'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gtwy_Control_OptionA(const boolean_T *LogicalOperator2)
{
  // During 'OptionA': '<S656>:162'
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA) {
   case MX_Gtwy_Control_IN_Delay_n3pi:
    // During 'Delay': '<S656>:1447'
    // Transition: '<S656>:1448'
    MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA =
      MX_Gtwy_Control_IN_Enabled_p4xh;

    // Entry Internal 'Enabled': '<S656>:307'
    if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
      // Transition: '<S656>:1426'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled =
        MX_Gtwy_Control_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S656>:986'
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;

      // Entry Internal 'Aux_Enabled': '<S656>:986'
      if (MX_Gtwy_Control_DWork.stored_ControlMode == EE_LT_A2_A1) {
        // Transition: '<S656>:1446'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
          MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

        // Entry 'Mode_Aux2_Aux1': '<S656>:116'
        mode_LeftControl = MODE_LEFT_AUX2;
        mode_RightControl = MODE_RIGHT_AUX1;
        MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_A2_A1;
      } else {
        // Transition: '<S656>:988'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
          MX_Gtwy_Con_IN_Mode_Offset_Aux1;

        // Entry 'Mode_Offset_Aux1': '<S656>:210'
        mode_LeftControl = MODE_LEFT_OFFSET;
        mode_RightControl = MODE_RIGHT_AUX1;
        MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_OF_A1;
        MX_Gtwy_Control_B.display_request = false;
      }
    } else {
      // Transition: '<S656>:324'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled =
        MX_Gtwy_Con_IN_Mode_Offset_None;
      MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Offset_None': '<S656>:113'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_OF_NA;
    }
    break;

   case MX_Gtwy_Control_IN_Enabled_p4xh:
    // Inport: '<Root>/state_System'
    // During 'Enabled': '<S656>:307'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S656>:308'
      // Exit Internal 'Enabled': '<S656>:307'
      // Exit Internal 'Aux_Enabled': '<S656>:986'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA =
        MX_Gtwy_Con_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S656>:88'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gtwy_Control_B.display_request = false;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      check_LeftNeutral = false;
    } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled ==
               MX_Gtwy_Control_IN_Aux_Enabled) {
      // During 'Aux_Enabled': '<S656>:986'
      if (MX_Gtwy_Control_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S656>:198'
        // Exit Internal 'Aux_Enabled': '<S656>:986'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled =
          MX_Gtwy_Con_IN_Mode_Offset_None;
        MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_Offset_None': '<S656>:113'
        mode_LeftControl = MODE_LEFT_OFFSET;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_OF_NA;
      } else if (MX_Gtwy_Control_B.LogicalOperator_ns15) {
        // Transition: '<S656>:987'
        // Exit Internal 'Aux_Enabled': '<S656>:986'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA =
          IN_Left_Control_or_Diverter_Fau;

        // Entry 'Left_Control_or_Diverter_Fault': '<S656>:964'
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        check_LeftNeutral = false;

        // Entry Internal 'Left_Control_or_Diverter_Fault': '<S656>:964'
        // Transition: '<S656>:969'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Left_Control_or_Diverter_Fau =
          MX_Gtwy_Control_IN_Fault_Mode;

        // Entry 'Fault_Mode': '<S656>:982'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gtwy_Control_DWork.stored_ControlMode = EE_NA_NA;
      } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb ==
                 MX_Gtwy_Contr_IN_Mode_Aux2_Aux1) {
        // During 'Mode_Aux2_Aux1': '<S656>:116'
        if (MX_Gtwy_Control_B.request_itgm) {
          // Transition: '<S656>:336'
          check_LeftNeutral = true;
          if (*LogicalOperator2) {
            // Transition: '<S656>:123'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
              MX_Gtwy_Con_IN_Mode_Offset_Aux1;

            // Entry 'Mode_Offset_Aux1': '<S656>:210'
            mode_LeftControl = MODE_LEFT_OFFSET;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_OF_A1;
            MX_Gtwy_Control_B.display_request = false;
          } else {
            // Transition: '<S656>:337'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
              MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

            // Entry 'Mode_Aux2_Aux1': '<S656>:116'
            mode_LeftControl = MODE_LEFT_AUX2;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_A2_A1;
          }
        } else {
          check_LeftNeutral = false;
        }
      } else {
        // During 'Mode_Offset_Aux1': '<S656>:210'
        if (MX_Gtwy_Control_B.request_itgm) {
          // Transition: '<S656>:333'
          check_LeftNeutral = true;
          if (*LogicalOperator2) {
            // Transition: '<S656>:119'
            state_Buzzer = DOUBLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
              MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

            // Entry 'Mode_Aux2_Aux1': '<S656>:116'
            mode_LeftControl = MODE_LEFT_AUX2;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_A2_A1;
          } else {
            // Transition: '<S656>:334'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
              MX_Gtwy_Con_IN_Mode_Offset_Aux1;

            // Entry 'Mode_Offset_Aux1': '<S656>:210'
            mode_LeftControl = MODE_LEFT_OFFSET;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_OF_A1;
            MX_Gtwy_Control_B.display_request = false;
          }
        } else {
          check_LeftNeutral = false;
        }
      }
    } else {
      // During 'Mode_Offset_None': '<S656>:113'
      if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S656>:200'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled =
          MX_Gtwy_Control_IN_Aux_Enabled;

        // Entry 'Aux_Enabled': '<S656>:986'
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;

        // Entry Internal 'Aux_Enabled': '<S656>:986'
        if (MX_Gtwy_Control_DWork.stored_ControlMode == EE_LT_A2_A1) {
          // Transition: '<S656>:1446'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
            MX_Gtwy_Contr_IN_Mode_Aux2_Aux1;

          // Entry 'Mode_Aux2_Aux1': '<S656>:116'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_A2_A1;
        } else {
          // Transition: '<S656>:988'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
            MX_Gtwy_Con_IN_Mode_Offset_Aux1;

          // Entry 'Mode_Offset_Aux1': '<S656>:210'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_OF_A1;
          MX_Gtwy_Control_B.display_request = false;
        }
      } else if (MX_Gtwy_Control_B.request_itgm) {
        // Transition: '<S656>:197'
        // Transition: '<S656>:203'
        state_Buzzer = TRIPLE_SHORT_BEEP;
        MX_Gtwy_Control_B.display_request = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

        // Transition: '<S656>:202'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled =
          MX_Gtwy_Con_IN_Mode_Offset_None;
        MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_Offset_None': '<S656>:113'
        mode_LeftControl = MODE_LEFT_OFFSET;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gtwy_Control_DWork.stored_ControlMode = EE_LT_OF_NA;
      } else {
        check_LeftNeutral = false;
        if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U) {
          MX_Gtwy_Control_B.display_request = false;
        }

        if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 200U) {
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        }
      }
    }
    break;

   case MX_Gtwy_Con_IN_INIT_SystemCheck:
    // Inport: '<Root>/state_System' incorporates:
    //   Inport: '<Root>/flag_InitEERead'

    // During 'INIT_SystemCheck': '<S656>:88'
    if ((state_Console == ACTIVE) && (state_Engine != ENGINE_CRANKING) &&
        (state_System == SYS_NORMAL) && flag_InitEERead) {
      // Transition: '<S656>:115'
      if (*LogicalOperator2) {
        // Transition: '<S656>:672'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA =
          MX_Gtwy_Control_IN_Delay_n3pi;
      } else {
        // Transition: '<S656>:962'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA =
          IN_Left_Control_or_Diverter_Fau;

        // Entry 'Left_Control_or_Diverter_Fault': '<S656>:964'
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        check_LeftNeutral = false;

        // Entry Internal 'Left_Control_or_Diverter_Fault': '<S656>:964'
        // Transition: '<S656>:969'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Left_Control_or_Diverter_Fau =
          MX_Gtwy_Control_IN_Fault_Mode;

        // Entry 'Fault_Mode': '<S656>:982'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gtwy_Control_DWork.stored_ControlMode = EE_NA_NA;
      }
    }
    break;

   default:
    // Inport: '<Root>/state_System'
    // During 'Left_Control_or_Diverter_Fault': '<S656>:964'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S656>:985'
      // Exit Internal 'Left_Control_or_Diverter_Fault': '<S656>:964'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Left_Control_or_Diverter_Fau =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA =
        MX_Gtwy_Con_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S656>:88'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gtwy_Control_B.display_request = false;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      check_LeftNeutral = false;
    } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_Left_Control_or_Diverter_Fau
               == MX_Gtwy_Control_IN_Fault_Mode) {
      // During 'Fault_Mode': '<S656>:982'
      if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S656>:975'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Left_Control_or_Diverter_Fau =
          MX_Gtwy_Contr_IN_Mode_None_Aux1;

        // Entry 'Mode_None_Aux1': '<S656>:984'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_AUX1;
      }
    } else {
      // During 'Mode_None_Aux1': '<S656>:984'
      if (MX_Gtwy_Control_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S656>:977'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Left_Control_or_Diverter_Fau =
          MX_Gtwy_Control_IN_Fault_Mode;

        // Entry 'Fault_Mode': '<S656>:982'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gtwy_Control_DWork.stored_ControlMode = EE_NA_NA;
      }
    }
    break;
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX_G_enter_internal_Aux_Enabled(void)
{
  // Entry Internal 'Aux_Enabled': '<S656>:1336'
  if (eeMirror.ee_ControlMode == EE_LT_OF_A4) {
    // Transition: '<S656>:1346'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
      MX_Gtwy_Con_IN_Mode_Offset_Aux4;

    // Entry 'Mode_Offset_Aux4': '<S656>:1375'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX4;
    eeMirror.ee_ControlMode = EE_LT_OF_A4;
    matlab_UpdateEEVar();
  } else {
    // Transition: '<S656>:1347'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
      MX_Gtw_IN_Mode_Offset_Aux1_g0rt;

    // Entry 'Mode_Offset_Aux1': '<S656>:1376'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX1;
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_LT_OF_A1;
    matlab_UpdateEEVar();
  }
}

// Function for Chart: '<S626>/Control Modes'
static void enter_internal_Aux_Enabled_cso3(void)
{
  // Entry Internal 'Aux_Enabled': '<S656>:1395'
  if (eeMirror.ee_ControlMode == EE_RT_A4_A1) {
    // Transition: '<S656>:1402'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
      MX_Gtwy_Contr_IN_Mode_Aux4_Aux1;

    // Entry 'Mode_Aux4_Aux1': '<S656>:1419'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_RT_A4_A1;
    matlab_UpdateEEVar();
  } else {
    // Transition: '<S656>:1401'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
      MX_Gtwy_Con_IN_Mode_Aux4_Offset;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Aux4_Offset': '<S656>:1420'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_OFFSET;
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_RT_A4_OF;
    matlab_UpdateEEVar();
  }
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gtwy_Control_Offset_Right(const boolean_T *LogicalOperator2,
  const boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;

  // Update for Inport: '<Root>/can_OffsetSelectSw'
  // During 'Offset_Right': '<S656>:1381'
  guard1 = false;
  guard2 = false;
  if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
       (int32_T)OFFSET_SELECT_LEFT)) {
    // Transition: '<S656>:1324'
    check_LeftNeutral = true;

    // Transition: '<S656>:1315'
    if (*LogicalOperator2) {
      // Transition: '<S656>:1311'
      state_Buzzer = SINGLE_MEDIUM_BEEP;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

      // Exit Internal 'Offset_Right': '<S656>:1381'
      // Exit Internal 'Aux_Enabled': '<S656>:1395'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
        MX_Gtwy_Control_IN_Offset_Left;

      // Entry Internal 'Offset_Left': '<S656>:1325'
      if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S656>:1328'
        if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
          // Transition: '<S656>:1330'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
            MX_Gtwy_Control_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S656>:1336'
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          MX_G_enter_internal_Aux_Enabled();
        } else {
          // Transition: '<S656>:1331'
          aux_Inhibit = true;

          // Note 4
          // Transition: '<S656>:1333'
          guard1 = true;
        }
      } else {
        // Transition: '<S656>:1329'
        guard1 = true;
      }
    } else {
      // Transition: '<S656>:1313'
      // Exit Internal 'Offset_Right': '<S656>:1381'
      // Exit Internal 'Aux_Enabled': '<S656>:1395'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
        MX_Gtwy_Contro_IN_Control_Fault;

      // Entry 'Control_Fault': '<S656>:1380'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      aux_Inhibit = true;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right) {
     case MX_Gtwy_Control_IN_Aux_Enabled:
      // During 'Aux_Enabled': '<S656>:1395'
      if (MX_Gtwy_Control_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S656>:1394'
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();

        // Exit Internal 'Aux_Enabled': '<S656>:1395'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
          MX_Gtwy_Con_IN_Mode_None_Offset;
        MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_None_Offset': '<S656>:1422'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_OFFSET;
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S656>:1320'
        // Transition: '<S656>:1317'
        // Transition: '<S656>:1316'
        // Exit Internal 'Aux_Enabled': '<S656>:1395'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
          MX_Gtwy_Contro_IN_Control_Fault;

        // Entry 'Control_Fault': '<S656>:1380'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 ==
                 MX_Gtwy_Contr_IN_Mode_Aux4_Aux1) {
        // During 'Mode_Aux4_Aux1': '<S656>:1419'
        if (MX_Gtwy_Control_B.request) {
          // Transition: '<S656>:1407'
          check_RightNeutral = true;
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S656>:1406'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
              MX_Gtwy_Con_IN_Mode_Aux4_Offset;
            MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

            // Entry 'Mode_Aux4_Offset': '<S656>:1420'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_OFFSET;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_RT_A4_OF;
            matlab_UpdateEEVar();
          } else {
            // Transition: '<S656>:1408'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
              MX_Gtwy_Contr_IN_Mode_Aux4_Aux1;

            // Entry 'Mode_Aux4_Aux1': '<S656>:1419'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_AUX1;
            eeMirror.ee_ControlMode = EE_RT_A4_A1;
            matlab_UpdateEEVar();
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;
        }
      } else {
        // During 'Mode_Aux4_Offset': '<S656>:1420'
        if (MX_Gtwy_Control_B.request) {
          // Transition: '<S656>:1403'
          check_RightNeutral = true;
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S656>:1404'
            state_Buzzer = DOUBLE_SHORT_BEEP;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
              MX_Gtwy_Contr_IN_Mode_Aux4_Aux1;

            // Entry 'Mode_Aux4_Aux1': '<S656>:1419'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_AUX1;
            eeMirror.ee_ControlMode = EE_RT_A4_A1;
            matlab_UpdateEEVar();
          } else {
            // Transition: '<S656>:1405'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
              MX_Gtwy_Con_IN_Mode_Aux4_Offset;
            MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

            // Entry 'Mode_Aux4_Offset': '<S656>:1420'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_OFFSET;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_RT_A4_OF;
            matlab_UpdateEEVar();
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;
          if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U) {
            MX_Gtwy_Control_B.display_request = false;
          }
        }
      }
      break;

     default:
      // During 'Mode_None_Offset': '<S656>:1422'
      if (MX_Gtwy_Control_B.request) {
        // Transition: '<S656>:1393'
        state_Buzzer = TRIPLE_SHORT_BEEP;
        MX_Gtwy_Control_B.display_request = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;
        guard2 = true;
      } else if ((*FixPtRelationalOperator_l3ss) &&
                 (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) &&
                 (state_CommSecondary == NORMAL)) {
        // Transition: '<S656>:1390'
        check_LeftNeutral = true;

        // Note 3
        if (*LogicalOperator2) {
          // Transition: '<S656>:1391'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
            MX_Gtwy_Control_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S656>:1395'
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          enter_internal_Aux_Enabled_cso3();
        } else {
          // Transition: '<S656>:1392'
          aux_Inhibit = true;
          guard2 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        aux_Inhibit = false;
        if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U) {
          MX_Gtwy_Control_B.display_request = false;
        }

        if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 200U) {
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        }
      }
      break;
    }
  }

  if (guard2) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
      MX_Gtwy_Con_IN_Mode_None_Offset;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S656>:1422'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
  }

  if (guard1) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
      MX_Gtwy_Con_IN_Mode_Offset_None;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S656>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }

  // End of Update for Inport: '<Root>/can_OffsetSelectSw'
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gtwy_Control_Offset_Left(const boolean_T *LogicalOperator2_ee3n)
{
  boolean_T guard1 = false;

  // Update for Inport: '<Root>/can_OffsetSelectSw'
  // During 'Offset_Left': '<S656>:1325'
  if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
       (int32_T)OFFSET_SELECT_RIGHT) && (state_CommSecondary == NORMAL)) {
    // Transition: '<S656>:1310'
    check_RightNeutral = true;

    // Transition: '<S656>:1314'
    if (*LogicalOperator2_ee3n) {
      // Transition: '<S656>:1323'
      state_Buzzer = SINGLE_MEDIUM_BEEP;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

      // Exit Internal 'Offset_Left': '<S656>:1325'
      // Exit Internal 'Aux_Enabled': '<S656>:1336'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
        MX_Gtwy_Control_IN_Offset_Right;

      // Entry Internal 'Offset_Right': '<S656>:1381'
      guard1 = false;
      if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S656>:1385'
        if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
          // Transition: '<S656>:1387'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
            MX_Gtwy_Control_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S656>:1395'
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          enter_internal_Aux_Enabled_cso3();
        } else {
          // Transition: '<S656>:1388'
          aux_Inhibit = true;

          // Note 4
          // Transition: '<S656>:1389'
          guard1 = true;
        }
      } else {
        // Transition: '<S656>:1386'
        guard1 = true;
      }

      if (guard1) {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
          MX_Gtwy_Con_IN_Mode_None_Offset;
        MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_None_Offset': '<S656>:1422'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_OFFSET;
      }
    } else {
      // Transition: '<S656>:1321'
      // Exit Internal 'Offset_Left': '<S656>:1325'
      // Exit Internal 'Aux_Enabled': '<S656>:1336'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
        MX_Gtwy_Contro_IN_Control_Fault;

      // Entry 'Control_Fault': '<S656>:1380'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      aux_Inhibit = true;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();
    }
  } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left ==
             MX_Gtwy_Control_IN_Aux_Enabled) {
    // During 'Aux_Enabled': '<S656>:1336'
    if (MX_Gtwy_Control_B.UnitDelay8 == INACTIVE) {
      // Transition: '<S656>:1335'
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();

      // Exit Internal 'Aux_Enabled': '<S656>:1336'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
        MX_Gtwy_Con_IN_Mode_Offset_None;
      MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Offset_None': '<S656>:1379'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_NONE;
    } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a ==
               MX_Gtw_IN_Mode_Offset_Aux1_g0rt) {
      // During 'Mode_Offset_Aux1': '<S656>:1376'
      if (MX_Gtwy_Control_B.request && (state_CommSecondary == NORMAL)) {
        // Transition: '<S656>:1348'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:1349'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
            MX_Gtwy_Con_IN_Mode_Offset_Aux4;

          // Entry 'Mode_Offset_Aux4': '<S656>:1375'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
        } else {
          // Transition: '<S656>:1350'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
            MX_Gtw_IN_Mode_Offset_Aux1_g0rt;

          // Entry 'Mode_Offset_Aux1': '<S656>:1376'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
      }
    } else {
      // During 'Mode_Offset_Aux4': '<S656>:1375'
      if (MX_Gtwy_Control_B.request) {
        // Transition: '<S656>:1353'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:1352'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
            MX_Gtw_IN_Mode_Offset_Aux1_g0rt;

          // Entry 'Mode_Offset_Aux1': '<S656>:1376'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
        } else {
          // Transition: '<S656>:1354'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
            MX_Gtwy_Con_IN_Mode_Offset_Aux4;

          // Entry 'Mode_Offset_Aux4': '<S656>:1375'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
        }
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S656>:1351'
        // Transition: '<S656>:1317'
        // Transition: '<S656>:1316'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
          MX_Gtwy_Contro_IN_Control_Fault;

        // Entry 'Control_Fault': '<S656>:1380'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
      }
    }
  } else {
    // During 'Mode_Offset_None': '<S656>:1379'
    if (MX_Gtwy_Control_B.request) {
      // Transition: '<S656>:1332'
      state_Buzzer = TRIPLE_SHORT_BEEP;
      MX_Gtwy_Control_B.display_request = true;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
        MX_Gtwy_Con_IN_Mode_Offset_None;
      MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Offset_None': '<S656>:1379'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_NONE;
    } else if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
      // Transition: '<S656>:1334'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
        MX_Gtwy_Control_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S656>:1336'
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      MX_G_enter_internal_Aux_Enabled();
    } else {
      check_LeftNeutral = false;
      check_RightNeutral = false;
      aux_Inhibit = false;
      if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 10U) {
        MX_Gtwy_Control_B.display_request = false;
      }

      if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 200U) {
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      }
    }
  }

  // End of Update for Inport: '<Root>/can_OffsetSelectSw'
}

// Function for Chart: '<S626>/Control Modes'
static void MX_Gtwy_Control_OptionB(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  boolean_T guard4 = false;
  boolean_T guard5 = false;
  boolean_T guard6 = false;
  boolean_T guard7 = false;
  boolean_T guard8 = false;

  // During 'OptionB': '<S656>:1262'
  guard1 = false;
  guard2 = false;
  guard3 = false;
  guard4 = false;
  guard5 = false;
  guard6 = false;
  guard7 = false;
  guard8 = false;
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB) {
   case MX_Gtwy_Control_IN_Delay_n3pi:
    // During 'Delay': '<S656>:1297'
    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq >= 20U) {
      // Transition: '<S656>:1279'
      if (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_RIGHT) {
        // Transition: '<S656>:1282'
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S656>:1281'
          // Transition: '<S656>:1283'
          // Transition: '<S656>:1293'
          MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
            MX_Gtwy_Control_IN_Enabled_p4xh;
          MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
            MX_Gtwy_Control_IN_Offset_Right;

          // Entry Internal 'Offset_Right': '<S656>:1381'
          if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
            // Transition: '<S656>:1385'
            if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
              // Transition: '<S656>:1387'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
                MX_Gtwy_Control_IN_Aux_Enabled;

              // Entry 'Aux_Enabled': '<S656>:1395'
              MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
              enter_internal_Aux_Enabled_cso3();
            } else {
              // Transition: '<S656>:1388'
              aux_Inhibit = true;

              // Note 4
              // Transition: '<S656>:1389'
              guard2 = true;
            }
          } else {
            // Transition: '<S656>:1386'
            guard2 = true;
          }
        } else {
          // Transition: '<S656>:1284'
          check_RightNeutral = true;
          guard3 = true;
        }
      } else {
        // Transition: '<S656>:1285'
        guard8 = true;
      }
    } else {
      if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S656>:1280'
        guard8 = true;
      }
    }
    break;

   case MX_Gtwy_Control_IN_Enabled_p4xh:
    // During 'Enabled': '<S656>:1299'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S656>:1275'
      // Exit Internal 'Enabled': '<S656>:1299'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji ==
          MX_Gtwy_Contro_IN_Control_Fault) {
        // Exit 'Control_Fault': '<S656>:1380'
        aux_Inhibit = false;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      } else {
        MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Left': '<S656>:1325'
        // Exit Internal 'Aux_Enabled': '<S656>:1336'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Right': '<S656>:1381'
        // Exit Internal 'Aux_Enabled': '<S656>:1395'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      }

      MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
        MX_Gtwy_Con_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S656>:1294'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
      aux_Inhibit = false;
      MX_Gtwy_Control_B.display_request = false;
      check_LeftNeutral = false;
      check_RightNeutral = false;
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji) {
       case MX_Gtwy_Contro_IN_Control_Fault:
        // During 'Control_Fault': '<S656>:1380'
        if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb &&
            (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_RIGHT) &&
            (state_CommSecondary == NORMAL)) {
          // Transition: '<S656>:1312'
          check_RightNeutral = true;

          // Transition: '<S656>:1314'
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S656>:1323'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S656>:1380'
            aux_Inhibit = false;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
              MX_Gtwy_Control_IN_Offset_Right;

            // Entry Internal 'Offset_Right': '<S656>:1381'
            if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
              // Transition: '<S656>:1385'
              if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
                // Transition: '<S656>:1387'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
                  MX_Gtwy_Control_IN_Aux_Enabled;

                // Entry 'Aux_Enabled': '<S656>:1395'
                MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
                enter_internal_Aux_Enabled_cso3();
              } else {
                // Transition: '<S656>:1388'
                aux_Inhibit = true;

                // Note 4
                // Transition: '<S656>:1389'
                guard5 = true;
              }
            } else {
              // Transition: '<S656>:1386'
              guard5 = true;
            }
          } else {
            // Transition: '<S656>:1321'
            guard6 = true;
          }
        } else if (MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb &&
                   (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_LEFT) &&
                   (state_CommSecondary == NORMAL)) {
          // Transition: '<S656>:1322'
          check_LeftNeutral = true;

          // Transition: '<S656>:1315'
          if (*LogicalOperator2) {
            // Transition: '<S656>:1311'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S656>:1380'
            aux_Inhibit = false;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
              MX_Gtwy_Control_IN_Offset_Left;

            // Entry Internal 'Offset_Left': '<S656>:1325'
            if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
              // Transition: '<S656>:1328'
              if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
                // Transition: '<S656>:1330'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
                  MX_Gtwy_Control_IN_Aux_Enabled;

                // Entry 'Aux_Enabled': '<S656>:1336'
                MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
                MX_G_enter_internal_Aux_Enabled();
              } else {
                // Transition: '<S656>:1331'
                aux_Inhibit = true;

                // Note 4
                // Transition: '<S656>:1333'
                guard7 = true;
              }
            } else {
              // Transition: '<S656>:1329'
              guard7 = true;
            }
          } else {
            // Transition: '<S656>:1313'
            guard6 = true;
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;

          // Note 2
        }
        break;

       case MX_Gtwy_Control_IN_Offset_Left:
        MX_Gtwy_Control_Offset_Left(LogicalOperator2_ee3n);
        break;

       default:
        MX_Gtwy_Control_Offset_Right(LogicalOperator2, LogicalOperator2_ee3n,
          FixPtRelationalOperator_l3ss);
        break;
      }
    }
    break;

   default:
    // During 'INIT_SystemCheck': '<S656>:1294'
    if ((state_Console == ACTIVE) && (state_System == SYS_NORMAL) &&
        (state_Engine != ENGINE_CRANKING) && flag_InitEERead) {
      // Transition: '<S656>:1276'
      if (state_CommSecondary == NORMAL) {
        // Transition: '<S656>:1277'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
          MX_Gtwy_Control_IN_Delay_n3pi;
        MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;
      } else {
        // Transition: '<S656>:1278'
        if (state_CommSecondary == NO_COMMUNICATION) {
          // Transition: '<S656>:1286'
          // Transition: '<S656>:1289'
          // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
          if (*LogicalOperator2) {
            // Transition: '<S656>:1291'
            MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
              MX_Gtwy_Control_IN_Enabled_p4xh;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
              MX_Gtwy_Control_IN_Offset_Left;

            // Entry Internal 'Offset_Left': '<S656>:1325'
            if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
              // Transition: '<S656>:1328'
              if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
                // Transition: '<S656>:1330'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
                  MX_Gtwy_Control_IN_Aux_Enabled;

                // Entry 'Aux_Enabled': '<S656>:1336'
                MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
                MX_G_enter_internal_Aux_Enabled();
              } else {
                // Transition: '<S656>:1331'
                aux_Inhibit = true;

                // Note 4
                // Transition: '<S656>:1333'
                guard1 = true;
              }
            } else {
              // Transition: '<S656>:1329'
              guard1 = true;
            }
          } else {
            // Transition: '<S656>:1288'
            check_LeftNeutral = true;

            // Transition: '<S656>:1287'
            // Transition: '<S656>:1290'
            // Transition: '<S656>:1292'
            MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
              MX_Gtwy_Control_IN_Enabled_p4xh;
            MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
              MX_Gtwy_Contro_IN_Control_Fault;

            // Entry 'Control_Fault': '<S656>:1380'
            mode_LeftControl = MODE_LEFT_NONE;
            mode_RightControl = MODE_RIGHT_NONE;
            aux_Inhibit = true;
            MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_NA_NA;
            matlab_UpdateEEVar();
          }
        }
      }
    }
    break;
  }

  if (guard8) {
    // Transition: '<S656>:1289'
    // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
    if (*LogicalOperator2) {
      // Transition: '<S656>:1291'
      MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
        MX_Gtwy_Control_IN_Enabled_p4xh;
      MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
        MX_Gtwy_Control_IN_Offset_Left;

      // Entry Internal 'Offset_Left': '<S656>:1325'
      if (MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S656>:1328'
        if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
          // Transition: '<S656>:1330'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
            MX_Gtwy_Control_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S656>:1336'
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          MX_G_enter_internal_Aux_Enabled();
        } else {
          // Transition: '<S656>:1331'
          aux_Inhibit = true;

          // Note 4
          // Transition: '<S656>:1333'
          guard4 = true;
        }
      } else {
        // Transition: '<S656>:1329'
        guard4 = true;
      }
    } else {
      // Transition: '<S656>:1288'
      check_LeftNeutral = true;
      guard3 = true;
    }
  }

  if (guard7) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
      MX_Gtwy_Con_IN_Mode_Offset_None;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S656>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }

  if (guard6) {
    // Exit 'Control_Fault': '<S656>:1380'
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
      MX_Gtwy_Contro_IN_Control_Fault;

    // Entry 'Control_Fault': '<S656>:1380'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }

  if (guard5) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
      MX_Gtwy_Con_IN_Mode_None_Offset;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S656>:1422'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
  }

  if (guard4) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
      MX_Gtwy_Con_IN_Mode_Offset_None;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S656>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }

  if (guard3) {
    // Transition: '<S656>:1287'
    // Transition: '<S656>:1290'
    // Transition: '<S656>:1292'
    MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
      MX_Gtwy_Control_IN_Enabled_p4xh;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
      MX_Gtwy_Contro_IN_Control_Fault;

    // Entry 'Control_Fault': '<S656>:1380'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }

  if (guard2) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
      MX_Gtwy_Con_IN_Mode_None_Offset;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S656>:1422'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
  }

  if (guard1) {
    MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
      MX_Gtwy_Con_IN_Mode_Offset_None;
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S656>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }
}

// Function for Chart: '<S660>/DisplayAuxMode'
static void MX_Gtwy_Con_ReminderOfLastState(void)
{
  int32_T tmp;
  boolean_T guard1 = false;

  // During 'ReminderOfLastState': '<S664>:3'
  //  if time expires give up and stop remembering old state
  guard1 = false;
  if (MX_Gtwy_Control_DWork.flash_timer >
      CONSTANT_DATA->EMEA_CONTROLS_REMINDER_TIME) {
    // Transition: '<S664>:5'
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
    guard1 = true;
  } else {
    //  Aux goes active or offset select switch was changed
    if ((MX_Gtwy_Control_B.UnitDelay8 != INACTIVE) || (eeMirror.ee_ControlMode ==
         EE_NA_NA)) {
      // Transition: '<S664>:7'
      guard1 = true;
    } else {
      // Inport: '<Root>/state_System'
      if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
          (state_Engine == ENGINE_CRANKING)) {
        // Transition: '<S664>:167'
        // Exit Internal 'ReminderOfLastState': '<S664>:3'
        // Exit Internal 'FlashTimer': '<S664>:142'
        MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Flasher': '<S664>:141'
        // Exit Internal 'A2FLASH_A1FLASH': '<S664>:34'
        MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'A2FLASH_A4FLASH': '<S664>:75'
        MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'A4FLASH_A1FLASH': '<S664>:81'
        MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'A4FLASH_OF': '<S664>:46'
        MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'OF_A1FLASH': '<S664>:19'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'OF_A4FLASH': '<S664>:28'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_Init_lslf;

        // Entry 'Init': '<S664>:118'
        disp_LeftControl = mode_LeftControl;
        disp_RightControl = mode_RightControl;
        flag_AuxModeReminder = false;
      } else {
        // During 'Flasher': '<S664>:141'
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher) {
         case MX_Gtwy_Cont_IN_A2FLASH_A1FLASH:
          // During 'A2FLASH_A1FLASH': '<S664>:34'
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH) {
           case MX_Gtwy_Control_IN_GLOW_OFF:
            // During 'GLOW_OFF': '<S664>:129'
            if (!MX_Gtwy_Control_B.RateTransition12_piek) {
              // Transition: '<S664>:128'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:38'
              disp_RightControl = MODE_RIGHT_AUX1;
              disp_LeftControl = MODE_LEFT_AUX2;
            }
            break;

           case MX_Gtwy_Control_IN_OFF_a3vv:
            // During 'OFF': '<S664>:39'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:37'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:38'
              disp_RightControl = MODE_RIGHT_AUX1;
              disp_LeftControl = MODE_LEFT_AUX2;
            }
            break;

           default:
            // During 'ON': '<S664>:38'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:36'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH =
                MX_Gtwy_Control_IN_OFF_a3vv;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'OFF': '<S664>:39'
              disp_RightControl = MODE_RIGHT_NONE;
              disp_LeftControl = MODE_LEFT_NONE;
            }
            break;
          }
          break;

         case MX_Gtwy_Cont_IN_A2FLASH_A4FLASH:
          // During 'A2FLASH_A4FLASH': '<S664>:75'
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH) {
           case MX_Gtwy_Control_IN_GLOW_OFF:
            // During 'GLOW_OFF': '<S664>:132'
            if (!MX_Gtwy_Control_B.RateTransition12_piek) {
              // Transition: '<S664>:131'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:79'
              disp_RightControl = MODE_RIGHT_AUX4;
              disp_LeftControl = MODE_LEFT_AUX2;
            }
            break;

           case MX_Gtwy_Control_IN_OFF_a3vv:
            // During 'OFF': '<S664>:80'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:78'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:79'
              disp_RightControl = MODE_RIGHT_AUX4;
              disp_LeftControl = MODE_LEFT_AUX2;
            }
            break;

           default:
            // During 'ON': '<S664>:79'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:77'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH =
                MX_Gtwy_Control_IN_OFF_a3vv;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'OFF': '<S664>:80'
              disp_RightControl = MODE_RIGHT_NONE;
              disp_LeftControl = MODE_LEFT_NONE;
            }
            break;
          }
          break;

         case MX_Gtwy_Cont_IN_A4FLASH_A1FLASH:
          // During 'A4FLASH_A1FLASH': '<S664>:81'
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH) {
           case MX_Gtwy_Control_IN_GLOW_OFF:
            // During 'GLOW_OFF': '<S664>:138'
            if (!MX_Gtwy_Control_B.RateTransition12_piek) {
              // Transition: '<S664>:137'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:85'
              disp_RightControl = MODE_RIGHT_AUX1;
              disp_LeftControl = MODE_LEFT_AUX4;
            }
            break;

           case MX_Gtwy_Control_IN_OFF_a3vv:
            // During 'OFF': '<S664>:86'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:84'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:85'
              disp_RightControl = MODE_RIGHT_AUX1;
              disp_LeftControl = MODE_LEFT_AUX4;
            }
            break;

           default:
            // During 'ON': '<S664>:85'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:83'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH =
                MX_Gtwy_Control_IN_OFF_a3vv;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'OFF': '<S664>:86'
              disp_RightControl = MODE_RIGHT_NONE;
              disp_LeftControl = MODE_LEFT_NONE;
            }
            break;
          }
          break;

         case MX_Gtwy_Control_IN_A4FLASH_OF:
          // During 'A4FLASH_OF': '<S664>:46'
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF) {
           case MX_Gtwy_Control_IN_GLOW_OFF:
            // During 'GLOW_OFF': '<S664>:135'
            if (!MX_Gtwy_Control_B.RateTransition12_piek) {
              // Transition: '<S664>:134'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF =
                MX_Gtwy_Control_IN_ON_lgyfn;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:50'
              disp_LeftControl = MODE_LEFT_AUX4;
            }
            break;

           case MX_Gtwy_Control_IN_ON_lgyfn:
            // During 'ON': '<S664>:50'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:48'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF =
                MX_Gtwy_Control_IN_ON1;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON1': '<S664>:51'
              disp_LeftControl = MODE_LEFT_NONE;
            }
            break;

           default:
            // During 'ON1': '<S664>:51'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:49'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF =
                MX_Gtwy_Control_IN_ON_lgyfn;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:50'
              disp_LeftControl = MODE_LEFT_AUX4;
            }
            break;
          }
          break;

         case MX_Gtwy_Control_IN_Default:
          // During 'Default': '<S664>:73'
          disp_LeftControl = mode_LeftControl;
          disp_RightControl = mode_RightControl;
          break;

         case MX_Gtwy_Control_IN_OF_A1FLASH:
          // During 'OF_A1FLASH': '<S664>:19'
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH) {
           case MX_Gtwy_Control_IN_GLOW_OFF:
            // During 'GLOW_OFF': '<S664>:122'
            if (!MX_Gtwy_Control_B.RateTransition12_piek) {
              // Transition: '<S664>:24'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:23'
              disp_RightControl = MODE_RIGHT_AUX1;
            }
            break;

           case MX_Gtwy_Control_IN_OFF_a3vv:
            // During 'OFF': '<S664>:25'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:27'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:23'
              disp_RightControl = MODE_RIGHT_AUX1;
            }
            break;

           default:
            // During 'ON': '<S664>:23'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:26'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH =
                MX_Gtwy_Control_IN_OFF_a3vv;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'OFF': '<S664>:25'
              disp_RightControl = MODE_RIGHT_NONE;
            }
            break;
          }
          break;

         default:
          // During 'OF_A4FLASH': '<S664>:28'
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH) {
           case MX_Gtwy_Control_IN_GLOW_OFF:
            // During 'GLOW_OFF': '<S664>:127'
            if (!MX_Gtwy_Control_B.RateTransition12_piek) {
              // Transition: '<S664>:126'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:32'
              disp_RightControl = MODE_RIGHT_AUX4;
            }
            break;

           case MX_Gtwy_Control_IN_OFF_a3vv:
            // During 'OFF': '<S664>:33'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:31'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH =
                MX_Gtwy_Control_IN_ON_lgyf;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'ON': '<S664>:32'
              disp_RightControl = MODE_RIGHT_AUX4;
            }
            break;

           default:
            // During 'ON': '<S664>:32'
            if (MX_Gtwy_Control_DWork.temporalCounter_i1_dcja >=
                CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
              // Transition: '<S664>:30'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH =
                MX_Gtwy_Control_IN_OFF_a3vv;
              MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;

              // Entry 'OFF': '<S664>:33'
              disp_RightControl = MODE_RIGHT_NONE;
            }
            break;
          }
          break;
        }

        // During 'FlashTimer': '<S664>:142'
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer) {
         case MX_Gtwy_Control_IN_Expired:
          // During 'Expired': '<S664>:161'
          break;

         case MX_Gtwy_Control_IN_GlowCycle1:
          // During 'GlowCycle1': '<S664>:152'
          if (!MX_Gtwy_Control_B.RateTransition12_piek) {
            // Transition: '<S664>:155'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
              MX_Gtwy_Control_IN_GlowOff;
          }
          break;

         case MX_Gtwy_Control_IN_GlowCycle2:
          // During 'GlowCycle2': '<S664>:159'
          if (!MX_Gtwy_Control_B.RateTransition12_piek) {
            // Transition: '<S664>:156'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
              MX_Gtwy_Control_IN_GlowOff1;
          }
          break;

         case MX_Gtwy_Control_IN_GlowOff:
          // During 'GlowOff': '<S664>:154'
          if (MX_Gtwy_Control_B.RateTransition12_piek) {
            // Transition: '<S664>:158'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
              MX_Gtwy_Control_IN_GlowCycle2;
          }
          break;

         case MX_Gtwy_Control_IN_GlowOff1:
          // During 'GlowOff1': '<S664>:157'
          if (MX_Gtwy_Control_DWork.flash_timer >
              CONSTANT_DATA->EMEA_CONTROLS_REMINDER_TIME) {
            // Transition: '<S664>:162'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
              MX_Gtwy_Control_IN_Expired;
          } else {
            tmp = (int32_T)((int32_T)MX_Gtwy_Control_DWork.flash_timer + 1);
            if (tmp > 65535) {
              tmp = 65535;
            }

            MX_Gtwy_Control_DWork.flash_timer = (uint16_T)tmp;
          }
          break;

         default:
          // During 'No_Glow': '<S664>:150'
          if (MX_Gtwy_Control_B.RateTransition12_piek) {
            // Transition: '<S664>:153'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
              MX_Gtwy_Control_IN_GlowCycle1;

            // Entry 'GlowCycle1': '<S664>:152'
            MX_Gtwy_Control_DWork.flash_timer = 0U;
          } else {
            tmp = (int32_T)((int32_T)MX_Gtwy_Control_DWork.flash_timer + 1);
            if (tmp > 65535) {
              tmp = 65535;
            }

            MX_Gtwy_Control_DWork.flash_timer = (uint16_T)tmp;
          }
          break;
        }
      }

      // End of Inport: '<Root>/state_System'
    }
  }

  if (guard1) {
    // Exit Internal 'ReminderOfLastState': '<S664>:3'
    // Exit Internal 'FlashTimer': '<S664>:142'
    MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'Flasher': '<S664>:141'
    // Exit Internal 'A2FLASH_A1FLASH': '<S664>:34'
    MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
    MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'A2FLASH_A4FLASH': '<S664>:75'
    MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'A4FLASH_A1FLASH': '<S664>:81'
    MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'A4FLASH_OF': '<S664>:46'
    MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'OF_A1FLASH': '<S664>:19'
    MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'OF_A4FLASH': '<S664>:28'
    MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
    MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
      MX_Gtwy_Control_IN_Normal_jlzq;

    // Entry 'Normal': '<S664>:4'
    disp_LeftControl = mode_LeftControl;
    disp_RightControl = mode_RightControl;
    flag_AuxModeReminder = false;
  }
}

// System initialize for atomic system: '<S6>/EMEA Control Mode'
void MX_Gtwy_Co_EMEAControlMode_Init(void)
{
  // SystemInitialize for Chart: '<S626>/Right Handle Switch'
  MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.temporalCounter_i1_kvdn = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c99_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c99_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_B.request = false;

  // SystemInitialize for Chart: '<S626>/Left Handle Switch'
  MX_Gtwy_Control_DWork.temporalCounter_i1_o4hv = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c77_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_B.request_itgm = false;

  // SystemInitialize for Chart: '<S626>/Control Modes'
  MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA = MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled = MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_o1tb =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Left_Control_or_Diverter_Fau =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB = MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_nmji =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_go3a =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_n4x0 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC = MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Enabled_b3gu =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Left_jqr2 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Offset_Right_bu5r =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Aux_Enabled_b3lp =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c105_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c105_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.stored_ControlMode = 0U;
  MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
  mode_LeftControl = 0U;
  mode_RightControl = 0U;
  check_LeftNeutral = false;
  check_RightNeutral = false;
  aux_Inhibit = false;
  MX_Gtwy_Control_B.display_request = false;

  // SystemInitialize for Chart: '<S660>/DisplayAuxMode'
  MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher = MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c100_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gtwy_Control_DWork.flash_timer = 0U;
  disp_LeftControl = 0U;
  disp_RightControl = 0U;
  flag_AuxModeReminder = false;
}

// Output and update for atomic system: '<S6>/EMEA Control Mode'
void MX_Gtwy_Control_EMEAControlMode(void)
{
  boolean_T LogicalOperator2;
  boolean_T LogicalOperator2_ee3n;
  boolean_T FixPtRelationalOperator_l3ss;

  // Chart: '<S626>/Right Handle Switch' incorporates:
  //   Inport: '<Root>/can_RightHandleSelectSw'

  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch
  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_kvdn < 65535U) {
    MX_Gtwy_Control_DWork.temporalCounter_i1_kvdn = (uint16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i1_kvdn + 1);
  }

  // During: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c99_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c99_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch 
    // Transition: '<S661>:78'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c99_MX_Gtwy_Control =
      M_IN_Default_InactiveCheck_b5aa;

    // Entry 'Default_InactiveCheck': '<S661>:88'
    MX_Gtwy_Control_B.request = false;
  } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_c99_MX_Gtwy_Control ==
             M_IN_Default_InactiveCheck_b5aa) {
    // During 'Default_InactiveCheck': '<S661>:88'
    if ((can_RightHandleSelectSw == (int32_T)INACTIVE) && (state_CommSecondary ==
         NORMAL)) {
      // Transition: '<S661>:89'
      MX_Gtwy_Control_DWork.bitsForTID0.is_c99_MX_Gtwy_Control =
        MX_Gtwy_Control_IN_Normal_jlzq;

      // Entry Internal 'Normal': '<S661>:107'
      // Transition: '<S661>:111'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv =
        MX_Gtwy_Contro_IN_Inactive_jlip;

      // Entry 'Inactive': '<S661>:77'
      MX_Gtwy_Control_B.request = false;
    }
  } else {
    // During 'Normal': '<S661>:107'
    if (state_CommSecondary != NORMAL) {
      // Transition: '<S661>:108'
      // Exit Internal 'Normal': '<S661>:107'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gtwy_Control_DWork.bitsForTID0.is_c99_MX_Gtwy_Control =
        M_IN_Default_InactiveCheck_b5aa;

      // Entry 'Default_InactiveCheck': '<S661>:88'
      MX_Gtwy_Control_B.request = false;
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv) {
       case MX_Gtwy_Control_IN_Active_cxwq:
        // During 'Active': '<S661>:80'
        if (can_RightHandleSelectSw == (int32_T)INACTIVE) {
          // Transition: '<S661>:86'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv =
            MX_Gtwy_Contro_IN_Inactive_jlip;

          // Entry 'Inactive': '<S661>:77'
          MX_Gtwy_Control_B.request = false;
        } else {
          MX_Gtwy_Control_B.request = false;
        }
        break;

       case MX_Gtwy__IN_DebounceActive_lwuo:
        // During 'DebounceActive': '<S661>:79'
        if (MX_Gtwy_Control_DWork.temporalCounter_i1_kvdn >=
            CONSTANT_DATA->EMEA_CONTROLS_HOLD_TIME) {
          // Transition: '<S661>:83'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv =
            MX_Gtwy_Control_IN_Active_cxwq;

          // Entry 'Active': '<S661>:80'
          MX_Gtwy_Control_B.request = true;
        } else {
          if (can_RightHandleSelectSw == (int32_T)INACTIVE) {
            // Transition: '<S661>:82'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv =
              MX_Gtwy_Contro_IN_Inactive_jlip;

            // Entry 'Inactive': '<S661>:77'
            MX_Gtwy_Control_B.request = false;
          }
        }
        break;

       default:
        // During 'Inactive': '<S661>:77'
        if (can_RightHandleSelectSw == (int32_T)ACTIVE) {
          // Transition: '<S661>:81'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Normal_hqrv =
            MX_Gtwy__IN_DebounceActive_lwuo;
          MX_Gtwy_Control_DWork.temporalCounter_i1_kvdn = 0U;
        }
        break;
      }
    }
  }

  // End of Chart: '<S626>/Right Handle Switch'

  // Chart: '<S626>/Left Handle Switch' incorporates:
  //   Inport: '<Root>/din_LeftHandleSelectSw'

  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch
  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_o4hv < 65535U) {
    MX_Gtwy_Control_DWork.temporalCounter_i1_o4hv = (uint16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i1_o4hv + 1);
  }

  // During: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c77_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c77_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch 
    // Transition: '<S659>:78'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control =
      MX_Gtw_IN_Default_InactiveCheck;

    // Entry 'Default_InactiveCheck': '<S659>:88'
    MX_Gtwy_Control_B.request_itgm = false;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control) {
     case MX_Gtwy_Control_IN_Active_cxwq:
      // During 'Active': '<S659>:80'
      if (din_LeftHandleSelectSw == (int32_T)INACTIVE) {
        // Transition: '<S659>:86'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control =
          MX_Gtwy_Contro_IN_Inactive_aft1;

        // Entry 'Inactive': '<S659>:77'
        MX_Gtwy_Control_B.request_itgm = false;
      } else {
        MX_Gtwy_Control_B.request_itgm = false;
      }
      break;

     case MX_Gtwy__IN_DebounceActive_lwuo:
      // During 'DebounceActive': '<S659>:79'
      if (MX_Gtwy_Control_DWork.temporalCounter_i1_o4hv >=
          CONSTANT_DATA->EMEA_CONTROLS_HOLD_TIME) {
        // Transition: '<S659>:83'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_Active_cxwq;

        // Entry 'Active': '<S659>:80'
        MX_Gtwy_Control_B.request_itgm = true;
      } else {
        if (din_LeftHandleSelectSw == (int32_T)INACTIVE) {
          // Transition: '<S659>:82'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control =
            MX_Gtwy_Contro_IN_Inactive_aft1;

          // Entry 'Inactive': '<S659>:77'
          MX_Gtwy_Control_B.request_itgm = false;
        }
      }
      break;

     case MX_Gtw_IN_Default_InactiveCheck:
      // During 'Default_InactiveCheck': '<S659>:88'
      if (din_LeftHandleSelectSw == (int32_T)INACTIVE) {
        // Transition: '<S659>:89'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control =
          MX_Gtwy_Contro_IN_Inactive_aft1;

        // Entry 'Inactive': '<S659>:77'
        MX_Gtwy_Control_B.request_itgm = false;
      }
      break;

     default:
      // During 'Inactive': '<S659>:77'
      if (din_LeftHandleSelectSw == (int32_T)ACTIVE) {
        // Transition: '<S659>:81'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c77_MX_Gtwy_Control =
          MX_Gtwy__IN_DebounceActive_lwuo;
        MX_Gtwy_Control_DWork.temporalCounter_i1_o4hv = 0U;
      }
      break;
    }
  }

  // End of Chart: '<S626>/Left Handle Switch'

  // Logic: '<S662>/Logical Operator2' incorporates:
  //   Constant: '<S665>/Constant'
  //   Constant: '<S666>/Constant'
  //   Constant: '<S667>/Constant'
  //   Constant: '<S668>/Constant'
  //   RelationalOperator: '<S665>/Compare'
  //   RelationalOperator: '<S666>/Compare'
  //   RelationalOperator: '<S667>/Compare'
  //   RelationalOperator: '<S668>/Compare'

  LogicalOperator2 = ((rm_LeftPot >= CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_LOW) &&
                      (rm_LeftPot <= CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_HIGH) &&
                      (state_LeftPot != OORH) && (state_LeftPot != OORL));

  // Logic: '<S663>/Logical Operator2' incorporates:
  //   Constant: '<S669>/Constant'
  //   Constant: '<S670>/Constant'
  //   Constant: '<S671>/Constant'
  //   Constant: '<S672>/Constant'
  //   RelationalOperator: '<S669>/Compare'
  //   RelationalOperator: '<S670>/Compare'
  //   RelationalOperator: '<S671>/Compare'
  //   RelationalOperator: '<S672>/Compare'

  LogicalOperator2_ee3n = ((rm_RightPot >=
    CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_LOW) && (rm_RightPot <=
    CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_HIGH) && (state_RightPot != OORH) &&
    (state_RightPot != OORL));

  // Logic: '<S626>/Logical Operator' incorporates:
  //   Constant: '<S653>/Constant'
  //   Constant: '<S654>/Constant'
  //   Constant: '<S655>/Constant'
  //   RelationalOperator: '<S653>/Compare'
  //   RelationalOperator: '<S654>/Compare'
  //   RelationalOperator: '<S655>/Compare'

  MX_Gtwy_Control_B.LogicalOperator_ns15 = ((MX_Gtwy_Control_B.UnitDelay9_hk24 ==
    SHORT_TO_BATTERY) || (MX_Gtwy_Control_B.UnitDelay9_hk24 == SHORT_TO_GROUND) ||
    (MX_Gtwy_Control_B.UnitDelay9_hk24 == OPEN_CIRCUIT));

  // RelationalOperator: '<S658>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S658>/Delay Input1'

  FixPtRelationalOperator_l3ss = (MX_Gtwy_Control_B.UnitDelay8 !=
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_lrbn);

  // RelationalOperator: '<S657>/FixPt Relational Operator' incorporates:
  //   Inport: '<Root>/can_OffsetSelectSw'
  //   UnitDelay: '<S657>/Delay Input1'

  MX_Gtwy_Control_B.FixPtRelationalOperator_hhgb = (can_OffsetSelectSw !=
    MX_Gtwy_Control_DWork.DelayInput1_DSTATE_pfvq);

  // Chart: '<S626>/Control Modes'
  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq < 255U) {
    MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq = (uint8_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i1_gfbq + 1);
  }

  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
  // During: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c105_MX_Gtwy_Control
      == 0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c105_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
    // Transition: '<S656>:164'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c105_MX_Gtwy_Control =
      MX_Gtwy__IN_Non_Functional_nbss;

    // Entry 'Non_Functional': '<S656>:163'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX1;
    check_LeftNeutral = false;
    check_RightNeutral = false;
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
    aux_Inhibit = false;
    MX_Gtwy_Control_B.display_request = false;
    MX_Gtwy_Control_DWork.stored_ControlMode = EE_NA_NA;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_c105_MX_Gtwy_Control) {
     case MX_Gtwy__IN_Non_Functional_nbss:
      // During 'Non_Functional': '<S656>:163'
      if (CONSTANT_DATA->EMEA_CONTROLS_OPTION_A != NON_FUNCTIONAL) {
        // Transition: '<S656>:165'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c105_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_OptionA;

        // Entry Internal 'OptionA': '<S656>:162'
        // Transition: '<S656>:78'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OptionA =
          MX_Gtwy_Con_IN_INIT_SystemCheck;

        // Entry 'INIT_SystemCheck': '<S656>:88'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gtwy_Control_B.display_request = false;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        check_LeftNeutral = false;
      } else if (CONSTANT_DATA->EMEA_CONTROLS_OPTION_B != NON_FUNCTIONAL) {
        // Transition: '<S656>:182'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c105_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_OptionB;

        // Entry Internal 'OptionB': '<S656>:1262'
        // Transition: '<S656>:1274'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OptionB =
          MX_Gtwy_Con_IN_INIT_SystemCheck;

        // Entry 'INIT_SystemCheck': '<S656>:1294'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
        aux_Inhibit = false;
        MX_Gtwy_Control_B.display_request = false;
        check_LeftNeutral = false;
        check_RightNeutral = false;
      } else {
        if (CONSTANT_DATA->EMEA_CONTROLS_OPTION_C != NON_FUNCTIONAL) {
          // Transition: '<S656>:183'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c105_MX_Gtwy_Control =
            MX_Gtwy_Control_IN_OptionC;

          // Entry Internal 'OptionC': '<S656>:247'
          // Transition: '<S656>:411'
          MX_Gtwy_Control_DWork.bitsForTID0.is_OptionC =
            MX_Gtwy_Con_IN_INIT_SystemCheck;

          // Entry 'INIT_SystemCheck': '<S656>:406'
          mode_LeftControl = MODE_LEFT_NONE;
          mode_RightControl = MODE_RIGHT_NONE;
          MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk = false;
          aux_Inhibit = false;
          MX_Gtwy_Control_B.display_request = false;
          check_LeftNeutral = false;
          check_RightNeutral = false;
        }
      }
      break;

     case MX_Gtwy_Control_IN_OptionA:
      MX_Gtwy_Control_OptionA(&LogicalOperator2);
      break;

     case MX_Gtwy_Control_IN_OptionB:
      MX_Gtwy_Control_OptionB(&LogicalOperator2, &LogicalOperator2_ee3n,
        &FixPtRelationalOperator_l3ss);
      break;

     default:
      MX_Gtwy_Control_OptionC(&LogicalOperator2, &LogicalOperator2_ee3n,
        &FixPtRelationalOperator_l3ss);
      break;
    }
  }

  // End of Chart: '<S626>/Control Modes'

  // Chart: '<S660>/DisplayAuxMode' incorporates:
  //   Inport: '<Root>/flag_InitEERead'
  //   Inport: '<Root>/state_System'

  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_dcja < 65535U) {
    MX_Gtwy_Control_DWork.temporalCounter_i1_dcja = (uint16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i1_dcja + 1);
  }

  // During: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c100_MX_Gtwy_Control
      == 0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c100_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
    // Transition: '<S664>:2'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
      MX_Gtwy_Control_IN_Init_lslf;

    // Entry 'Init': '<S664>:118'
    disp_LeftControl = mode_LeftControl;
    disp_RightControl = mode_RightControl;
    flag_AuxModeReminder = false;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control) {
     case MX_Gtwy_Control_IN_Init_lslf:
      // During 'Init': '<S664>:118'
      // If previous mode did not have aux set just go to normal
      if ((((eeMirror.ee_ControlMode == EE_NA_NA) || (eeMirror.ee_ControlMode ==
             EE_LT_OF_NA) || (eeMirror.ee_ControlMode == EE_RT_NA_OF)) &&
           flag_InitEERead) || (CONSTANT_DATA->EMEA_CONTROLS_OPTION_A !=
           NON_FUNCTIONAL)) {
        // Transition: '<S664>:17'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_Normal_jlzq;

        // Entry 'Normal': '<S664>:4'
        disp_LeftControl = mode_LeftControl;
        disp_RightControl = mode_RightControl;
        flag_AuxModeReminder = false;
      } else {
        // A control mode has been enabled
        if (flag_InitEERead && ((mode_LeftControl != MODE_LEFT_NONE) ||
                                (mode_RightControl != MODE_RIGHT_NONE)) &&
            (state_Console == ACTIVE) && (state_System == SYS_NORMAL) &&
            (state_Engine != ENGINE_CRANKING)) {
          // Transition: '<S664>:18'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
            MX_Gtwy_Control_IN_OffsetCheck;
        }
      }
      break;

     case MX_Gtwy_Control_IN_Normal_jlzq:
      // During 'Normal': '<S664>:4'
      disp_LeftControl = mode_LeftControl;
      disp_RightControl = mode_RightControl;
      break;

     case MX_Gtwy_Control_IN_OffsetCheck:
      // During 'OffsetCheck': '<S664>:119'
      // offset select switch was changed
      if (((eeMirror.ee_ControlMode < EE_RT_NA_OF) && (mode_RightControl ==
            MODE_RIGHT_OFFSET)) || ((eeMirror.ee_ControlMode > EE_RT_NA_OF) &&
           (mode_LeftControl == MODE_LEFT_OFFSET))) {
        // Transition: '<S664>:121'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_Normal_jlzq;

        // Entry 'Normal': '<S664>:4'
        disp_LeftControl = mode_LeftControl;
        disp_RightControl = mode_RightControl;
        flag_AuxModeReminder = false;
      } else {
        // Transition: '<S664>:120'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c100_MX_Gtwy_Control =
          MX_Gtwy__IN_ReminderOfLastState;

        // Entry 'ReminderOfLastState': '<S664>:3'
        flag_AuxModeReminder = true;

        // Entry Internal 'ReminderOfLastState': '<S664>:3'
        // Entry Internal 'Flasher': '<S664>:141'
        // Transition: '<S664>:14'
        if (eeMirror.ee_ControlMode == EE_LT_OF_A1) {
          // Transition: '<S664>:20'
          MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
            MX_Gtwy_Control_IN_OF_A1FLASH;

          // Entry 'OF_A1FLASH': '<S664>:19'
          disp_LeftControl = MODE_LEFT_OFFSET;

          // Entry Internal 'OF_A1FLASH': '<S664>:19'
          // Transition: '<S664>:124'
          MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A1FLASH =
            MX_Gtwy_Control_IN_GLOW_OFF;

          // Entry 'GLOW_OFF': '<S664>:122'
          disp_RightControl = MODE_RIGHT_NONE;
        } else {
          // Transition: '<S664>:59'
          if (eeMirror.ee_ControlMode == EE_LT_OF_A4) {
            // Transition: '<S664>:60'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
              MX_Gtwy_Control_IN_OF_A4FLASH;

            // Entry 'OF_A4FLASH': '<S664>:28'
            disp_LeftControl = MODE_LEFT_OFFSET;

            // Entry Internal 'OF_A4FLASH': '<S664>:28'
            // Transition: '<S664>:125'
            MX_Gtwy_Control_DWork.bitsForTID0.is_OF_A4FLASH =
              MX_Gtwy_Control_IN_GLOW_OFF;

            // Entry 'GLOW_OFF': '<S664>:127'
            disp_RightControl = MODE_RIGHT_NONE;
          } else {
            // Transition: '<S664>:62'
            if ((eeMirror.ee_ControlMode == EE_LT_A2_A1) ||
                (eeMirror.ee_ControlMode == EE_RT_A2_A1)) {
              // Transition: '<S664>:63'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
                MX_Gtwy_Cont_IN_A2FLASH_A1FLASH;

              // Entry Internal 'A2FLASH_A1FLASH': '<S664>:34'
              // Transition: '<S664>:130'
              MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A1FLASH =
                MX_Gtwy_Control_IN_GLOW_OFF;

              // Entry 'GLOW_OFF': '<S664>:129'
              disp_RightControl = MODE_RIGHT_NONE;
              disp_LeftControl = MODE_LEFT_NONE;
            } else {
              // Transition: '<S664>:65'
              if (eeMirror.ee_ControlMode == EE_LT_A2_A4) {
                // Transition: '<S664>:66'
                MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
                  MX_Gtwy_Cont_IN_A2FLASH_A4FLASH;

                // Entry Internal 'A2FLASH_A4FLASH': '<S664>:75'
                // Transition: '<S664>:133'
                MX_Gtwy_Control_DWork.bitsForTID0.is_A2FLASH_A4FLASH =
                  MX_Gtwy_Control_IN_GLOW_OFF;

                // Entry 'GLOW_OFF': '<S664>:132'
                disp_RightControl = MODE_RIGHT_NONE;
                disp_LeftControl = MODE_LEFT_NONE;
              } else {
                // Transition: '<S664>:68'
                if (eeMirror.ee_ControlMode == EE_RT_A4_OF) {
                  // Transition: '<S664>:69'
                  MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
                    MX_Gtwy_Control_IN_A4FLASH_OF;

                  // Entry 'A4FLASH_OF': '<S664>:46'
                  disp_RightControl = MODE_RIGHT_OFFSET;

                  // Entry Internal 'A4FLASH_OF': '<S664>:46'
                  // Transition: '<S664>:136'
                  MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_OF =
                    MX_Gtwy_Control_IN_GLOW_OFF;

                  // Entry 'GLOW_OFF': '<S664>:135'
                  disp_LeftControl = MODE_LEFT_NONE;
                } else {
                  // Transition: '<S664>:71'
                  if (eeMirror.ee_ControlMode == EE_RT_A4_A1) {
                    // Transition: '<S664>:72'
                    MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
                      MX_Gtwy_Cont_IN_A4FLASH_A1FLASH;

                    // Entry Internal 'A4FLASH_A1FLASH': '<S664>:81'
                    // Transition: '<S664>:139'
                    MX_Gtwy_Control_DWork.bitsForTID0.is_A4FLASH_A1FLASH =
                      MX_Gtwy_Control_IN_GLOW_OFF;

                    // Entry 'GLOW_OFF': '<S664>:138'
                    disp_RightControl = MODE_RIGHT_NONE;
                    disp_LeftControl = MODE_LEFT_NONE;
                  } else {
                    // Transition: '<S664>:74'
                    MX_Gtwy_Control_DWork.bitsForTID0.is_Flasher =
                      MX_Gtwy_Control_IN_Default;

                    // Entry 'Default': '<S664>:73'
                    disp_LeftControl = mode_LeftControl;
                    disp_RightControl = mode_RightControl;
                    flag_AuxModeReminder = false;
                  }
                }
              }
            }
          }
        }

        // Entry 'FlashTimer': '<S664>:142'
        MX_Gtwy_Control_DWork.flash_timer = 0U;

        // Entry Internal 'FlashTimer': '<S664>:142'
        // Transition: '<S664>:151'
        MX_Gtwy_Control_DWork.bitsForTID0.is_FlashTimer =
          MX_Gtwy_Control_IN_No_Glow;
      }
      break;

     default:
      MX_Gtwy_Con_ReminderOfLastState();
      break;
    }
  }

  // End of Chart: '<S660>/DisplayAuxMode'

  // Logic: '<S626>/Logical Operator1'
  flag_AuxEnableFlash = (flag_AuxModeReminder ||
    MX_Gtwy_Control_B.flag_AuxEnableFlash_d0lk);

  // Update for UnitDelay: '<S658>/Delay Input1'
  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_lrbn = MX_Gtwy_Control_B.UnitDelay8;

  // Update for UnitDelay: '<S657>/Delay Input1' incorporates:
  //   Inport: '<Root>/can_OffsetSelectSw'

  MX_Gtwy_Control_DWork.DelayInput1_DSTATE_pfvq = can_OffsetSelectSw;
}

// System initialize for atomic system: '<S6>/ElectricAutomation'
void MX_Gtwy_ElectricAutomation_Init(void)
{
  // SystemInitialize for Chart: '<S627>/Chart1'
  MX_Gtwy_Control_DWork.bitsForTID1.is_active_c5_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_oq0v;

  // SystemInitialize for Chart: '<S627>/Chart2'
  MX_Gtwy_Control_DWork.bitsForTID1.is_active_c51_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_oq0v;
  testOut = 0.0;
}

// Output and update for atomic system: '<S6>/ElectricAutomation'
void MX_Gtwy_Cont_ElectricAutomation(void)
{
  uint32_T tmp;

  // Chart: '<S627>/Chart1' incorporates:
  //   Inport: '<Root>/ain_ThrottlePrimary'
  //   Inport: '<Root>/din_RunEnter'
  //   Inport: '<Root>/state_Inverter'

  // Gateway: MX_Gtwy_Control/System/ElectricAutomation/Chart1
  // During: MX_Gtwy_Control/System/ElectricAutomation/Chart1
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID1.is_active_c5_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/ElectricAutomation/Chart1
    MX_Gtwy_Control_DWork.bitsForTID1.is_active_c5_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/ElectricAutomation/Chart1
    // Transition: '<S673>:193'
    MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
      MX_Gtwy_Control_IN_STOP;

    // Entry 'STOP': '<S673>:163'
    cmdInverter = CMD_INVERTER_GOTO_STOP;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control) {
     case MX_Gtwy_Control_IN_CONNECTED:
      // During 'CONNECTED': '<S673>:164'
      if ((state_Inverter >= INVERTER_OPERATIONAL) && ((int32_T)din_RunEnter !=
           0)) {
        // Transition: '<S673>:179'
        // Exit 'CONNECTED': '<S673>:164'
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_OPERATIONAL;

        // Entry 'OPERATIONAL': '<S673>:165'
        cmdInverter = CMD_INVERTER_GOTO_READY;
      } else if ((state_Inverter <= INVERTER_OPERATIONAL) || (!((int32_T)
                   din_RunEnter != 0))) {
        // Transition: '<S673>:201'
        // Exit 'CONNECTED': '<S673>:164'
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_STOP;

        // Entry 'STOP': '<S673>:163'
        cmdInverter = CMD_INVERTER_GOTO_STOP;
      } else {
        cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      }
      break;

     case MX_Gtwy_Control_IN_OPERATIONAL:
      // During 'OPERATIONAL': '<S673>:165'
      if ((state_Inverter >= INVERTER_READY) && ((int32_T)din_RunEnter != 0)) {
        // Transition: '<S673>:180'
        // Exit 'OPERATIONAL': '<S673>:165'
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_READY;

        // Entry 'READY': '<S673>:168'
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      } else if ((state_Inverter < INVERTER_OPERATIONAL) || (!((int32_T)
                   din_RunEnter != 0))) {
        // Transition: '<S673>:200'
        // Exit 'OPERATIONAL': '<S673>:165'
        targetSpeed = 0U;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_CONNECTED;

        // Entry 'CONNECTED': '<S673>:164'
        cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      } else {
        cmdInverter = CMD_INVERTER_GOTO_READY;
      }
      break;

     case MX_Gtwy_Control_IN_READY:
      // During 'READY': '<S673>:168'
      if ((state_Inverter >= INVERTER_RUN_FWD) && ((int32_T)din_RunEnter != 0))
      {
        // Transition: '<S673>:181'
        // Exit 'READY': '<S673>:168'
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_RUN_FWD;

        // Entry 'RUN_FWD': '<S673>:188'
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      } else if ((state_Inverter < INVERTER_READY) || (!((int32_T)din_RunEnter
                   != 0))) {
        // Transition: '<S673>:199'
        // Exit 'READY': '<S673>:168'
        targetSpeed = 0U;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_OPERATIONAL;

        // Entry 'OPERATIONAL': '<S673>:165'
        cmdInverter = CMD_INVERTER_GOTO_READY;
      } else {
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      }
      break;

     case MX_Gtwy_Control_IN_RUN_FWD:
      // During 'RUN_FWD': '<S673>:188'
      if ((state_Inverter < INVERTER_RUN_FWD) || (!((int32_T)din_RunEnter != 0)))
      {
        // Transition: '<S673>:198'
        // Exit 'RUN_FWD': '<S673>:188'
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_READY;

        // Entry 'READY': '<S673>:168'
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      } else {
        cmdInverter = CMD_INVERTER_RUN_FWD;
        tmp = (uint32_T)(10U * (uint32_T)ain_ThrottlePrimary);
        if (tmp > 65535U) {
          tmp = 65535U;
        }

        targetSpeed = (uint16_T)tmp;
      }
      break;

     default:
      // During 'STOP': '<S673>:163'
      if (state_Inverter >= INVERTER_CONNECTED) {
        // Transition: '<S673>:173'
        // Exit 'STOP': '<S673>:163'
        MX_Gtwy_Control_DWork.bitsForTID1.is_c5_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_CONNECTED;

        // Entry 'CONNECTED': '<S673>:164'
        cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      } else {
        cmdInverter = CMD_INVERTER_GOTO_STOP;
      }
      break;
    }
  }

  // End of Chart: '<S627>/Chart1'

  // Chart: '<S627>/Chart2' incorporates:
  //   Inport: '<Root>/state_Inverter'

  // Gateway: MX_Gtwy_Control/System/ElectricAutomation/Chart2
  // During: MX_Gtwy_Control/System/ElectricAutomation/Chart2
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID1.is_active_c51_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/ElectricAutomation/Chart2
    MX_Gtwy_Control_DWork.bitsForTID1.is_active_c51_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/ElectricAutomation/Chart2
    // Transition: '<S674>:2'
    MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
      MX_Gtwy_Control_IN_prova;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control) {
     case MX_Gtwy_Control_IN_prova:
      // During 'prova': '<S674>:1'
      if ((int32_T)state_Inverter == 2) {
        // Transition: '<S674>:7'
        testOut = 8.0;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_prova2;
      } else if ((int32_T)state_Inverter == 1) {
        // Transition: '<S674>:4'
        testOut = 1.0;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_prova1;
      } else {
        testOut = 0.0;
      }
      break;

     case MX_Gtwy_Control_IN_prova1:
      // During 'prova1': '<S674>:3'
      if ((int32_T)state_Inverter == 4) {
        // Transition: '<S674>:10'
        testOut = 4.0;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_prova2;
      } else if ((int32_T)state_Inverter == 5) {
        // Transition: '<S674>:11'
        testOut = 3.0;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_prova;
      } else {
        testOut = 2.0;
      }
      break;

     default:
      // During 'prova2': '<S674>:6'
      if ((int32_T)state_Inverter == 3) {
        // Transition: '<S674>:8'
        testOut = 5.0;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_prova1;
      } else if ((int32_T)state_Inverter == 6) {
        // Transition: '<S674>:12'
        testOut = 7.0;
        MX_Gtwy_Control_DWork.bitsForTID1.is_c51_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_prova;
      } else {
        testOut = 6.0;
      }
      break;
    }
  }

  // End of Chart: '<S627>/Chart2'
}

// System initialize for atomic system: '<S6>/Engine'
void MX_Gtwy_Control_Engine_Init(void)
{
  // SystemInitialize for Chart: '<S628>/Engine'
  MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c1_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c1_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gtwy_Control_DWork.debounceCount_n5vj = 0U;
  MX_Gtwy_Control_DWork.panelMissingDebounce = 0U;
  MX_Gtwy_Control_DWork.debouncePrimer = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.flag_PrimeComplete = false;
  state_Engine = 0U;
  state_TurboPrime = 0U;
}

// Output and update for atomic system: '<S6>/Engine'
void MX_Gtwy_Control_Engine(void)
{
  // Chart: '<S628>/Engine' incorporates:
  //   Inport: '<Root>/actualHourMeter'
  //   Inport: '<Root>/can_ACD_EStop'
  //   Inport: '<Root>/can_ST_EStop'
  //   Inport: '<Root>/din_RemoteKey'
  //   Inport: '<Root>/dv_TurboPrime'
  //   Inport: '<Root>/ecu_EngineStarterMode'
  //   Inport: '<Root>/state_DeluxeG5'
  //   Inport: '<Root>/state_KeylessPanel'
  //   Inport: '<Root>/state_System'

  // Gateway: MX_Gtwy_Control/System/Engine/Engine
  // During: MX_Gtwy_Control/System/Engine/Engine
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c1_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/Engine/Engine
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c1_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Engine/Engine
    // Transition: '<S675>:81'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c1_MX_Gtwy_Control =
      MX_Gtwy_Control_IN_NORMAL_om4i;

    // Entry 'NORMAL': '<S675>:80'
    MX_Gtwy_Control_DWork.panelMissingDebounce = 0U;
    MX_Gtwy_Control_DWork.bitsForTID0.flag_PrimeComplete = false;
    state_TurboPrime = NORMAL;

    // Entry Internal 'NORMAL': '<S675>:80'
    // Transition: '<S675>:13'
    MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
      MX_Gtwy_Control_IN_NOT_RUNNING;
    MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
      MX_Gtwy_Contro_IN_WAIT_TO_START;

    // Entry 'WAIT_TO_START': '<S675>:121'
    state_Engine = ENGINE_INITIALIZE;
    MX_Gtwy_Control_DWork.debounceCount_n5vj = 0U;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_c1_MX_Gtwy_Control) {
     case MX_Gtwy_Control_IN_NORMAL_om4i:
      // During 'NORMAL': '<S675>:80'
      if ((can_ST_EStop == ACTIVE) || (can_ACD_EStop == ACTIVE)) {
        // Transition: '<S675>:19'
        // Exit Internal 'NORMAL': '<S675>:80'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir ==
            MX_Gtwy_Contro_IN_CRANKING_in3g) {
          // Exit Internal 'CRANKING': '<S675>:198'
          // Exit Internal 'FACTORY_TURBO_PRIMER': '<S675>:200'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit 'CRANKING': '<S675>:198'
          state_TurboPrime = NORMAL;
          MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit Internal 'NOT_RUNNING': '<S675>:1'
          MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
        }

        MX_Gtwy_Control_DWork.bitsForTID0.is_c1_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_ST_SHUTDOWN;

        // Entry 'ST_SHUTDOWN': '<S675>:156'
        state_Engine = ENGINE_OFF;
        SendMsg_03_Now();
      } else if (state_Key == MULTIPLE) {
        // Transition: '<S675>:14'
        // Exit Internal 'NORMAL': '<S675>:80'
        if (MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir ==
            MX_Gtwy_Contro_IN_CRANKING_in3g) {
          // Exit Internal 'CRANKING': '<S675>:198'
          // Exit Internal 'FACTORY_TURBO_PRIMER': '<S675>:200'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit 'CRANKING': '<S675>:198'
          state_TurboPrime = NORMAL;
          MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
        } else {
          MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit Internal 'NOT_RUNNING': '<S675>:1'
          MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
        }

        MX_Gtwy_Control_DWork.bitsForTID0.is_c1_MX_Gtwy_Control =
          MX_Gtwy_Contro_IN_SHUTDOWN_k1ph;

        // Entry 'SHUTDOWN': '<S675>:4'
        state_Engine = SHUTDOWN;
        SendMsg_03_Now();
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir) {
         case MX_Gtwy_Contro_IN_CRANKING_in3g:
          // During 'CRANKING': '<S675>:198'
          if ((state_EngineStart != ACTIVE) || (state_Key != ACTIVE) ||
              (state_System != SYS_NORMAL) ||
              ((CONSTANT_DATA->EMEA_CONSOLE_CRANK_INHIBIT != NON_FUNCTIONAL) &&
               (state_Console != INACTIVE)) || (ecu_EngineStarterMode ==
               STARTER_INHIBITED)) {
            // Transition: '<S675>:12'
            // Exit Internal 'CRANKING': '<S675>:198'
            // Exit Internal 'FACTORY_TURBO_PRIMER': '<S675>:200'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;

            // Exit 'CRANKING': '<S675>:198'
            state_TurboPrime = NORMAL;
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
              MX_Gtwy_Control_IN_NOT_RUNNING;

            // Entry Internal 'NOT_RUNNING': '<S675>:1'
            // Transition: '<S675>:120'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
              MX_Gtwy_Con_IN_NOT_RUNNING_psez;

            // Entry 'NOT_RUNNING': '<S675>:119'
            state_Engine = ENGINE_NOT_RUNNING;
            SendMsg_03_Now();
          } else if (flt_EngineSpeed >= CONSTANT_DATA->ENGINE_SPEED_RUNNING) {
            // Transition: '<S675>:8'
            // Exit Internal 'CRANKING': '<S675>:198'
            // Exit Internal 'FACTORY_TURBO_PRIMER': '<S675>:200'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;

            // Exit 'CRANKING': '<S675>:198'
            state_TurboPrime = NORMAL;
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
              MX_Gtwy_Control_IN_RUNNING;

            // Entry 'RUNNING': '<S675>:135'
            state_Engine = ENGINE_RUNNING;
            SendMsg_03_Now();
          } else {
            // During 'FACTORY_TURBO_PRIMER': '<S675>:200'
            switch (MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER) {
             case MX_Gtwy_Con_IN_CHECK_HOUR_METER:
              // During 'CHECK_HOUR_METER': '<S675>:208'
              // Transition: '<S675>:204'
              if ((CONSTANT_DATA->FACTORY_TURBO_PRIME_FUNCTION != NON_FUNCTIONAL)
                  && ((actualHourMeter <=
                       CONSTANT_DATA->FACTORY_TURBO_PRIME_HOUR_ENABLE) ||
                      (dv_TurboPrime == TURBO_PRIME_ACTIVE)) &&
                  (!MX_Gtwy_Control_DWork.bitsForTID0.flag_PrimeComplete)) {
                // Transition: '<S675>:203'
                MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
                  MX_G_IN_PREVENT_FUEL_MSG_ACTIVE;

                // Entry 'PREVENT_FUEL_MSG_ACTIVE': '<S675>:209'
                state_Engine = ENGINE_CRANKING;
                SendMsg_03_Now();
                MX_Gtwy_Control_DWork.debouncePrimer = 0U;
              } else {
                // Transition: '<S675>:205'
                MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
                  MX_Gtwy__IN_HOUR_METER_EXCEEDED;

                // Entry 'HOUR_METER_EXCEEDED': '<S675>:210'
                state_Engine = ENGINE_CRANKING;
                SendMsg_03_Now();
              }
              break;

             case MX_Gtwy__IN_HOUR_METER_EXCEEDED:
              state_Engine = ENGINE_CRANKING;

              // During 'HOUR_METER_EXCEEDED': '<S675>:210'
              break;

             case MX_Gtwy_Control_IN_PAUSE:
              state_Engine = ENGINE_NOT_RUNNING;

              // During 'PAUSE': '<S675>:213'
              if (MX_Gtwy_Control_DWork.debouncePrimer >=
                  CONSTANT_DATA->FACTORY_TURBO_PRIME_DEBOUNCE_WAIT) {
                // Transition: '<S675>:207'
                MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
                  MX_IN_PREVENT_FUEL_MSG_INACTIVE;

                // Entry 'PREVENT_FUEL_MSG_INACTIVE': '<S675>:212'
                state_Engine = ENGINE_CRANKING;
                SendMsg_03_Now();
              } else {
                MX_Gtwy_Control_DWork.debouncePrimer = (uint16_T)(int32_T)
                  ((int32_T)MX_Gtwy_Control_DWork.debouncePrimer + 1);
                SendMsg_DPM2_Now();
              }
              break;

             case MX_G_IN_PREVENT_FUEL_MSG_ACTIVE:
              state_Engine = ENGINE_CRANKING;

              // During 'PREVENT_FUEL_MSG_ACTIVE': '<S675>:209'
              if (MX_Gtwy_Control_DWork.debouncePrimer >=
                  CONSTANT_DATA->FACTORY_TURBO_PRIME_DEBOUNCE_DISABLE_FUEL) {
                // Transition: '<S675>:206'
                MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
                  MX_Gtwy_Control_IN_PAUSE;

                // Entry 'PAUSE': '<S675>:213'
                state_Engine = ENGINE_NOT_RUNNING;
                SendMsg_03_Now();
                MX_Gtwy_Control_DWork.debouncePrimer = 0U;
                MX_Gtwy_Control_DWork.bitsForTID0.flag_PrimeComplete = true;
                state_TurboPrime = NORMAL;
              } else {
                SendMsg_DPM2_Now();
                MX_Gtwy_Control_DWork.debouncePrimer = (uint16_T)(int32_T)
                  ((int32_T)MX_Gtwy_Control_DWork.debouncePrimer + 1);
                state_TurboPrime = ACTIVE;
              }
              break;

             default:
              state_Engine = ENGINE_CRANKING;

              // During 'PREVENT_FUEL_MSG_INACTIVE': '<S675>:212'
              break;
            }
          }
          break;

         case MX_Gtwy_Control_IN_NOT_RUNNING:
          // During 'NOT_RUNNING': '<S675>:1'
          if ((flt_EngineSpeed >= CONSTANT_DATA->ENGINE_SPEED_RUNNING) &&
              (state_System == SYS_NORMAL)) {
            // Transition: '<S675>:10'
            // Exit Internal 'NOT_RUNNING': '<S675>:1'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
              MX_Gtwy_Control_IN_RUNNING;

            // Entry 'RUNNING': '<S675>:135'
            state_Engine = ENGINE_RUNNING;
            SendMsg_03_Now();
          } else if ((state_EngineStart == ACTIVE) && (state_Key == ACTIVE) &&
                     (state_System == SYS_NORMAL) &&
                     ((CONSTANT_DATA->EMEA_CONSOLE_CRANK_INHIBIT ==
                       NON_FUNCTIONAL) || (state_Console == INACTIVE)) &&
                     (((state_CommECU == NORMAL) && (ecu_EngineStarterMode !=
                        STARTER_INHIBITED) && (state_Engine ==
                        ENGINE_NOT_RUNNING)) || (CONSTANT_DATA->ECU_FUNCTION ==
                       NON_FUNCTIONAL))) {
            // Transition: '<S675>:7'
            // Exit Internal 'NOT_RUNNING': '<S675>:1'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
              MX_Gtwy_Contro_IN_CRANKING_in3g;

            // Entry Internal 'CRANKING': '<S675>:198'
            // Transition: '<S675>:199'
            // Entry Internal 'FACTORY_TURBO_PRIMER': '<S675>:200'
            // Transition: '<S675>:202'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FACTORY_TURBO_PRIMER =
              MX_Gtwy_Con_IN_CHECK_HOUR_METER;
          } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING ==
                     MX_Gtwy_Con_IN_NOT_RUNNING_psez) {
            state_Engine = ENGINE_NOT_RUNNING;

            // During 'NOT_RUNNING': '<S675>:119'
          } else {
            state_Engine = ENGINE_INITIALIZE;

            // During 'WAIT_TO_START': '<S675>:121'
            if (((MX_Gtwy_Control_DWork.debounceCount_n5vj >=
                  CONSTANT_DATA->ECU_DEBOUNCE_WAIT_TO_START) && (state_CommECU ==
                  NORMAL)) || (CONSTANT_DATA->ECU_FUNCTION == NON_FUNCTIONAL)) {
              // Transition: '<S675>:122'
              MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
                MX_Gtwy_Con_IN_NOT_RUNNING_psez;

              // Entry 'NOT_RUNNING': '<S675>:119'
              state_Engine = ENGINE_NOT_RUNNING;
              SendMsg_03_Now();
            } else {
              MX_Gtwy_Control_DWork.debounceCount_n5vj = (uint16_T)(int32_T)
                ((int32_T)MX_Gtwy_Control_DWork.debounceCount_n5vj + 1);
            }
          }
          break;

         default:
          state_Engine = ENGINE_RUNNING;

          // During 'RUNNING': '<S675>:135'
          if ((MX_Gtwy_Control_B.RateTransition13_gcbk == SHUTDOWN) ||
              (MX_Gtwy_Control_B.RateTransition57 == SHUTDOWN) ||
              (MX_Gtwy_Control_B.RateTransition19_fh5v == SHUTDOWN) ||
              (state_EngineSpeed == SHUTDOWN) ||
              (MX_Gtwy_Control_B.RateTransition2_c3je == SHUTDOWN) ||
              (state_KeylessPanel == NO_COMMUNICATION) || (((state_CommECU ==
                 NO_COMMUNICATION) || (MX_Gtwy_Control_B.UnitDelay10_kkg2 ==
                 SHUTDOWN)) && (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL)) ||
              (MX_Gtwy_Control_DWork.panelMissingDebounce >
               CONSTANT_DATA->PANEL_SHUTDOWN_DEBOUNCE)) {
            // Transition: '<S675>:9'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_fnqb;
            MX_Gtwy_Control_DWork.bitsForTID0.is_c1_MX_Gtwy_Control =
              MX_Gtwy_Contro_IN_SHUTDOWN_k1ph;

            // Entry 'SHUTDOWN': '<S675>:4'
            state_Engine = SHUTDOWN;
            SendMsg_03_Now();
          } else if ((flt_EngineSpeed <= CONSTANT_DATA->ENGINE_SPEED_NOT_RUNNING)
                     || (state_System != SYS_NORMAL)) {
            // Transition: '<S675>:11'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
              MX_Gtwy_Control_IN_NOT_RUNNING;

            // Entry Internal 'NOT_RUNNING': '<S675>:1'
            // Transition: '<S675>:120'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
              MX_Gtwy_Con_IN_NOT_RUNNING_psez;

            // Entry 'NOT_RUNNING': '<S675>:119'
            state_Engine = ENGINE_NOT_RUNNING;
            SendMsg_03_Now();
          } else {
            // Transition: '<S675>:175'
            if ((CONSTANT_DATA->PANEL_SHUTDOWN_FUNCTION != NON_FUNCTIONAL) &&
                (din_RemoteKey != ACTIVE) && ((MX_Gtwy_Control_B.UnitDelay2_nwqf
                  == NO_COMMUNICATION) || (state_DeluxeG5 == NO_COMMUNICATION) ||
                 (MX_Gtwy_Control_B.UnitDelay9_hk24 == NO_COMMUNICATION))) {
              // Transition: '<S675>:179'
              // Transition: '<S675>:181'
              MX_Gtwy_Control_DWork.panelMissingDebounce = (uint16_T)(int32_T)
                ((int32_T)MX_Gtwy_Control_DWork.panelMissingDebounce + 1);

              // Transition: '<S675>:182'
            } else {
              // Transition: '<S675>:177'
              MX_Gtwy_Control_DWork.panelMissingDebounce = 0U;
            }

            // Transition: '<S675>:184'
          }
          break;
        }
      }
      break;

     case MX_Gtwy_Contro_IN_SHUTDOWN_k1ph:
      state_Engine = SHUTDOWN;

      // During 'SHUTDOWN': '<S675>:4'
      break;

     default:
      state_Engine = ENGINE_OFF;

      // During 'ST_SHUTDOWN': '<S675>:156'
      if ((can_ST_EStop == INACTIVE) && (can_ACD_EStop == INACTIVE)) {
        // Transition: '<S675>:20'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c1_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_NORMAL_om4i;

        // Entry 'NORMAL': '<S675>:80'
        MX_Gtwy_Control_DWork.panelMissingDebounce = 0U;
        MX_Gtwy_Control_DWork.bitsForTID0.flag_PrimeComplete = false;
        state_TurboPrime = NORMAL;

        // Entry Internal 'NORMAL': '<S675>:80'
        // Transition: '<S675>:13'
        MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_m3ir =
          MX_Gtwy_Control_IN_NOT_RUNNING;
        MX_Gtwy_Control_DWork.bitsForTID0.is_NOT_RUNNING =
          MX_Gtwy_Contro_IN_WAIT_TO_START;

        // Entry 'WAIT_TO_START': '<S675>:121'
        state_Engine = ENGINE_INITIALIZE;
        MX_Gtwy_Control_DWork.debounceCount_n5vj = 0U;
      }
      break;
    }
  }

  // End of Chart: '<S628>/Engine'
}

// System initialize for enable system: '<S6>/Keyless_Entry'
void MX_Gtwy_Cont_Keyless_Entry_Init(void)
{
  // SystemInitialize for Chart: '<S629>/CabKeyDetection'
  MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.temporalCounter_i1_bmmc = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c101_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_B.cabKeyDetect_biu0 = false;

  // SystemInitialize for Chart: '<S629>/Indicators'
  MX_Gtwy_Control_DWork.bitsForTID0.is_FAIL = MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.temporalCounter_i1_nzvt = 0U;
  MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c71_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c71_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = false;
  MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = false;

  // SystemInitialize for Chart: '<S629>/Power_Hold'
  MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c70_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = 0U;
}

// System reset for enable system: '<S6>/Keyless_Entry'
void MX_Gtwy_Con_Keyless_Entry_Reset(void)
{
  // SystemReset for Chart: '<S629>/CabKeyDetection'
  MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.temporalCounter_i1_bmmc = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c101_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_B.cabKeyDetect_biu0 = false;

  // SystemReset for Chart: '<S629>/Indicators'
  MX_Gtwy_Control_DWork.bitsForTID0.is_FAIL = MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.temporalCounter_i1_nzvt = 0U;
  MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c71_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c71_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = false;
  MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = false;

  // SystemReset for Chart: '<S629>/Power_Hold'
  MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c70_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = 0U;
}

// Disable for enable system: '<S6>/Keyless_Entry'
void MX_Gtwy_C_Keyless_Entry_Disable(void)
{
  // Disable for Outport: '<S629>/ind_KeylessEntryLock'
  ind_KeylessEntryLock = false;

  // Disable for Outport: '<S629>/ind_KeylessEntryUnlock'
  ind_KeylessEntryUnlock = false;
  MX_Gtwy_Control_DWork.Keyless_Entry_MODE = false;
}

// Output and update for enable system: '<S6>/Keyless_Entry'
void MX_Gtwy_Control_Keyless_Entry(void)
{
  // Outputs for Enabled SubSystem: '<S6>/Keyless_Entry' incorporates:
  //   EnablePort: '<S629>/Enable'

  if (MX_Gtwy_Control_B.Compare) {
    if (!MX_Gtwy_Control_DWork.Keyless_Entry_MODE) {
      MX_Gtwy_Con_Keyless_Entry_Reset();
      MX_Gtwy_Control_DWork.Keyless_Entry_MODE = true;
    }

    // Chart: '<S629>/CabKeyDetection' incorporates:
    //   Inport: '<Root>/din_RunEnter'
    //   Inport: '<Root>/din_SwPowerRelay'

    // Gateway: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_bmmc < 7U) {
      MX_Gtwy_Control_DWork.temporalCounter_i1_bmmc = (uint8_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_bmmc + 1);
    }

    // During: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
    if ((uint32_T)
        MX_Gtwy_Control_DWork.bitsForTID0.is_active_c101_MX_Gtwy_Control == 0U)
    {
      // Entry: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
      MX_Gtwy_Control_DWork.bitsForTID0.is_active_c101_MX_Gtwy_Control = 1U;

      // Entry Internal: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
      // Transition: '<S676>:55'
      MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control =
        MX_Gtwy_C_IN_Engine_Not_Running;

      // Entry Internal 'Engine_Not_Running': '<S676>:54'
      // Transition: '<S676>:41'
      MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
        MX_Gtwy_IN_WaitForSwitchedPower;

      // Entry 'WaitForSwitchedPower': '<S676>:40'
      MX_Gtwy_Control_B.cabKeyDetect_biu0 = false;
    } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control ==
               MX_Gtwy_Control_IN_Detected) {
      // During 'Detected': '<S676>:45'
    } else {
      // During 'Engine_Not_Running': '<S676>:54'
      // Condition1
      if ((state_Engine == ENGINE_RUNNING) || (state_Engine == ENGINE_CRANKING))
      {
        // Transition: '<S676>:56'
        // Exit Internal 'Engine_Not_Running': '<S676>:54'
        MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_Detected;

        // Entry 'Detected': '<S676>:45'
        MX_Gtwy_Control_B.cabKeyDetect_biu0 = true;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running) {
         case MX_Gtwy_Control_IN_CabKeyCycle:
          // During 'CabKeyCycle': '<S676>:50'
          // Condition4
          if ((int32_T)din_RunEnter != 0) {
            // Transition: '<S676>:52'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
            MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control =
              MX_Gtwy_Control_IN_Detected;

            // Entry 'Detected': '<S676>:45'
            MX_Gtwy_Control_B.cabKeyDetect_biu0 = true;
          }
          break;

         case MX_Gtwy_Control_IN_Timer:
          // During 'Timer': '<S676>:43'
          // Condition2
          if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_bmmc >= 4) &&
              ((int32_T)din_RunEnter != 0)) {
            // Transition: '<S676>:46'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
            MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control =
              MX_Gtwy_Control_IN_Detected;

            // Entry 'Detected': '<S676>:45'
            MX_Gtwy_Control_B.cabKeyDetect_biu0 = true;
          } else {
            if (!((int32_T)din_RunEnter != 0)) {
              // Transition: '<S676>:51'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
                MX_Gtwy_Control_IN_CabKeyCycle;
            }
          }
          break;

         default:
          // During 'WaitForSwitchedPower': '<S676>:40'
          // Condition3
          if (!((int32_T)din_RunEnter != 0)) {
            // Transition: '<S676>:53'
            MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
            MX_Gtwy_Control_DWork.bitsForTID0.is_c101_MX_Gtwy_Control =
              MX_Gtwy_Control_IN_Detected;

            // Entry 'Detected': '<S676>:45'
            MX_Gtwy_Control_B.cabKeyDetect_biu0 = true;
          } else {
            if (din_SwPowerRelay) {
              // Transition: '<S676>:44'
              MX_Gtwy_Control_DWork.bitsForTID0.is_Engine_Not_Running =
                MX_Gtwy_Control_IN_Timer;
              MX_Gtwy_Control_DWork.temporalCounter_i1_bmmc = 0U;
            }
          }
          break;
        }
      }
    }

    // End of Chart: '<S629>/CabKeyDetection'

    // Chart: '<S629>/Indicators' incorporates:
    //   Inport: '<Root>/state_KeylessEntryLock'
    //   Inport: '<Root>/state_KeylessEntryPassword'

    // Gateway: MX_Gtwy_Control/System/Keyless_Entry/Indicators
    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_nzvt < 65535U) {
      MX_Gtwy_Control_DWork.temporalCounter_i1_nzvt = (uint16_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_nzvt + 1);
    }

    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb < 65535U) {
      MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb = (uint16_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb + 1);
    }

    // During: MX_Gtwy_Control/System/Keyless_Entry/Indicators
    if ((uint32_T)
        MX_Gtwy_Control_DWork.bitsForTID0.is_active_c71_MX_Gtwy_Control == 0U) {
      // Entry: MX_Gtwy_Control/System/Keyless_Entry/Indicators
      MX_Gtwy_Control_DWork.bitsForTID0.is_active_c71_MX_Gtwy_Control = 1U;

      // Entry Internal: MX_Gtwy_Control/System/Keyless_Entry/Indicators
      // Transition: '<S677>:49'
      MX_Gtwy_Control_DWork.bitsForTID0.is_c71_MX_Gtwy_Control =
        MX_Gtwy_Control_IN_NORMAL_e2vv;

      // Entry Internal 'NORMAL': '<S677>:37'
      // Transition: '<S677>:28'
      MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
        MX_Gtwy_Control_IN_BOTH_OFF;

      // Entry 'BOTH_OFF': '<S677>:27'
      MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
      MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
    } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_c71_MX_Gtwy_Control ==
               MX_Gtwy_Control_IN_FAIL_pabs) {
      // During 'FAIL': '<S677>:31'
      if (state_KeylessEntryPassword != KE_FAIL) {
        // Transition: '<S677>:42'
        // Exit Internal 'FAIL': '<S677>:31'
        // Exit Internal 'FLASHING': '<S677>:51'
        MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gtwy_Control_DWork.bitsForTID0.is_FAIL =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gtwy_Control_DWork.bitsForTID0.is_c71_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_NORMAL_e2vv;

        // Entry Internal 'NORMAL': '<S677>:37'
        // Transition: '<S677>:28'
        MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
          MX_Gtwy_Control_IN_BOTH_OFF;

        // Entry 'BOTH_OFF': '<S677>:27'
        MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
        MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
      } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_FAIL ==
                 MX_Gtwy_Control_IN_FLASHING) {
        // During 'FLASHING': '<S677>:51'
        if (MX_Gtwy_Control_DWork.temporalCounter_i1_nzvt >=
            CONSTANT_DATA->KEYLESS_ENTRY_DETECTED_TIMEOUT) {
          // Transition: '<S677>:53'
          // Exit Internal 'FLASHING': '<S677>:51'
          MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
          MX_Gtwy_Control_DWork.bitsForTID0.is_FAIL = MX_Gtwy_Control_IN_TIMEOUT;

          // Entry 'TIMEOUT': '<S677>:50'
          MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
          MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE !=
            0);
        } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING ==
                   MX_Gtwy_Control_IN_ACTIVE_ai5f) {
          // During 'ACTIVE': '<S677>:35'
          if (MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb >=
              CONSTANT_DATA->KEYLESS_ENTRY_FLASH_RATE) {
            // Transition: '<S677>:34'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING =
              MX_Gtwy_Contro_IN_INACTIVE_k4dz;
            MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb = 0U;

            // Entry 'INACTIVE': '<S677>:36'
            MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE !=
              0);
            MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE
              != 0);
          }
        } else {
          // During 'INACTIVE': '<S677>:36'
          if (MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb >=
              CONSTANT_DATA->KEYLESS_ENTRY_FLASH_RATE) {
            // Transition: '<S677>:33'
            MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING =
              MX_Gtwy_Control_IN_ACTIVE_ai5f;
            MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb = 0U;

            // Entry 'ACTIVE': '<S677>:35'
            MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
            MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE !=
              0);
          }
        }
      } else {
        // During 'TIMEOUT': '<S677>:50'
      }
    } else {
      // During 'NORMAL': '<S677>:37'
      if (state_KeylessEntryPassword == KE_FAIL) {
        // Transition: '<S677>:41'
        // Exit Internal 'NORMAL': '<S677>:37'
        MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gtwy_Control_DWork.bitsForTID0.is_c71_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_FAIL_pabs;

        // Entry Internal 'FAIL': '<S677>:31'
        // Transition: '<S677>:52'
        MX_Gtwy_Control_DWork.bitsForTID0.is_FAIL = MX_Gtwy_Control_IN_FLASHING;
        MX_Gtwy_Control_DWork.temporalCounter_i1_nzvt = 0U;

        // Entry Internal 'FLASHING': '<S677>:51'
        // Transition: '<S677>:32'
        MX_Gtwy_Control_DWork.bitsForTID0.is_FLASHING =
          MX_Gtwy_Control_IN_ACTIVE_ai5f;
        MX_Gtwy_Control_DWork.temporalCounter_i2_n5yb = 0U;

        // Entry 'ACTIVE': '<S677>:35'
        MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
        MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE != 0);
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0) {
         case MX_Gtwy_Control_IN_BOTH_OFF:
          // During 'BOTH_OFF': '<S677>:27'
          if (state_KeylessEntryLock == KE_LOCK) {
            // Transition: '<S677>:43'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
              MX_Gtwy_Control_IN_LOCK;

            // Entry 'LOCK': '<S677>:29'
            MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
            MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE
              != 0);
          } else {
            if (state_KeylessEntryLock == KE_UNLOCK) {
              // Transition: '<S677>:44'
              MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
                MX_Gtwy_Control_IN_UNLOCK;

              // Entry 'UNLOCK': '<S677>:30'
              MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE
                != 0);
              MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE
                != 0);
            }
          }
          break;

         case MX_Gtwy_Control_IN_LOCK:
          // During 'LOCK': '<S677>:29'
          if (state_KeylessEntryLock == KE_UNLOCK) {
            // Transition: '<S677>:38'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
              MX_Gtwy_Control_IN_UNLOCK;

            // Entry 'UNLOCK': '<S677>:30'
            MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE !=
              0);
            MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE !=
              0);
          }
          break;

         default:
          // During 'UNLOCK': '<S677>:30'
          if (state_KeylessEntryLock == KE_LOCK) {
            // Transition: '<S677>:40'
            MX_Gtwy_Control_DWork.bitsForTID0.is_NORMAL_aez0 =
              MX_Gtwy_Control_IN_LOCK;

            // Entry 'LOCK': '<S677>:29'
            MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
            MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE
              != 0);
          }
          break;
        }
      }
    }

    // End of Chart: '<S629>/Indicators'

    // SignalConversion: '<S629>/OutportBufferForcabKeyDetect'
    cabKeyDetect = MX_Gtwy_Control_B.cabKeyDetect_biu0;

    // SignalConversion: '<S629>/OutportBufferForind_KeylessEntryLock'
    ind_KeylessEntryLock = MX_Gtwy_Control_B.ind_KeylessEntryLock_hls2;

    // SignalConversion: '<S629>/OutportBufferForind_KeylessEntryUnlock'
    ind_KeylessEntryUnlock = MX_Gtwy_Control_B.ind_KeylessEntryUnlock_jj1j;

    // Chart: '<S629>/Power_Hold' incorporates:
    //   Inport: '<Root>/can_KeylessEntry'
    //   Inport: '<Root>/state_KeylessEntryPassword'

    // Gateway: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
    if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_bptr < 65535U) {
      MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = (uint16_T)(int32_T)
        ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_bptr + 1);
    }

    // During: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
    if ((uint32_T)
        MX_Gtwy_Control_DWork.bitsForTID0.is_active_c70_MX_Gtwy_Control == 0U) {
      // Entry: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
      MX_Gtwy_Control_DWork.bitsForTID0.is_active_c70_MX_Gtwy_Control = 1U;

      // Entry Internal: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
      // Transition: '<S679>:2'
      MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
        MX_Gtwy__IN_NON_FUNCTIONAL_k1dx;

      // Entry 'NON_FUNCTIONAL': '<S679>:33'
      MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control) {
       case MX_Gt_IN_KEYLESS_ENTRY_DETECTED:
        // During 'KEYLESS_ENTRY_DETECTED': '<S679>:6'
        if (((int32_T)can_KeylessEntry[0] != 0) || ((int32_T)can_KeylessEntry[1]
             != 0) || ((int32_T)can_KeylessEntry[2] != 0)) {
          // Transition: '<S679>:7'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
            MX_Gt_IN_KEYLESS_ENTRY_DETECTED;
          MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;
        } else {
          // Timeout after keypad entry started or machine key on
          if ((MX_Gtwy_Control_DWork.temporalCounter_i1_bptr >=
               CONSTANT_DATA->KEYLESS_ENTRY_DETECTED_TIMEOUT) ||
              MX_Gtwy_Control_B.cabKeyDetect_biu0) {
            // Transition: '<S679>:8'
            MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
              MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

            // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S679>:4'
            MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
          } else {
            if (state_KeylessEntryPassword == KE_PASS) {
              // Transition: '<S679>:10'
              MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
                MX_Gtwy__IN_KEYLESS_ENTRY_VALID;
              MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;
            }
          }
        }
        break;

       case MX_G_IN_KEYLESS_ENTRY_POWER_OFF:
        MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;

        // During 'KEYLESS_ENTRY_POWER_OFF': '<S679>:4'
        break;

       case MX_Gtwy__IN_KEYLESS_ENTRY_VALID:
        // During 'KEYLESS_ENTRY_VALID': '<S679>:9'
        if (((int32_T)can_KeylessEntry[0] != 0) || ((int32_T)can_KeylessEntry[1]
             != 0) || ((int32_T)can_KeylessEntry[2] != 0)) {
          // Transition: '<S679>:12'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
            MX_Gtwy__IN_KEYLESS_ENTRY_VALID;
          MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;
        } else {
          // Timeout after valid code entered or machine key on
          // might need different timeout locked versus unlocked
          if ((MX_Gtwy_Control_DWork.temporalCounter_i1_bptr >=
               CONSTANT_DATA->KEYLESS_ENTRY_VALID_TIMEOUT) ||
              MX_Gtwy_Control_B.cabKeyDetect_biu0) {
            // Transition: '<S679>:11'
            MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
              MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

            // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S679>:4'
            MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
          }
        }
        break;

       case MX_Gtwy__IN_NON_FUNCTIONAL_k1dx:
        MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;

        // During 'NON_FUNCTIONAL': '<S679>:33'
        if (CONSTANT_DATA->KEYLESS_ENTRY_FUNCTION != NON_FUNCTIONAL) {
          // Transition: '<S679>:34'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
            MX_Gtwy_Co_IN_WAIT_FOR_NO_PRESS;
          MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;

          // Entry 'WAIT_FOR_NO_PRESS': '<S679>:22'
          MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_ACTIVE;
        }
        break;

       case MX_Gt_IN_WAIT_FOR_KEYLESS_ENTRY:
        // During 'WAIT_FOR_KEYLESS_ENTRY': '<S679>:1'
        if (((int32_T)can_KeylessEntry[0] != 0) || ((int32_T)can_KeylessEntry[1]
             != 0) || ((int32_T)can_KeylessEntry[2] != 0)) {
          // Transition: '<S679>:3'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
            MX_Gt_IN_KEYLESS_ENTRY_DETECTED;
          MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;
        } else {
          // No keypad press after powerup or machine key on
          if ((MX_Gtwy_Control_DWork.temporalCounter_i1_bptr >=
               CONSTANT_DATA->KEYLESS_ENTRY_WAIT_TIMEOUT) ||
              MX_Gtwy_Control_B.cabKeyDetect_biu0) {
            // Transition: '<S679>:5'
            MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
              MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

            // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S679>:4'
            MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
          }
        }
        break;

       default:
        MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_ACTIVE;

        // During 'WAIT_FOR_NO_PRESS': '<S679>:22'
        // Error condition - no CANand/or Sw Pwr to keypad
        if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_bptr >= 100) ||
            MX_Gtwy_Control_B.cabKeyDetect_biu0) {
          // Transition: '<S679>:28'
          MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
            MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

          // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S679>:4'
          MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
        } else {
          if (((int32_T)can_KeylessEntry[0] == 0) && ((int32_T)can_KeylessEntry
               [1] == 0) && ((int32_T)can_KeylessEntry[2] == 0)) {
            // Transition: '<S679>:23'
            MX_Gtwy_Control_DWork.bitsForTID0.is_c70_MX_Gtwy_Control =
              MX_Gt_IN_WAIT_FOR_KEYLESS_ENTRY;
            MX_Gtwy_Control_DWork.temporalCounter_i1_bptr = 0U;
          }
        }
        break;
      }
    }

    // End of Chart: '<S629>/Power_Hold'

    // SignalConversion: '<S629>/OutportBufferForstate_KeylessEntryPowerHold'
    state_KeylessEntryPowerHold =
      MX_Gtwy_Control_B.state_KeylessEntryPowerHol_onfv;
  } else {
    if (MX_Gtwy_Control_DWork.Keyless_Entry_MODE) {
      MX_Gtwy_C_Keyless_Entry_Disable();
    }
  }

  // End of Outputs for SubSystem: '<S6>/Keyless_Entry'
}

// Function for Chart: '<S630>/Panel_Lock'
static void MX_Gtwy_Control_KEYPAD(void)
{
  int32_T i;

  // During 'KEYPAD': '<S680>:9'
  switch (MX_Gtwy_Control_DWork.bitsForTID0.is_KEYPAD) {
   case MX_Gtwy_Control_IN_NOT_PRESSED:
    // Inport: '<Root>/can_Keypad'
    // During 'NOT_PRESSED': '<S680>:10'
    if ((((int32_T)can_Keypad[0] != 0) || ((int32_T)can_Keypad[1] != 0) ||
         ((int32_T)can_Keypad[2] != 0)) && ((state_KSPassword == ENTER_PWD) ||
         (state_KSPassword == ENTER_OWNER1) || (state_KSPassword == ENTER_OWNER2)))
    {
      // Transition: '<S680>:49'
      MX_Gtwy_Control_DWork.bitsForTID0.is_KEYPAD = MX_Gtwy_Control_IN_PRESSED;

      // Entry Internal 'PRESSED': '<S680>:11'
      // Transition: '<S680>:51'
      MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED = MX_Gtwy_Control_IN_NONE;
    } else {
      if (state_KSPassword == FAIL) {
        // Transition: '<S680>:62'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KEYPAD = MX_Gtwy_Control_IN_RESET;
        MX_Gtwy_Control_DWork.temporalCounter_i1_ami0 = 0U;

        // Entry 'RESET': '<S680>:23'
        pwd_Position = 0U;
        for (i = 0; i < 5; i++) {
          pwd_Keyless[i] = 0U;
        }

        MX_Gtwy_Control_DWork.reset_PwdState = 1U;
      }
    }
    break;

   case MX_Gtwy_Control_IN_PRESSED:
    // Inport: '<Root>/can_Keypad'
    // During 'PRESSED': '<S680>:11'
    if (((int32_T)can_Keypad[0] == 0) && ((int32_T)can_Keypad[1] == 0) &&
        ((int32_T)can_Keypad[2] == 0)) {
      // Transition: '<S680>:50'
      // Exit Internal 'PRESSED': '<S680>:11'
      MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
        MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
      MX_Gtwy_Control_DWork.bitsForTID0.is_KEYPAD =
        MX_Gtwy_Control_IN_NOT_PRESSED;
    } else {
      switch (MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED) {
       case MX_Gtwy_Control_IN_BUTTON_0:
        // During 'BUTTON_0': '<S680>:14'
        break;

       case MX_Gtwy_Control_IN_BUTTON_1:
        // During 'BUTTON_1': '<S680>:13'
        break;

       case MX_Gtwy_Control_IN_BUTTON_2:
        // During 'BUTTON_2': '<S680>:15'
        break;

       case MX_Gtwy_Control_IN_BUTTON_3:
        // During 'BUTTON_3': '<S680>:16'
        break;

       case MX_Gtwy_Control_IN_BUTTON_4:
        // During 'BUTTON_4': '<S680>:17'
        break;

       case MX_Gtwy_Control_IN_BUTTON_5:
        // During 'BUTTON_5': '<S680>:18'
        break;

       case MX_Gtwy_Control_IN_BUTTON_6:
        // During 'BUTTON_6': '<S680>:19'
        break;

       case MX_Gtwy_Control_IN_BUTTON_74:
        // During 'BUTTON_74': '<S680>:20'
        break;

       case MX_Gtwy_Control_IN_BUTTON_8:
        // During 'BUTTON_8': '<S680>:21'
        break;

       case MX_Gtwy_Control_IN_BUTTON_9:
        // During 'BUTTON_9': '<S680>:22'
        break;

       default:
        // During 'NONE': '<S680>:12'
        if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_MASK_9) ==
            (int32_T)KEYPAD_PRESSED_9) {
          // Transition: '<S680>:61'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_9;

          // Entry 'BUTTON_9': '<S680>:22'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_9;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_8) ==
                   (int32_T)KEYPAD_PRESSED_8) {
          // Transition: '<S680>:60'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_8;

          // Entry 'BUTTON_8': '<S680>:21'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_8;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_7) ==
                   (int32_T)KEYPAD_PRESSED_7) {
          // Transition: '<S680>:59'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_74;

          // Entry 'BUTTON_74': '<S680>:20'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_7;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_6) ==
                   (int32_T)KEYPAD_PRESSED_6) {
          // Transition: '<S680>:58'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_6;

          // Entry 'BUTTON_6': '<S680>:19'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_6;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_5) ==
                   (int32_T)KEYPAD_PRESSED_5) {
          // Transition: '<S680>:57'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_5;

          // Entry 'BUTTON_5': '<S680>:18'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_5;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_4) ==
                   (int32_T)KEYPAD_PRESSED_4) {
          // Transition: '<S680>:56'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_4;

          // Entry 'BUTTON_4': '<S680>:17'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_4;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_3) ==
                   (int32_T)KEYPAD_PRESSED_3) {
          // Transition: '<S680>:55'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_3;

          // Entry 'BUTTON_3': '<S680>:16'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_3;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_2) ==
                   (int32_T)KEYPAD_PRESSED_2) {
          // Transition: '<S680>:54'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_2;

          // Entry 'BUTTON_2': '<S680>:15'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_2;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_1) ==
                   (int32_T)KEYPAD_PRESSED_1) {
          // Transition: '<S680>:52'
          MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
            MX_Gtwy_Control_IN_BUTTON_1;

          // Entry 'BUTTON_1': '<S680>:13'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_1;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else {
          if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_MASK_0) ==
              (int32_T)KEYPAD_PRESSED_0) {
            // Transition: '<S680>:53'
            MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED =
              MX_Gtwy_Control_IN_BUTTON_0;

            // Entry 'BUTTON_0': '<S680>:14'
            pwd_Keyless[(int32_T)pwd_Position] = ASCII_0;
            pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
          }
        }
        break;
      }
    }
    break;

   default:
    // During 'RESET': '<S680>:23'
    if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_ami0 >= 200) &&
        (state_KSPassword != FAIL)) {
      // Transition: '<S680>:63'
      MX_Gtwy_Control_DWork.bitsForTID0.is_KEYPAD =
        MX_Gtwy_Control_IN_NOT_PRESSED;
    }
    break;
  }
}

// Function for Chart: '<S630>/Panel_Lock'
static void MX_Gtwy_Control_CHANGE(void)
{
  int32_T i;

  // During 'CHANGE': '<S680>:30'
  if (state_KSPassword == FAIL) {
    // Transition: '<S680>:436'
    // Exit Internal 'CHANGE': '<S680>:30'
    // Exit Internal 'ENTER_OWNER': '<S680>:482'
    MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S680>:402'
    MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S680>:405'
    // Exit Internal 'DISPLAY_DELAY': '<S680>:508'
    MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY1': '<S680>:516'
    MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY2': '<S680>:521'
    MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'WAIT_NEW': '<S680>:4'
    MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
      MX_Gtwy_Control_IN_FAIL_nxgn;
    MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;

    // Entry 'FAIL': '<S680>:28'
    state_KSPassword = FAIL;
  } else if ((int32_T)state_KSPassword == 0) {
    // Transition: '<S680>:435'
    // Transition: '<S680>:74'
    // Exit Internal 'CHANGE': '<S680>:30'
    // Exit Internal 'ENTER_OWNER': '<S680>:482'
    MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S680>:402'
    MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S680>:405'
    // Exit Internal 'DISPLAY_DELAY': '<S680>:508'
    MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY1': '<S680>:516'
    MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY2': '<S680>:521'
    MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'WAIT_NEW': '<S680>:4'
    MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW =
      MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
      MX_Gtwy_Control_IN_NOTHING;

    // Entry 'NOTHING': '<S680>:25'
    state_KSPassword = 0U;
    pwd_Position = 0U;
    for (i = 0; i < 5; i++) {
      pwd_Keyless[i] = 0U;
    }
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE) {
     case MX_Gtwy_Control_IN_ENTER_OWNER:
      // During 'ENTER_OWNER': '<S680>:482'
      if (MX_Gtwy_Control_DWork.temporalCounter_i2 >=
          CONSTANT_DATA->KEYPAD_ENTER_TIME) {
        // Transition: '<S680>:507'
        // Exit Internal 'ENTER_OWNER': '<S680>:482'
        MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Control_IN_WAIT_NEW1;

        // Entry 'WAIT_NEW1': '<S680>:437'
        state_KSPassword = FAIL;
      } else if (state_KSPassword == PASS) {
        // Transition: '<S680>:483'
        // Exit Internal 'ENTER_OWNER': '<S680>:482'
        MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Co_IN_OWNER_USER_SELECT;

        // Entry Internal 'OWNER_USER_SELECT': '<S680>:402'
        // Transition: '<S680>:403'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv =
          MX_Gt_IN_OWNER_USER_SELECT_gzm1;

        // Entry 'OWNER_USER_SELECT': '<S680>:405'
        state_KSPassword = ENTER_OWNER1;
        MX_Gtwy_Control_DWork.DBEnterTime = 0U;

        // Entry Internal 'OWNER_USER_SELECT': '<S680>:405'
        // Transition: '<S680>:410'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
          MX_Gtwy_Contro_IN_DISPLAY_OWNER;

        // Entry 'DISPLAY_OWNER': '<S680>:412'
        PWD_NumberSelected = (uint16_T)PW_OWNER;
        MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_OWNER;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER) {
         case MX_Gtwy_Cont_IN_DISPLAY_ASTRISK:
          // During 'DISPLAY_ASTRISK': '<S680>:499'
          if (pwd_Position == MAX_PWD_CHAR) {
            // Transition: '<S680>:503'
            MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
              MX_Gtwy_Control_IN_GOOD_UNLOCK;

            // Inport: '<Root>/ee_OwnerPassword' incorporates:
            //   Inport: '<Root>/ee_MasterPassword'

            // Entry Internal 'GOOD_UNLOCK': '<S680>:484'
            // Transition: '<S680>:491'
            if (((ee_OwnerPassword[0] == pwd_Keyless[0]) && (ee_OwnerPassword[1]
                  == pwd_Keyless[1]) && (ee_OwnerPassword[2] == pwd_Keyless[2]) &&
                 (ee_OwnerPassword[3] == pwd_Keyless[3]) && (ee_OwnerPassword[4]
                  == pwd_Keyless[4])) || ((ee_MasterPassword[0] == pwd_Keyless[0])
                 && (ee_MasterPassword[1] == pwd_Keyless[1]) &&
                 (ee_MasterPassword[2] == pwd_Keyless[2]) && (ee_MasterPassword
                  [3] == pwd_Keyless[3]) && (ee_MasterPassword[4] ==
                  pwd_Keyless[4]))) {
              // Transition: '<S680>:492'
              // Transition: '<S680>:494'
              pwd_Position = 0U;
              for (i = 0; i < 5; i++) {
                pwd_Keyless[i] = 0U;
              }

              state_KSPassword = PASS;

              // Transition: '<S680>:498'
            } else {
              // Transition: '<S680>:504'
              pwd_Position = 0U;
              for (i = 0; i < 5; i++) {
                pwd_Keyless[i] = 0U;
              }

              state_KSPassword = FAIL;
            }
          }
          break;

         case MX_Gtwy_Control_IN_DISPLAY_CODE:
          // During 'DISPLAY_CODE': '<S680>:501'
          if ((int32_T)pwd_Position != 0) {
            // Transition: '<S680>:500'
            MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
              MX_Gtwy_Cont_IN_DISPLAY_ASTRISK;

            // Entry 'DISPLAY_ASTRISK': '<S680>:499'
            MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_ASTERISK;
          }
          break;

         default:
          // During 'GOOD_UNLOCK': '<S680>:484'
          break;
        }
      }
      break;

     case MX_Gtwy_Control_IN_GOOD_NEW:
      // Inport: '<Root>/ee_User1Password' incorporates:
      //   Inport: '<Root>/ee_OwnerPassword'
      //   Inport: '<Root>/ee_User2Password'

      // During 'GOOD_NEW': '<S680>:29'
      if (((PWD_NumberSelected == PW_USER1) && (ee_User1Password[0] ==
            pwd_Keyless[0]) && (ee_User1Password[1] == pwd_Keyless[1]) &&
           (ee_User1Password[2] == pwd_Keyless[2]) && (ee_User1Password[3] ==
            pwd_Keyless[3]) && (ee_User1Password[4] == pwd_Keyless[4])) ||
          ((PWD_NumberSelected == PW_USER2) && (ee_User2Password[0] ==
            pwd_Keyless[0]) && (ee_User2Password[1] == pwd_Keyless[1]) &&
           (ee_User2Password[2] == pwd_Keyless[2]) && (ee_User2Password[3] ==
            pwd_Keyless[3]) && (ee_User2Password[4] == pwd_Keyless[4])) ||
          ((PWD_NumberSelected == PW_OWNER) && (ee_OwnerPassword[0] ==
            pwd_Keyless[0]) && (ee_OwnerPassword[1] == pwd_Keyless[1]) &&
           (ee_OwnerPassword[2] == pwd_Keyless[2]) && (ee_OwnerPassword[3] ==
            pwd_Keyless[3]) && (ee_OwnerPassword[4] == pwd_Keyless[4]))) {
        // Transition: '<S680>:446'
        // Transition: '<S680>:447'
        // Transition: '<S680>:72'
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Control_IN_WAIT_NEW2;

        // Entry 'WAIT_NEW2': '<S680>:439'
        state_KSPassword = 0U;
      }

      // End of Inport: '<Root>/ee_User1Password'
      break;

     case MX_Gtwy_Co_IN_OWNER_USER_SELECT:
      // During 'OWNER_USER_SELECT': '<S680>:402'
      if (MX_Gtwy_Control_DWork.DBEnterTime > CONSTANT_DATA->KEYPAD_ENTER_TIME)
      {
        // Transition: '<S680>:99'
        // Exit Internal 'OWNER_USER_SELECT': '<S680>:402'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'OWNER_USER_SELECT': '<S680>:405'
        // Exit Internal 'DISPLAY_DELAY': '<S680>:508'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY1': '<S680>:516'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY2': '<S680>:521'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Control_IN_WAIT_NEW1;

        // Entry 'WAIT_NEW1': '<S680>:437'
        state_KSPassword = FAIL;
      } else if (pwd_Position == MAX_PWD_CHAR) {
        // Transition: '<S680>:92'
        // Exit Internal 'OWNER_USER_SELECT': '<S680>:402'
        MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'OWNER_USER_SELECT': '<S680>:405'
        // Exit Internal 'DISPLAY_DELAY': '<S680>:508'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY1': '<S680>:516'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY2': '<S680>:521'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_C_IN_VERIFY_FIRST_ENTRY;

        // Entry Internal 'VERIFY_FIRST_ENTRY': '<S680>:34'
        // Transition: '<S680>:95'
        if (!((pwd_Keyless[0] == ASCII_0) && (pwd_Keyless[1] == ASCII_0) &&
              (pwd_Keyless[2] == ASCII_0) && (pwd_Keyless[3] == ASCII_0) &&
              (pwd_Keyless[4] == ASCII_0))) {
          // Transition: '<S680>:96'
          // Transition: '<S680>:94'
          for (i = 0; i < 5; i++) {
            MX_Gtwy_Control_DWork.pwd_New[i] = pwd_Keyless[i];
          }

          for (i = 0; i < 5; i++) {
            pwd_Keyless[i] = 0U;
          }

          pwd_Position = 0U;
          state_KSPassword = PASS;

          // Transition: '<S680>:93'
        } else {
          // Transition: '<S680>:97'
          state_KSPassword = FAIL;
        }
      } else if (MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv ==
                 MX_Gtwy_Cont_IN_DISPLAY_ASTRISK) {
        // During 'DISPLAY_ASTRISK': '<S680>:419'
        MX_Gtwy_Control_DWork.DBEnterTime = (uint16_T)(int32_T)((int32_T)
          MX_Gtwy_Control_DWork.DBEnterTime + 1);
      } else {
        // During 'OWNER_USER_SELECT': '<S680>:405'
        if ((int32_T)pwd_Position != 0) {
          // Transition: '<S680>:404'
          // Exit Internal 'OWNER_USER_SELECT': '<S680>:405'
          // Exit Internal 'DISPLAY_DELAY': '<S680>:508'
          MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
          MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

          // Exit Internal 'DISPLAY_DELAY1': '<S680>:516'
          MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

          // Exit Internal 'DISPLAY_DELAY2': '<S680>:521'
          MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
          MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv =
            MX_Gtwy_Cont_IN_DISPLAY_ASTRISK;

          // Entry 'DISPLAY_ASTRISK': '<S680>:419'
          MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_ASTERISK;
          MX_Gtwy_Control_DWork.DBEnterTime = 0U;
        } else {
          MX_Gtwy_Control_DWork.DBEnterTime = (uint16_T)(int32_T)((int32_T)
            MX_Gtwy_Control_DWork.DBEnterTime + 1);
          switch (MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT) {
           case MX_Gtwy_Contro_IN_DISPLAY_DELAY:
            // Inport: '<Root>/can_Keypad' incorporates:
            //   Inport: '<Root>/state_KeylessPanel'

            // During 'DISPLAY_DELAY': '<S680>:508'
            if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                 == (int32_T)KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel ==
                 NORMAL)) {
              // Transition: '<S680>:408'
              // Exit Internal 'DISPLAY_DELAY': '<S680>:508'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
              MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
                MX_Gtwy_Contro_IN_DISPLAY_USER1;

              // Entry 'DISPLAY_USER1': '<S680>:426'
              PWD_NumberSelected = (uint16_T)PW_USER1;
              MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_USER1;
            } else if ((MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY ==
                        MX_Gtwy__IN_DISPLAY_DELAY_OWNER) && ((int32_T)
                        MX_Gtwy_Control_DWork.temporalCounter_i2 >= 100)) {
              // During 'DISPLAY_DELAY_OWNER': '<S680>:510'
              // Transition: '<S680>:509'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
                MX_Gtwy_Contro_IN_DISPLAY_ENTER;

              // Entry 'DISPLAY_ENTER': '<S680>:471'
              MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_OWNER1;
              MX_Gtwy_Control_DWork.DBEnterTime = 0U;
            } else {
              // During 'DISPLAY_ENTER': '<S680>:471'
            }
            break;

           case MX_Gtwy_Contr_IN_DISPLAY_DELAY1:
            // Inport: '<Root>/can_Keypad' incorporates:
            //   Inport: '<Root>/state_KeylessPanel'

            // During 'DISPLAY_DELAY1': '<S680>:516'
            if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                 == (int32_T)KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel ==
                 NORMAL)) {
              // Transition: '<S680>:433'
              // Exit Internal 'DISPLAY_DELAY1': '<S680>:516'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
              MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
                MX_Gtwy_Contro_IN_DISPLAY_USER2;

              // Entry 'DISPLAY_USER2': '<S680>:467'
              PWD_NumberSelected = (uint16_T)PW_USER2;
              MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_USER2;
            } else if ((MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 ==
                        MX_Gtwy__IN_DISPLAY_DELAY_USER1) && ((int32_T)
                        MX_Gtwy_Control_DWork.temporalCounter_i2 >= 100)) {
              // During 'DISPLAY_DELAY_USER1': '<S680>:519'
              // Transition: '<S680>:518'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
                MX_Gtwy_Contro_IN_DISPLAY_ENTER;

              // Entry 'DISPLAY_ENTER': '<S680>:520'
              MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_OWNER1;
              MX_Gtwy_Control_DWork.DBEnterTime = 0U;
            } else {
              // During 'DISPLAY_ENTER': '<S680>:520'
            }
            break;

           case MX_Gtwy_Contr_IN_DISPLAY_DELAY2:
            // Inport: '<Root>/can_Keypad' incorporates:
            //   Inport: '<Root>/state_KeylessPanel'

            // During 'DISPLAY_DELAY2': '<S680>:521'
            if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                 == (int32_T)KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel ==
                 NORMAL)) {
              // Transition: '<S680>:407'
              // Exit Internal 'DISPLAY_DELAY2': '<S680>:521'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
              MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
                MX_Gtwy_Contro_IN_DISPLAY_OWNER;

              // Entry 'DISPLAY_OWNER': '<S680>:412'
              PWD_NumberSelected = (uint16_T)PW_OWNER;
              MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_OWNER;
            } else if ((MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 ==
                        MX_Gtwy__IN_DISPLAY_DELAY_USER2) && ((int32_T)
                        MX_Gtwy_Control_DWork.temporalCounter_i2 >= 100)) {
              // During 'DISPLAY_DELAY_USER2': '<S680>:524'
              // Transition: '<S680>:523'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
                MX_Gtwy_Contro_IN_DISPLAY_ENTER;

              // Entry 'DISPLAY_ENTER': '<S680>:525'
              MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_OWNER1;
              MX_Gtwy_Control_DWork.DBEnterTime = 0U;
            } else {
              // During 'DISPLAY_ENTER': '<S680>:525'
            }
            break;

           case MX_Gtwy_Contro_IN_DISPLAY_OWNER:
            PWD_NumberSelected = (uint16_T)PW_OWNER;

            // Inport: '<Root>/can_Keypad'
            // During 'DISPLAY_OWNER': '<S680>:412'
            if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                != (int32_T)KEYPAD_UNLOCK_PRESSED) {
              // Transition: '<S680>:463'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
                MX_Gtwy_Contro_IN_DISPLAY_DELAY;

              // Entry Internal 'DISPLAY_DELAY': '<S680>:508'
              // Transition: '<S680>:514'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
                MX_Gtwy__IN_DISPLAY_DELAY_OWNER;
              MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;
            }
            break;

           case MX_Gtwy_Contro_IN_DISPLAY_USER1:
            PWD_NumberSelected = (uint16_T)PW_USER1;

            // Inport: '<Root>/can_Keypad'
            // During 'DISPLAY_USER1': '<S680>:426'
            if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                != (int32_T)KEYPAD_UNLOCK_PRESSED) {
              // Transition: '<S680>:466'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
                MX_Gtwy_Contr_IN_DISPLAY_DELAY1;

              // Entry Internal 'DISPLAY_DELAY1': '<S680>:516'
              // Transition: '<S680>:517'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
                MX_Gtwy__IN_DISPLAY_DELAY_USER1;
              MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;
            }
            break;

           default:
            PWD_NumberSelected = (uint16_T)PW_USER2;

            // Inport: '<Root>/can_Keypad'
            // During 'DISPLAY_USER2': '<S680>:467'
            if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                != (int32_T)KEYPAD_UNLOCK_PRESSED) {
              // Transition: '<S680>:469'
              MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
                MX_Gtwy_Contr_IN_DISPLAY_DELAY2;

              // Entry Internal 'DISPLAY_DELAY2': '<S680>:521'
              // Transition: '<S680>:522'
              MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
                MX_Gtwy__IN_DISPLAY_DELAY_USER2;
              MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;
            }
            break;
          }
        }
      }
      break;

     case MX_Gtwy_Control_IN_STORE:
      // During 'STORE': '<S680>:444'
      if ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i2 >= 100) {
        // Transition: '<S680>:445'
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Control_IN_GOOD_NEW;
      }
      break;

     case MX_Gtwy_C_IN_VERIFY_FIRST_ENTRY:
      // During 'VERIFY_FIRST_ENTRY': '<S680>:34'
      if (state_KSPassword == PASS) {
        // Transition: '<S680>:75'
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Control_IN_WAIT_NEW;
        MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;

        // Entry Internal 'WAIT_NEW': '<S680>:4'
        // Transition: '<S680>:451'
        MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW =
          MX_Gtwy_Con_IN_DISPLAY_ASTRISK1;

        // Entry 'DISPLAY_ASTRISK1': '<S680>:450'
        state_KSPassword = ENTER_OWNER2;
        MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_OWNER2;
      }
      break;

     case MX_Gtwy__IN_VERIFY_SECOND_ENTRY:
      // During 'VERIFY_SECOND_ENTRY': '<S680>:32'
      if (state_KSPassword == PASS) {
        // Transition: '<S680>:68'
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE = MX_Gtwy_Control_IN_STORE;
        MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;

        // Entry 'STORE': '<S680>:444'
        state_KSPassword = NEW;
        MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_SAVED;
      }
      break;

     case MX_Gtwy_Control_IN_WAIT_NEW:
      // During 'WAIT_NEW': '<S680>:4'
      if (MX_Gtwy_Control_DWork.temporalCounter_i2 >=
          CONSTANT_DATA->KEYPAD_ENTER_TIME) {
        // Transition: '<S680>:42'
        // Exit Internal 'WAIT_NEW': '<S680>:4'
        MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Control_IN_WAIT_NEW1;

        // Entry 'WAIT_NEW1': '<S680>:437'
        state_KSPassword = FAIL;
      } else if (pwd_Position == MAX_PWD_CHAR) {
        // Transition: '<S680>:91'
        // Exit Internal 'WAIT_NEW': '<S680>:4'
        MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy__IN_VERIFY_SECOND_ENTRY;

        // Entry Internal 'VERIFY_SECOND_ENTRY': '<S680>:32'
        // Transition: '<S680>:82'
        if ((MX_Gtwy_Control_DWork.pwd_New[0] == pwd_Keyless[0]) &&
            (MX_Gtwy_Control_DWork.pwd_New[1] == pwd_Keyless[1]) &&
            (MX_Gtwy_Control_DWork.pwd_New[2] == pwd_Keyless[2]) &&
            (MX_Gtwy_Control_DWork.pwd_New[3] == pwd_Keyless[3]) &&
            (MX_Gtwy_Control_DWork.pwd_New[4] == pwd_Keyless[4])) {
          // Transition: '<S680>:83'
          // Transition: '<S680>:85'
          state_KSPassword = PASS;

          // Transition: '<S680>:86'
        } else {
          // Transition: '<S680>:84'
          state_KSPassword = FAIL;
        }
      } else if ((MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW ==
                  MX_Gtwy_Cont_IN_DISPLAY_ASTRISK) || (!((int32_T)pwd_Position
                   != 0))) {
        // During 'DISPLAY_ASTRISK': '<S680>:449'
      } else {
        // During 'DISPLAY_ASTRISK1': '<S680>:450'
        // Transition: '<S680>:448'
        MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW =
          MX_Gtwy_Cont_IN_DISPLAY_ASTRISK;

        // Entry 'DISPLAY_ASTRISK': '<S680>:449'
        MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_ASTERISK;
      }
      break;

     case MX_Gtwy_Control_IN_WAIT_NEW1:
      // During 'WAIT_NEW1': '<S680>:437'
      break;

     default:
      // During 'WAIT_NEW2': '<S680>:439'
      break;
    }
  }
}

// System initialize for atomic system: '<S6>/Keyless_Start'
void MX_Gtwy_Cont_Keyless_Start_Init(void)
{
  int32_T i;

  // SystemInitialize for Chart: '<S630>/Panel_Lock'
  MX_Gtwy_Control_DWork.bitsForTID0.is_KEYPAD = MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_PRESSED = MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.temporalCounter_i1_ami0 = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_KS_DISPLAY =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_PASSWORD =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK = MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE = MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT_k2iv =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_OWNER_USER_SELECT =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY1 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_DISPLAY_DELAY2 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.bitsForTID0.is_WAIT_NEW =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c60_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.debounceCount = 0U;
  MX_Gtwy_Control_DWork.reset_PwdState = 0U;
  for (i = 0; i < 5; i++) {
    MX_Gtwy_Control_DWork.pwd_New[i] = 0U;
  }

  MX_Gtwy_Control_DWork.KSChangeDisp = 0U;
  MX_Gtwy_Control_DWork.DBEnterTime = 0U;
  state_KSLock = 0U;
  state_KSPassword = 0U;
  pwd_Position = 0U;
  for (i = 0; i < 5; i++) {
    pwd_Keyless[i] = 0U;
  }

  KSS_Display = 0U;
  PWD_NumberSelected = 0U;

  // End of SystemInitialize for Chart: '<S630>/Panel_Lock'
}

// Output and update for atomic system: '<S6>/Keyless_Start'
void MX_Gtwy_Control_Keyless_Start(void)
{
  int32_T i;

  // Chart: '<S630>/Panel_Lock' incorporates:
  //   Inport: '<Root>/can_Keypad'
  //   Inport: '<Root>/ee_MasterPassword'
  //   Inport: '<Root>/ee_OwnerPassword'
  //   Inport: '<Root>/ee_User1Password'
  //   Inport: '<Root>/ee_User2Password'
  //   Inport: '<Root>/flag_InitEERead'
  //   Inport: '<Root>/state_KeylessPanel'

  // Gateway: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i1_ami0 < 255U) {
    MX_Gtwy_Control_DWork.temporalCounter_i1_ami0 = (uint8_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i1_ami0 + 1);
  }

  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i2 < 65535U) {
    MX_Gtwy_Control_DWork.temporalCounter_i2 = (uint16_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i2 + 1);
  }

  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj < 63U) {
    MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj = (uint8_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj + 1);
  }

  if ((uint32_T)MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 < 127U) {
    MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 = (uint8_T)(int32_T)((int32_T)
      MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 + 1);
  }

  // During: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c60_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c60_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
    // Entry Internal 'KEYPAD': '<S680>:9'
    // Transition: '<S680>:48'
    MX_Gtwy_Control_DWork.bitsForTID0.is_KEYPAD = MX_Gtwy_Control_IN_NOT_PRESSED;

    // Entry Internal 'KS_PASSWORD': '<S680>:24'
    // Transition: '<S680>:64'
    MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
      MX_Gtwy_Control_IN_NOTHING;

    // Entry 'NOTHING': '<S680>:25'
    state_KSPassword = 0U;
    pwd_Position = 0U;
    for (i = 0; i < 5; i++) {
      pwd_Keyless[i] = 0U;
    }

    // Entry Internal 'KS_LOCK': '<S680>:8'
    // Transition: '<S680>:36'
    MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK = MX_Gtwy_Control_IN_Init_k1cp;

    // Entry 'Init': '<S680>:531'
    state_KSLock = KS_NOTHING;

    // Entry Internal 'KS_DISPLAY': '<S680>:184'
    // Transition: '<S680>:304'
    MX_Gtwy_Control_DWork.bitsForTID0.is_KS_DISPLAY =
      MX_Gtwy_Control_IN_CODE_ERROR2;

    // Entry 'CODE_ERROR2': '<S680>:303'
    // Entry Internal 'CODE_ERROR2': '<S680>:303'
    // Transition: '<S680>:195'
    MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
      MX_Gtwy_Control_IN_NOORMAL;

    // Entry 'NOORMAL': '<S680>:218'
    KSS_Display = INACTIVE;
  } else {
    MX_Gtwy_Control_KEYPAD();

    // During 'KS_PASSWORD': '<S680>:24'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD) {
     case MX_Gtwy_Control_IN_CHANGE:
      MX_Gtwy_Control_CHANGE();
      break;

     case MX_Gtwy_Control_IN_FAIL_nxgn:
      // During 'FAIL': '<S680>:28'
      if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i2 >= 100) &&
          ((int32_T)MX_Gtwy_Control_DWork.reset_PwdState != 0)) {
        // Transition: '<S680>:73'
        // Transition: '<S680>:74'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
          MX_Gtwy_Control_IN_NOTHING;

        // Entry 'NOTHING': '<S680>:25'
        state_KSPassword = 0U;
        pwd_Position = 0U;
        for (i = 0; i < 5; i++) {
          pwd_Keyless[i] = 0U;
        }
      }
      break;

     case MX_Gtwy_Control_IN_GOOD_UNLOCK:
      // During 'GOOD_UNLOCK': '<S680>:27'
      if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i2 >= 50) &&
          ((state_KSLock == KS_NOTHING) && (state_KSPassword != FAIL))) {
        // Transition: '<S680>:71'
        // Transition: '<S680>:74'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
          MX_Gtwy_Control_IN_NOTHING;

        // Entry 'NOTHING': '<S680>:25'
        state_KSPassword = 0U;
        pwd_Position = 0U;
        for (i = 0; i < 5; i++) {
          pwd_Keyless[i] = 0U;
        }
      } else {
        if (state_KSPassword == FAIL) {
          // Transition: '<S680>:69'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
            MX_Gtwy_Control_IN_FAIL_nxgn;
          MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;

          // Entry 'FAIL': '<S680>:28'
          state_KSPassword = FAIL;
        }
      }
      break;

     case MX_Gtwy_Control_IN_NOTHING:
      // During 'NOTHING': '<S680>:25'
      if (state_KSLock == KS_CHANGE) {
        // Transition: '<S680>:67'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
          MX_Gtwy_Control_IN_CHANGE;

        // Entry 'CHANGE': '<S680>:30'
        state_KSPassword = ENTER_OWNER1;

        // Entry Internal 'CHANGE': '<S680>:30'
        // Transition: '<S680>:440'
        MX_Gtwy_Control_DWork.bitsForTID0.is_CHANGE =
          MX_Gtwy_Control_IN_ENTER_OWNER;
        MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;

        // Entry 'ENTER_OWNER': '<S680>:482'
        // Entry Internal 'ENTER_OWNER': '<S680>:482'
        // Transition: '<S680>:502'
        MX_Gtwy_Control_DWork.bitsForTID0.is_ENTER_OWNER =
          MX_Gtwy_Control_IN_DISPLAY_CODE;

        // Entry 'DISPLAY_CODE': '<S680>:501'
        MX_Gtwy_Control_DWork.KSChangeDisp = DISPLAY_CODE;
      } else {
        if (state_KSLock != KS_NOTHING) {
          // Transition: '<S680>:65'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
            MX_Gtwy_Co_IN_WAIT_UNLOCK_CHART;

          // Entry 'WAIT_UNLOCK_CHART': '<S680>:26'
          state_KSPassword = ENTER_PWD;
        }
      }
      break;

     case MX_Gtwy_Control_IN_WAIT_UNLOCK:
      // During 'WAIT_UNLOCK': '<S680>:5'
      if (MX_Gtwy_Control_DWork.temporalCounter_i2 >=
          CONSTANT_DATA->KEYPAD_ENTER_TIME) {
        // Transition: '<S680>:90'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
          MX_Gtwy_Control_IN_FAIL_nxgn;
        MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;

        // Entry 'FAIL': '<S680>:28'
        state_KSPassword = FAIL;
      } else {
        if (pwd_Position == MAX_PWD_CHAR) {
          // Transition: '<S680>:66'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
            MX_Gtwy_Control_IN_GOOD_UNLOCK;
          MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;

          // Entry Internal 'GOOD_UNLOCK': '<S680>:27'
          // Transition: '<S680>:76'
          if (((ee_OwnerPassword[0] == pwd_Keyless[0]) && (ee_OwnerPassword[1] ==
                pwd_Keyless[1]) && (ee_OwnerPassword[2] == pwd_Keyless[2]) &&
               (ee_OwnerPassword[3] == pwd_Keyless[3]) && (ee_OwnerPassword[4] ==
                pwd_Keyless[4])) || ((ee_MasterPassword[0] == pwd_Keyless[0]) &&
               (ee_MasterPassword[1] == pwd_Keyless[1]) && (ee_MasterPassword[2]
                == pwd_Keyless[2]) && (ee_MasterPassword[3] == pwd_Keyless[3]) &&
               (ee_MasterPassword[4] == pwd_Keyless[4])) || (((state_KSLock ==
                 KS_UNLOCK) || (state_KSLock == KS_LOCK)) &&
               (((ee_User1Password[0] == pwd_Keyless[0]) && (ee_User1Password[1]
                  == pwd_Keyless[1]) && (ee_User1Password[2] == pwd_Keyless[2]) &&
                 (ee_User1Password[3] == pwd_Keyless[3]) && (ee_User1Password[4]
                  == pwd_Keyless[4])) || ((ee_User2Password[0] == pwd_Keyless[0])
                 && (ee_User2Password[1] == pwd_Keyless[1]) &&
                 (ee_User2Password[2] == pwd_Keyless[2]) && (ee_User2Password[3]
                  == pwd_Keyless[3]) && (ee_User2Password[4] == pwd_Keyless[4])))))
          {
            // Transition: '<S680>:78'
            // Transition: '<S680>:400'
            // Transition: '<S680>:397'
            // Transition: '<S680>:79'
            state_KSPassword = PASS;

            // Transition: '<S680>:80'
          } else {
            // Transition: '<S680>:396'
            // Transition: '<S680>:77'
            state_KSPassword = FAIL;
          }
        }
      }
      break;

     default:
      // During 'WAIT_UNLOCK_CHART': '<S680>:26'
      if ((int32_T)pwd_Position != 0) {
        // Transition: '<S680>:38'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_PASSWORD =
          MX_Gtwy_Control_IN_WAIT_UNLOCK;
        MX_Gtwy_Control_DWork.temporalCounter_i2 = 0U;
      }
      break;
    }

    // During 'KS_LOCK': '<S680>:8'
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK) {
     case MX_Gtwy_Con_IN_BUTTON_CHANGE_DB:
      // During 'BUTTON_CHANGE_DB': '<S680>:6'
      if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) == 0) ||
          ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK) == 0)
          || (state_KeylessPanel != NORMAL)) {
        // Transition: '<S680>:45'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S680>:3'
        state_KSLock = KS_NOTHING;
      } else if ((int32_T)MX_Gtwy_Control_DWork.debounceCount >= 200) {
        // Transition: '<S680>:46'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_CHANGE_hqcz;

        // Entry 'CHANGE': '<S680>:7'
        state_KSLock = KS_CHANGE;
      } else {
        MX_Gtwy_Control_DWork.debounceCount = (uint16_T)(int32_T)((int32_T)
          MX_Gtwy_Control_DWork.debounceCount + 1);
      }
      break;

     case MX_Gtwy_Control_IN_CHANGE_hqcz:
      state_KSLock = KS_CHANGE;

      // During 'CHANGE': '<S680>:7'
      if (((int32_T)state_KSPassword == 0) || (state_KSPassword == FAIL)) {
        // Transition: '<S680>:47'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S680>:3'
        state_KSLock = KS_NOTHING;
      }
      break;

     case MX_Gtwy_Control_IN_Init_k1cp:
      state_KSLock = KS_NOTHING;

      // During 'Init': '<S680>:531'
      if (flag_InitEERead) {
        // Transition: '<S680>:532'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S680>:3'
      }
      break;

     case MX_Gtwy_Control_IN_LOCK_o1ud:
      state_KSLock = KS_LOCK_MACHINE;

      // During 'LOCK': '<S680>:1'
      if (eeMirror.passwordLock == LOCKED) {
        // Transition: '<S680>:39'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_MACHINE_LOCK;

        // Entry 'MACHINE_LOCK': '<S680>:31'
        state_KSLock = KS_LOCK;
      } else {
        if (state_KSPassword == FAIL) {
          // Transition: '<S680>:37'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
            MX_Gtwy_Control_IN_NOTHING_njh0;

          // Entry 'NOTHING': '<S680>:3'
          state_KSLock = KS_NOTHING;
        }
      }
      break;

     case MX_Gtwy_Control_IN_LOCK_DB:
      // During 'LOCK_DB': '<S680>:296'
      if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK) ==
          (int32_T)KEYPAD_UNLOCK_PRESSED) {
        // Transition: '<S680>:301'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S680>:3'
        state_KSLock = KS_NOTHING;
      } else {
        if ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj >= 50) {
          // Transition: '<S680>:299'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
            MX_Gtwy_Control_IN_LOCK_o1ud;

          // Entry 'LOCK': '<S680>:1'
          state_KSLock = KS_LOCK_MACHINE;
        }
      }
      break;

     case MX_Gtwy_Control_IN_MACHINE_LOCK:
      state_KSLock = KS_LOCK;

      // During 'MACHINE_LOCK': '<S680>:31'
      if (eeMirror.passwordLock == INACTIVE) {
        // Transition: '<S680>:89'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S680>:3'
        state_KSLock = KS_NOTHING;
      } else {
        if (state_KSPassword == PASS) {
          // Transition: '<S680>:87'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
            MX_Gtwy_Contr_IN_MACHINE_UNLOCK;

          // Entry 'MACHINE_UNLOCK': '<S680>:33'
          state_KSLock = KS_UNLOCK;
        }
      }
      break;

     case MX_Gtwy_Contr_IN_MACHINE_UNLOCK:
      state_KSLock = KS_UNLOCK;

      // During 'MACHINE_UNLOCK': '<S680>:33'
      if ((state_MachineLock == UNLOCK) || (eeMirror.passwordLock == INACTIVE))
      {
        // Transition: '<S680>:88'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S680>:3'
        state_KSLock = KS_NOTHING;
      }
      break;

     case MX_Gtwy_Control_IN_NOTHING_njh0:
      state_KSLock = KS_NOTHING;

      // During 'NOTHING': '<S680>:3'
      if ((state_MachineLock == LOCKED) && (eeMirror.passwordLock == ACTIVE)) {
        // Transition: '<S680>:81'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_MACHINE_LOCK;

        // Entry 'MACHINE_LOCK': '<S680>:31'
        state_KSLock = KS_LOCK;
      } else if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                  == (int32_T)KEYPAD_UNLOCK_PRESSED) && ((int32_T)((int32_T)
                   can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) == 0) &&
                 (eeMirror.passwordLock == LOCKED) && (state_KeylessPanel ==
                  NORMAL) && ((MX_Gtwy_Control_B.UnitDelay1_gwnh ==
                   ENGINE_NOT_RUNNING) || (MX_Gtwy_Control_B.UnitDelay1_gwnh ==
                   ENGINE_INITIALIZE))) {
        // Transition: '<S680>:40'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_UNLOCK_DB;
        MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj = 0U;
      } else if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) ==
                  (int32_T)KEYPAD_LOCK_PRESSED) && ((int32_T)((int32_T)
                   can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK) == (int32_T)
                  KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel == NORMAL) &&
                 ((MX_Gtwy_Control_B.UnitDelay1_gwnh == ENGINE_NOT_RUNNING) ||
                  (MX_Gtwy_Control_B.UnitDelay1_gwnh == ENGINE_INITIALIZE))) {
        // Transition: '<S680>:44'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Con_IN_BUTTON_CHANGE_DB;

        // Entry 'BUTTON_CHANGE_DB': '<S680>:6'
        MX_Gtwy_Control_DWork.debounceCount = 0U;
      } else {
        if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) ==
             (int32_T)KEYPAD_LOCK_PRESSED) && ((int32_T)((int32_T)can_Keypad[2]
              & (int32_T)KEYPAD_UNLOCK_MASK) == 0) && (eeMirror.passwordLock ==
             UNLOCK) && (state_KeylessPanel == NORMAL) &&
            ((MX_Gtwy_Control_B.UnitDelay1_gwnh == ENGINE_NOT_RUNNING) ||
             (MX_Gtwy_Control_B.UnitDelay1_gwnh == ENGINE_INITIALIZE))) {
          // Transition: '<S680>:35'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
            MX_Gtwy_Control_IN_LOCK_DB;
          MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj = 0U;
        }
      }
      break;

     case MX_Gtwy_Control_IN_UNLOCK_gi5x:
      state_KSLock = KS_UNLOCK_MACHINE;

      // During 'UNLOCK': '<S680>:2'
      if ((eeMirror.passwordLock == UNLOCK) || (state_KSPassword == FAIL)) {
        // Transition: '<S680>:43'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S680>:3'
        state_KSLock = KS_NOTHING;
      }
      break;

     default:
      // During 'UNLOCK_DB': '<S680>:294'
      if ((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i3_mfuj >= 50) {
        // Transition: '<S680>:295'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
          MX_Gtwy_Control_IN_UNLOCK_gi5x;

        // Entry 'UNLOCK': '<S680>:2'
        state_KSLock = KS_UNLOCK_MACHINE;
      } else {
        if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) ==
            (int32_T)KEYPAD_LOCK_PRESSED) {
          // Transition: '<S680>:300'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KS_LOCK =
            MX_Gtwy_Control_IN_NOTHING_njh0;

          // Entry 'NOTHING': '<S680>:3'
          state_KSLock = KS_NOTHING;
        }
      }
      break;
    }

    // During 'KS_DISPLAY': '<S680>:184'
    if (MX_Gtwy_Control_DWork.bitsForTID0.is_KS_DISPLAY ==
        MX_Gtwy_Control_IN_CODE_ERROR1) {
      // During 'CODE_ERROR1': '<S680>:302'
    } else {
      // During 'CODE_ERROR2': '<S680>:303'
      if (state_KeylessPanel == NO_COMMUNICATION) {
        // Transition: '<S680>:305'
        // Exit Internal 'CODE_ERROR2': '<S680>:303'
        MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'PASSWORD': '<S680>:211'
        MX_Gtwy_Control_DWork.bitsForTID0.is_PASSWORD =
          MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gtwy_Control_DWork.bitsForTID0.is_KS_DISPLAY =
          MX_Gtwy_Control_IN_CODE_ERROR1;

        // Entry 'CODE_ERROR1': '<S680>:302'
        KSS_Display = DISPLAY_DELUXE_ERROR;
      } else {
        switch (MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2) {
         case MX_Gtwy_Control_IN_CHANGE:
          // During 'CHANGE': '<S680>:200'
          if (state_KSPassword == FAIL) {
            // Transition: '<S680>:191'
            MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
              MX_Gtwy_Control_IN_CODE_ERROR;
            MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 = 0U;

            // Entry 'CODE_ERROR': '<S680>:210'
            KSS_Display = DISPLAY_ERROR;
          } else if (state_KSLock == KS_NOTHING) {
            // Transition: '<S680>:193'
            MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
              MX_Gtwy_Control_IN_NOORMAL;

            // Entry 'NOORMAL': '<S680>:218'
            KSS_Display = INACTIVE;
          } else {
            KSS_Display = MX_Gtwy_Control_DWork.KSChangeDisp;
          }
          break;

         case MX_Gtwy_Control_IN_CODE_ERROR:
          // During 'CODE_ERROR': '<S680>:210'
          if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 >= 100) &&
              (state_KSPassword != FAIL)) {
            // Transition: '<S680>:192'
            MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
              MX_Gtwy_Control_IN_NOORMAL;

            // Entry 'NOORMAL': '<S680>:218'
            KSS_Display = INACTIVE;
          }
          break;

         case MX_Gtwy_Control_IN_NOORMAL:
          // During 'NOORMAL': '<S680>:218'
          if (state_KSLock == KS_CHANGE) {
            // Transition: '<S680>:194'
            MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
              MX_Gtwy_Control_IN_CHANGE;
          } else {
            if ((eeMirror.keypad != INACTIVE) && ((((int32_T)state_MachineLock
                   != 0) && (state_KSLock == KS_LOCK)) || (state_KSLock ==
                  KS_UNLOCK_MACHINE) || (state_KSLock == KS_LOCK_MACHINE))) {
              // Transition: '<S680>:196'
              MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
                MX_Gtwy_Control_IN_PASSWORD;
              MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 = 0U;

              // Entry Internal 'PASSWORD': '<S680>:211'
              // Transition: '<S680>:212'
              MX_Gtwy_Control_DWork.bitsForTID0.is_PASSWORD =
                MX_Gtwy_Control_IN_CODE;

              // Entry 'CODE': '<S680>:216'
              KSS_Display = DISPLAY_CODE;
            }
          }
          break;

         default:
          // During 'PASSWORD': '<S680>:211'
          if (state_KSPassword == FAIL) {
            // Transition: '<S680>:187'
            // Exit Internal 'PASSWORD': '<S680>:211'
            MX_Gtwy_Control_DWork.bitsForTID0.is_PASSWORD =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
            MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
              MX_Gtwy_Control_IN_CODE_ERROR;
            MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 = 0U;

            // Entry 'CODE_ERROR': '<S680>:210'
            KSS_Display = DISPLAY_ERROR;
          } else if (((int32_T)MX_Gtwy_Control_DWork.temporalCounter_i4_j2w2 >=
                      50) && ((!((int32_T)state_MachineLock != 0)) &&
                              ((state_KSLock == KS_UNLOCK) || (state_KSLock ==
                        KS_NOTHING)) && (state_KSPassword != FAIL))) {
            // Transition: '<S680>:198'
            // Exit Internal 'PASSWORD': '<S680>:211'
            MX_Gtwy_Control_DWork.bitsForTID0.is_PASSWORD =
              MX_Gtwy_IN_NO_ACTIVE_CHILD_f01i;
            MX_Gtwy_Control_DWork.bitsForTID0.is_CODE_ERROR2 =
              MX_Gtwy_Control_IN_NOORMAL;

            // Entry 'NOORMAL': '<S680>:218'
            KSS_Display = INACTIVE;
          } else if ((MX_Gtwy_Control_DWork.bitsForTID0.is_PASSWORD ==
                      MX_Gtwy_Control_IN_ASTERISK) || (!((int32_T)pwd_Position
                       != 0))) {
            // During 'ASTERISK': '<S680>:217'
          } else {
            // During 'CODE': '<S680>:216'
            // Transition: '<S680>:214'
            MX_Gtwy_Control_DWork.bitsForTID0.is_PASSWORD =
              MX_Gtwy_Control_IN_ASTERISK;

            // Entry 'ASTERISK': '<S680>:217'
            KSS_Display = DISPLAY_ASTERISK;
          }
          break;
        }
      }
    }
  }

  // End of Chart: '<S630>/Panel_Lock'
}

// System initialize for atomic system: '<S6>/Machine_Lock'
void MX_Gtwy_Contr_Machine_Lock_Init(void)
{
  // SystemInitialize for Chart: '<S631>/Lock_Status'
  MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55 =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ja4m;
  MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_GENV_DELUXE =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ja4m;
  MX_Gtwy_Control_DWork.bitsForTID0.is_active_c7_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID0.is_c7_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_ja4m;
  state_MachineLock = 0U;
}

// Output and update for atomic system: '<S6>/Machine_Lock'
void MX_Gtwy_Control_Machine_Lock(void)
{
  // Chart: '<S631>/Lock_Status' incorporates:
  //   Inport: '<Root>/auth_DeluxeG55'
  //   Inport: '<Root>/ddp_MachineLock'
  //   Inport: '<Root>/flag_InitEERead'
  //   Inport: '<Root>/state_DeluxeG5'
  //   Inport: '<Root>/state_DeluxeG55'
  //   Inport: '<Root>/state_KeylessPanel'
  //   Inport: '<Root>/state_System'

  // Gateway: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
  // During: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID0.is_active_c7_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
    MX_Gtwy_Control_DWork.bitsForTID0.is_active_c7_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
    // Transition: '<S681>:82'
    MX_Gtwy_Control_DWork.bitsForTID0.is_c7_MX_Gtwy_Control =
      MX_Gtwy__IN_NON_FUNCTIONAL_iweg;

    // Entry 'NON_FUNCTIONAL': '<S681>:81'
    state_MachineLock = ACTIVE;
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID0.is_c7_MX_Gtwy_Control) {
     case MX_Gtwy_Control_IN_DELUXE_G55:
      // During 'DELUXE_G55': '<S681>:61'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55 ==
          MX_Gtwy_Control_IN_LOCK_pixy) {
        state_MachineLock = ACTIVE;

        // During 'LOCK': '<S681>:79'
        if ((state_System == SYS_NORMAL) && (MX_Gtwy_Control_B.UnitDelay10_kkg2 ==
             NORMAL) && (state_DeluxeG55 == DELUXE_G55_FUNCTION_UNLOCKED) &&
            (auth_DeluxeG55 == AUTHENTICATED)) {
          // Transition: '<S681>:68'
          MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55 =
            MX_Gtwy_Control_IN_UNLOCK_dcz1;

          // Entry 'UNLOCK': '<S681>:80'
          state_MachineLock = INACTIVE;
        }
      } else {
        state_MachineLock = INACTIVE;

        // During 'UNLOCK': '<S681>:80'
      }
      break;

     case MX_Gtwy__IN_KEYLESS_GENV_DELUXE:
      // During 'KEYLESS_GENV_DELUXE': '<S681>:60'
      if (MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_GENV_DELUXE ==
          MX_Gtwy_Control_IN_LOCK_pixy) {
        state_MachineLock = ACTIVE;

        // During 'LOCK': '<S681>:1'
        if (flag_InitEERead && (state_System == SYS_NORMAL) && (((!((int32_T)
                eeMirror.keypad != 0)) && (!((int32_T)eeMirror.deluxe_G5 != 0)) &&
              (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL)) ||
             (eeMirror.passwordLock == INACTIVE) || (((int32_T)eeMirror.keypad
               != 0) && (state_KeylessPanel == NORMAL) &&
              (MX_Gtwy_Control_B.UnitDelay2_nwqf == KS_UNLOCK)) || (((int32_T)
               eeMirror.deluxe_G5 != 0) && (state_DeluxeG5 == NORMAL) &&
              ((int32_T)ddp_MachineLock != 0)))) {
          // Transition: '<S681>:40'
          // no devices on machine that require locking
          // Transition: '<S681>:43'
          // Transition: '<S681>:46'
          // Transition: '<S681>:49'
          // Transition: '<S681>:52'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_GENV_DELUXE =
            MX_Gtwy_Control_IN_UNLOCK_dcz1;

          // Entry 'UNLOCK': '<S681>:2'
          state_MachineLock = INACTIVE;
        } else {
          // Transition: '<S681>:45'
          // No password lock
          // Transition: '<S681>:48'
          // Keyless Keypad installed, communicating and unlocked
          // Transition: '<S681>:51'
          // Gen 5 Deluxe installed, communicating and unlocked
        }
      } else {
        state_MachineLock = INACTIVE;

        // During 'UNLOCK': '<S681>:2'
        if ((eeMirror.keypad == ACTIVE) && (MX_Gtwy_Control_B.UnitDelay2_nwqf ==
             KS_LOCK)) {
          // Transition: '<S681>:4'
          MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_GENV_DELUXE =
            MX_Gtwy_Control_IN_LOCK_pixy;

          // Entry 'LOCK': '<S681>:1'
          state_MachineLock = ACTIVE;
        }
      }
      break;

     default:
      state_MachineLock = ACTIVE;

      // During 'NON_FUNCTIONAL': '<S681>:81'
      if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S681>:85'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c7_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_DELUXE_G55;

        // Entry Internal 'DELUXE_G55': '<S681>:61'
        // Transition: '<S681>:67'
        MX_Gtwy_Control_DWork.bitsForTID0.is_DELUXE_G55 =
          MX_Gtwy_Control_IN_LOCK_pixy;

        // Entry 'LOCK': '<S681>:79'
      } else {
        // Transition: '<S681>:83'
        MX_Gtwy_Control_DWork.bitsForTID0.is_c7_MX_Gtwy_Control =
          MX_Gtwy__IN_KEYLESS_GENV_DELUXE;

        // Entry Internal 'KEYLESS_GENV_DELUXE': '<S681>:60'
        // Transition: '<S681>:3'
        MX_Gtwy_Control_DWork.bitsForTID0.is_KEYLESS_GENV_DELUXE =
          MX_Gtwy_Control_IN_LOCK_pixy;

        // Entry 'LOCK': '<S681>:1'
      }
      break;
    }
  }

  // End of Chart: '<S631>/Lock_Status'
}

// System initialize for atomic system: '<S6>/Throttle_Command'
void MX_Gtwy_C_Throttle_Command_Init(void)
{
  // SystemInitialize for Chart: '<S632>/Throttle_Command'
  MX_Gtwy_Control_DWork.bitsForTID1.is_CAN_Throttle_Actuator =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_G2_Engine =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_gtqy =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_COLD = MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_EXTREMELY_COLD =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_Throttle_Actuator =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.bitsForTID1.is_active_c98_MX_Gtwy_Control = 0U;
  MX_Gtwy_Control_DWork.bitsForTID1.is_c98_MX_Gtwy_Control =
    MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gtwy_Control_DWork.Throttle_diff = 0;
  MX_Gtwy_Control_DWork.Throttle_old = 0U;
  MX_Gtwy_Control_DWork.debounceEvent = 0U;
  MX_Gtwy_Control_DWork.debounceTC = 0U;
  cmd_Throttle = 0U;
  state_TC = 0U;
}

// Output and update for atomic system: '<S6>/Throttle_Command'
void MX_Gtwy_Contro_Throttle_Command(void)
{
  // Chart: '<S632>/Throttle_Command'
  // Gateway: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
  // During: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
  if ((uint32_T)MX_Gtwy_Control_DWork.bitsForTID1.is_active_c98_MX_Gtwy_Control ==
      0U) {
    // Entry: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
    MX_Gtwy_Control_DWork.bitsForTID1.is_active_c98_MX_Gtwy_Control = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
    // Transition: '<S682>:121'
    if (CONSTANT_DATA->THROTTLE_PRIMARY_FUNCTION == NON_FUNCTIONAL) {
      // Transition: '<S682>:140'
      MX_Gtwy_Control_DWork.bitsForTID1.is_c98_MX_Gtwy_Control =
        MX_Gtwy_Co_IN_Throttle_Actuator;

      // Entry Internal 'Throttle_Actuator': '<S682>:120'
      // Transition: '<S682>:127'
      MX_Gtwy_Control_DWork.bitsForTID1.is_Throttle_Actuator =
        MX_Gtwy_Control_IN_Normal_bkdx;

      // Entry 'Normal': '<S682>:125'
      cmd_Throttle = WORD_UNAVAIL;
    } else {
      // Transition: '<S682>:142'
      if (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S682>:143'
        MX_Gtwy_Control_DWork.bitsForTID1.is_c98_MX_Gtwy_Control =
          MX_Gtwy_Control_IN_G2_Engine;

        // Entry Internal 'G2_Engine': '<S682>:131'
        // Transition: '<S682>:179'
        MX_Gtwy_Control_DWork.bitsForTID1.is_G2_Engine =
          MX_Gtwy_Control_IN_WAIT_FOR_EOT;

        // Entry 'WAIT_FOR_EOT': '<S682>:157'
        cmd_Throttle = 0U;
        MX_Gtwy_Control_DWork.debounceTC = 0U;
        state_TC = INACTIVE;
      } else {
        // Transition: '<S682>:145'
        if (CONSTANT_DATA->CAN_THROTTLE_FUNCTION != NON_FUNCTIONAL) {
          // Transition: '<S682>:146'
          MX_Gtwy_Control_DWork.bitsForTID1.is_c98_MX_Gtwy_Control =
            MX_Gtw_IN_CAN_Throttle_Actuator;

          // Entry Internal 'CAN_Throttle_Actuator': '<S682>:130'
          // Transition: '<S682>:134'
          MX_Gtwy_Control_DWork.bitsForTID1.is_CAN_Throttle_Actuator =
            MX_Gtwy_Contro_IN_Normal_bkdx2g;

          // Entry 'Normal': '<S682>:132'
          cmd_Throttle = MX_Gtwy_Control_B.OutportBufferForcmd_CANThrottle;
        } else {
          // Transition: '<S682>:148'
          MX_Gtwy_Control_DWork.bitsForTID1.is_c98_MX_Gtwy_Control =
            MX_Gtwy_Control_IN_Invalid_nww4;

          // Entry 'Invalid': '<S682>:147'
          cmd_Throttle = CONSTANT_DATA->LOW_IDLE_COMMAND;
        }
      }
    }
  } else {
    switch (MX_Gtwy_Control_DWork.bitsForTID1.is_c98_MX_Gtwy_Control) {
     case MX_Gtw_IN_CAN_Throttle_Actuator:
      // During 'CAN_Throttle_Actuator': '<S682>:130'
      switch (MX_Gtwy_Control_DWork.bitsForTID1.is_CAN_Throttle_Actuator) {
       case MX_Gtwy_Control_IN_AutoIdle:
        // During 'AutoIdle': '<S682>:133'
        if (cmd_AutoIdle != ACTIVE) {
          // Transition: '<S682>:136'
          MX_Gtwy_Control_DWork.bitsForTID1.is_CAN_Throttle_Actuator =
            MX_Gtwy_Contro_IN_Normal_bkdx2g;

          // Entry 'Normal': '<S682>:132'
          cmd_Throttle = MX_Gtwy_Control_B.OutportBufferForcmd_CANThrottle;
        }
        break;

       case MX_Gtwy_Co_IN_AutoIdle_Reversed:
        // During 'AutoIdle_Reversed': '<S682>:212'
        if (cmd_AutoIdle != ACTIVE) {
          // Transition: '<S682>:214'
          MX_Gtwy_Control_DWork.bitsForTID1.is_CAN_Throttle_Actuator =
            MX_Gtwy_Contro_IN_Normal_bkdx2g;

          // Entry 'Normal': '<S682>:132'
          cmd_Throttle = MX_Gtwy_Control_B.OutportBufferForcmd_CANThrottle;
        }
        break;

       default:
        // During 'Normal': '<S682>:132'
        if ((cmd_AutoIdle == ACTIVE) && (CONSTANT_DATA->CAN_THROTTLE_REVERSE ==
             NON_FUNCTIONAL)) {
          // Transition: '<S682>:135'
          MX_Gtwy_Control_DWork.bitsForTID1.is_CAN_Throttle_Actuator =
            MX_Gtwy_Control_IN_AutoIdle;

          // Entry 'AutoIdle': '<S682>:133'
          cmd_Throttle = eeMirror.ee_ThrottleCalExtended;
        } else if ((cmd_AutoIdle == ACTIVE) &&
                   (CONSTANT_DATA->CAN_THROTTLE_REVERSE != NON_FUNCTIONAL)) {
          // Transition: '<S682>:213'
          MX_Gtwy_Control_DWork.bitsForTID1.is_CAN_Throttle_Actuator =
            MX_Gtwy_Co_IN_AutoIdle_Reversed;

          // Entry 'AutoIdle_Reversed': '<S682>:212'
          cmd_Throttle = eeMirror.ee_ThrottleCalRetracted;
        } else {
          cmd_Throttle = MX_Gtwy_Control_B.OutportBufferForcmd_CANThrottle;
        }
        break;
      }
      break;

     case MX_Gtwy_Control_IN_G2_Engine:
      // During 'G2_Engine': '<S682>:131'
      switch (MX_Gtwy_Control_DWork.bitsForTID1.is_G2_Engine) {
       case MX_Gtwy_Control_IN_Normal_bkdx2:
        // During 'Normal': '<S682>:155'
        if (MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_gtqy ==
            MX_Gtwy_Control_IN_AutoIdle) {
          // During 'AutoIdle': '<S682>:100'
          if (cmd_AutoIdle != ACTIVE) {
            // Transition: '<S682>:103'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_gtqy =
              MX_Gtwy_Cont_IN_Normal_Throttle;

            // Entry 'Normal_Throttle': '<S682>:60'
            cmd_Throttle = percent_Throttle;
          }
        } else {
          // During 'Normal_Throttle': '<S682>:60'
          if (cmd_AutoIdle == ACTIVE) {
            // Transition: '<S682>:102'
            MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_gtqy =
              MX_Gtwy_Control_IN_AutoIdle;

            // Entry 'AutoIdle': '<S682>:100'
            cmd_Throttle = CONSTANT_DATA->LOW_IDLE_COMMAND;
          } else {
            cmd_Throttle = percent_Throttle;
          }
        }
        break;

       case MX_Gtwy_Contro_IN_TC_PROTECTION:
        // During 'TC_PROTECTION': '<S682>:158'
        if ((flt_EOP >= CONSTANT_DATA->TC_PROTECT_EOP_LOW) &&
            (MX_Gtwy_Control_B.RateTransition20_mrae == NORMAL) &&
            ((MX_Gtwy_Control_DWork.debounceTC >=
              CONSTANT_DATA->TC_PROTECT_DEBOUNCE_ENABLE) &&
             (CONSTANT_DATA->TC_PROTECT_DEBOUNCE_ENABLE != UNLIMITED))) {
          // Transition: '<S682>:177'
          // Exit Internal 'TC_PROTECTION': '<S682>:158'
          // Exit Internal 'COLD': '<S682>:162'
          MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
          MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;

          // Exit Internal 'EXTREMELY_COLD': '<S682>:168'
          MX_Gtwy_Control_DWork.bitsForTID1.is_EXTREMELY_COLD =
            MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
          MX_Gtwy_Control_DWork.bitsForTID1.is_G2_Engine =
            M_IN_WAIT_FOR_THROTTLE_MOVEMENT;

          // Entry 'WAIT_FOR_THROTTLE_MOVEMENT': '<S682>:174'
          state_TC = NORMAL;
          MX_Gtwy_Control_DWork.Throttle_old = percent_Throttle;
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gtwy_Control_DWork.Throttle_diff = 0;
        } else {
          switch (MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION) {
           case MX_Gtwy_Control_IN_COLD_cwet:
            // During 'COLD': '<S682>:162'
            if (state_EOT == EXTREMELY_LOW) {
              // Transition: '<S682>:161'
              // Exit Internal 'COLD': '<S682>:162'
              MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
              MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION =
                MX_Gtwy_Contr_IN_EXTREMELY_COLD;

              // Entry 'EXTREMELY_COLD': '<S682>:168'
              cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_EXT_LOW;

              // Entry Internal 'EXTREMELY_COLD': '<S682>:168'
              // Transition: '<S682>:169'
              MX_Gtwy_Control_DWork.bitsForTID1.is_EXTREMELY_COLD =
                MX_Gtwy_Contr_IN_CHECK_THROTTLE;

              // Entry 'CHECK_THROTTLE': '<S682>:172'
              state_TC = EXTREMELY_LOW;
              MX_Gtwy_Control_DWork.Throttle_old = percent_Throttle;
            } else if (MX_Gtwy_Control_B.RateTransition10_mue4 != ENGINE_RUNNING)
            {
              // Transition: '<S682>:204'
              // Exit Internal 'COLD': '<S682>:162'
              MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
              MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION =
                MX_Gtwy_Control_IN_TIMER_RESET;
            } else {
              MX_Gtwy_Control_DWork.debounceTC = (uint16_T)(int32_T)((int32_T)
                MX_Gtwy_Control_DWork.debounceTC + 1);
              if (MX_Gtwy_Control_DWork.bitsForTID1.is_COLD ==
                  MX_Gtwy_Contr_IN_CHECK_THROTTLE) {
                // During 'CHECK_THROTTLE': '<S682>:166'
                if ((int32_T)MX_Gtwy_Control_DWork.Throttle_diff >= (int32_T)
                    CONSTANT_DATA->TC_PROTECT_THROTTLE_DIFFERENCE) {
                  // Transition: '<S682>:164'
                  MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
                    MX_Gtwy_Contr_IN_THROTTLE_MOVED;

                  // Entry 'THROTTLE_MOVED': '<S682>:167'
                  state_TC = EVENT;
                  MX_Gtwy_Control_DWork.debounceEvent = 0U;
                  state_Buzzer = TRIPLE_SHORT_BEEP;
                  MX_Gtwy_Control_DWork.Throttle_diff = 0;
                } else {
                  MX_Gtwy_Control_DWork.Throttle_diff = (int16_T)(int32_T)
                    ((int32_T)percent_Throttle - (int32_T)
                     MX_Gtwy_Control_DWork.Throttle_old);
                  if ((int32_T)MX_Gtwy_Control_DWork.Throttle_diff < 0) {
                    MX_Gtwy_Control_DWork.Throttle_diff = (int16_T)(int32_T)
                      -(int32_T)MX_Gtwy_Control_DWork.Throttle_diff;
                  }
                }
              } else {
                // During 'THROTTLE_MOVED': '<S682>:167'
                if ((MX_Gtwy_Control_DWork.debounceEvent >=
                     CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_LOW_EVENT) &&
                    (CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_LOW_EVENT !=
                     UNLIMITED)) {
                  // Transition: '<S682>:165'
                  MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
                    MX_Gtwy_Contr_IN_CHECK_THROTTLE;

                  // Entry 'CHECK_THROTTLE': '<S682>:166'
                  state_TC = LOW;
                  MX_Gtwy_Control_DWork.Throttle_old = percent_Throttle;
                } else {
                  MX_Gtwy_Control_DWork.debounceEvent = (uint16_T)(int32_T)
                    ((int32_T)MX_Gtwy_Control_DWork.debounceEvent + 1);
                }
              }
            }
            break;

           case MX_Gtwy_Contr_IN_EXTREMELY_COLD:
            // During 'EXTREMELY_COLD': '<S682>:168'
            if (state_EOT != EXTREMELY_LOW) {
              // Transition: '<S682>:160'
              // Exit Internal 'EXTREMELY_COLD': '<S682>:168'
              MX_Gtwy_Control_DWork.bitsForTID1.is_EXTREMELY_COLD =
                MX_Gtwy_IN_NO_ACTIVE_CHILD_c3pq;
              MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION =
                MX_Gtwy_Control_IN_COLD_cwet;

              // Entry 'COLD': '<S682>:162'
              cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_LOW;
              MX_Gtwy_Control_DWork.debounceTC = 0U;

              // Entry Internal 'COLD': '<S682>:162'
              // Transition: '<S682>:163'
              MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
                MX_Gtwy_Contr_IN_CHECK_THROTTLE;

              // Entry 'CHECK_THROTTLE': '<S682>:166'
              state_TC = LOW;
              MX_Gtwy_Control_DWork.Throttle_old = percent_Throttle;
            } else if (MX_Gtwy_Control_DWork.bitsForTID1.is_EXTREMELY_COLD ==
                       MX_Gtwy_Contr_IN_CHECK_THROTTLE) {
              // During 'CHECK_THROTTLE': '<S682>:172'
              if ((int32_T)MX_Gtwy_Control_DWork.Throttle_diff >= (int32_T)
                  CONSTANT_DATA->TC_PROTECT_THROTTLE_DIFFERENCE) {
                // Transition: '<S682>:170'
                MX_Gtwy_Control_DWork.bitsForTID1.is_EXTREMELY_COLD =
                  MX_Gtwy_Contr_IN_THROTTLE_MOVED;

                // Entry 'THROTTLE_MOVED': '<S682>:173'
                state_TC = EVENT;
                MX_Gtwy_Control_DWork.debounceEvent = 0U;
                state_Buzzer = TRIPLE_SHORT_BEEP;
                MX_Gtwy_Control_DWork.Throttle_diff = 0;
              } else {
                MX_Gtwy_Control_DWork.Throttle_diff = (int16_T)(int32_T)
                  ((int32_T)percent_Throttle - (int32_T)
                   MX_Gtwy_Control_DWork.Throttle_old);
                if ((int32_T)MX_Gtwy_Control_DWork.Throttle_diff < 0) {
                  MX_Gtwy_Control_DWork.Throttle_diff = (int16_T)(int32_T)
                    -(int32_T)MX_Gtwy_Control_DWork.Throttle_diff;
                }
              }
            } else {
              // During 'THROTTLE_MOVED': '<S682>:173'
              if ((MX_Gtwy_Control_DWork.debounceEvent >=
                   CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_EXT_LOW_EVENT) &&
                  (CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_EXT_LOW_EVENT !=
                   UNLIMITED)) {
                // Transition: '<S682>:171'
                MX_Gtwy_Control_DWork.bitsForTID1.is_EXTREMELY_COLD =
                  MX_Gtwy_Contr_IN_CHECK_THROTTLE;

                // Entry 'CHECK_THROTTLE': '<S682>:172'
                state_TC = EXTREMELY_LOW;
                MX_Gtwy_Control_DWork.Throttle_old = percent_Throttle;
              } else {
                MX_Gtwy_Control_DWork.debounceEvent = (uint16_T)(int32_T)
                  ((int32_T)MX_Gtwy_Control_DWork.debounceEvent + 1);
              }
            }
            break;

           default:
            // During 'TIMER_RESET': '<S682>:203'
            if (MX_Gtwy_Control_B.RateTransition10_mue4 == ENGINE_RUNNING) {
              // Transition: '<S682>:205'
              MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION =
                MX_Gtwy_Control_IN_COLD_cwet;

              // Entry 'COLD': '<S682>:162'
              cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_LOW;
              MX_Gtwy_Control_DWork.debounceTC = 0U;

              // Entry Internal 'COLD': '<S682>:162'
              // Transition: '<S682>:163'
              MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
                MX_Gtwy_Contr_IN_CHECK_THROTTLE;

              // Entry 'CHECK_THROTTLE': '<S682>:166'
              state_TC = LOW;
              MX_Gtwy_Control_DWork.Throttle_old = percent_Throttle;
            }
            break;
          }
        }
        break;

       case MX_Gtwy_Control_IN_WAIT_FOR_EOT:
        // During 'WAIT_FOR_EOT': '<S682>:157'
        if (((state_EOT == NORMAL) && (MX_Gtwy_Control_B.RateTransition10_mue4 ==
              ENGINE_RUNNING)) || (CONSTANT_DATA->TC_PROTECT_FUNCTION ==
             NON_FUNCTIONAL)) {
          // Transition: '<S682>:180'
          MX_Gtwy_Control_DWork.bitsForTID1.is_G2_Engine =
            MX_Gtwy_Control_IN_Normal_bkdx2;

          // Entry Internal 'Normal': '<S682>:155'
          // Transition: '<S682>:63'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_gtqy =
            MX_Gtwy_Cont_IN_Normal_Throttle;

          // Entry 'Normal_Throttle': '<S682>:60'
          cmd_Throttle = percent_Throttle;
        } else {
          if (((state_EOT == LOW) || (state_EOT == EXTREMELY_LOW)) &&
              (CONSTANT_DATA->TC_PROTECT_FUNCTION != NON_FUNCTIONAL) &&
              (MX_Gtwy_Control_B.RateTransition10_mue4 == ENGINE_RUNNING)) {
            // Transition: '<S682>:175'
            MX_Gtwy_Control_DWork.bitsForTID1.is_G2_Engine =
              MX_Gtwy_Contro_IN_TC_PROTECTION;

            // Entry Internal 'TC_PROTECTION': '<S682>:158'
            // Transition: '<S682>:159'
            MX_Gtwy_Control_DWork.bitsForTID1.is_TC_PROTECTION =
              MX_Gtwy_Control_IN_COLD_cwet;

            // Entry 'COLD': '<S682>:162'
            cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_LOW;
            MX_Gtwy_Control_DWork.debounceTC = 0U;

            // Entry Internal 'COLD': '<S682>:162'
            // Transition: '<S682>:163'
            MX_Gtwy_Control_DWork.bitsForTID1.is_COLD =
              MX_Gtwy_Contr_IN_CHECK_THROTTLE;

            // Entry 'CHECK_THROTTLE': '<S682>:166'
            state_TC = LOW;
            MX_Gtwy_Control_DWork.Throttle_old = percent_Throttle;
          }
        }
        break;

       default:
        // During 'WAIT_FOR_THROTTLE_MOVEMENT': '<S682>:174'
        if ((int32_T)MX_Gtwy_Control_DWork.Throttle_diff >= (int32_T)
            CONSTANT_DATA->TC_PROTECT_THROTTLE_DIFFERENCE) {
          // Transition: '<S682>:178'
          MX_Gtwy_Control_DWork.bitsForTID1.is_G2_Engine =
            MX_Gtwy_Control_IN_Normal_bkdx2;

          // Entry Internal 'Normal': '<S682>:155'
          // Transition: '<S682>:63'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Normal_gtqy =
            MX_Gtwy_Cont_IN_Normal_Throttle;

          // Entry 'Normal_Throttle': '<S682>:60'
          cmd_Throttle = percent_Throttle;
        } else {
          MX_Gtwy_Control_DWork.Throttle_diff = (int16_T)(int32_T)((int32_T)
            percent_Throttle - (int32_T)MX_Gtwy_Control_DWork.Throttle_old);
          if ((int32_T)MX_Gtwy_Control_DWork.Throttle_diff < 0) {
            MX_Gtwy_Control_DWork.Throttle_diff = (int16_T)(int32_T)-(int32_T)
              MX_Gtwy_Control_DWork.Throttle_diff;
          }
        }
        break;
      }
      break;

     case MX_Gtwy_Control_IN_Invalid_nww4:
      // During 'Invalid': '<S682>:147'
      break;

     default:
      // During 'Throttle_Actuator': '<S682>:120'
      if (MX_Gtwy_Control_DWork.bitsForTID1.is_Throttle_Actuator ==
          MX_Gtwy_Control_IN_AutoIdle) {
        // During 'AutoIdle': '<S682>:126'
        if (cmd_AutoIdle != ACTIVE) {
          // Transition: '<S682>:129'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Throttle_Actuator =
            MX_Gtwy_Control_IN_Normal_bkdx;

          // Entry 'Normal': '<S682>:125'
          cmd_Throttle = WORD_UNAVAIL;
        }
      } else {
        // During 'Normal': '<S682>:125'
        if (cmd_AutoIdle == ACTIVE) {
          // Transition: '<S682>:128'
          MX_Gtwy_Control_DWork.bitsForTID1.is_Throttle_Actuator =
            MX_Gtwy_Control_IN_AutoIdle;

          // Entry 'AutoIdle': '<S682>:126'
          cmd_Throttle = CONSTANT_DATA->LOW_IDLE_COMMAND;
        }
      }
      break;
    }
  }

  // End of Chart: '<S632>/Throttle_Command'
}

//
//  [EOF]

