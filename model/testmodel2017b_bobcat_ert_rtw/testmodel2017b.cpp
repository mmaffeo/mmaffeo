//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : testmodel2017b


#include "testmodel2017b.h"
#include "testmodel2017b_private.h"

// Named constants for Chart: '<S1>/Chart'
#define testmodel2017b_IN_GOTO_READY   ((uint8_T)2U)
#define testmodel2017b_IN_GOTO_RUN     ((uint8_T)3U)
#define testmodel2017b_IN_OPERATIONAL  ((uint8_T)4U)
#define testmodel2017b_IN_READY        ((uint8_T)5U)
#define testmodel2017b_IN_RUN          ((uint8_T)6U)
#define testmodel2017b_IN_STOP         ((uint8_T)7U)
#define testmodel201_IN_NO_ACTIVE_CHILD ((uint8_T)0U)
#define testmodel20_IN_GOTO_OPERATIONAL ((uint8_T)1U)

// Named constants for State Transition Table: '<S1>/State Transition Table'
#define testmodel2017b_IN_READY_egk1   ((uint8_T)2U)
#define testmodel2017b_IN_RUN_nzix     ((uint8_T)3U)
#define testmodel2017b_IN_STOP_d3ri    ((uint8_T)4U)
#define testmodel20_IN_OPERATIONAL_c1g0 ((uint8_T)1U)

// Exported block signals
real_T cmdInverter;                    // '<S1>/Chart'

// Block signals (auto storage)
BlockIO_testmodel2017b_T testmodel2017b_B;

// Block states (auto storage)
D_Work_testmodel2017b_T testmodel2017b_DWork;

// Real-time model
RT_MODEL_testmodel2017b_T testmodel2017b_M_;
RT_MODEL_testmodel2017b_T *const testmodel2017b_M = &testmodel2017b_M_;

// Model step function
void testmodel2017b_step(void)
{
  // FromWorkspace: '<S3>/FromWs'
  {
    real_T *pDataValues = (real_T *) testmodel2017b_DWork.FromWs_PWORK.DataPtr;
    real_T *pTimeValues = (real_T *) testmodel2017b_DWork.FromWs_PWORK.TimePtr;
    int_T currTimeIndex = testmodel2017b_DWork.FromWs_IWORK.PrevIndex;
    real_T t = testmodel2017b_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[117]) {
      currTimeIndex = 116;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    testmodel2017b_DWork.FromWs_IWORK.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 5; ++elIdx) {
              (&testmodel2017b_B.FromWs[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 118;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 5; ++elIdx) {
              (&testmodel2017b_B.FromWs[0])[elIdx] = pDataValues[currTimeIndex +
                1];
              pDataValues += 118;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 5; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&testmodel2017b_B.FromWs[0])[elIdx] = (real_T) rtInterpolate(d1, d2,
              f1, f2);
            pDataValues += 118;
          }
        }
      }
    }
  }

  // State Transition Table: '<S1>/State Transition Table' incorporates:
  //   Constant: '<S1>/ActualState'
  //   Constant: '<S1>/requested_State'

  // Gateway: Subsystem/State Transition Table
  // During: Subsystem/State Transition Table
  if ((uint32_T)testmodel2017b_DWork.bitsForTID1.is_active_c4_testmodel2017b ==
      0U) {
    // Entry: Subsystem/State Transition Table
    testmodel2017b_DWork.bitsForTID1.is_active_c4_testmodel2017b = 1U;

    // Entry Internal: Subsystem/State Transition Table
    // Transition: '<S4>:15'
    testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
      testmodel2017b_IN_STOP_d3ri;

    // Entry Internal 'STOP': '<S4>:13'
    // Transition: '<S4>:127'
  } else {
    switch (testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b) {
     case testmodel20_IN_OPERATIONAL_c1g0:
      // During 'OPERATIONAL': '<S4>:86'
      if (1 >= (int32_T)INVERTER_READY) {
        // Transition: '<S4>:96'
        // Exit Internal 'OPERATIONAL': '<S4>:86'
        testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
          testmodel2017b_IN_READY_egk1;
      } else if (1 >= (int32_T)INVERTER_CONNECTED) {
        // Transition: '<S4>:104'
        // Transition: '<S4>:106'
        // Exit Internal 'OPERATIONAL': '<S4>:86'
        testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
          testmodel20_IN_OPERATIONAL_c1g0;

        // Entry Internal 'OPERATIONAL': '<S4>:86'
        // Transition: '<S4>:135'
      } else if (1 < (int32_T)INVERTER_READY) {
        // Transition: '<S4>:121'
        // Exit Internal 'OPERATIONAL': '<S4>:86'
        testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
          testmodel2017b_IN_STOP_d3ri;

        // Entry Internal 'STOP': '<S4>:13'
        // Transition: '<S4>:127'
      } else {
        // During 'GOTO_READY': '<S4>:134'
      }
      break;

     case testmodel2017b_IN_READY_egk1:
      // During 'READY': '<S4>:30'
      if (1 >= (int32_T)INVERTER_RUN_FWD) {
        // Transition: '<S4>:32'
        testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
          testmodel2017b_IN_RUN_nzix;
      } else if (1 == (int32_T)INVERTER_RUN_FWD) {
        // Transition: '<S4>:107'
        // Transition: '<S4>:109'
        testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
          testmodel2017b_IN_READY_egk1;
      } else {
        if (1 < (int32_T)INVERTER_RUN_FWD) {
          // Transition: '<S4>:120'
          testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
            testmodel20_IN_OPERATIONAL_c1g0;

          // Entry Internal 'OPERATIONAL': '<S4>:86'
          // Transition: '<S4>:135'
        }
      }
      break;

     case testmodel2017b_IN_RUN_nzix:
      // During 'RUN': '<S4>:47'
      // Transition: '<S4>:119'
      testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
        testmodel2017b_IN_READY_egk1;
      break;

     default:
      // During 'STOP': '<S4>:13'
      if (1 >= (int32_T)INVERTER_CONNECTED) {
        // Transition: '<S4>:54'
        // Exit Internal 'STOP': '<S4>:13'
        testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
          testmodel20_IN_OPERATIONAL_c1g0;

        // Entry Internal 'OPERATIONAL': '<S4>:86'
        // Transition: '<S4>:135'
      } else if (1 < (int32_T)INVERTER_CONNECTED) {
        // Transition: '<S4>:122'
        // Transition: '<S4>:124'
        // Exit Internal 'STOP': '<S4>:13'
        testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
          testmodel2017b_IN_STOP_d3ri;

        // Entry Internal 'STOP': '<S4>:13'
        // Transition: '<S4>:127'
      } else {
        // During 'GOTO_OPERATIONAL': '<S4>:126'
      }
      break;
    }
  }

  // End of State Transition Table: '<S1>/State Transition Table'

  // Chart: '<S1>/Chart'
  // Gateway: Subsystem/Chart
  // During: Subsystem/Chart
  if ((uint32_T)testmodel2017b_DWork.bitsForTID1.is_active_c3_testmodel2017b ==
      0U) {
    // Entry: Subsystem/Chart
    testmodel2017b_DWork.bitsForTID1.is_active_c3_testmodel2017b = 1U;

    // Entry Internal: Subsystem/Chart
    // Transition: '<S2>:3'
    testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
      testmodel2017b_IN_STOP;
  } else {
    switch (testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b) {
     case testmodel20_IN_GOTO_OPERATIONAL:
      // During 'GOTO_OPERATIONAL': '<S2>:47'
      if (testmodel2017b_B.FromWs[1] == testmodel2017b_B.FromWs[0]) {
        // Transition: '<S2>:51'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_STOP;
      } else {
        cmdInverter = (real_T)CMD_INVERTER_GOTO_OPERATIONAL;
      }
      break;

     case testmodel2017b_IN_GOTO_READY:
      // During 'GOTO_READY': '<S2>:55'
      if (testmodel2017b_B.FromWs[1] == testmodel2017b_B.FromWs[0]) {
        // Transition: '<S2>:53'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_OPERATIONAL;
      } else {
        cmdInverter = (real_T)CMD_INVERTER_GOTO_READY;
      }
      break;

     case testmodel2017b_IN_GOTO_RUN:
      // During 'GOTO_RUN': '<S2>:62'
      if (testmodel2017b_B.FromWs[1] == testmodel2017b_B.FromWs[0]) {
        // Transition: '<S2>:63'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_READY;
      } else {
        cmdInverter = (real_T)CMD_INVERTER_RUN_FWD;
      }
      break;

     case testmodel2017b_IN_OPERATIONAL:
      // During 'OPERATIONAL': '<S2>:17'
      if (testmodel2017b_B.FromWs[0] < (real_T)INVERTER_CONNECTED) {
        // Transition: '<S2>:15'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_STOP;
      } else if ((testmodel2017b_B.FromWs[1] == (real_T)INVERTER_READY) &&
                 (testmodel2017b_B.FromWs[1] != testmodel2017b_B.FromWs[0])) {
        // Transition: '<S2>:54'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_GOTO_READY;
      } else {
        if ((testmodel2017b_B.FromWs[0] >= (real_T)INVERTER_READY) &&
            (testmodel2017b_B.FromWs[3] == 1.0)) {
          // Transition: '<S2>:57'
          testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
            testmodel2017b_IN_READY;
        }
      }
      break;

     case testmodel2017b_IN_READY:
      // During 'READY': '<S2>:58'
      if (testmodel2017b_B.FromWs[0] < (real_T)INVERTER_READY) {
        // Transition: '<S2>:56'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_OPERATIONAL;
      } else if ((testmodel2017b_B.FromWs[1] == (real_T)INVERTER_RUN_FWD) &&
                 (testmodel2017b_B.FromWs[1] != testmodel2017b_B.FromWs[0])) {
        // Transition: '<S2>:64'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_GOTO_RUN;
      } else {
        if ((testmodel2017b_B.FromWs[0] >= (real_T)INVERTER_RUN_FWD) &&
            (testmodel2017b_B.FromWs[3] == 1.0)) {
          // Transition: '<S2>:59'
          testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
            testmodel2017b_IN_RUN;
        }
      }
      break;

     case testmodel2017b_IN_RUN:
      // During 'RUN': '<S2>:60'
      if (testmodel2017b_B.FromWs[0] < (real_T)INVERTER_RUN_FWD) {
        // Transition: '<S2>:61'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel2017b_IN_READY;
      }
      break;

     default:
      // During 'STOP': '<S2>:21'
      if ((testmodel2017b_B.FromWs[1] == (real_T)INVERTER_OPERATIONAL) &&
          (testmodel2017b_B.FromWs[1] != testmodel2017b_B.FromWs[0])) {
        // Transition: '<S2>:48'
        testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
          testmodel20_IN_GOTO_OPERATIONAL;
      } else {
        if (testmodel2017b_B.FromWs[0] >= (real_T)INVERTER_OPERATIONAL) {
          // Transition: '<S2>:10'
          testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
            testmodel2017b_IN_OPERATIONAL;
        }
      }
      break;
    }
  }

  // End of Chart: '<S1>/Chart'
  // Truth Table Function 'Subsystem/Truth Table': '<S5>:1'
  //  Example condition 1
  // Condition '#1': '<S5>:1:12'
  //  Example condition 2
  // Condition '#2': '<S5>:1:16'
  // Condition '#3': '<S5>:1:19'
  // Condition '#4': '<S5>:1:22'
  // Condition '#5': '<S5>:1:25'

  // Update absolute time for base rate
  // The "clockTick0" counts the number of times the code of this task has
  //  been executed. The absolute time is the multiplication of "clockTick0"
  //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
  //  overflow during the application lifespan selected.
  //  Timer of this task consists of two 32 bit unsigned integers.
  //  The two integers represent the low bits Timing.clockTick0 and the high bits
  //  Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.

  if (!(++testmodel2017b_M->Timing.clockTick0)) {
    ++testmodel2017b_M->Timing.clockTickH0;
  }

  testmodel2017b_M->Timing.t[0] = testmodel2017b_M->Timing.clockTick0 *
    testmodel2017b_M->Timing.stepSize0 + testmodel2017b_M->Timing.clockTickH0 *
    testmodel2017b_M->Timing.stepSize0 * 4294967296.0;

  {
    // Update absolute timer for sample time: [0.001s, 0.0s]
    // The "clockTick1" counts the number of times the code of this task has
    //  been executed. The resolution of this integer timer is 0.001, which is the step size
    //  of the task. Size of "clockTick1" ensures timer will not overflow during the
    //  application lifespan selected.
    //  Timer of this task consists of two 32 bit unsigned integers.
    //  The two integers represent the low bits Timing.clockTick1 and the high bits
    //  Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.

    testmodel2017b_M->Timing.clockTick1++;
    if (!testmodel2017b_M->Timing.clockTick1) {
      testmodel2017b_M->Timing.clockTickH1++;
    }
  }
}

// Model initialize function
void testmodel2017b_initialize(void)
{
  // Registration code

  // initialize real-time model
  (void) memset((void *)testmodel2017b_M, 0,
                sizeof(RT_MODEL_testmodel2017b_T));

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&testmodel2017b_M->solverInfo,
                          &testmodel2017b_M->Timing.simTimeStep);
    rtsiSetTPtr(&testmodel2017b_M->solverInfo, &rtmGetTPtr(testmodel2017b_M));
    rtsiSetStepSizePtr(&testmodel2017b_M->solverInfo,
                       &testmodel2017b_M->Timing.stepSize0);
    rtsiSetErrorStatusPtr(&testmodel2017b_M->solverInfo, (&rtmGetErrorStatus
      (testmodel2017b_M)));
    rtsiSetRTModelPtr(&testmodel2017b_M->solverInfo, testmodel2017b_M);
  }

  rtsiSetSimTimeStep(&testmodel2017b_M->solverInfo, MAJOR_TIME_STEP);
  rtsiSetSolverName(&testmodel2017b_M->solverInfo,"FixedStepDiscrete");
  rtmSetTPtr(testmodel2017b_M, &testmodel2017b_M->Timing.tArray[0]);
  testmodel2017b_M->Timing.stepSize0 = 0.001;

  // block I/O
  (void) memset(((void *) &testmodel2017b_B), 0,
                sizeof(BlockIO_testmodel2017b_T));

  // exported global signals
  cmdInverter = 0.0;

  // states (dwork)
  (void) memset((void *)&testmodel2017b_DWork, 0,
                sizeof(D_Work_testmodel2017b_T));

  // Start for FromWorkspace: '<S3>/FromWs'
  {
    static real_T pTimeValues0[] = { 0.0, 10.0, 10.0, 20.0, 20.0, 30.0, 30.0,
      40.0, 40.0, 50.0, 50.0, 60.0, 60.0, 70.0, 70.0, 80.0, 80.0, 90.0, 90.0,
      100.0, 100.0, 110.0, 110.0, 120.0, 120.0, 130.0, 130.0, 140.0, 140.0,
      150.0, 150.0, 160.0, 170.0, 180.0, 190.0, 200.0, 210.0, 210.0, 220.0,
      220.0, 230.0, 240.0, 250.0, 260.0, 270.0, 280.0, 290.0, 300.0, 310.0,
      320.0, 330.0, 340.0, 350.0, 360.0, 370.0, 380.0, 390.0, 400.0, 410.0,
      420.0, 430.0, 440.0, 450.0, 460.0, 470.0, 480.0, 490.0, 500.0, 510.0,
      520.0, 530.0, 540.0, 550.0, 560.0, 570.0, 580.0, 590.0, 600.0, 610.0,
      620.0, 630.0, 640.0, 650.0, 660.0, 670.0, 680.0, 690.0, 700.0, 710.0,
      720.0, 730.0, 740.0, 750.0, 760.0, 770.0, 780.0, 790.0, 800.0, 810.0,
      820.0, 830.0, 840.0, 850.0, 860.0, 870.0, 880.0, 890.0, 900.0, 910.0,
      920.0, 930.0, 940.0, 950.0, 960.0, 970.0, 980.0, 990.0, 1000.0 } ;

    static real_T pDataValues0[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
      2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0,
      5.0, 6.0, 6.0, 6.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0,
      3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0,
      6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0,
      1500.0, 1500.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 10.0, 10.0, 20.0, 20.0, 30.0, 30.0, 40.0, 40.0, 50.0, 50.0, 60.0,
      60.0, 70.0, 70.0, 80.0, 80.0, 90.0, 90.0, 100.0, 100.0, 110.0, 110.0,
      120.0, 120.0, 130.0, 130.0, 140.0, 140.0, 150.0, 150.0, 160.0, 170.0,
      180.0, 190.0, 200.0, 210.0, 210.0, 220.0, 220.0, 230.0, 240.0, 250.0,
      260.0, 270.0, 280.0, 290.0, 300.0, 310.0, 320.0, 330.0, 340.0, 350.0,
      360.0, 370.0, 380.0, 390.0, 400.0, 410.0, 420.0, 430.0, 440.0, 450.0,
      460.0, 470.0, 480.0, 490.0, 500.0, 510.0, 520.0, 530.0, 540.0, 550.0,
      560.0, 570.0, 580.0, 590.0, 600.0, 610.0, 620.0, 630.0, 640.0, 650.0,
      660.0, 670.0, 680.0, 690.0, 700.0, 710.0, 720.0, 730.0, 740.0, 750.0,
      760.0, 770.0, 780.0, 790.0, 800.0, 810.0, 820.0, 830.0, 840.0, 850.0,
      860.0, 870.0, 880.0, 890.0, 900.0, 910.0, 920.0, 930.0, 940.0, 950.0,
      960.0, 970.0, 980.0, 990.0, 1000.0 } ;

    testmodel2017b_DWork.FromWs_PWORK.TimePtr = (void *) pTimeValues0;
    testmodel2017b_DWork.FromWs_PWORK.DataPtr = (void *) pDataValues0;
    testmodel2017b_DWork.FromWs_IWORK.PrevIndex = 0;
  }

  // SystemInitialize for State Transition Table: '<S1>/State Transition Table'
  testmodel2017b_DWork.bitsForTID1.is_active_c4_testmodel2017b = 0U;
  testmodel2017b_DWork.bitsForTID1.is_c4_testmodel2017b =
    testmodel201_IN_NO_ACTIVE_CHILD;

  // SystemInitialize for Chart: '<S1>/Chart'
  testmodel2017b_DWork.bitsForTID1.is_active_c3_testmodel2017b = 0U;
  testmodel2017b_DWork.bitsForTID1.is_c3_testmodel2017b =
    testmodel201_IN_NO_ACTIVE_CHILD;
  cmdInverter = 0.0;
}

//
//  [EOF]

