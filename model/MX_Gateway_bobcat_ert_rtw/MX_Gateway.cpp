//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : MX_Gateway


#include "MX_Gateway.h"
#include "MX_Gateway_private.h"

// Named constants for Chart: '<S24>/Throttle Cal State'
#define MX_Gate_IN_NO_ACTIVE_CHILD_agec ((uint8_T)0U)
#define MX_Gateway_IN_Ready            ((uint8_T)1U)
#define MX_Gateway_IN_Wait_anea        ((uint8_T)2U)

// Named constants for Chart: '<S119>/Aux_Pot'
#define MX_Gatewa_IN_INACTIVE_WAIT_gks0 ((uint8_T)5U)
#define MX_Gateway_IN_AUX_FALLING_EDGE ((uint8_T)1U)
#define MX_Gateway_IN_DETENT           ((uint8_T)2U)
#define MX_Gateway_IN_HOLD_bxpr        ((uint8_T)3U)
#define MX_Gateway_IN_INACTIVE_nzjc    ((uint8_T)4U)

// Exported block signals
uint16_T position_LeftPot;             // '<S98>/Saturation'
uint16_T cmd_Throttle;                 // '<S650>/Throttle_Command'
uint16_T PWD_NumberSelected;           // '<S648>/Panel_Lock'
uint16_T targetSpeed;                  // '<S645>/Chart1'
uint16_T rpm_Derate;                   // '<S643>/Derate'
uint16_T torque_Derate;                // '<S643>/Derate'
uint16_T level_StarterAutomatedEngage; // '<S317>/Starter_Engage_RPM'
uint16_T level_StarterAutomatedDisengage;// '<S317>/Starter_Disenage_RPM'
uint16_T time_StarterAutomated;        // '<S317>/Starter_Max_Time'
uint16_T count_GlowPlug;               // '<S310>/GlowPlug'
uint16_T pos_ThrottlePrimary_In;       // '<S287>/Lookup Table Dynamic'
uint16_T rm_ThrottlePrimary;           // '<S287>/Data Type Conversion4'
uint16_T pos_ThrottlePrimary;          // '<S116>/Throttle_Pos'
uint16_T percent_Throttle;             // '<S286>/Throttle_Limiter'
uint16_T rm_OffsetPot;                 // '<S113>/Multiport Switch2'
uint16_T position_OffsetPot;           // '<S113>/Saturation'
uint16_T psi_LoadSense;                // '<S276>/Data Type Conversion1'
uint16_T bar_LoadMoment;               // '<S266>/Data Type Conversion1'
uint16_T gau_HOT;                      // '<S235>/GaugeTable'
uint16_T flt_HOT;                      // '<S235>/ErrorDetection'
uint16_T rm_HOT;                       // '<S235>/HOT_Calculations'
uint16_T rm_FuelLevel;                 // '<S105>/Data Type Conversion4'
uint16_T gau_FuelLevel;                // '<S105>/Multiport Switch'
uint16_T calc_EngineSpeed;             // '<S218>/Divide'
uint16_T flt_EngineSpeed;              // '<S102>/EngineSpeed'
uint16_T flt_EOP;                      // '<S100>/sel_State1'
uint16_T gau_EOP;                      // '<S100>/sel_State2'
uint16_T level_ShutdownEOP;            // '<S197>/Sensor_Calculations'
uint16_T level_WarningEOP;             // '<S197>/Sensor_Calculations'
uint16_T rm_EOP;                       // '<S197>/Sensor_Calculations'
uint16_T rm_RightPot;                  // '<S192>/Switch'
uint16_T position_RightPot;            // '<S191>/Saturation'
uint16_T rm_LeftPot;                   // '<S187>/Switch'
uint16_T gau_ECT;                      // '<S97>/Multiport Switch'
uint16_T flt_ECT;                      // '<S97>/ErrorDetection'
uint16_T rm_ECT;                       // '<S173>/Data Type Conversion1'
uint16_T rm_Console;                   // '<S96>/Data Type Conversion1'
uint16_T position_AuxPot;              // '<S94>/Multiport Switch1'
uint16_T rm_AuxPot;                    // '<S94>/Multiport Switch3'
uint16_T count_AFPlugged;              // '<S92>/Filter'
uint16_T calc_VBattery;                // '<S117>/Divide1'
uint16_T calcFlt_VBattery;             // '<S117>/Data Type Conversion1'
uint16_T bar_LoadSense;                // '<S275>/Gain'
uint16_T calc_ifbk_OffsetRod;          // '<S539>/Divide'
uint16_T calc_ifbk_OffsetBase;         // '<S522>/Divide'
uint16_T calc_ifbk_DumpValve;          // '<S412>/Divide'
uint16_T calc_ifbk_AuxRod;             // '<S366>/Divide'
uint16_T calc_ifbk_AuxBase;            // '<S349>/Divide'
uint16_T duty_TwoSpeed;                // '<S588>/Divide1'
uint16_T hs_OffsetBase;                // '<S507>/hc_pair_control'
uint16_T hs_OffsetRod;                 // '<S507>/hc_pair_control1'
uint16_T hs_HydEnable;                 // '<S473>/output_pair_open_loop'
uint16_T hs_HydBypass;                 // '<S454>/output_pair_open_loop'
uint16_T duty_FuelSec;                 // '<S308>/Solenoid'
uint16_T hs_DumpValve;                 // '<S406>/hc_pair_control'
uint16_T hs_Diverter;                  // '<S386>/output_pair_open_loop'
uint16_T hs_AuxBase;                   // '<S321>/hc_pair_control'
uint16_T hs_AuxRod;                    // '<S321>/hc_pair_control1'
int16_T errorCC_OffsetBase;            // '<S507>/hc_pair_control'
int16_T errorCC_OffsetRod;             // '<S507>/hc_pair_control1'
int16_T errorCC_DumpValve;             // '<S406>/hc_pair_control'
int16_T errorCC_AuxBase;               // '<S321>/hc_pair_control'
int16_T errorCC_AuxRod;                // '<S321>/hc_pair_control1'
int8_T percent_Derate;                 // '<S643>/Derate'
uint8_T state_CommECU;                 // '<S28>/Unit Delay7'
uint8_T state_LoadMoment;              // '<S111>/Switch'
uint8_T state_TC;                      // '<S650>/Throttle_Command'
uint8_T state_MachineLock;             // '<S649>/Lock_Status'
uint8_T state_KSLock;                  // '<S648>/Panel_Lock'
uint8_T state_KSPassword;              // '<S648>/Panel_Lock'
uint8_T pwd_Position;                  // '<S648>/Panel_Lock'
uint8_T KSS_Display;                   // '<S648>/Panel_Lock'
uint8_T state_KeylessEntryPowerHold;   // '<S647>/Power_Hold'
uint8_T state_Engine;                  // '<S646>/Engine'
uint8_T state_TurboPrime;              // '<S646>/Engine'
uint8_T cmdInverter;                   // '<S645>/Chart1'
uint8_T disp_LeftControl;              // '<S678>/DisplayAuxMode'
uint8_T disp_RightControl;             // '<S678>/DisplayAuxMode'
uint8_T mode_LeftControl;              // '<S644>/Control Modes'
uint8_T mode_RightControl;             // '<S644>/Control Modes'
uint8_T state_EngineSpeedDerate;       // '<S643>/Derate'
uint8_T state_HPMatch;                 // '<S643>/Derate'
uint8_T state_CommSecondary;           // '<S642>/Controller_State'
uint8_T state_CommThrottle;            // '<S642>/Controller_State'
uint8_T state_CommStdPanel;            // '<S642>/Controller_State'
uint8_T state_CommJogShuttle;          // '<S642>/Controller_State'
uint8_T state_CommDeluxeG55;           // '<S642>/Controller_State'
uint8_T state_CommKeylessEntry;        // '<S642>/Controller_State'
uint8_T state_CANThrottleCalDiag;      // '<S664>/CAN_Throttle_Actuator'
uint8_T state_AuxEnable;               // '<S639>/Aux_Control'
uint8_T state_Detent;                  // '<S639>/Aux_Control'
uint8_T aux_Flow;                      // '<S639>/Aux_Control'
uint8_T state_DetentEnable;            // '<S639>/Aux_Control'
uint8_T cmd_AuxRelease;                // '<S639>/Aux_Control'
uint8_T state_AuxRelease;              // '<S639>/Aux_Control'
uint8_T cmd_AutoIdle;                  // '<S654>/Auto_Idle'
uint8_T state_Idle;                    // '<S654>/Auto_Idle'
uint8_T state_AutoIdleEnable;          // '<S653>/Auto_Idle'
uint8_T icon_Rabbit;                   // '<S613>/RabbitIcon'
uint8_T icon_Service;                  // '<S612>/Truth_Table'
uint8_T icon_Seatbelt;                 // '<S611>/Chart'
uint8_T icon_RPM;                      // '<S610>/RPM_ICON'
uint8_T icon_Lockout;                  // '<S609>/LockoutIcons'
uint8_T icon_JobClock2;                // '<S608>/Truth_Table'
uint8_T icon_JobClock1;                // '<S607>/Truth_Table'
uint8_T icon_Hydraulic;                // '<S606>/HydraulicIcon'
uint8_T icon_Hourmeter;                // '<S605>/Truth_Table'
uint8_T icon_GlowPlug;                 // '<S604>/GlowPlugIcon'
uint8_T icon_General;                  // '<S603>/WarningIcon'
uint8_T icon_Engine;                   // '<S601>/EngineIcon'
uint8_T icon_ECT;                      // '<S600>/WarningIcon'
uint8_T icon_Battery;                  // '<S599>/BatteryIcon'
uint8_T icon_Aux;                      // '<S598>/Truth_Table'
uint8_T state_InfoPrimary;             // '<S596>/Display_Type'
uint8_T state_InfoButton;              // '<S596>/Display_Type'
uint8_T state_InfoSecondary;           // '<S596>/Display_Type'
uint8_T state_RightButton;             // '<S596>/Display_Type'
uint8_T state_LeftButton;              // '<S596>/Display_Type'
uint8_T enable_RightLeft;              // '<S596>/Display_Type'
uint8_T level_DisplayBacklight;        // '<S594>/Backlighting'
uint8_T level_IconBacklight;           // '<S594>/Backlighting'
uint8_T ind_Aux2;                      // '<S593>/Aux2_Indicator'
uint8_T ind_Aux1;                      // '<S593>/Aux1_Indicator'
uint8_T ind_AutoIdle;                  // '<S592>/AutoIdle_Indicator'
uint8_T state_TwoSpeed;                // '<S579>/hc_Output'
uint8_T state_TwoSpeedIcon;            // '<S579>/TwoSpeed_Control'
uint8_T state_SwitchedPwrOutput;       // '<S574>/relay_error_state'
uint8_T state_SwitchedPwrRelay;        // '<S574>/relay_error_state'
uint8_T state_StarterOutput;           // '<S567>/relay_error_state'
uint8_T state_StarterRelay;            // '<S567>/relay_error_state'
uint8_T state_PBValveOutput;           // '<S316>/Switch'
uint8_T state_PBValveRelay;            // '<S561>/relay_error_state'
uint8_T state_OffsetBase;              // '<S507>/hc_pair_control'
uint8_T state_OffsetRod;               // '<S507>/hc_pair_control1'
uint8_T state_LightsOutput;            // '<S314>/Switch'
uint8_T state_LightsRelay;             // '<S502>/relay_error_state'
uint8_T state_HydExchange;             // '<S494>/Fault monitor'
uint8_T state_HydEnable;               // '<S473>/output_pair_open_loop'
uint8_T state_HydBypass;               // '<S454>/output_pair_open_loop'
uint8_T state_GlowPlugOutput;          // '<S450>/relay_error_state'
uint8_T state_GlowPlugRelay;           // '<S450>/relay_error_state'
uint8_T timer_FuelResolution;          // '<S309>/Timer'
uint8_T error_FuelSec;                 // '<S443>/Fault monitor'
uint8_T state_FuelSec;                 // '<S308>/Solenoid'
uint8_T state_ECUHold;                 // '<S308>/Solenoid'
uint8_T state_HVACOutput;              // '<S437>/Fault monitor'
uint8_T state_FuelPriOutput;           // '<S432>/relay_error_state'
uint8_T state_FuelPriRelay;            // '<S432>/relay_error_state'
uint8_T state_DumpValve;               // '<S406>/hc_pair_control'
uint8_T state_Diverter;                // '<S386>/output_pair_open_loop'
uint8_T state_AuxBase;                 // '<S321>/hc_pair_control'
uint8_T state_AuxRod;                  // '<S321>/hc_pair_control1'
uint8_T state_VBattery;                // '<S117>/VBattery_State'
uint8_T state_Alternator;              // '<S117>/VBattery_State'
uint8_T state_ThrottlePrimary;         // '<S116>/Throttle_Pos'
uint8_T derate_Throttle;               // '<S116>/Throttle_Pos'
uint8_T state_SensorSupply2;           // '<S115>/Sensor_Supply2_State'
uint8_T state_SensorSupply1;           // '<S114>/Sensor_Supply1_State'
uint8_T state_OffsetPot;               // '<S113>/Multiport Switch'
uint8_T volts_LoadSense;               // '<S277>/Data Type Conversion2'
uint8_T state_LoadSense;               // '<S272>/Pressure_Monitor'
uint8_T volts_LoadMoment;              // '<S267>/Data Type Conversion2'
uint8_T state_Key;                     // '<S110>/Key'
uint8_T state_HOT;                     // '<S108>/Switch'
uint8_T state_HCFilter1;               // '<S107>/Hyd1_Filter_State'
uint8_T state_FuelTemp;                // '<S106>/ErrorDetection'
uint8_T state_FuelLevel;               // '<S105>/Fuel_Level'
uint8_T state_EngineStart;             // '<S104>/Engine_Start'
uint8_T state_EOT;                     // '<S103>/ErrorDetection'
uint8_T gain_EngineSpeed;              // '<S102>/Gain'
uint8_T state_EngineSpeed;             // '<S102>/EngineSpeed'
uint8_T state_EcoMode;                 // '<S101>/Eco_Mode'
uint8_T state_EOP;                     // '<S100>/sel_State'
uint8_T state_RightPot;                // '<S191>/Right_Pot'
uint8_T state_LeftPot;                 // '<S185>/Pot'
uint8_T state_ECT;                     // '<S97>/ErrorDetection'
uint8_T state_Console;                 // '<S96>/Console_Sensor'
uint8_T state_PanelButtons;            // '<S95>/Switch1'
uint8_T state_AuxPot;                  // '<S94>/Multiport Switch'
uint8_T aux_DebounceButton;            // '<S119>/Aux_Pot'
uint8_T aux_DetentHold;                // '<S119>/Aux_Pot'
uint8_T state_AirFilter;               // '<S92>/Filter'
boolean_T mode_ControlChange;          // '<S651>/Logical Operator2'
boolean_T cabKeyDetect;                // '<S647>/CabKeyDetection'
boolean_T ind_KeylessEntryLock;        // '<S647>/Indicators'
boolean_T ind_KeylessEntryUnlock;      // '<S647>/Indicators'
boolean_T flag_AuxEnableFlash;         // '<S644>/Logical Operator1'
boolean_T flag_AuxModeReminder;        // '<S678>/DisplayAuxMode'
boolean_T check_LeftNeutral;           // '<S644>/Control Modes'
boolean_T check_RightNeutral;          // '<S644>/Control Modes'
boolean_T aux_Inhibit;                 // '<S644>/Control Modes'
boolean_T icon_Fuel;                   // '<S602>/FuelLevel'
boolean_T ind_Lock;                    // '<S597>/Keyless_Ind'
boolean_T ind_Unlock;                  // '<S597>/Keyless_Ind'
boolean_T ind_Light1;                  // '<S595>/LightIndicator'
boolean_T dout_SwitchedPwr;            // '<S319>/Relay'
boolean_T dout_Starter;                // '<S317>/Starter'
boolean_T dout_PBValve;                // '<S316>/PBValve'
boolean_T ls_OffsetBase;               // '<S507>/hc_pair_control'
boolean_T ls_OffsetRod;                // '<S507>/hc_pair_control1'
boolean_T dout_Lights;                 // '<S314>/Lights'
boolean_T dout_HydExchange;            // '<S313>/Hydraulic_Xchange'
boolean_T ls_HydEnable;                // '<S473>/output_pair_open_loop'
boolean_T ls_HydBypass;                // '<S454>/output_pair_open_loop'
boolean_T dout_GlowPlug;               // '<S310>/GlowPlug'
boolean_T dout_HVACOutput;             // '<S428>/RelaySolenoid'
boolean_T dout_FuelPri;                // '<S427>/RelaySolenoid'
boolean_T ls_DumpValve;                // '<S406>/hc_pair_control'
boolean_T cmd_Diverter;                // '<S386>/Diverter'
boolean_T ls_Diverter;                 // '<S386>/output_pair_open_loop'
boolean_T dout_Buzzer;                 // '<S304>/Buzzer'
boolean_T ls_AuxBase;                  // '<S321>/hc_pair_control'
boolean_T ls_AuxRod;                   // '<S321>/hc_pair_control1'
boolean_T outputSelect_HOT;            // '<S234>/Compare'
boolean_T outputSelect_EOP;            // '<S196>/Compare'
boolean_T button_AuxReleaseAck;        // '<S95>/Logical Operator17'
boolean_T button_AuxReleaseBack;       // '<S95>/Logical Operator18'
boolean_T button_AuxReleaseExit;       // '<S95>/Logical Operator19'
boolean_T button_Info;                 // '<S95>/Logical Operator4'
boolean_T button_Lights;               // '<S95>/Switch'
boolean_T button_AutoIdle;             // '<S95>/Switch2'
boolean_T button_Aux;                  // '<S95>/Switch6'

// Block signals (auto storage)
BlockIO_MX_Gateway MX_Gateway_B;

// Block states (auto storage)
D_Work_MX_Gateway MX_Gateway_DWork;

// Real-time model
RT_MODEL_MX_Gateway MX_Gateway_M_;
RT_MODEL_MX_Gateway *const MX_Gateway_M = &MX_Gateway_M_;
static void rate_scheduler(void);

// Lookup Binary Search Utility BINARYSEARCH_U16_Near_iL
void BINARYSEARCH_U16_Near_iL(uint32_T *piLeft, uint16_T u, const uint16_T
  *pData, uint32_T iHi)
{
  uint32_T iRght;

  // Find the location of current input value in the data table.
  *piLeft = 0U;
  iRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( iRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + iRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        iRght = i;
      } else {
        *piLeft = i;
      }
    }

    // Adjust the left index, if necessary, so that it always gives
    // the index of the data point nearest the current input value.
    {
      uint32_T diffLeft, diffRght;
      diffLeft = u - pData[*piLeft];
      diffRght = pData[iRght] - u;
      if (diffRght <= diffLeft ) {
        *piLeft = iRght;
      }
    }
  }
}

// Lookup Binary Search Utility BINARYSEARCH_U16
void BINARYSEARCH_U16(uint32_T *piLeft, uint32_T *piRght, uint16_T u, const
                      uint16_T *pData, uint32_T iHi)
{
  // Find the location of current input value in the data table.
  *piLeft = 0U;
  *piRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
    *piRght = 0U;
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( *piRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + *piRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        *piRght = i;
      } else {
        *piLeft = i;
      }
    }
  }
}

// Lookup Interpolation INTERPOLATE_U16_U16
void INTERPOLATE_U16_U16(uint16_T *pY, uint16_T yL, uint16_T yR, uint16_T x,
  uint16_T xL, uint16_T xR)
{
  uint32_T bigProd;
  uint16_T yDiff;
  uint16_T xNum;
  uint16_T xDen;
  *pY = yL;

  // If x is not strictly between xR and xL
  //  then an interpolation calculation is not necessary x == xL
  //  or not valid.  The invalid situation is expected when the input
  //  is beyond the left or right end of the table.  The design is
  //  that yL holds the correct value for *pY
  //  in invalid situations.

  if ((xR > xL) && (x > xL) ) {
    xDen = xR;
    xDen = (uint16_T)(uint32_T)((uint32_T)xDen - (uint32_T)xL);
    xNum = x;
    xNum = (uint16_T)(uint32_T)((uint32_T)xNum - (uint32_T)xL);
    if (yR >= yL ) {
      yDiff = yR;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yL);
    } else {
      yDiff = yL;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yR);
    }

    bigProd = (uint32_T)((uint32_T)yDiff * (uint32_T)xNum);

    {
      uint32_T rtb_u32_tmp;
      rtb_u32_tmp = (uint32_T)xDen;
      yDiff = (uint16_T)(rtb_u32_tmp == 0U ? MAX_uint32_T : (uint32_T)(bigProd /
        rtb_u32_tmp));
    }

    if (yR >= yL ) {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
    } else {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY - (uint32_T)yDiff);
    }
  }
}

// Lookup Utility LookUp_U16_U16
void LookUp_U16_U16(uint16_T *pY, const uint16_T *pYData, uint16_T u, const
                    uint16_T *pUData, uint32_T iHi)
{
  uint32_T iLeft;
  uint32_T iRght;
  BINARYSEARCH_U16( &(iLeft), &(iRght), u, pUData, iHi);
  INTERPOLATE_U16_U16( pY, pYData[iLeft], pYData[iRght], u, pUData[iLeft],
                      pUData[iRght]);
}

// Lookup Evenly Spaced Interpolation INTERPOLATE_EVEN_U16_U16_SAT
void INTERPOLATE_EVEN_U16_U16_SAT(uint16_T *pY, uint16_T yL, uint16_T yR,
  uint16_T xMinusxL, uint16_T xSpacing)
{
  uint32_T bigProd;
  uint16_T yDiff;
  *pY = yL;
  if (yR >= yL ) {
    yDiff = yR;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)yDiff;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yL);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      yDiff = (uint16_T)rtb_u32_qY;
    }
  } else {
    yDiff = yL;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)yDiff;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yR);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      yDiff = (uint16_T)rtb_u32_qY;
    }
  }

  bigProd = (uint32_T)((uint32_T)yDiff * (uint32_T)xMinusxL);

  {
    uint32_T rtb_u32_tmp;
    rtb_u32_tmp = (uint32_T)xSpacing;
    rtb_u32_tmp = rtb_u32_tmp == 0U ? MAX_uint32_T : (uint32_T)(bigProd /
      rtb_u32_tmp);
    if (rtb_u32_tmp > 65535U) {
      rtb_u32_tmp = 65535U;
    }

    yDiff = (uint16_T)rtb_u32_tmp;
  }

  if (yR >= yL ) {
    {
      uint32_T rtb_u32_tmp;
      rtb_u32_tmp = (uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
      if (rtb_u32_tmp > 65535U) {
        rtb_u32_tmp = 65535U;
      }

      *pY = (uint16_T)rtb_u32_tmp;
    }
  } else {
    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)*pY;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yDiff);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      *pY = (uint16_T)rtb_u32_qY;
    }
  }
}

// Lookup 1D UtilityLookUpEven_U16_U16_SAT
void LookUpEven_U16_U16_SAT(uint16_T *pY, const uint16_T *pYData, uint16_T u,
  uint16_T valueLo, uint32_T iHi, uint16_T uSpacing)
{
  if (u <= valueLo ) {
    (*pY) = (*pYData);
  } else {
    uint32_T uAdjusted = u - valueLo;
    uint32_T iLeft = uAdjusted / uSpacing;
    if (iLeft >= iHi ) {
      (*pY) = pYData[iHi];
    } else {
      INTERPOLATE_EVEN_U16_U16_SAT( pY, pYData[iLeft], pYData[((iLeft)+1)],
        ((uint16_T)((uAdjusted-(iLeft*uSpacing)))), uSpacing);
    }
  }
}

// Lookup Interpolation INTERPOLATE_U16_U16_SAT
void INTERPOLATE_U16_U16_SAT(uint16_T *pY, uint16_T yL, uint16_T yR, uint16_T x,
  uint16_T xL, uint16_T xR)
{
  uint32_T bigProd;
  uint16_T yDiff;
  uint16_T xNum;
  uint16_T xDen;
  *pY = yL;

  // If x is not strictly between xR and xL
  //  then an interpolation calculation is not necessary x == xL
  //  or not valid.  The invalid situation is expected when the input
  //  is beyond the left or right end of the table.  The design is
  //  that yL holds the correct value for *pY
  //  in invalid situations.

  if ((xR > xL) && (x > xL) ) {
    xDen = xR;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)xDen;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)xL);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      xDen = (uint16_T)rtb_u32_qY;
    }

    xNum = x;

    {
      uint32_T rtb_u32_q0;
      uint32_T rtb_u32_qY;
      rtb_u32_q0 = (uint32_T)xNum;
      rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)xL);
      if (rtb_u32_qY > rtb_u32_q0) {
        rtb_u32_qY = 0U;
      }

      if (rtb_u32_qY > 65535U) {
        rtb_u32_qY = 65535U;
      }

      xNum = (uint16_T)rtb_u32_qY;
    }

    if (yR >= yL ) {
      yDiff = yR;

      {
        uint32_T rtb_u32_q0;
        uint32_T rtb_u32_qY;
        rtb_u32_q0 = (uint32_T)yDiff;
        rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yL);
        if (rtb_u32_qY > rtb_u32_q0) {
          rtb_u32_qY = 0U;
        }

        if (rtb_u32_qY > 65535U) {
          rtb_u32_qY = 65535U;
        }

        yDiff = (uint16_T)rtb_u32_qY;
      }
    } else {
      yDiff = yL;

      {
        uint32_T rtb_u32_q0;
        uint32_T rtb_u32_qY;
        rtb_u32_q0 = (uint32_T)yDiff;
        rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yR);
        if (rtb_u32_qY > rtb_u32_q0) {
          rtb_u32_qY = 0U;
        }

        if (rtb_u32_qY > 65535U) {
          rtb_u32_qY = 65535U;
        }

        yDiff = (uint16_T)rtb_u32_qY;
      }
    }

    bigProd = (uint32_T)((uint32_T)yDiff * (uint32_T)xNum);

    {
      uint32_T rtb_u32_tmp;
      rtb_u32_tmp = (uint32_T)xDen;
      rtb_u32_tmp = rtb_u32_tmp == 0U ? MAX_uint32_T : (uint32_T)(bigProd /
        rtb_u32_tmp);
      if (rtb_u32_tmp > 65535U) {
        rtb_u32_tmp = 65535U;
      }

      yDiff = (uint16_T)rtb_u32_tmp;
    }

    if (yR >= yL ) {
      {
        uint32_T rtb_u32_tmp;
        rtb_u32_tmp = (uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
        if (rtb_u32_tmp > 65535U) {
          rtb_u32_tmp = 65535U;
        }

        *pY = (uint16_T)rtb_u32_tmp;
      }
    } else {
      {
        uint32_T rtb_u32_q0;
        uint32_T rtb_u32_qY;
        rtb_u32_q0 = (uint32_T)*pY;
        rtb_u32_qY = (uint32_T)(rtb_u32_q0 - (uint32_T)yDiff);
        if (rtb_u32_qY > rtb_u32_q0) {
          rtb_u32_qY = 0U;
        }

        if (rtb_u32_qY > 65535U) {
          rtb_u32_qY = 65535U;
        }

        *pY = (uint16_T)rtb_u32_qY;
      }
    }
  }
}

// Lookup Utility LookUp_U16_U16_SAT
void LookUp_U16_U16_SAT(uint16_T *pY, const uint16_T *pYData, uint16_T u, const
  uint16_T *pUData, uint32_T iHi)
{
  uint32_T iLeft;
  uint32_T iRght;
  BINARYSEARCH_U16( &(iLeft), &(iRght), u, pUData, iHi);
  INTERPOLATE_U16_U16_SAT( pY, pYData[iLeft], pYData[iRght], u, pUData[iLeft],
    pUData[iRght]);
}

// Lookup Binary Search Utility BINARYSEARCH_U16_iL
void BINARYSEARCH_U16_iL(uint32_T *piLeft, uint16_T u, const uint16_T *pData,
  uint32_T iHi)
{
  uint32_T iRght;

  // Find the location of current input value in the data table.
  *piLeft = 0U;
  iRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( iRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + iRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        iRght = i;
      } else {
        *piLeft = i;
      }
    }
  }
}

// Lookup Binary Search Utility BINARYSEARCH_S16
void BINARYSEARCH_S16(uint32_T *piLeft, uint32_T *piRght, int16_T u, const
                      int16_T *pData, uint32_T iHi)
{
  // Find the location of current input value in the data table.
  *piLeft = 0U;
  *piRght = iHi;
  if (u <= pData[0] ) {
    // Less than or equal to the smallest point in the table.
    *piRght = 0U;
  } else if (u >= pData[iHi] ) {
    // Greater than or equal to the largest point in the table.
    *piLeft = iHi;
  } else {
    uint32_T i;

    // Do a binary search.
    while (( *piRght - *piLeft ) > 1U ) {
      // Get the average of the left and right indices using to Floor rounding.
      i = (*piLeft + *piRght) >> 1;

      // Move either the right index or the left index so that
      //  LeftDataPoint <= CurrentValue < RightDataPoint
      if (u < pData[i] ) {
        *piRght = i;
      } else {
        *piLeft = i;
      }
    }
  }
}

// Lookup Interpolation INTERPOLATE_U16_S16
void INTERPOLATE_U16_S16(uint16_T *pY, uint16_T yL, uint16_T yR, int16_T x,
  int16_T xL, int16_T xR)
{
  int32_T bigProd;
  uint16_T yDiff;
  int16_T xNum;
  int16_T xDen;
  *pY = yL;

  // If x is not strictly between xR and xL
  //  then an interpolation calculation is not necessary x == xL
  //  or not valid.  The invalid situation is expected when the input
  //  is beyond the left or right end of the table.  The design is
  //  that yL holds the correct value for *pY
  //  in invalid situations.

  if ((xR > xL) && (x > xL) ) {
    xDen = xR;
    xDen = (int16_T)(int32_T)((int32_T)xDen - (int32_T)xL);
    xNum = x;
    xNum = (int16_T)(int32_T)((int32_T)xNum - (int32_T)xL);
    if (yR >= yL ) {
      yDiff = yR;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yL);
    } else {
      yDiff = yL;
      yDiff = (uint16_T)(uint32_T)((uint32_T)yDiff - (uint32_T)yR);
    }

    bigProd = (int32_T)((int32_T)yDiff * (int32_T)xNum);
    yDiff = (uint16_T)div_s32_floor(bigProd, (int32_T)xDen);
    if (yR >= yL ) {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY + (uint32_T)yDiff);
    } else {
      *pY = (uint16_T)(uint32_T)((uint32_T)*pY - (uint32_T)yDiff);
    }
  }
}

// Lookup Utility LookUp_U16_S16
void LookUp_U16_S16(uint16_T *pY, const uint16_T *pYData, int16_T u, const
                    int16_T *pUData, uint32_T iHi)
{
  uint32_T iLeft;
  uint32_T iRght;
  BINARYSEARCH_S16( &(iLeft), &(iRght), u, pUData, iHi);
  INTERPOLATE_U16_S16( pY, pYData[iLeft], pYData[iRght], u, pUData[iLeft],
                      pUData[iRght]);
}

int32_T div_s32(int32_T numerator, int32_T denominator)
{
  int32_T quotient;
  uint32_T tempAbsQuotient;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    tempAbsQuotient = (uint32_T)((numerator < 0 ? (uint32_T)((uint32_T)
      ~(uint32_T)numerator + 1U) : (uint32_T)numerator) / (denominator < 0 ?
      (uint32_T)((uint32_T)~(uint32_T)denominator + 1U) : (uint32_T)denominator));
    quotient = (numerator < 0) != (denominator < 0) ? (int32_T)-(int32_T)
      tempAbsQuotient : (int32_T)tempAbsQuotient;
  }

  return quotient;
}

int16_T div_s16u32(uint32_T numerator, uint32_T denominator)
{
  int16_T quotient;
  if (denominator == 0U) {
    quotient = MAX_int16_T;

    // Divide by zero handler
  } else {
    quotient = (int16_T)(uint32_T)(numerator / denominator);
  }

  return quotient;
}

void mul_wide_su32(int32_T in0, uint32_T in1, uint32_T *ptrOutBitsHi, uint32_T
                   *ptrOutBitsLo)
{
  uint32_T outBitsLo;
  uint32_T absIn0;
  uint32_T in0Hi;
  uint32_T in1Lo;
  uint32_T in1Hi;
  uint32_T productHiLo;
  uint32_T productLoHi;
  absIn0 = in0 < 0 ? (uint32_T)((uint32_T)~(uint32_T)in0 + 1U) : (uint32_T)in0;
  in0Hi = (uint32_T)(absIn0 >> 16U);
  absIn0 &= 65535U;
  in1Hi = (uint32_T)(in1 >> 16U);
  in1Lo = (uint32_T)(in1 & 65535U);
  productHiLo = (uint32_T)(in0Hi * in1Lo);
  productLoHi = (uint32_T)(absIn0 * in1Hi);
  absIn0 *= in1Lo;
  in1Lo = 0U;
  outBitsLo = (uint32_T)((uint32_T)(productLoHi << 16U) + absIn0);
  if (outBitsLo < absIn0) {
    in1Lo = 1U;
  }

  absIn0 = outBitsLo;
  outBitsLo += (uint32_T)(productHiLo << 16U);
  if (outBitsLo < absIn0) {
    in1Lo++;
  }

  absIn0 = (uint32_T)((uint32_T)((uint32_T)((uint32_T)(productLoHi >> 16U) +
    (uint32_T)(productHiLo >> 16U)) + (uint32_T)(in0Hi * in1Hi)) + in1Lo);
  if (!((in1 == 0U) || (in0 >= 0))) {
    absIn0 = (uint32_T)~absIn0;
    outBitsLo = (uint32_T)~outBitsLo;
    outBitsLo++;
    if (outBitsLo == 0U) {
      absIn0++;
    }
  }

  *ptrOutBitsHi = absIn0;
  *ptrOutBitsLo = outBitsLo;
}

uint32_T mul_usu32_loSR(int32_T a, uint32_T b, uint32_T aShift)
{
  uint32_T result;
  uint32_T u32_chi;
  mul_wide_su32(a, b, &u32_chi, &result);
  return (uint32_T)((uint32_T)(u32_chi << (uint32_T)(32U - aShift)) | (uint32_T)
                    (result >> aShift));
}

int32_T div_repeat_s32_near(int32_T numerator, int32_T denominator, uint32_T
  nRepeatSub)
{
  int32_T quotient;
  uint32_T tempAbsQuotient;
  boolean_T quotientNeedsNegation;
  uint32_T absNumerator;
  uint32_T absDenominator;
  uint32_T iRepeatSub;
  boolean_T numeratorExtraBit;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    absNumerator = numerator < 0 ? (uint32_T)((uint32_T)~(uint32_T)numerator +
      1U) : (uint32_T)numerator;
    absDenominator = denominator < 0 ? (uint32_T)((uint32_T)~(uint32_T)
      denominator + 1U) : (uint32_T)denominator;
    quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
    tempAbsQuotient = (uint32_T)(absNumerator / absDenominator);
    absNumerator %= absDenominator;
    for (iRepeatSub = 0U; iRepeatSub < nRepeatSub; iRepeatSub++) {
      numeratorExtraBit = (absNumerator >= 2147483648U);
      absNumerator <<= 1U;
      tempAbsQuotient <<= 1U;
      if (numeratorExtraBit || (absNumerator >= absDenominator)) {
        tempAbsQuotient++;
        absNumerator -= absDenominator;
      }
    }

    numeratorExtraBit = (absNumerator >= 2147483648U);
    absNumerator <<= 1U;
    if (numeratorExtraBit || (quotientNeedsNegation ? absNumerator >
         absDenominator : absNumerator >= absDenominator)) {
      tempAbsQuotient++;
    }

    quotient = quotientNeedsNegation ? (int32_T)-(int32_T)tempAbsQuotient :
      (int32_T)tempAbsQuotient;
  }

  return quotient;
}

uint32_T div_u32_near(uint32_T numerator, uint32_T denominator)
{
  uint32_T quotient;
  if (denominator == 0U) {
    quotient = MAX_uint32_T;

    // Divide by zero handler
  } else {
    quotient = (uint32_T)(numerator / denominator);
    numerator %= denominator;
    if ((numerator > 2147483647U) || ((uint32_T)(numerator << 1U) >= denominator))
    {
      quotient++;
    }
  }

  return quotient;
}

void mul_wide_s32(int32_T in0, int32_T in1, uint32_T *ptrOutBitsHi, uint32_T
                  *ptrOutBitsLo)
{
  uint32_T absIn0;
  uint32_T absIn1;
  uint32_T in0Lo;
  uint32_T in0Hi;
  uint32_T in1Hi;
  uint32_T productHiLo;
  uint32_T productLoHi;
  absIn0 = in0 < 0 ? (uint32_T)((uint32_T)~(uint32_T)in0 + 1U) : (uint32_T)in0;
  absIn1 = in1 < 0 ? (uint32_T)((uint32_T)~(uint32_T)in1 + 1U) : (uint32_T)in1;
  in0Hi = (uint32_T)(absIn0 >> 16U);
  in0Lo = (uint32_T)(absIn0 & 65535U);
  in1Hi = (uint32_T)(absIn1 >> 16U);
  absIn0 = (uint32_T)(absIn1 & 65535U);
  productHiLo = (uint32_T)(in0Hi * absIn0);
  productLoHi = (uint32_T)(in0Lo * in1Hi);
  absIn0 *= in0Lo;
  absIn1 = 0U;
  in0Lo = (uint32_T)((uint32_T)(productLoHi << 16U) + absIn0);
  if (in0Lo < absIn0) {
    absIn1 = 1U;
  }

  absIn0 = in0Lo;
  in0Lo += (uint32_T)(productHiLo << 16U);
  if (in0Lo < absIn0) {
    absIn1++;
  }

  absIn0 = (uint32_T)((uint32_T)((uint32_T)((uint32_T)(productLoHi >> 16U) +
    (uint32_T)(productHiLo >> 16U)) + (uint32_T)(in0Hi * in1Hi)) + absIn1);
  if (!((in0 == 0) || ((in1 == 0) || ((in0 > 0) == (in1 > 0))))) {
    absIn0 = (uint32_T)~absIn0;
    in0Lo = (uint32_T)~in0Lo;
    in0Lo++;
    if (in0Lo == 0U) {
      absIn0++;
    }
  }

  *ptrOutBitsHi = absIn0;
  *ptrOutBitsLo = in0Lo;
}

int32_T mul_s32_hiSR(int32_T a, int32_T b, uint32_T aShift)
{
  uint32_T u32_chi;
  uint32_T u32_clo;
  mul_wide_s32(a, b, &u32_chi, &u32_clo);
  return (int32_T)((int32_T)u32_chi >> aShift);
}

int32_T div_s32_floor(int32_T numerator, int32_T denominator)
{
  int32_T quotient;
  uint32_T absNumerator;
  uint32_T absDenominator;
  uint32_T tempAbsQuotient;
  boolean_T quotientNeedsNegation;
  if (denominator == 0) {
    quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;

    // Divide by zero handler
  } else {
    absNumerator = numerator < 0 ? (uint32_T)((uint32_T)~(uint32_T)numerator +
      1U) : (uint32_T)numerator;
    absDenominator = denominator < 0 ? (uint32_T)((uint32_T)~(uint32_T)
      denominator + 1U) : (uint32_T)denominator;
    quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
    tempAbsQuotient = (uint32_T)(absNumerator / absDenominator);
    if (quotientNeedsNegation) {
      absNumerator %= absDenominator;
      if (absNumerator > 0U) {
        tempAbsQuotient++;
      }
    }

    quotient = quotientNeedsNegation ? (int32_T)-(int32_T)tempAbsQuotient :
      (int32_T)tempAbsQuotient;
  }

  return quotient;
}

//
//    This function updates active task flag for each subrate.
//  The function is called at model base rate, hence the
//  generated code self-manages all its subrates.

static void rate_scheduler(void)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (MX_Gateway_M->Timing.TaskCounters.TID[2])++;
  if ((MX_Gateway_M->Timing.TaskCounters.TID[2]) > 9) {// Sample time: [0.1s, 0.0s] 
    MX_Gateway_M->Timing.TaskCounters.TID[2] = 0;
  }
}

// Model step function
void MX_Gateway_step(void)
{
  boolean_T rtb_LogicalOperator_auqu;
  boolean_T rtb_Compare_kxag;
  int16_T rtb_DataTypeConversion;
  uint16_T rtb_Sum_h13h;
  uint16_T rtb_Sum_k4ye;
  uint16_T rtb_Sum_acle;
  uint16_T rtb_Sum_d5bx;
  uint16_T rtb_Sum_byyg;
  uint16_T rtb_Sum_iszt;
  uint16_T rtb_Sum_lart;
  uint16_T rtb_Sum_knri;
  uint16_T rtb_Sum_oigk;
  uint16_T rtb_Sum_irbk;
  uint16_T rtb_Sum_mkoj;
  uint16_T rtb_Sum_gn4k;
  uint16_T rtb_Sum_f5p4;
  uint16_T rtb_Sum_ie5q;
  uint16_T rtb_Sum_lq3s;
  uint16_T rtb_Sum_k5yr;
  uint16_T rtb_Sum_jqx3;
  uint16_T rtb_Sum_ntyy;
  uint16_T rtb_Sum_lmpx;
  uint16_T rtb_Sum_a1he;
  uint16_T rtb_Sum_oufr;
  uint16_T rtb_Sum_b253;
  uint16_T rtb_Sum_iixb;
  uint16_T rtb_Sum_ovtj;
  uint16_T rtb_Sum_dskv;
  uint16_T rtb_Sum_a1z5;
  uint16_T rtb_Sum_op3a;
  uint16_T rtb_Sum_hibd;
  uint16_T rtb_Sum_fqkx;
  uint16_T rtb_Sum_c0dp;
  uint16_T rtb_Sum_hrlc;
  uint16_T rtb_Sum_cy11;
  uint16_T rtb_Sum_enmp;
  uint16_T rtb_Sum_oi15;
  uint16_T rtb_Sum_kpnx;
  uint16_T rtb_Sum_k53f;
  uint16_T rtb_Sum_p2vc;
  uint16_T rtb_Sum_nqwu;
  uint16_T rtb_Sum_o3qh;
  uint16_T rtb_Sum_g3dm;
  uint16_T rtb_Sum_jowy;
  uint16_T rtb_Sum_lymr;
  uint16_T rtb_Sum_msib;
  uint16_T rtb_Sum_oxyf;
  uint16_T rtb_Sum_cgnx;
  uint16_T rtb_Sum_njq3;
  uint16_T rtb_Sum_ojru;
  uint16_T rtb_Sum_lc51;
  uint16_T rtb_Sum_mdys;
  uint16_T rtb_Sum_cgav;
  uint16_T rtb_Sum_ctlw;
  uint16_T rtb_Sum_lkov;
  uint16_T rtb_Sum_dfal;
  uint16_T rtb_Sum_dfta;
  uint16_T rtb_Sum_jf2q;
  uint16_T rtb_Sum_fgp0;
  uint16_T rtb_Sum_hjtb;
  uint16_T rtb_Sum_awh5;
  uint16_T rtb_Sum_pplm;
  uint16_T rtb_Sum_adyq;
  uint16_T rtb_Sum_er14;
  uint16_T rtb_Sum_hoyr;
  int32_T i;
  uint16_T u0;

  // Constant: '<S3>/Constant'
  can_Keypad[0] = ((uint8_T)1U);
  can_Keypad[1] = ((uint8_T)2U);
  can_Keypad[2] = ((uint8_T)3U);

  // Constant: '<S3>/Constant1'
  for (i = 0; i < 5; i++) {
    msg_DeluxeButtons[i] = MX_Gateway_ConstP.Constant1_Value[i];
  }

  // End of Constant: '<S3>/Constant1'

  // Constant: '<S3>/Constant2'
  can_KeylessEntry[0] = ((uint8_T)1U);
  can_KeylessEntry[1] = ((uint8_T)2U);
  can_KeylessEntry[2] = ((uint8_T)3U);

  // Constant: '<S3>/Constant3'
  for (i = 0; i < 8; i++) {
    msg_PanelButtonState[i] = MX_Gateway_ConstP.Constant3_Value[i];
  }

  // End of Constant: '<S3>/Constant3'

  // Constant: '<S3>/Constant4'
  for (i = 0; i < 8; i++) {
    msg_BJM2Right[i] = MX_Gateway_ConstP.pooled42[i];
  }

  // End of Constant: '<S3>/Constant4'

  // Constant: '<S3>/Constant6'
  for (i = 0; i < 8; i++) {
    msg_BJM2Left[i] = MX_Gateway_ConstP.pooled42[i];
  }

  // End of Constant: '<S3>/Constant6'

  // Constant: '<S3>/Constant7'
  msgAge_BJM2Right = ((uint16_T)0U);

  // Constant: '<S3>/Constant8'
  msgAge_BJM2Left = ((uint16_T)0U);

  // FromWorkspace: '<S16>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 15; ++elIdx) {
              (&MX_Gateway_B.FromWs[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 15; ++elIdx) {
              (&MX_Gateway_B.FromWs[0])[elIdx] = pDataValues[currTimeIndex + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 15; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs[0])[elIdx] = (real_T) rtInterpolate(d1, d2, f1,
              f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion1'
  can_FuelTemp = (uint16_T)MX_Gateway_B.FromWs[13];

  // FromWorkspace: '<S21>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_pjz0.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_pjz0.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_cw5j.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_cw5j.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 4; ++elIdx) {
              (&MX_Gateway_B.FromWs_bip1[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 4; ++elIdx) {
              (&MX_Gateway_B.FromWs_bip1[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 4; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_bip1[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion10'
  can_ST_EStop = (uint8_T)MX_Gateway_B.FromWs_bip1[2];

  // DataTypeConversion: '<S3>/Data Type Conversion105'
  ecu_EOP = (uint8_T)MX_Gateway_B.FromWs[0];

  // FromWorkspace: '<S19>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_lqeh.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_lqeh.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_oicx.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_oicx.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          MX_Gateway_B.FromWs_muwm = pDataValues[currTimeIndex];
        } else {
          MX_Gateway_B.FromWs_muwm = pDataValues[currTimeIndex + 1];
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;
        d1 = pDataValues[TimeIndex];
        d2 = pDataValues[TimeIndex + 1];
        MX_Gateway_B.FromWs_muwm = (real_T) rtInterpolate(d1, d2, f1, f2);
        pDataValues += 6;
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion106'
  state_KeylessPanel = (uint8_T)MX_Gateway_B.FromWs_muwm;

  // DataTypeConversion: '<S3>/Data Type Conversion107'
  ecu_ECT = (uint16_T)MX_Gateway_B.FromWs[1];

  // DataTypeConversion: '<S3>/Data Type Conversion108'
  ecu_EngineSpeed = (uint16_T)MX_Gateway_B.FromWs[2];

  // DataTypeConversion: '<S3>/Data Type Conversion11'
  cmd_AuxEnable_ST = (uint8_T)MX_Gateway_B.FromWs_bip1[3];

  // DataTypeConversion: '<S3>/Data Type Conversion114'
  state_ecuECT = (uint8_T)MX_Gateway_B.FromWs[3];

  // DataTypeConversion: '<S3>/Data Type Conversion115'
  state_ecuEOP = (uint8_T)MX_Gateway_B.FromWs[4];

  // DataTypeConversion: '<S3>/Data Type Conversion116'
  ecu_GlowPlug = (uint8_T)MX_Gateway_B.FromWs[5];

  // DataTypeConversion: '<S3>/Data Type Conversion12'
  ecu_isocMinRPM = (uint16_T)MX_Gateway_B.FromWs[9];

  // DataTypeConversion: '<S3>/Data Type Conversion121'
  msgAge_ECU = (uint16_T)MX_Gateway_B.FromWs[6];

  // DataTypeConversion: '<S3>/Data Type Conversion13'
  lamp_Engine = (uint16_T)MX_Gateway_B.FromWs[11];

  // DataTypeConversion: '<S3>/Data Type Conversion14'
  ecu_PercentTorque = (int8_T)floor(MX_Gateway_B.FromWs[10]);

  // FromWorkspace: '<S15>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_g5ct.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_g5ct.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_dvlg.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_dvlg.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 6; ++elIdx) {
              (&MX_Gateway_B.FromWs_nnlo[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 6; ++elIdx) {
              (&MX_Gateway_B.FromWs_nnlo[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 6; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_nnlo[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion15'
  msgAge_DeluxeG55 = (uint16_T)MX_Gateway_B.FromWs_nnlo[0];

  // DataTypeConversion: '<S3>/Data Type Conversion16'
  dlx_G55_AutoIdle = (uint8_T)MX_Gateway_B.FromWs_nnlo[1];

  // DataTypeConversion: '<S3>/Data Type Conversion17'
  dlx_G55_EcoMode = (uint8_T)MX_Gateway_B.FromWs_nnlo[2];

  // DataTypeConversion: '<S3>/Data Type Conversion18'
  dlx_G55_AutoIdleTime = (uint8_T)MX_Gateway_B.FromWs_nnlo[3];

  // FromWorkspace: '<S14>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_kkec.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_kkec.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_iuxe.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_iuxe.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 5; ++elIdx) {
              (&MX_Gateway_B.FromWs_b3df[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 5; ++elIdx) {
              (&MX_Gateway_B.FromWs_b3df[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 5; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_b3df[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion19'
  flow_Aux1Percent = (uint8_T)MX_Gateway_B.FromWs_b3df[1];

  // FromWorkspace: '<S20>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_o1ux.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_o1ux.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_ar03.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_ar03.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          MX_Gateway_B.FromWs_lvzg = pDataValues[currTimeIndex];
        } else {
          MX_Gateway_B.FromWs_lvzg = pDataValues[currTimeIndex + 1];
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;
        d1 = pDataValues[TimeIndex];
        d2 = pDataValues[TimeIndex + 1];
        MX_Gateway_B.FromWs_lvzg = (real_T) rtInterpolate(d1, d2, f1, f2);
        pDataValues += 6;
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion2'
  msgAge_StdDisplay = (uint16_T)MX_Gateway_B.FromWs_lvzg;

  // FromWorkspace: '<S17>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_dksw.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_dksw.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_idc5.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_idc5.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 3; ++elIdx) {
              (&MX_Gateway_B.FromWs_cuqe[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 3; ++elIdx) {
              (&MX_Gateway_B.FromWs_cuqe[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 3; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_cuqe[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion20'
  msgAge_JogShuttle = (uint16_T)MX_Gateway_B.FromWs_cuqe[0];

  // FromWorkspace: '<S13>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_mrce.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_mrce.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_ohoz.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_ohoz.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 8; ++elIdx) {
              (&MX_Gateway_B.FromWs_ai0h[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 8; ++elIdx) {
              (&MX_Gateway_B.FromWs_ai0h[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 8; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_ai0h[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion21'
  can_sec_spare1 = (uint8_T)MX_Gateway_B.FromWs_ai0h[1];

  // DataTypeConversion: '<S3>/Data Type Conversion22'
  can_sec_spare2 = (uint8_T)MX_Gateway_B.FromWs_ai0h[2];

  // DataTypeConversion: '<S3>/Data Type Conversion23'
  btn_SnakeEyes = (uint8_T)MX_Gateway_B.FromWs_ai0h[3];

  // DataTypeConversion: '<S3>/Data Type Conversion24'
  btn_JogShuttleAux = (uint8_T)MX_Gateway_B.FromWs_cuqe[1];

  // DataTypeConversion: '<S3>/Data Type Conversion25'
  btn_JogShuttleLights = (uint8_T)MX_Gateway_B.FromWs_cuqe[2];

  // FromWorkspace: '<S22>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_gczn.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_gczn.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_kvba.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_kvba.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 2; ++elIdx) {
              (&MX_Gateway_B.FromWs_egeh[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 2; ++elIdx) {
              (&MX_Gateway_B.FromWs_egeh[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 2; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_egeh[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion27'
  fdbk_CANThrottle = (uint16_T)MX_Gateway_B.FromWs_egeh[1];

  // DataTypeConversion: '<S3>/Data Type Conversion28'
  auth_DeluxeG55 = (uint8_T)MX_Gateway_B.FromWs_nnlo[4];

  // FromWorkspace: '<S18>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_gasw.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_gasw.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_p3t0.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_p3t0.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          MX_Gateway_B.FromWs_hdsp = pDataValues[currTimeIndex];
        } else {
          MX_Gateway_B.FromWs_hdsp = pDataValues[currTimeIndex + 1];
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;
        d1 = pDataValues[TimeIndex];
        d2 = pDataValues[TimeIndex + 1];
        MX_Gateway_B.FromWs_hdsp = (real_T) rtInterpolate(d1, d2, f1, f2);
        pDataValues += 6;
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion29'
  msgAge_KeylessEntry = (uint16_T)MX_Gateway_B.FromWs_hdsp;

  // DataTypeConversion: '<S3>/Data Type Conversion3'
  delay_DepthBeep = (uint16_T)MX_Gateway_B.FromWs_ai0h[4];

  // DataTypeConversion: '<S3>/Data Type Conversion30'
  can_OffsetSelectSw = (MX_Gateway_B.FromWs_ai0h[6] != 0.0);

  // DataTypeConversion: '<S3>/Data Type Conversion31'
  can_RightHandleSelectSw = (MX_Gateway_B.FromWs_ai0h[7] != 0.0);

  // FromWorkspace: '<S12>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_el1u.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_el1u.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_ifjj.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_ifjj.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 5; ++elIdx) {
              (&MX_Gateway_B.FromWs_cy5b[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 5; ++elIdx) {
              (&MX_Gateway_B.FromWs_cy5b[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 5; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_cy5b[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S3>/Data Type Conversion32'
  can_ACD_EStop = (uint8_T)MX_Gateway_B.FromWs_cy5b[2];

  // DataTypeConversion: '<S3>/Data Type Conversion33'
  can_ACD_AuxCommand = (uint8_T)MX_Gateway_B.FromWs_cy5b[3];

  // DataTypeConversion: '<S3>/Data Type Conversion34'
  can_ACD_EngineStart = (uint8_T)MX_Gateway_B.FromWs_cy5b[0];

  // DataTypeConversion: '<S3>/Data Type Conversion35'
  state_ACD_CAN = (uint8_T)MX_Gateway_B.FromWs_cy5b[1];

  // DataTypeConversion: '<S3>/Data Type Conversion36'
  cmd_AuxEnable_ACD = (uint8_T)MX_Gateway_B.FromWs_cy5b[4];

  // DataTypeConversion: '<S3>/Data Type Conversion37'
  ecu_HP = (uint8_T)MX_Gateway_B.FromWs[12];

  // DataTypeConversion: '<S3>/Data Type Conversion38'
  state_DeluxeG55 = (uint8_T)MX_Gateway_B.FromWs_nnlo[5];

  // DataTypeConversion: '<S3>/Data Type Conversion39'
  flow_Aux2Percent = (uint8_T)MX_Gateway_B.FromWs_b3df[2];

  // DataTypeConversion: '<S3>/Data Type Conversion4'
  ecu_isocMaxRPM = (uint16_T)MX_Gateway_B.FromWs[8];

  // DataTypeConversion: '<S3>/Data Type Conversion40'
  flow_Aux4Percent = (uint8_T)MX_Gateway_B.FromWs_b3df[3];

  // DataTypeConversion: '<S3>/Data Type Conversion41'
  flow_OffsetPercent = (uint8_T)MX_Gateway_B.FromWs_b3df[4];

  // DataTypeConversion: '<S3>/Data Type Conversion49'
  msgAge_Throttle = (uint16_T)MX_Gateway_B.FromWs_egeh[0];

  // DataTypeConversion: '<S3>/Data Type Conversion5'
  ecu_EOT = (uint16_T)MX_Gateway_B.FromWs[14];

  // DataTypeConversion: '<S3>/Data Type Conversion6'
  ecu_EngineStarterMode = (uint8_T)MX_Gateway_B.FromWs[7];

  // DataTypeConversion: '<S3>/Data Type Conversion7'
  state_DepthBeep = (uint8_T)MX_Gateway_B.FromWs_ai0h[5];

  // DataTypeConversion: '<S3>/Data Type Conversion72'
  state_DeluxeG5 = (uint8_T)MX_Gateway_B.FromWs_b3df[0];

  // DataTypeConversion: '<S3>/Data Type Conversion73'
  msgAge_Secondary = (uint16_T)MX_Gateway_B.FromWs_ai0h[0];

  // DataTypeConversion: '<S3>/Data Type Conversion8'
  can_ST_EngineStart = (uint8_T)MX_Gateway_B.FromWs_bip1[0];

  // DataTypeConversion: '<S3>/Data Type Conversion9'
  state_ST_CAN = (uint8_T)MX_Gateway_B.FromWs_bip1[1];

  // FromWorkspace: '<S23>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_c3xy.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_c3xy.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_nius.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[19]) {
      currTimeIndex = 18;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_nius.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          MX_Gateway_B.FromWs_ohmh = pDataValues[currTimeIndex];
        } else {
          MX_Gateway_B.FromWs_ohmh = pDataValues[currTimeIndex + 1];
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;
        d1 = pDataValues[TimeIndex];
        d2 = pDataValues[TimeIndex + 1];
        MX_Gateway_B.FromWs_ohmh = (real_T) rtInterpolate(d1, d2, f1, f2);
        pDataValues += 20;
      }
    }
  }

  // DataTypeConversion: '<S4>/Data Type Conversion1'
  state_Inverter = (uint8_T)MX_Gateway_B.FromWs_ohmh;

  // Constant: '<S1>/Constant1'
  for (i = 0; i < 5; i++) {
    ee_OwnerPassword[i] = MX_Gateway_ConstP.pooled43[i];
  }

  // End of Constant: '<S1>/Constant1'

  // Constant: '<S1>/Constant2'
  for (i = 0; i < 5; i++) {
    ee_MasterPassword[i] = MX_Gateway_ConstP.pooled43[i];
  }

  // End of Constant: '<S1>/Constant2'

  // Constant: '<S1>/Constant3'
  for (i = 0; i < 5; i++) {
    ee_User1Password[i] = MX_Gateway_ConstP.pooled43[i];
  }

  // End of Constant: '<S1>/Constant3'

  // Constant: '<S1>/Constant4'
  for (i = 0; i < 5; i++) {
    ee_User2Password[i] = MX_Gateway_ConstP.pooled43[i];
  }

  // End of Constant: '<S1>/Constant4'

  // FromWorkspace: '<S6>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_iyga.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_iyga.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_opza.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_opza.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 13; ++elIdx) {
              (&MX_Gateway_B.FromWs_pam2[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 13; ++elIdx) {
              (&MX_Gateway_B.FromWs_pam2[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 13; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_pam2[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S1>/Data Type Conversion1' incorporates:
  //   RateTransition: '<S1>/Rate Transition23'

  ain_SensorSupply1 = (uint16_T)MX_Gateway_B.FromWs_pam2[1];

  // FromWorkspace: '<S11>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_fic3.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_fic3.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_ioyl.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_ioyl.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          MX_Gateway_B.FromWs_j141 = pDataValues[currTimeIndex];
        } else {
          MX_Gateway_B.FromWs_j141 = pDataValues[currTimeIndex + 1];
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;
        d1 = pDataValues[TimeIndex];
        d2 = pDataValues[TimeIndex + 1];
        MX_Gateway_B.FromWs_j141 = (real_T) rtInterpolate(d1, d2, f1, f2);
        pDataValues += 6;
      }
    }
  }

  // DataTypeConversion: '<S1>/Data Type Conversion10'
  freq_EngineSpeed = (uint32_T)MX_Gateway_B.FromWs_j141;

  // FromWorkspace: '<S8>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_dlz4.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_dlz4.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_fmyb.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_fmyb.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 12; ++elIdx) {
              (&MX_Gateway_B.FromWs_n0ol[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 12; ++elIdx) {
              (&MX_Gateway_B.FromWs_n0ol[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 12; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_n0ol[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S1>/Data Type Conversion101'
  state_ConsoleTest = (uint8_T)MX_Gateway_B.FromWs_n0ol[3];

  // DataTypeConversion: '<S1>/Data Type Conversion103'
  flag_InitEERead = (MX_Gateway_B.FromWs_n0ol[6] != 0.0);

  // FromWorkspace: '<S10>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_cn10.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_cn10.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_ir3w.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_ir3w.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 27; ++elIdx) {
              (&MX_Gateway_B.FromWs_d2ch[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 27; ++elIdx) {
              (&MX_Gateway_B.FromWs_d2ch[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 27; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_d2ch[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S1>/Data Type Conversion11'
  dfbk_StarterOutput = (MX_Gateway_B.FromWs_d2ch[4] != 0.0);

  // FromWorkspace: '<S7>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_jy1m.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_jy1m.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_gs0t.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_gs0t.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 4; ++elIdx) {
              (&MX_Gateway_B.FromWs_dfvy[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 4; ++elIdx) {
              (&MX_Gateway_B.FromWs_dfvy[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 4; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_dfvy[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S1>/Data Type Conversion110'
  adin_TravelPressureSwitch = (uint16_T)MX_Gateway_B.FromWs_dfvy[3];

  // DataTypeConversion: '<S1>/Data Type Conversion12' incorporates:
  //   RateTransition: '<S1>/Rate Transition4'

  din_AirFilter = (uint8_T)MX_Gateway_B.FromWs_d2ch[0];

  // DataTypeConversion: '<S1>/Data Type Conversion13' incorporates:
  //   RateTransition: '<S1>/Rate Transition5'

  din_HCFilter1 = (uint8_T)MX_Gateway_B.FromWs_d2ch[1];

  // DataTypeConversion: '<S1>/Data Type Conversion14'
  din_TwoSpeedSwitch = (uint8_T)MX_Gateway_B.FromWs_d2ch[3];

  // DataTypeConversion: '<S1>/Data Type Conversion15' incorporates:
  //   RateTransition: '<S1>/Rate Transition12'

  ain_VBattery = (uint16_T)MX_Gateway_B.FromWs_pam2[4];

  // DataTypeConversion: '<S1>/Data Type Conversion16' incorporates:
  //   RateTransition: '<S1>/Rate Transition18'

  dfbk_LightsOutput = (MX_Gateway_B.FromWs_d2ch[16] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion17' incorporates:
  //   RateTransition: '<S1>/Rate Transition3'

  ain_FuelLevel = (uint16_T)MX_Gateway_B.FromWs_pam2[7];

  // DataTypeConversion: '<S1>/Data Type Conversion18'
  din_SecondAuxSw = (MX_Gateway_B.FromWs_d2ch[22] != 0.0);

  // FromWorkspace: '<S5>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_fa0x.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_fa0x.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_cgar.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_cgar.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 11; ++elIdx) {
              (&MX_Gateway_B.FromWs_cf2a[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 11; ++elIdx) {
              (&MX_Gateway_B.FromWs_cf2a[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 11; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_cf2a[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S1>/Data Type Conversion19' incorporates:
  //   RateTransition: '<S1>/Rate Transition24'

  afbk_FuelSec = (uint16_T)MX_Gateway_B.FromWs_cf2a[3];

  // DataTypeConversion: '<S1>/Data Type Conversion2'
  ain_Console = (uint16_T)MX_Gateway_B.FromWs_pam2[0];

  // FromWorkspace: '<S9>/FromWs'
  {
    real_T *pDataValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_ehvl.DataPtr;
    real_T *pTimeValues = (real_T *) MX_Gateway_DWork.FromWs_PWORK_ehvl.TimePtr;
    int_T currTimeIndex = MX_Gateway_DWork.FromWs_IWORK_jni2.PrevIndex;
    real_T t = MX_Gateway_M->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[5]) {
      currTimeIndex = 4;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    MX_Gateway_DWork.FromWs_IWORK_jni2.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 8; ++elIdx) {
              (&MX_Gateway_B.FromWs_neyc[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 6;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 8; ++elIdx) {
              (&MX_Gateway_B.FromWs_neyc[0])[elIdx] = pDataValues[currTimeIndex
                + 1];
              pDataValues += 6;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 8; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&MX_Gateway_B.FromWs_neyc[0])[elIdx] = (real_T) rtInterpolate(d1,
              d2, f1, f2);
            pDataValues += 6;
          }
        }
      }
    }
  }

  // DataTypeConversion: '<S1>/Data Type Conversion20'
  ifbk_HydEnable = (uint16_T)MX_Gateway_B.FromWs_neyc[0];

  // DataTypeConversion: '<S1>/Data Type Conversion21'
  ifbk_OffsetRod = (uint16_T)MX_Gateway_B.FromWs_neyc[1];

  // DataTypeConversion: '<S1>/Data Type Conversion22'
  afbk_OffsetRod = (uint16_T)MX_Gateway_B.FromWs_cf2a[1];

  // DataTypeConversion: '<S1>/Data Type Conversion23'
  afbk_AuxRod = (uint16_T)MX_Gateway_B.FromWs_cf2a[2];

  // DataTypeConversion: '<S1>/Data Type Conversion24'
  ifbk_AuxRod = (uint16_T)MX_Gateway_B.FromWs_neyc[2];

  // DataTypeConversion: '<S1>/Data Type Conversion25' incorporates:
  //   RateTransition: '<S1>/Rate Transition20'

  dfbk_HydExchange = (MX_Gateway_B.FromWs_d2ch[17] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion26' incorporates:
  //   RateTransition: '<S1>/Rate Transition8'

  adin_HOT = (uint16_T)MX_Gateway_B.FromWs_dfvy[0];

  // DataTypeConversion: '<S1>/Data Type Conversion27' incorporates:
  //   RateTransition: '<S1>/Rate Transition10'

  adin_EOP = (uint16_T)MX_Gateway_B.FromWs_dfvy[1];

  // DataTypeConversion: '<S1>/Data Type Conversion28' incorporates:
  //   RateTransition: '<S1>/Rate Transition7'

  ain_ECT = (uint16_T)MX_Gateway_B.FromWs_pam2[6];

  // DataTypeConversion: '<S1>/Data Type Conversion29' incorporates:
  //   RateTransition: '<S1>/Rate Transition11'

  adin_LoadSense = (uint16_T)MX_Gateway_B.FromWs_dfvy[2];

  // DataTypeConversion: '<S1>/Data Type Conversion3' incorporates:
  //   RateTransition: '<S1>/Rate Transition21'

  ain_OffsetPot = (uint16_T)MX_Gateway_B.FromWs_pam2[3];

  // DataTypeConversion: '<S1>/Data Type Conversion30'
  ifbk_HydBypass = (uint16_T)MX_Gateway_B.FromWs_neyc[6];

  // DataTypeConversion: '<S1>/Data Type Conversion31'
  dfbk_SwPowerOutput = (MX_Gateway_B.FromWs_d2ch[9] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion32'
  din_SwPowerRelay = (MX_Gateway_B.FromWs_d2ch[8] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion33'
  dfbk_Buzzer = (uint8_T)MX_Gateway_B.FromWs_d2ch[15];

  // DataTypeConversion: '<S1>/Data Type Conversion34' incorporates:
  //   RateTransition: '<S1>/Rate Transition1'

  ain_PrecisionReference = (uint16_T)MX_Gateway_B.FromWs_pam2[9];

  // DataTypeConversion: '<S1>/Data Type Conversion35'
  dfbk_HVACOutput = (MX_Gateway_B.FromWs_d2ch[19] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion36' incorporates:
  //   RateTransition: '<S1>/Rate Transition2'

  ain_AuxPot = (uint16_T)MX_Gateway_B.FromWs_pam2[8];

  // DataTypeConversion: '<S1>/Data Type Conversion37'
  state_TwoSpeedLock = (uint8_T)MX_Gateway_B.FromWs_n0ol[1];

  // DataTypeConversion: '<S1>/Data Type Conversion38'
  ddp_MachineLock = (uint8_T)MX_Gateway_B.FromWs_n0ol[2];

  // DataTypeConversion: '<S1>/Data Type Conversion39' incorporates:
  //   RateTransition: '<S1>/Rate Transition19'

  din_PBValveRelay = (MX_Gateway_B.FromWs_d2ch[23] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion4' incorporates:
  //   RateTransition: '<S1>/Rate Transition22'

  ain_SensorSupply2 = (uint16_T)MX_Gateway_B.FromWs_pam2[2];

  // DataTypeConversion: '<S1>/Data Type Conversion40' incorporates:
  //   RateTransition: '<S1>/Rate Transition14'

  dfbk_GlowPlugOutput = (MX_Gateway_B.FromWs_d2ch[11] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion41' incorporates:
  //   RateTransition: '<S1>/Rate Transition13'

  din_GlowPlugRelay = (MX_Gateway_B.FromWs_d2ch[10] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion42'
  din_Detent = (uint8_T)MX_Gateway_B.FromWs_d2ch[20];

  // DataTypeConversion: '<S1>/Data Type Conversion43' incorporates:
  //   RateTransition: '<S1>/Rate Transition16'

  dfbk_FuelPriOutput = (MX_Gateway_B.FromWs_d2ch[13] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion44' incorporates:
  //   RateTransition: '<S1>/Rate Transition15'

  din_FuelPriRelay = (MX_Gateway_B.FromWs_d2ch[12] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion45'
  state_ConstantData = (uint8_T)MX_Gateway_B.FromWs_n0ol[0];

  // DataTypeConversion: '<S1>/Data Type Conversion46'
  din_StarterRelay = (MX_Gateway_B.FromWs_d2ch[14] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion47'
  state_ServiceClock = (uint8_T)MX_Gateway_B.FromWs_n0ol[4];

  // DataTypeConversion: '<S1>/Data Type Conversion48'
  state_System = (uint8_T)MX_Gateway_B.FromWs_n0ol[5];

  // DataTypeConversion: '<S1>/Data Type Conversion49'
  scrn_DeluxePwdFail = (uint8_T)MX_Gateway_B.FromWs_n0ol[7];

  // DataTypeConversion: '<S1>/Data Type Conversion5'
  din_RemoteKey = (uint8_T)MX_Gateway_B.FromWs_d2ch[6];

  // DataTypeConversion: '<S1>/Data Type Conversion50'
  ifbk_DumpValve = (uint16_T)MX_Gateway_B.FromWs_neyc[5];

  // DataTypeConversion: '<S1>/Data Type Conversion51'
  afbk_DumpValve = (uint16_T)MX_Gateway_B.FromWs_cf2a[8];

  // DataTypeConversion: '<S1>/Data Type Conversion52'
  afbk_HydBypass = (uint16_T)MX_Gateway_B.FromWs_cf2a[9];

  // DataTypeConversion: '<S1>/Data Type Conversion53' incorporates:
  //   RateTransition: '<S1>/Rate Transition17'

  din_LightsRelay = (MX_Gateway_B.FromWs_d2ch[21] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion54' incorporates:
  //   RateTransition: '<S1>/Rate Transition25'

  dfbk_PBValveOutput = (MX_Gateway_B.FromWs_d2ch[24] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion55'
  din_OWDEnableSw = (MX_Gateway_B.FromWs_d2ch[25] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion56'
  afbk_OffsetBase = (uint16_T)MX_Gateway_B.FromWs_cf2a[6];

  // DataTypeConversion: '<S1>/Data Type Conversion57'
  ifbk_OffsetBase = (uint16_T)MX_Gateway_B.FromWs_neyc[3];

  // DataTypeConversion: '<S1>/Data Type Conversion58'
  ifbk_Diverter = (uint16_T)MX_Gateway_B.FromWs_neyc[7];

  // DataTypeConversion: '<S1>/Data Type Conversion59'
  afbk_TwoSpeed = (uint16_T)MX_Gateway_B.FromWs_cf2a[4];

  // DataTypeConversion: '<S1>/Data Type Conversion6' incorporates:
  //   RateTransition: '<S1>/Rate Transition9'

  ain_SwitchedPower = (uint16_T)MX_Gateway_B.FromWs_pam2[5];

  // DataTypeConversion: '<S1>/Data Type Conversion60'
  afbk_TwoSpeedSecondary = (uint16_T)MX_Gateway_B.FromWs_cf2a[5];

  // DataTypeConversion: '<S1>/Data Type Conversion61'
  afbk_HydEnable = (uint16_T)MX_Gateway_B.FromWs_cf2a[0];

  // DataTypeConversion: '<S1>/Data Type Conversion62'
  afbk_Diverter = (uint16_T)MX_Gateway_B.FromWs_cf2a[10];

  // DataTypeConversion: '<S1>/Data Type Conversion63' incorporates:
  //   RateTransition: '<S1>/Rate Transition26'

  ain_LoadMoment = (uint16_T)MX_Gateway_B.FromWs_pam2[10];

  // DataTypeConversion: '<S1>/Data Type Conversion64'
  din_HVACRelay = (MX_Gateway_B.FromWs_d2ch[18] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion65'
  actualHourMeter = (uint32_T)MX_Gateway_B.FromWs_n0ol[8];

  // DataTypeConversion: '<S1>/Data Type Conversion66' incorporates:
  //   RateTransition: '<S1>/Rate Transition29'

  ain_ThrottlePrimary = (uint16_T)MX_Gateway_B.FromWs_pam2[11];

  // DataTypeConversion: '<S1>/Data Type Conversion67'
  dv_TurboPrime = (uint8_T)MX_Gateway_B.FromWs_n0ol[9];

  // DataTypeConversion: '<S1>/Data Type Conversion68'
  din_LeftHandleSelectSw = (MX_Gateway_B.FromWs_d2ch[26] != 0.0);

  // DataTypeConversion: '<S1>/Data Type Conversion69'
  afbk_AuxBase = (uint16_T)MX_Gateway_B.FromWs_cf2a[7];

  // DataTypeConversion: '<S1>/Data Type Conversion7'
  din_EngineStart = (uint8_T)MX_Gateway_B.FromWs_d2ch[7];

  // DataTypeConversion: '<S1>/Data Type Conversion70'
  ifbk_AuxBase = (uint16_T)MX_Gateway_B.FromWs_neyc[4];

  // DataTypeConversion: '<S1>/Data Type Conversion71' incorporates:
  //   RateTransition: '<S1>/Rate Transition27'

  ain_Aux2FlowControl = (uint16_T)MX_Gateway_B.FromWs_pam2[12];

  // DataTypeConversion: '<S1>/Data Type Conversion72'
  state_KeylessEntryPassword = (uint8_T)MX_Gateway_B.FromWs_n0ol[10];

  // DataTypeConversion: '<S1>/Data Type Conversion73'
  state_KeylessEntryLock = (uint8_T)MX_Gateway_B.FromWs_n0ol[11];

  // DataTypeConversion: '<S1>/Data Type Conversion8' incorporates:
  //   RateTransition: '<S1>/Rate Transition6'

  din_ACOn = (uint8_T)MX_Gateway_B.FromWs_d2ch[2];

  // DataTypeConversion: '<S1>/Data Type Conversion9'
  din_RunEnter = (uint8_T)MX_Gateway_B.FromWs_d2ch[5];

  // RateTransition: '<S25>/Rate Transition39'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition39 = ain_VBattery;

    // RateTransition: '<S25>/Rate Transition11'
    MX_Gateway_B.RateTransition11_fbdn = ain_PrecisionReference;
  }

  // End of RateTransition: '<S25>/Rate Transition39'

  // UnitDelay: '<S28>/Unit Delay7'
  state_CommECU = MX_Gateway_DWork.UnitDelay7_DSTATE_oa3i;

  // RateTransition: '<S25>/Rate Transition49'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition49 = adin_EOP;

    // RateTransition: '<S25>/Rate Transition27'
    MX_Gateway_B.RateTransition27_peiw = ain_SensorSupply1;

    // RateTransition: '<S25>/Rate Transition33'
    MX_Gateway_B.RateTransition33 = ain_SensorSupply2;

    // RateTransition: '<S25>/Rate Transition12'
    MX_Gateway_B.RateTransition12_ft5w = state_System;

    // RateTransition: '<S25>/Rate Transition29'
    MX_Gateway_B.RateTransition29_fgea = ecu_EOP;

    // RateTransition: '<S25>/Rate Transition30'
    MX_Gateway_B.RateTransition30 = state_CommECU;

    // RateTransition: '<S25>/Rate Transition24'
    MX_Gateway_B.RateTransition24_nsxa = ain_SensorSupply1;

    // UnitDelay: '<S25>/Unit Delay6'
    MX_Gateway_B.UnitDelay7 = MX_Gateway_DWork.UnitDelay6_DSTATE;

    // Outputs for Atomic SubSystem: '<S25>/SensorSupply1'
    MX_Gateway_SensorSupply1();

    // End of Outputs for SubSystem: '<S25>/SensorSupply1'

    // RateTransition: '<S25>/Rate Transition15'
    MX_Gateway_B.RateTransition15_jr3w = ain_SensorSupply2;

    // UnitDelay: '<S25>/Unit Delay7'
    MX_Gateway_B.UnitDelay7 = MX_Gateway_DWork.UnitDelay7_DSTATE;

    // Outputs for Atomic SubSystem: '<S25>/SensorSupply2'
    MX_Gateway_SensorSupply2();

    // End of Outputs for SubSystem: '<S25>/SensorSupply2'
  }

  // End of RateTransition: '<S25>/Rate Transition49'

  // RateTransition: '<S25>/Rate Transition2' incorporates:
  //   UnitDelay: '<S25>/Unit Delay2'

  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition2_ltwg = MX_Gateway_DWork.UnitDelay2_DSTATE_he0j;
  }

  // End of RateTransition: '<S25>/Rate Transition2'

  // RateTransition: '<S25>/Rate Transition28' incorporates:
  //   UnitDelay: '<S25>/Unit Delay3'

  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition28 = MX_Gateway_DWork.UnitDelay3_DSTATE;

    // Outputs for Atomic SubSystem: '<S25>/EOP'
    MX_Gateway_EOP();

    // End of Outputs for SubSystem: '<S25>/EOP'
  }

  // End of RateTransition: '<S25>/Rate Transition28'

  // RateTransition: '<S25>/Rate Transition37'
  MX_Gateway_B.RateTransition37 = flt_EOP;

  // RateTransition: '<S25>/Rate Transition38'
  MX_Gateway_B.RateTransition38 = state_EOP;

  // RateTransition: '<S25>/Rate Transition35'
  MX_Gateway_B.RateTransition35 = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S25>/EngineSpeed'
  MX_Gateway_EngineSpeed();

  // End of Outputs for SubSystem: '<S25>/EngineSpeed'

  // RateTransition: '<S25>/Rate Transition47'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition47 = ain_ECT;

    // RateTransition: '<S25>/Rate Transition17'
    MX_Gateway_B.RateTransition17_pcun = ain_SensorSupply1;

    // RateTransition: '<S25>/Rate Transition14'
    MX_Gateway_B.RateTransition14_hqau = state_System;

    // RateTransition: '<S25>/Rate Transition32'
    MX_Gateway_B.RateTransition32 = ecu_ECT;

    // RateTransition: '<S25>/Rate Transition31'
    MX_Gateway_B.RateTransition31 = state_CommECU;
  }

  // End of RateTransition: '<S25>/Rate Transition47'

  // RateTransition: '<S25>/Rate Transition59' incorporates:
  //   UnitDelay: '<S25>/Unit Delay12'

  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition59 = MX_Gateway_DWork.UnitDelay12_DSTATE;

    // Outputs for Atomic SubSystem: '<S25>/ECT'
    MX_Gateway_ECT();

    // End of Outputs for SubSystem: '<S25>/ECT'
  }

  // End of RateTransition: '<S25>/Rate Transition59'

  // RateTransition: '<S28>/Rate Transition13'
  MX_Gateway_B.RateTransition13_gcbk = state_ECT;

  // RateTransition: '<S28>/Rate Transition57'
  MX_Gateway_B.RateTransition57 = state_EOP;

  // RateTransition: '<S25>/Rate Transition48'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition48 = adin_HOT;

    // RateTransition: '<S25>/Rate Transition19'
    MX_Gateway_B.RateTransition19_p52v = ain_SensorSupply1;

    // RateTransition: '<S25>/Rate Transition13'
    MX_Gateway_B.RateTransition13_f1pl = state_System;
  }

  // End of RateTransition: '<S25>/Rate Transition48'

  // RateTransition: '<S25>/Rate Transition41' incorporates:
  //   UnitDelay: '<S25>/Unit Delay11'

  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition41 = MX_Gateway_DWork.UnitDelay11_DSTATE;

    // Outputs for Atomic SubSystem: '<S25>/HydOilTemp'
    MX_Gateway_HydOilTemp();

    // End of Outputs for SubSystem: '<S25>/HydOilTemp'
  }

  // End of RateTransition: '<S25>/Rate Transition41'

  // RateTransition: '<S28>/Rate Transition19'
  MX_Gateway_B.RateTransition19_fh5v = state_HOT;

  // UnitDelay: '<S28>/Unit Delay5'
  MX_Gateway_B.UnitDelay2_nwqf = MX_Gateway_DWork.UnitDelay5_DSTATE;

  // UnitDelay: '<S28>/Unit Delay4'
  MX_Gateway_B.UnitDelay10_kkg2 = MX_Gateway_DWork.UnitDelay4_DSTATE;

  // Outputs for Atomic SubSystem: '<S28>/Machine_Lock'
  MX_Gateway_Machine_Lock();

  // End of Outputs for SubSystem: '<S28>/Machine_Lock'

  // UnitDelay: '<S25>/Unit Delay8'
  MX_Gateway_B.UnitDelay10_kkg2 = MX_Gateway_DWork.UnitDelay8_DSTATE;

  // Outputs for Atomic SubSystem: '<S25>/Engine_Start'
  Engine_Start();

  // End of Outputs for SubSystem: '<S25>/Engine_Start'

  // Outputs for Atomic SubSystem: '<S25>/Key'
  MX_Gateway_Key();

  // End of Outputs for SubSystem: '<S25>/Key'

  // RateTransition: '<S25>/Rate Transition64'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition64 = can_FuelTemp;

    // RateTransition: '<S25>/Rate Transition69'
    MX_Gateway_B.RateTransition69 = state_System;

    // RateTransition: '<S25>/Rate Transition70'
    MX_Gateway_B.RateTransition70 = state_CommECU;
  }

  // End of RateTransition: '<S25>/Rate Transition64'

  // RateTransition: '<S25>/Rate Transition71' incorporates:
  //   UnitDelay: '<S25>/Unit Delay5'

  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition71 = MX_Gateway_DWork.UnitDelay5_DSTATE_nojo;

    // Outputs for Atomic SubSystem: '<S25>/Fuel_Temperature'
    MX_Gateway_Fuel_Temperature();

    // End of Outputs for SubSystem: '<S25>/Fuel_Temperature'
  }

  // End of RateTransition: '<S25>/Rate Transition71'

  // RateTransition: '<S28>/Rate Transition2'
  MX_Gateway_B.RateTransition2_c3je = state_FuelTemp;

  // RateTransition: '<S25>/Rate Transition62'
  MX_Gateway_B.RateTransition62 = state_SensorSupply1;

  // RateTransition: '<S25>/Rate Transition4'
  MX_Gateway_B.RateTransition4_nlao = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S25>/Console_Sensor'
  MX_Gateway_Console_Sensor();

  // End of Outputs for SubSystem: '<S25>/Console_Sensor'

  // UnitDelay: '<S28>/Unit Delay6'
  MX_Gateway_B.UnitDelay10_kkg2 = MX_Gateway_DWork.UnitDelay6_DSTATE_gv5d;

  // UnitDelay: '<S28>/Unit Delay2'
  MX_Gateway_B.UnitDelay2_nwqf = MX_Gateway_DWork.UnitDelay2_DSTATE_bf1p;

  // UnitDelay: '<S28>/Unit Delay3'
  MX_Gateway_B.UnitDelay9_hk24 = MX_Gateway_DWork.UnitDelay3_DSTATE_nlci;

  // Outputs for Atomic SubSystem: '<S28>/Engine'
  MX_Gateway_Engine();

  // End of Outputs for SubSystem: '<S28>/Engine'

  // RateTransition: '<S25>/Rate Transition3'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition3_hfqm = state_Engine;

    // RateTransition: '<S25>/Rate Transition20'
    MX_Gateway_B.RateTransition20_aazl = flt_EngineSpeed;

    // Outputs for Atomic SubSystem: '<S25>/VBattery'
    MX_Gateway_VBattery();

    // End of Outputs for SubSystem: '<S25>/VBattery'
  }

  // End of RateTransition: '<S25>/Rate Transition3'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode'

  // RateTransition: '<S24>/Rate Transition22'
  MX_Gateway_ErrorCode(state_VBattery, &rtb_Sum_h13h, FN_BATTERY_VOLTAGE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode1'

  // RateTransition: '<S24>/Rate Transition1'
  MX_Gateway_ErrorCode(state_Alternator, &rtb_Sum_k4ye, FN_ALTERNATOR_VOLTAGE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode1'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode10'

  // RateTransition: '<S24>/Rate Transition8'
  MX_Gateway_ErrorCode(state_HOT, &rtb_Sum_acle, FN_HYDRAULIC_OIL_TEMPERATURE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode10'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode11'

  // RateTransition: '<S24>/Rate Transition9'
  MX_Gateway_ErrorCode(state_EOP, &rtb_Sum_d5bx, FN_ENGINE_OIL_PRESSURE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode11'

  // RateTransition: '<S25>/Rate Transition50'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition50 = ain_FuelLevel;

    // RateTransition: '<S25>/Rate Transition52'
    MX_Gateway_B.RateTransition52 = ain_SwitchedPower;

    // RateTransition: '<S25>/Rate Transition5'
    MX_Gateway_B.RateTransition5_af5m = state_Console;

    // RateTransition: '<S25>/Rate Transition51'
    MX_Gateway_B.RateTransition51 = state_Engine;

    // Outputs for Atomic SubSystem: '<S25>/FuelLevel'
    MX_Gateway_FuelLevel();

    // End of Outputs for SubSystem: '<S25>/FuelLevel'
  }

  // End of RateTransition: '<S25>/Rate Transition50'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode12'

  // RateTransition: '<S24>/Rate Transition10'
  MX_Gateway_ErrorCode(state_FuelLevel, &rtb_Sum_byyg, FN_FUEL_LEVEL);

  // End of Outputs for SubSystem: '<S24>/ErrorCode12'

  // RateTransition: '<S25>/Rate Transition16'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition16_hffa = ain_ThrottlePrimary;

    // RateTransition: '<S25>/Rate Transition34'
    MX_Gateway_B.RateTransition34 = ain_SensorSupply2;

    // RateTransition: '<S25>/Rate Transition8'
    MX_Gateway_B.RateTransition8_k12u = din_GlowPlugRelay;

    // RateTransition: '<S25>/Rate Transition6'
    MX_Gateway_B.RateTransition6_of4i = adin_TravelPressureSwitch;
  }

  // End of RateTransition: '<S25>/Rate Transition16'

  // RateTransition: '<S26>/Rate Transition14'
  MX_Gateway_B.RateTransition14_b2gt = state_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/SwitchedPower'
  MX_Gateway_SwitchedPower();

  // End of Outputs for SubSystem: '<S26>/SwitchedPower'

  // RateTransition: '<S26>/Rate Transition42'
  MX_Gateway_B.RateTransition42 = state_VBattery;

  // RateTransition: '<S26>/Rate Transition7'
  MX_Gateway_B.RateTransition7_fb0n = calc_VBattery;

  // UnitDelay: '<S26>/Unit Delay9'
  MX_Gateway_B.UnitDelay9_hk24 = MX_Gateway_DWork.UnitDelay9_DSTATE;

  // UnitDelay: '<S26>/Unit Delay10'
  MX_Gateway_B.UnitDelay10_kkg2 = MX_Gateway_DWork.UnitDelay10_DSTATE;

  // Outputs for Atomic SubSystem: '<S26>/FuelSec_ECUHold'
  MX_Gateway_FuelSec_ECUHold();

  // End of Outputs for SubSystem: '<S26>/FuelSec_ECUHold'

  // Outputs for Atomic SubSystem: '<S28>/Controller_State'
  MX_Gateway_Controller_State();

  // End of Outputs for SubSystem: '<S28>/Controller_State'

  // Outputs for Atomic SubSystem: '<S25>/Buttons'
  MX_Gateway_Buttons();

  // End of Outputs for SubSystem: '<S25>/Buttons'

  // Outputs for Atomic SubSystem: '<S25>/Eco_Mode'
  MX_Gateway_Eco_Mode();

  // End of Outputs for SubSystem: '<S25>/Eco_Mode'

  // RateTransition: '<S25>/Rate Transition63'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition63 = state_EcoMode;

    // Outputs for Atomic SubSystem: '<S25>/Throttle'
    MX_Gateway_Throttle();

    // End of Outputs for SubSystem: '<S25>/Throttle'
  }

  // End of RateTransition: '<S25>/Rate Transition63'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode13'

  // RateTransition: '<S24>/Rate Transition24'
  MX_Gateway_ErrorCode(state_ThrottlePrimary, &rtb_Sum_iszt, FN_THROTTLE_PRIMARY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode13'

  // RateTransition: '<S26>/Rate Transition1'
  MX_Gateway_B.RateTransition1_egwe = calc_VBattery;

  // RateTransition: '<S26>/Rate Transition12'
  MX_Gateway_B.RateTransition12_a0us = state_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/Hyd_Bypass'
  MX_Gateway_Hyd_Bypass();

  // End of Outputs for SubSystem: '<S26>/Hyd_Bypass'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode14'
  MX_Gateway_ErrorCode(state_HydBypass, &rtb_Sum_lart, FN_HYD_BYPASS);

  // End of Outputs for SubSystem: '<S24>/ErrorCode14'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode15'

  // RateTransition: '<S24>/Rate Transition13'
  MX_Gateway_ErrorCode(state_FuelTemp, &rtb_Sum_knri, FN_FUEL_TEMP);

  // End of Outputs for SubSystem: '<S24>/ErrorCode15'

  // RateTransition: '<S26>/Rate Transition32'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition32_dkx3 = dfbk_PBValveOutput;

    // RateTransition: '<S26>/Rate Transition35'
    MX_Gateway_B.RateTransition35_gogg = din_PBValveRelay;

    // RateTransition: '<S26>/Rate Transition37'
    MX_Gateway_B.RateTransition37_bstc = adin_TravelPressureSwitch;
  }

  // End of RateTransition: '<S26>/Rate Transition32'

  // Logic: '<S119>/Logical Operator' incorporates:
  //   Constant: '<S119>/Constant1'
  //   Constant: '<S119>/Constant2'
  //   Constant: '<S121>/Constant'
  //   Constant: '<S122>/Constant'
  //   Logic: '<S119>/Logical Operator1'
  //   Logic: '<S119>/Logical Operator2'
  //   RelationalOperator: '<S121>/Compare'
  //   RelationalOperator: '<S122>/Compare'
  //   RelationalOperator: '<S123>/FixPt Relational Operator'
  //   RelationalOperator: '<S124>/FixPt Relational Operator'
  //   UnitDelay: '<S123>/Delay Input1'
  //   UnitDelay: '<S124>/Delay Input1'

  rtb_LogicalOperator_auqu = (button_Aux || ((cmd_AuxEnable_ST >
    MX_Gateway_DWork.DelayInput1_DSTATE) && (CONSTANT_DATA->STAUX_FUNCTION !=
    NON_FUNCTIONAL)) || ((cmd_AuxEnable_ACD >
    MX_Gateway_DWork.DelayInput1_DSTATE_e0ev) && (CONSTANT_DATA->RACD_FUNCTION
    != NON_FUNCTIONAL)));

  // Chart: '<S119>/Aux_Pot'
  // Gateway: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_j2wz < 65535U) {
    MX_Gateway_DWork.temporalCounter_i1_j2wz = (uint16_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i1_j2wz + 1);
  }

  // During: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c76_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
    MX_Gateway_DWork.bitsForTID1.is_active_c76_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/Inputs/Aux_Button/AuxButtonLogic/Aux_Pot
    // Transition: '<S120>:132'
    MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway = MX_Gateway_IN_INACTIVE_nzjc;

    // Entry 'INACTIVE': '<S120>:142'
    aux_DebounceButton = INACTIVE;
    aux_DetentHold = INACTIVE;
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway) {
     case MX_Gateway_IN_AUX_FALLING_EDGE:
      // During 'AUX_FALLING_EDGE': '<S120>:144'
      // Transition: '<S120>:134'
      MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway =
        MX_Gateway_IN_INACTIVE_nzjc;

      // Entry 'INACTIVE': '<S120>:142'
      aux_DebounceButton = INACTIVE;
      aux_DetentHold = INACTIVE;
      break;

     case MX_Gateway_IN_DETENT:
      // During 'DETENT': '<S120>:146'
      if (!rtb_LogicalOperator_auqu) {
        // Transition: '<S120>:147'
        MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway =
          MX_Gateway_IN_INACTIVE_nzjc;

        // Entry 'INACTIVE': '<S120>:142'
        aux_DebounceButton = INACTIVE;
        aux_DetentHold = INACTIVE;
      } else {
        aux_DetentHold = INACTIVE;
      }
      break;

     case MX_Gateway_IN_HOLD_bxpr:
      // During 'HOLD': '<S120>:145'
      if (MX_Gateway_DWork.temporalCounter_i1_j2wz >=
          CONSTANT_DATA->AUX_DETENT_HOLD_TIME) {
        // Transition: '<S120>:138'
        MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway = MX_Gateway_IN_DETENT;

        // Entry 'DETENT': '<S120>:146'
        aux_DetentHold = ACTIVE;
      } else {
        if (!rtb_LogicalOperator_auqu) {
          // Transition: '<S120>:139'
          MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway =
            MX_Gateway_IN_AUX_FALLING_EDGE;

          // Entry 'AUX_FALLING_EDGE': '<S120>:144'
          aux_DebounceButton = ACTIVE;
        }
      }
      break;

     case MX_Gateway_IN_INACTIVE_nzjc:
      aux_DebounceButton = INACTIVE;

      // During 'INACTIVE': '<S120>:142'
      if (rtb_LogicalOperator_auqu && (state_PanelButtons == NORMAL) &&
          (state_Console == ACTIVE)) {
        // Transition: '<S120>:136'
        MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway = MX_Gateway_IN_HOLD_bxpr;
        MX_Gateway_DWork.temporalCounter_i1_j2wz = 0U;
      } else {
        if (rtb_LogicalOperator_auqu && (state_PanelButtons != NORMAL)) {
          // Transition: '<S120>:135'
          MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway =
            MX_Gatewa_IN_INACTIVE_WAIT_gks0;
        }
      }
      break;

     default:
      // During 'INACTIVE_WAIT': '<S120>:143'
      if (!rtb_LogicalOperator_auqu) {
        // Transition: '<S120>:137'
        MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway =
          MX_Gateway_IN_INACTIVE_nzjc;

        // Entry 'INACTIVE': '<S120>:142'
        aux_DebounceButton = INACTIVE;
        aux_DetentHold = INACTIVE;
      }
      break;
    }
  }

  // End of Chart: '<S119>/Aux_Pot'

  // UnitDelay: '<S25>/Unit Delay1'
  MX_Gateway_B.UnitDelay1 = MX_Gateway_DWork.UnitDelay1_DSTATE_hggw;

  // UnitDelay: '<S25>/Unit Delay4'
  MX_Gateway_B.UnitDelay4 = MX_Gateway_DWork.UnitDelay4_DSTATE_cldf;

  // RateTransition: '<S25>/Rate Transition53'
  MX_Gateway_B.RateTransition53_nlqq = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S25>/Joystick_Pots'
  MX_Gateway_Joystick_Pots();

  // End of Outputs for SubSystem: '<S25>/Joystick_Pots'

  // Outputs for Atomic SubSystem: '<S25>/Aux_Pot'
  MX_Gateway_Aux_Pot();

  // End of Outputs for SubSystem: '<S25>/Aux_Pot'

  // UnitDelay: '<S25>/Unit Delay17'
  MX_Gateway_B.UnitDelay17 = MX_Gateway_DWork.UnitDelay17_DSTATE;

  // UnitDelay: '<S25>/Unit Delay9'
  MX_Gateway_B.UnitDelay9 = MX_Gateway_DWork.UnitDelay9_DSTATE_jr45;

  // RateTransition: '<S25>/Rate Transition9'
  MX_Gateway_B.RateTransition9_nsj3 = state_SensorSupply2;

  // UnitDelay: '<S25>/Unit Delay15'
  MX_Gateway_B.UnitDelay15 = MX_Gateway_DWork.UnitDelay15_DSTATE;

  // UnitDelay: '<S25>/Unit Delay14'
  MX_Gateway_B.UnitDelay14 = MX_Gateway_DWork.UnitDelay14_DSTATE;

  // UnitDelay: '<S25>/Unit Delay10'
  MX_Gateway_B.UnitDelay10 = MX_Gateway_DWork.UnitDelay10_DSTATE_mnd3;

  // Logic: '<S99>/Logical Operator' incorporates:
  //   Constant: '<S189>/Constant'
  //   Constant: '<S190>/Constant'
  //   Constant: '<S99>/Constant2'
  //   RelationalOperator: '<S189>/Compare'
  //   RelationalOperator: '<S190>/Compare'

  MX_Gateway_B.LogicalOperator = ((state_System == SYS_NORMAL) &&
    (CONSTANT_DATA->RIGHT_POT_FUNCTION != NON_FUNCTIONAL));

  // Outputs for Enabled SubSystem: '<S99>/Right Pot'
  MX_Gateway_RightPot();

  // End of Outputs for SubSystem: '<S99>/Right Pot'

  // RateTransition: '<S26>/Rate Transition13'
  MX_Gateway_B.RateTransition13_aepw = calc_VBattery;

  // RateTransition: '<S26>/Rate Transition15'
  MX_Gateway_B.RateTransition15_ozmr = state_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/Hyd_Enable'
  MX_Gateway_Hyd_Enable();

  // End of Outputs for SubSystem: '<S26>/Hyd_Enable'

  // RateTransition: '<S25>/Rate Transition10'
  MX_Gateway_B.RateTransition10_bex1 = state_SensorSupply2;

  // UnitDelay: '<S25>/Unit Delay13'
  MX_Gateway_B.UnitDelay13 = MX_Gateway_DWork.UnitDelay13_DSTATE;

  // Logic: '<S98>/Logical Operator' incorporates:
  //   Constant: '<S183>/Constant'
  //   Constant: '<S184>/Constant'
  //   Constant: '<S98>/Constant3'
  //   RelationalOperator: '<S183>/Compare'
  //   RelationalOperator: '<S184>/Compare'

  MX_Gateway_B.LogicalOperator_avca = ((state_System == SYS_NORMAL) &&
    (CONSTANT_DATA->LEFT_POT_FUNCTION != NON_FUNCTIONAL));

  // Outputs for Enabled SubSystem: '<S98>/Normal_Pot'
  MX_Gateway_Normal_Pot();

  // End of Outputs for SubSystem: '<S98>/Normal_Pot'

  // UnitDelay: '<S28>/Unit Delay8'
  MX_Gateway_B.UnitDelay8 = MX_Gateway_DWork.UnitDelay8_DSTATE_lznp;

  // UnitDelay: '<S28>/Unit Delay9'
  MX_Gateway_B.UnitDelay9_hk24 = MX_Gateway_DWork.UnitDelay9_DSTATE_lfbs;

  // RateTransition: '<S26>/Rate Transition16'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition16_hyai = state_Engine;

    // RateTransition: '<S26>/Rate Transition29'
    MX_Gateway_B.RateTransition29_kajv = dfbk_GlowPlugOutput;

    // RateTransition: '<S26>/Rate Transition30'
    MX_Gateway_B.RateTransition30_mgbl = din_GlowPlugRelay;

    // RateTransition: '<S26>/Rate Transition44'
    MX_Gateway_B.RateTransition44 = state_System;

    // RateTransition: '<S26>/Rate Transition24'
    MX_Gateway_B.RateTransition24_bca5 = ecu_GlowPlug;

    // RateTransition: '<S26>/Rate Transition26'
    MX_Gateway_B.RateTransition26_peze = ecu_ECT;

    // RateTransition: '<S26>/Rate Transition27'
    MX_Gateway_B.RateTransition27_chza = state_ecuECT;

    // Outputs for Atomic SubSystem: '<S26>/GlowPlug'
    MX_Gateway_GlowPlug();

    // End of Outputs for SubSystem: '<S26>/GlowPlug'
  }

  // End of RateTransition: '<S26>/Rate Transition16'

  // RateTransition: '<S28>/Rate Transition12'
  MX_Gateway_B.RateTransition12_piek = dout_GlowPlug;

  // Outputs for Atomic SubSystem: '<S28>/EMEA Control Mode'
  MX_Gateway_EMEAControlMode();

  // End of Outputs for SubSystem: '<S28>/EMEA Control Mode'

  // Outputs for Atomic SubSystem: '<S28>/Aux_Enable'
  MX_Gateway_Aux_Enable();

  // End of Outputs for SubSystem: '<S28>/Aux_Enable'

  // RateTransition: '<S26>/Rate Transition38'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition38_cu5w = aux_Flow;
  }

  // End of RateTransition: '<S26>/Rate Transition38'

  // RateTransition: '<S26>/Rate Transition2'
  MX_Gateway_B.RateTransition2_ad3t = state_VBattery;

  // RateTransition: '<S26>/Rate Transition3'
  MX_Gateway_B.RateTransition3_cdpa = calc_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/Aux_Hydraulics'
  MX_Gateway_Aux_Hydraulics();

  // End of Outputs for SubSystem: '<S26>/Aux_Hydraulics'

  // RateTransition: '<S26>/Rate Transition39'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition39_gsng = MX_Gateway_B.state_AuxFlow;

    // Outputs for Atomic SubSystem: '<S26>/PB_Valve'
    MX_Gateway_PB_Valve();

    // End of Outputs for SubSystem: '<S26>/PB_Valve'
  }

  // End of RateTransition: '<S26>/Rate Transition39'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode16'

  // RateTransition: '<S24>/Rate Transition16'
  MX_Gateway_ErrorCode(state_PBValveOutput, &rtb_Sum_oigk, FN_PBVALVE_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode16'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode17'
  MX_Gateway_ErrorCode(state_HydEnable, &rtb_Sum_irbk, FN_HYD_ENABLE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode17'

  // RateTransition: '<S111>/Rate Transition53'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition53 = ain_LoadMoment;

    // Logic: '<S111>/Logical Operator' incorporates:
    //   Constant: '<S111>/Constant2'
    //   Constant: '<S255>/Constant'
    //   Constant: '<S257>/Constant'
    //   RateTransition: '<S111>/Rate Transition1'
    //   RelationalOperator: '<S255>/Compare'
    //   RelationalOperator: '<S257>/Compare'

    MX_Gateway_B.LogicalOperator_bf1g = ((state_System == SYS_NORMAL) &&
      (CONSTANT_DATA->LOAD_MOMENT_FUNCTION == SWITCH_INPUT));

    // Outputs for Enabled SubSystem: '<S111>/Load_Moment_Switch'
    MX_Gateway_Load_Moment_Switch();

    // End of Outputs for SubSystem: '<S111>/Load_Moment_Switch'

    // RelationalOperator: '<S259>/Compare' incorporates:
    //   Constant: '<S111>/Constant3'
    //   Constant: '<S259>/Constant'

    rtb_Compare_kxag = (CONSTANT_DATA->LOAD_MOMENT_FUNCTION == SWITCH_INPUT);
  }

  // End of RateTransition: '<S111>/Rate Transition53'

  // DataTypeConversion: '<S111>/Data Type Conversion'
  rtb_DataTypeConversion = (int16_T)ain_LoadMoment;

  // Outputs for Atomic SubSystem: '<S111>/LP_Filter_Adj_Gain'

  // Constant: '<S111>/Constant4'
  MX_Gateway_LP_Filter_Adj_Gain(CONSTANT_DATA->LOAD_MOMENT_FILTER_GAIN,
    rtb_DataTypeConversion, &MX_Gateway_B.Output_ahzv,
    &MX_Gateway_DWork.LP_Filter_Adj_Gain);

  // End of Outputs for SubSystem: '<S111>/LP_Filter_Adj_Gain'

  // RateTransition: '<S111>/Rate Transition3'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition3_bbdn = MX_Gateway_B.Output_ahzv;

    // RateTransition: '<S111>/Rate Transition4'
    MX_Gateway_B.RateTransition4_m0ch = ain_SensorSupply2;

    // RateTransition: '<S111>/Rate Transition5'
    MX_Gateway_B.RateTransition5_dkdc = din_OWDEnableSw;

    // Logic: '<S111>/Logical Operator1' incorporates:
    //   Constant: '<S111>/Constant1'
    //   Constant: '<S256>/Constant'
    //   Constant: '<S258>/Constant'
    //   RateTransition: '<S111>/Rate Transition2'
    //   RelationalOperator: '<S256>/Compare'
    //   RelationalOperator: '<S258>/Compare'

    MX_Gateway_B.LogicalOperator1 = ((state_System == SYS_NORMAL) &&
      (CONSTANT_DATA->LOAD_MOMENT_FUNCTION == SENDER));

    // Outputs for Enabled SubSystem: '<S111>/Load_Moment_Sensor'
    MX_Gateway_Load_Moment_Sensor();

    // End of Outputs for SubSystem: '<S111>/Load_Moment_Sensor'

    // Switch: '<S111>/Switch'
    if (rtb_Compare_kxag) {
      state_LoadMoment = MX_Gateway_B.OutportBufferForstate_LoadMomen;
    } else {
      state_LoadMoment = MX_Gateway_B.OutportBufferForstate_Load_dpi5;
    }

    // End of Switch: '<S111>/Switch'
  }

  // End of RateTransition: '<S111>/Rate Transition3'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode18'

  // RateTransition: '<S24>/Rate Transition6'
  MX_Gateway_ErrorCode(state_LoadMoment, &rtb_Sum_mkoj, FN_LOAD_MOMENT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode18'

  // RateTransition: '<S25>/Rate Transition56'
  MX_Gateway_B.RateTransition56 = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S25>/Offset_Pot'
  MX_Gateway_Offset_Pot();

  // End of Outputs for SubSystem: '<S25>/Offset_Pot'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode19'
  MX_Gateway_ErrorCode(state_OffsetPot, &rtb_Sum_gn4k, FN_OFFSET_CONTROL);

  // End of Outputs for SubSystem: '<S24>/ErrorCode19'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode2'

  // RateTransition: '<S24>/Rate Transition2'
  MX_Gateway_ErrorCode(state_SensorSupply1, &rtb_Sum_f5p4, FN_SENSOR_SUPPLY_1);

  // End of Outputs for SubSystem: '<S24>/ErrorCode2'

  // RateTransition: '<S25>/Rate Transition60'
  MX_Gateway_B.RateTransition60 = state_SensorSupply1;

  // RateTransition: '<S25>/Rate Transition61'
  MX_Gateway_B.RateTransition61 = state_SensorSupply2;

  // Outputs for Atomic SubSystem: '<S25>/Load_Sense'
  MX_Gateway_Load_Sense();

  // End of Outputs for SubSystem: '<S25>/Load_Sense'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode20'
  MX_Gateway_ErrorCode(state_LoadSense, &rtb_Sum_ie5q, FN_LOAD_SENSE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode20'

  // RateTransition: '<S26>/Rate Transition25'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition25_a55f = dfbk_LightsOutput;

    // RateTransition: '<S26>/Rate Transition18'
    MX_Gateway_B.RateTransition18_etzj = din_LightsRelay;

    // RateTransition: '<S26>/Rate Transition36'
    MX_Gateway_B.RateTransition36_ijpl = button_Lights;

    // RateTransition: '<S26>/Rate Transition22'
    MX_Gateway_B.RateTransition22_crtc = state_PanelButtons;

    // Outputs for Atomic SubSystem: '<S26>/Lights'
    MX_Gateway_Lights();

    // End of Outputs for SubSystem: '<S26>/Lights'
  }

  // End of RateTransition: '<S26>/Rate Transition25'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode21'

  // RateTransition: '<S24>/Rate Transition12'
  MX_Gateway_ErrorCode(state_LightsOutput, &rtb_Sum_lq3s, FN_FRONT_LIGHT_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode21'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode22'

  // RateTransition: '<S24>/Rate Transition20'
  MX_Gateway_ErrorCode(state_PBValveRelay, &rtb_Sum_k5yr, FN_PBVALVE_RELAY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode22'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode23'

  // RateTransition: '<S24>/Rate Transition14'
  MX_Gateway_ErrorCode(state_LightsRelay, &rtb_Sum_jqx3, FN_FRONT_LIGHT_RELAY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode23'

  // RateTransition: '<S26>/Rate Transition34'
  MX_Gateway_B.RateTransition34_jbuw = state_VBattery;

  // RateTransition: '<S26>/Rate Transition40'
  MX_Gateway_B.RateTransition40 = flt_ECT;
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    // UnitDelay: '<S26>/Unit Delay5'
    MX_Gateway_B.UnitDelay5_htxk = MX_Gateway_DWork.UnitDelay5_DSTATE_h0ih;
  }

  // RateTransition: '<S26>/Rate Transition41'
  MX_Gateway_B.RateTransition41_mpbl = MX_Gateway_B.UnitDelay5_htxk;

  // Outputs for Atomic SubSystem: '<S26>/FuelPri_HVAC'
  MX_Gateway_FuelPri_HVAC();

  // End of Outputs for SubSystem: '<S26>/FuelPri_HVAC'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode24'
  MX_Gateway_ErrorCode(state_FuelPriRelay, &rtb_Sum_ntyy, FN_FUEL_PRIMARY_RELAY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode24'

  // RateTransition: '<S26>/Rate Transition20'
  MX_Gateway_B.RateTransition20_arnl = state_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/Starter'
  MX_Gateway_Starter();

  // End of Outputs for SubSystem: '<S26>/Starter'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode25'
  MX_Gateway_ErrorCode(state_StarterOutput, &rtb_Sum_lmpx, FN_STARTER_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode25'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode26'
  MX_Gateway_ErrorCode(state_StarterRelay, &rtb_Sum_a1he, FN_STARTER_RELAY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode26'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode27'
  MX_Gateway_ErrorCode(state_FuelPriOutput, &rtb_Sum_oufr,
                       FN_FUEL_PRIMARY_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode27'

  // RateTransition: '<S26>/Rate Transition45'
  MX_Gateway_B.RateTransition45 = calc_VBattery;

  // RateTransition: '<S26>/Rate Transition46'
  MX_Gateway_B.RateTransition46 = state_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/Diverter'
  MX_Gateway_Diverter();

  // End of Outputs for SubSystem: '<S26>/Diverter'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode28'
  MX_Gateway_ErrorCode(state_Diverter, &rtb_Sum_b253, FN_DIVERTER);

  // End of Outputs for SubSystem: '<S24>/ErrorCode28'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode29'

  // RateTransition: '<S24>/Rate Transition18'
  MX_Gateway_ErrorCode(state_GlowPlugOutput, &rtb_Sum_iixb, FN_GLOW_PLUG_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode29'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode3'

  // RateTransition: '<S24>/Rate Transition3'
  MX_Gateway_ErrorCode(state_SensorSupply2, &rtb_Sum_ovtj, FN_SENSOR_SUPPLY_2);

  // End of Outputs for SubSystem: '<S24>/ErrorCode3'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode30'

  // RateTransition: '<S24>/Rate Transition19'
  MX_Gateway_ErrorCode(state_GlowPlugRelay, &rtb_Sum_dskv, FN_GLOW_PLUG_RELAY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode30'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode31'
  MX_Gateway_ErrorCode(state_FuelSec, &rtb_Sum_a1z5, FN_FUEL_SECONDARY_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode31'

  // Chart: '<S24>/Throttle Cal State'
  // Gateway: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
  // During: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c41_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
    MX_Gateway_DWork.bitsForTID1.is_active_c41_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/Error_Codes_Array/Throttle Cal State
    // Transition: '<S91>:4'
    MX_Gateway_DWork.bitsForTID1.is_c41_MX_Gateway = MX_Gateway_IN_Wait_anea;

    // Entry 'Wait': '<S91>:1'
    MX_Gateway_B.state_ThrottleCal = NORMAL;
  } else if (MX_Gateway_DWork.bitsForTID1.is_c41_MX_Gateway ==
             MX_Gateway_IN_Ready) {
    // During 'Ready': '<S91>:2'
    MX_Gateway_B.state_ThrottleCal = eeMirror.ee_ThrottleCalState;
  } else {
    // During 'Wait': '<S91>:1'
    if (flag_InitEERead && (CONSTANT_DATA->CAN_THROTTLE_FUNCTION !=
                            NON_FUNCTIONAL)) {
      // Transition: '<S91>:3'
      MX_Gateway_DWork.bitsForTID1.is_c41_MX_Gateway = MX_Gateway_IN_Ready;

      // Entry 'Ready': '<S91>:2'
      MX_Gateway_B.state_ThrottleCal = eeMirror.ee_ThrottleCalState;
    }
  }

  // End of Chart: '<S24>/Throttle Cal State'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode32'
  MX_Gateway_ErrorCode(MX_Gateway_B.state_ThrottleCal, &rtb_Sum_op3a,
                       FN_THROTTLE_CONTROLLER);

  // End of Outputs for SubSystem: '<S24>/ErrorCode32'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode32_2'
  MX_Gateway_ErrorCode(state_CommThrottle, &rtb_Sum_hibd, FN_THROTTLE_CONTROLLER);

  // End of Outputs for SubSystem: '<S24>/ErrorCode32_2'

  // RateTransition: '<S28>/Rate Transition17'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition17_kjqh = state_System;

    // RateTransition: '<S28>/Rate Transition26'
    MX_Gateway_B.RateTransition26_pecm = flag_InitEERead;

    // RateTransition: '<S28>/Rate Transition27'
    MX_Gateway_B.RateTransition27_oxis = state_Engine;

    // RateTransition: '<S28>/Rate Transition28'
    MX_Gateway_B.RateTransition28_otac = state_CommThrottle;

    // Outputs for Atomic SubSystem: '<S28>/CAN_Throttle'
    MX_Gateway_CAN_Throttle();

    // End of Outputs for SubSystem: '<S28>/CAN_Throttle'
  }

  // End of RateTransition: '<S28>/Rate Transition17'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode32_3'

  // RateTransition: '<S24>/Rate Transition15'
  MX_Gateway_ErrorCode(MX_Gateway_B.OutportBufferForstate_CANThrott,
                       &rtb_Sum_fqkx, FN_THROTTLE_CONTROLLER);

  // End of Outputs for SubSystem: '<S24>/ErrorCode32_3'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode33'
  MX_Gateway_ErrorCode(state_CommDeluxeG55, &rtb_Sum_c0dp, FN_DELUXE_PANEL_G5);

  // End of Outputs for SubSystem: '<S24>/ErrorCode33'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode34'
  MX_Gateway_ErrorCode(state_SwitchedPwrRelay, &rtb_Sum_hrlc,
                       FN_SWITCHED_POWER_RELAY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode34'

  // RateTransition: '<S26>/Rate Transition6'
  MX_Gateway_B.RateTransition6_awvq = state_ECT;

  // RateTransition: '<S26>/Rate Transition8'
  MX_Gateway_B.RateTransition8_hocx = state_HOT;

  // RateTransition: '<S26>/Rate Transition9'
  MX_Gateway_B.RateTransition9_oiv3 = flt_HOT;

  // RateTransition: '<S26>/Rate Transition10'
  MX_Gateway_B.RateTransition10_fs4r = calc_VBattery;

  // RateTransition: '<S26>/Rate Transition11'
  MX_Gateway_B.RateTransition11_kahy = state_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/Two_Speed'
  MX_Gateway_Two_Speed();

  // End of Outputs for SubSystem: '<S26>/Two_Speed'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode35'
  MX_Gateway_ErrorCode(state_TwoSpeed, &rtb_Sum_cy11, FN_TWO_SPEED);

  // End of Outputs for SubSystem: '<S24>/ErrorCode35'

  // RateTransition: '<S26>/Rate Transition17'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition17_gzoi = state_Console;

    // RateTransition: '<S26>/Rate Transition21'
    MX_Gateway_B.RateTransition21_dojr = dfbk_HydExchange;

    // Outputs for Atomic SubSystem: '<S26>/Hydraulic_Exchange'
    MX_Gateway_Hydraulic_Exchange();

    // End of Outputs for SubSystem: '<S26>/Hydraulic_Exchange'
  }

  // End of RateTransition: '<S26>/Rate Transition17'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode36'

  // RateTransition: '<S24>/Rate Transition11'
  MX_Gateway_ErrorCode(state_HydExchange, &rtb_Sum_enmp, FN_HYD_EXCHANGE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode36'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode37'
  MX_Gateway_ErrorCode(state_ECUHold, &rtb_Sum_oi15, FN_ECU_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode37'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode38'
  MX_Gateway_ErrorCode(state_HVACOutput, &rtb_Sum_kpnx, FN_HVAC_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode38'

  // RateTransition: '<S26>/Rate Transition28'
  MX_Gateway_B.RateTransition28_o4gy = calc_VBattery;

  // RateTransition: '<S26>/Rate Transition31'
  MX_Gateway_B.RateTransition31_aank = state_VBattery;

  // Outputs for Atomic SubSystem: '<S26>/Dump_Valve'
  MX_Gateway_Dump_Valve();

  // End of Outputs for SubSystem: '<S26>/Dump_Valve'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode39'
  MX_Gateway_ErrorCode(state_DumpValve, &rtb_Sum_k53f, FN_DUMP_VALVE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode39'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode4'
  MX_Gateway_ErrorCode(state_Key, &rtb_Sum_p2vc, FN_KEY_SWITCH);

  // End of Outputs for SubSystem: '<S24>/ErrorCode4'

  // RateTransition: '<S28>/Rate Transition18'
  MX_Gateway_B.RateTransition18_gdsz = derate_Throttle;

  // Outputs for Atomic SubSystem: '<S28>/Derate'
  MX_Gateway_Derate();

  // End of Outputs for SubSystem: '<S28>/Derate'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode40'
  MX_Gateway_ErrorCode(state_HPMatch, &rtb_Sum_nqwu, FN_HP_MATCH);

  // End of Outputs for SubSystem: '<S24>/ErrorCode40'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode41'
  MX_Gateway_ErrorCode(state_AuxRod, &rtb_Sum_o3qh, FN_AUX_ROD);

  // End of Outputs for SubSystem: '<S24>/ErrorCode41'

  // RateTransition: '<S26>/Rate Transition4'
  MX_Gateway_B.RateTransition4_i0so = state_VBattery;

  // RateTransition: '<S26>/Rate Transition5'
  MX_Gateway_B.RateTransition5_lpr2 = calc_VBattery;

  // DataTypeConversion: '<S98>/Data Type Conversion3'
  u0 = (uint16_T)MX_Gateway_B.OutportBufferForposition_LeftPo;

  // Saturate: '<S98>/Saturation'
  if (u0 < ((uint16_T)1000U)) {
    position_LeftPot = u0;
  } else {
    position_LeftPot = ((uint16_T)1000U);
  }

  // End of Saturate: '<S98>/Saturation'

  // Outputs for Atomic SubSystem: '<S26>/Offset'
  MX_Gateway_Offset();

  // End of Outputs for SubSystem: '<S26>/Offset'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode42'
  MX_Gateway_ErrorCode(state_OffsetBase, &rtb_Sum_g3dm, FN_OFFSET_BASE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode42'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode43'
  MX_Gateway_ErrorCode(state_OffsetRod, &rtb_Sum_jowy, FN_OFFSET_ROD);

  // End of Outputs for SubSystem: '<S24>/ErrorCode43'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode44'
  MX_Gateway_ErrorCode(state_CommKeylessEntry, &rtb_Sum_lymr, FN_KEYLESS_ENTRY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode44'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode45'
  MX_Gateway_ErrorCode(state_CommJogShuttle, &rtb_Sum_msib, FN_JOG_SHUTTLE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode45'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode46'
  MX_Gateway_ErrorCode(state_ConstantData, &rtb_Sum_oxyf, FN_MAIN_CONTROLLER);

  // End of Outputs for SubSystem: '<S24>/ErrorCode46'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode47'
  MX_Gateway_ErrorCode(state_KeylessPanel, &rtb_Sum_cgnx, FN_KEYLESS_PANEL);

  // End of Outputs for SubSystem: '<S24>/ErrorCode47'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode48'
  MX_Gateway_ErrorCode(state_DeluxeG5, &rtb_Sum_njq3, FN_DELUXE_PANEL_G5);

  // End of Outputs for SubSystem: '<S24>/ErrorCode48'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode49'
  MX_Gateway_ErrorCode(state_ConsoleTest, &rtb_Sum_ojru, FN_CONSOLE_SENSOR);

  // End of Outputs for SubSystem: '<S24>/ErrorCode49'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode5'
  MX_Gateway_ErrorCode(state_Console, &rtb_Sum_lc51, FN_CONSOLE_SENSOR);

  // End of Outputs for SubSystem: '<S24>/ErrorCode5'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode50'
  MX_Gateway_ErrorCode(state_CommSecondary, &rtb_Sum_mdys, FN_SECONDARY);

  // End of Outputs for SubSystem: '<S24>/ErrorCode50'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode51'
  MX_Gateway_ErrorCode(state_CommECU, &rtb_Sum_cgav, FN_ECU_FUNCTION);

  // End of Outputs for SubSystem: '<S24>/ErrorCode51'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode54'
  MX_Gateway_ErrorCode(state_EngineSpeedDerate, &rtb_Sum_ctlw,
                       FN_ENGINE_SPEED_DERATE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode54'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode55'
  MX_Gateway_ErrorCode(state_AuxBase, &rtb_Sum_lkov, FN_AUX_BASE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode55'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode57'
  MX_Gateway_ErrorCode(state_AuxPot, &rtb_Sum_dfal, FN_AUX_CONTROL);

  // End of Outputs for SubSystem: '<S24>/ErrorCode57'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode58'
  MX_Gateway_ErrorCode(state_CommStdPanel, &rtb_Sum_dfta,
                       FN_STANDARD_DISPLAY_PANEL);

  // End of Outputs for SubSystem: '<S24>/ErrorCode58'

  // Outputs for Atomic SubSystem: '<S25>/AirFilter'
  MX_Gateway_AirFilter();

  // End of Outputs for SubSystem: '<S25>/AirFilter'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode6'
  MX_Gateway_ErrorCode(state_AirFilter, &rtb_Sum_jf2q, FN_AIR_FILTER);

  // End of Outputs for SubSystem: '<S24>/ErrorCode6'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode60'
  MX_Gateway_ErrorCode(state_LeftPot, &rtb_Sum_fgp0, FN_LEFT_CONTROL);

  // End of Outputs for SubSystem: '<S24>/ErrorCode60'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode61'
  MX_Gateway_ErrorCode(state_RightPot, &rtb_Sum_hjtb, FN_RIGHT_CONTROL);

  // End of Outputs for SubSystem: '<S24>/ErrorCode61'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode63'
  MX_Gateway_ErrorCode(state_TurboPrime, &rtb_Sum_awh5, FN_TURBO_PRIME);

  // End of Outputs for SubSystem: '<S24>/ErrorCode63'

  // RateTransition: '<S25>/Rate Transition46'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition46_ekns = din_HCFilter1;

    // RateTransition: '<S25>/Rate Transition22'
    MX_Gateway_B.RateTransition22_i03y = state_Engine;

    // Outputs for Atomic SubSystem: '<S25>/HCFilter1'
    MX_Gateway_HCFilter1();

    // End of Outputs for SubSystem: '<S25>/HCFilter1'
  }

  // End of RateTransition: '<S25>/Rate Transition46'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode7'

  // RateTransition: '<S24>/Rate Transition5'
  MX_Gateway_ErrorCode(state_HCFilter1, &rtb_Sum_pplm, FN_IMPLEMENT_FILTER);

  // End of Outputs for SubSystem: '<S24>/ErrorCode7'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode70'
  MX_Gateway_ErrorCode(state_SwitchedPwrOutput, &rtb_Sum_adyq,
                       FN_SWITCHED_POWER_OUTPUT);

  // End of Outputs for SubSystem: '<S24>/ErrorCode70'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode8'
  MX_Gateway_ErrorCode(state_EngineSpeed, &rtb_Sum_er14, FN_ENGINE_SPEED);

  // End of Outputs for SubSystem: '<S24>/ErrorCode8'

  // Outputs for Atomic SubSystem: '<S24>/ErrorCode9'

  // RateTransition: '<S24>/Rate Transition7'
  MX_Gateway_ErrorCode(state_ECT, &rtb_Sum_hoyr, FN_ENGINE_COOLANT_TEMPERATURE);

  // End of Outputs for SubSystem: '<S24>/ErrorCode9'

  // RateTransition: '<S25>/Rate Transition72'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition72 = ecu_EOT;

    // RateTransition: '<S25>/Rate Transition73'
    MX_Gateway_B.RateTransition73 = state_System;

    // RateTransition: '<S25>/Rate Transition74'
    MX_Gateway_B.RateTransition74 = state_ecuECT;

    // Outputs for Atomic SubSystem: '<S25>/Engine_Oil_Temperature'
    MX_Gatew_Engine_Oil_Temperature();

    // End of Outputs for SubSystem: '<S25>/Engine_Oil_Temperature'
  }

  // End of RateTransition: '<S25>/Rate Transition72'

  // Outputs for Atomic SubSystem: '<S26>/Buzzer'
  MX_Gateway_Buzzer();

  // End of Outputs for SubSystem: '<S26>/Buzzer'

  // RateTransition: '<S26>/Rate Transition33' incorporates:
  //   UnitDelay: '<S26>/Unit Delay3'

  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.dout_FuelPri_kx3h = MX_Gateway_DWork.UnitDelay3_DSTATE_lqze;

    // Outputs for Atomic SubSystem: '<S26>/Fuel_Resolution_Timer'
    MX_Gatewa_Fuel_Resolution_Timer();

    // End of Outputs for SubSystem: '<S26>/Fuel_Resolution_Timer'

    // RateTransition: '<S28>/Rate Transition23' incorporates:
    //   UnitDelay: '<S26>/Unit Delay3'

    MX_Gateway_B.RateTransition23_h1lr = psi_LoadSense;

    // RateTransition: '<S28>/Rate Transition1'
    MX_Gateway_B.RateTransition1_d4x3 = state_LoadSense;

    // RateTransition: '<S28>/Rate Transition24'
    MX_Gateway_B.RateTransition24_ohus = state_Console;

    // RateTransition: '<S28>/Rate Transition3'
    MX_Gateway_B.RateTransition3_hzvd = button_AutoIdle;

    // RateTransition: '<S28>/Rate Transition22'
    MX_Gateway_B.RateTransition22_aeuw = state_Engine;

    // RateTransition: '<S28>/Rate Transition64'
    MX_Gateway_B.RateTransition64_ialx = state_System;

    // RateTransition: '<S28>/Rate Transition11'
    MX_Gateway_B.RateTransition11_e1mm = flag_InitEERead;

    // RateTransition: '<S28>/Rate Transition4'
    MX_Gateway_B.RateTransition4_jajp = dlx_G55_AutoIdleTime;

    // RateTransition: '<S28>/Rate Transition9'
    MX_Gateway_B.RateTransition9_oyjk = dlx_G55_AutoIdle;

    // Outputs for Atomic SubSystem: '<S28>/AutoIdle'
    MX_Gateway_AutoIdle();

    // End of Outputs for SubSystem: '<S28>/AutoIdle'

    // Outputs for Atomic SubSystem: '<S27>/AutoIdle_Ind'
    MX_Gateway_AutoIdle_Ind();

    // End of Outputs for SubSystem: '<S27>/AutoIdle_Ind'

    // RateTransition: '<S27>/Rate Transition5'
    MX_Gateway_B.RateTransition5_dpci = state_AuxEnable;

    // RateTransition: '<S27>/Rate Transition18'
    MX_Gateway_B.RateTransition18_dd31 = state_DetentEnable;

    // RateTransition: '<S27>/Rate Transition20'
    MX_Gateway_B.RateTransition20_je5d = state_Detent;

    // RateTransition: '<S27>/Rate Transition57'
    MX_Gateway_B.RateTransition57_doaz = flag_AuxEnableFlash;

    // Outputs for Atomic SubSystem: '<S27>/Aux_Ind'
    MX_Gateway_Aux_Ind();

    // End of Outputs for SubSystem: '<S27>/Aux_Ind'

    // Outputs for Atomic SubSystem: '<S27>/Backlighting'
    MX_Gateway_Backlighting();

    // End of Outputs for SubSystem: '<S27>/Backlighting'

    // Outputs for Atomic SubSystem: '<S27>/FrontLight'
    MX_Gateway_FrontLight();

    // End of Outputs for SubSystem: '<S27>/FrontLight'

    // RateTransition: '<S27>/Rate Transition35'
    for (i = 0; i < 8; i++) {
      MX_Gateway_B.RateTransition35_nxld[i] = msg_PanelButtonState[i];
    }

    // End of RateTransition: '<S27>/Rate Transition35'

    // RateTransition: '<S27>/Rate Transition31'
    MX_Gateway_B.RateTransition31_hc54 = state_ServiceClock;

    // RateTransition: '<S27>/Rate Transition24'
    MX_Gateway_B.RateTransition24_nbsd = state_KeylessPanel;

    // RateTransition: '<S27>/Rate Transition22'
    MX_Gateway_B.RateTransition22_bwuf = state_Engine;

    // RateTransition: '<S27>/Rate Transition21'
    MX_Gateway_B.RateTransition21_ey3k = state_Detent;

    // RateTransition: '<S27>/Rate Transition33'
    MX_Gateway_B.RateTransition33_aqcg = state_DetentEnable;

    // RateTransition: '<S28>/Rate Transition10'
    MX_Gateway_B.RateTransition10_mue4 = state_Engine;

    // RateTransition: '<S28>/Rate Transition20'
    MX_Gateway_B.RateTransition20_mrae = state_ecuEOP;

    // Outputs for Atomic SubSystem: '<S28>/Throttle_Command'
    MX_Gateway_Throttle_Command();

    // End of Outputs for SubSystem: '<S28>/Throttle_Command'
  }

  // End of RateTransition: '<S26>/Rate Transition33'

  // UnitDelay: '<S28>/Unit Delay1'
  MX_Gateway_B.UnitDelay1_gwnh = MX_Gateway_DWork.UnitDelay1_DSTATE_l0j2;

  // Outputs for Atomic SubSystem: '<S28>/Keyless_Start'
  MX_Gateway_Keyless_Start();

  // End of Outputs for SubSystem: '<S28>/Keyless_Start'

  // RateTransition: '<S27>/Rate Transition23'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition23_puo4 = KSS_Display;

    // RateTransition: '<S27>/Rate Transition25'
    MX_Gateway_B.RateTransition25_jx1a = state_MachineLock;

    // RateTransition: '<S28>/Rate Transition5'
    MX_Gateway_B.RateTransition5_mczo = disp_LeftControl;

    // RateTransition: '<S28>/Rate Transition6'
    MX_Gateway_B.RateTransition6_h5c1 = disp_RightControl;

    // RateTransition: '<S28>/Rate Transition7'
    MX_Gateway_B.RateTransition7_obul = aux_Flow;

    // Logic: '<S651>/Logical Operator2' incorporates:
    //   Constant: '<S700>/Constant'
    //   Constant: '<S701>/Constant'
    //   Logic: '<S651>/Logical Operator'
    //   Logic: '<S651>/Logical Operator1'
    //   RateTransition: '<S28>/Rate Transition8'
    //   RelationalOperator: '<S700>/Compare'
    //   RelationalOperator: '<S701>/Compare'
    //   RelationalOperator: '<S702>/FixPt Relational Operator'
    //   RelationalOperator: '<S703>/FixPt Relational Operator'
    //   RelationalOperator: '<S704>/FixPt Relational Operator'
    //   RelationalOperator: '<S705>/FixPt Relational Operator'
    //   UnitDelay: '<S702>/Delay Input1'
    //   UnitDelay: '<S703>/Delay Input1'
    //   UnitDelay: '<S704>/Delay Input1'
    //   UnitDelay: '<S705>/Delay Input1'

    mode_ControlChange = ((!((MX_Gateway_B.RateTransition5_mczo ==
      MODE_LEFT_NONE) && (MX_Gateway_B.RateTransition6_h5c1 == MODE_RIGHT_NONE)))
                          && ((MX_Gateway_B.RateTransition5_mczo !=
      MX_Gateway_DWork.DelayInput1_DSTATE_fsxx) ||
      (MX_Gateway_B.RateTransition6_h5c1 !=
       MX_Gateway_DWork.DelayInput1_DSTATE_aorm) ||
      (MX_Gateway_B.RateTransition7_obul !=
       MX_Gateway_DWork.DelayInput1_DSTATE_bihv) || MX_Gateway_B.display_request
      || ((int32_T)dout_GlowPlug < (int32_T)
          MX_Gateway_DWork.DelayInput1_DSTATE_f0dm)));

    // RateTransition: '<S27>/Rate Transition63'
    MX_Gateway_B.RateTransition63_jqha = mode_LeftControl;

    // RateTransition: '<S27>/Rate Transition64'
    MX_Gateway_B.RateTransition64_gsah = mode_RightControl;

    // RateTransition: '<S27>/Rate Transition29'
    MX_Gateway_B.RateTransition29_pq5l = cmd_Diverter;

    // RateTransition: '<S27>/Rate Transition19'
    MX_Gateway_B.RateTransition19_nllh = state_Key;

    // Outputs for Atomic SubSystem: '<S27>/InformationDisplay'
    MX_Gateway_InformationDisplay();

    // End of Outputs for SubSystem: '<S27>/InformationDisplay'

    // RateTransition: '<S27>/Rate Transition65'
    MX_Gateway_B.RateTransition65 = state_KSPassword;

    // RateTransition: '<S27>/Rate Transition66'
    MX_Gateway_B.RateTransition66 = state_KSLock;

    // Outputs for Atomic SubSystem: '<S27>/Keyless_Indicators'
    MX_Gateway_Keyless_Indicators();

    // End of Outputs for SubSystem: '<S27>/Keyless_Indicators'

    // RateTransition: '<S27>/Rate Transition1'
    MX_Gateway_B.RateTransition1_na4t = state_EngineSpeed;

    // RateTransition: '<S27>/Rate Transition10'
    MX_Gateway_B.RateTransition10_gdiv = state_OffsetRod;

    // RateTransition: '<S27>/Rate Transition11'
    MX_Gateway_B.RateTransition11_gpcw = state_OffsetPot;

    // RateTransition: '<S27>/Rate Transition12'
    MX_Gateway_B.RateTransition12_ftpz = state_CommThrottle;

    // RateTransition: '<S27>/Rate Transition13'
    MX_Gateway_B.RateTransition13_i410 = state_AuxRod;

    // RateTransition: '<S27>/Rate Transition14'
    MX_Gateway_B.RateTransition14_nep3 = state_HPMatch;

    // RateTransition: '<S27>/Rate Transition15'
    MX_Gateway_B.RateTransition15_jnsm = lamp_Engine;

    // RateTransition: '<S27>/Rate Transition16'
    MX_Gateway_B.RateTransition16_lryf = state_CommSecondary;

    // RateTransition: '<S27>/Rate Transition17'
    MX_Gateway_B.RateTransition17_ptxy = state_AuxPot;

    // RateTransition: '<S27>/Rate Transition2'
    MX_Gateway_B.RateTransition2_htgo = state_Console;

    // RateTransition: '<S27>/Rate Transition27'
    MX_Gateway_B.RateTransition27_egec = state_Diverter;

    // RateTransition: '<S27>/Rate Transition28'
    if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
      MX_Gateway_B.RateTransition28_gkpf = state_PBValveOutput;
    }

    // End of RateTransition: '<S27>/Rate Transition28'

    // RateTransition: '<S27>/Rate Transition3'
    MX_Gateway_B.RateTransition3_p0dx = state_ConsoleTest;

    // RateTransition: '<S27>/Rate Transition30'
    if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
      MX_Gateway_B.RateTransition30_hltz = state_PBValveRelay;
    }

    // End of RateTransition: '<S27>/Rate Transition30'

    // RateTransition: '<S27>/Rate Transition32'
    MX_Gateway_B.RateTransition32_bo2v = state_AirFilter;

    // RateTransition: '<S27>/Rate Transition34'
    MX_Gateway_B.RateTransition34_ka0s = state_LoadSense;

    // RateTransition: '<S27>/Rate Transition36'
    MX_Gateway_B.RateTransition36 = state_EngineSpeedDerate;

    // RateTransition: '<S27>/Rate Transition37'
    MX_Gateway_B.RateTransition37_hv2o = state_HydBypass;

    // RateTransition: '<S27>/Rate Transition38'
    MX_Gateway_B.RateTransition38_fzvf = state_AuxEnable;

    // RateTransition: '<S27>/Rate Transition39'
    if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
      MX_Gateway_B.RateTransition39_oy3c =
        MX_Gateway_B.OutportBufferForstate_CANThrott;
    }

    // End of RateTransition: '<S27>/Rate Transition39'

    // RateTransition: '<S27>/Rate Transition4'
    MX_Gateway_B.RateTransition4_kxeu = state_CommJogShuttle;

    // RateTransition: '<S27>/Rate Transition40'
    MX_Gateway_B.RateTransition40_flay = ecu_GlowPlug;

    // RateTransition: '<S27>/Rate Transition41'
    MX_Gateway_B.RateTransition41_oacy = state_Engine;

    // RateTransition: '<S27>/Rate Transition42'
    MX_Gateway_B.RateTransition42_loar = state_TwoSpeedIcon;

    // RateTransition: '<S27>/Rate Transition43'
    MX_Gateway_B.RateTransition43 = state_DeluxeG5;

    // RateTransition: '<S27>/Rate Transition44'
    MX_Gateway_B.RateTransition44_nwoc = state_CommStdPanel;

    // RateTransition: '<S27>/Rate Transition45'
    MX_Gateway_B.RateTransition45_eg14 = state_KeylessPanel;

    // RateTransition: '<S27>/Rate Transition46'
    MX_Gateway_B.RateTransition46_f0p4 = state_ConstantData;

    // RateTransition: '<S27>/Rate Transition47'
    MX_Gateway_B.RateTransition47_j5gh = state_CommDeluxeG55;

    // RateTransition: '<S27>/Rate Transition48'
    MX_Gateway_B.RateTransition48_lpnr = state_LeftPot;

    // RateTransition: '<S27>/Rate Transition50'
    MX_Gateway_B.RateTransition50_dmt4 = state_HVACOutput;

    // RateTransition: '<S27>/Rate Transition51'
    MX_Gateway_B.RateTransition51_ey4f = state_RightPot;

    // RateTransition: '<S27>/Rate Transition52'
    MX_Gateway_B.RateTransition52_lf11 = state_SwitchedPwrRelay;

    // RateTransition: '<S27>/Rate Transition53'
    MX_Gateway_B.RateTransition53_cphi = state_SwitchedPwrOutput;

    // RateTransition: '<S27>/Rate Transition54'
    MX_Gateway_B.RateTransition54 = state_Key;

    // RateTransition: '<S27>/Rate Transition55'
    MX_Gateway_B.RateTransition55 = mode_RightControl;

    // RateTransition: '<S27>/Rate Transition56'
    MX_Gateway_B.RateTransition56_kjuw = state_CommECU;

    // RateTransition: '<S27>/Rate Transition58'
    MX_Gateway_B.RateTransition58 = state_StarterRelay;

    // RateTransition: '<S27>/Rate Transition59'
    MX_Gateway_B.RateTransition59_dat2 = state_StarterOutput;

    // RateTransition: '<S27>/Rate Transition6'
    MX_Gateway_B.RateTransition6_b4bp = state_AuxBase;

    // RateTransition: '<S27>/Rate Transition60'
    MX_Gateway_B.RateTransition60_bzmo = error_FuelSec;

    // RateTransition: '<S27>/Rate Transition61'
    MX_Gateway_B.RateTransition61_lxrm = state_FuelPriRelay;

    // RateTransition: '<S27>/Rate Transition62'
    MX_Gateway_B.RateTransition62_d25a = state_FuelPriOutput;

    // RateTransition: '<S27>/Rate Transition67'
    MX_Gateway_B.RateTransition67 = state_TurboPrime;

    // RateTransition: '<S27>/Rate Transition7'
    MX_Gateway_B.RateTransition7_kfld = state_HydEnable;

    // RateTransition: '<S27>/Rate Transition8'
    MX_Gateway_B.RateTransition8_iebw = state_TwoSpeed;

    // RateTransition: '<S27>/Rate Transition9'
    MX_Gateway_B.RateTransition9_eqf3 = state_OffsetBase;

    // Outputs for Atomic SubSystem: '<S27>/mod_AuxIcon'
    MX_Gateway_mod_AuxIcon();

    // End of Outputs for SubSystem: '<S27>/mod_AuxIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_BatteryIcon'
    MX_Gateway_mod_BatteryIcon();

    // End of Outputs for SubSystem: '<S27>/mod_BatteryIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_ECTIcon'
    MX_Gateway_mod_ECTIcon();

    // End of Outputs for SubSystem: '<S27>/mod_ECTIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_RPMIcon'
    MX_Gateway_mod_RPMIcon();

    // End of Outputs for SubSystem: '<S27>/mod_RPMIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_EngineIcon'
    MX_Gateway_mod_EngineIcon();

    // End of Outputs for SubSystem: '<S27>/mod_EngineIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_FuelLevelIcon'
    MX_Gateway_mod_FuelLevelIcon();

    // End of Outputs for SubSystem: '<S27>/mod_FuelLevelIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_ServiceClockIcon'
    MX_Gateway_mod_ServiceClockIcon();

    // End of Outputs for SubSystem: '<S27>/mod_ServiceClockIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_GeneralWarningIcon'
    MX_Gatew_mod_GeneralWarningIcon();

    // End of Outputs for SubSystem: '<S27>/mod_GeneralWarningIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_GlowPlugIcon'
    MX_Gateway_mod_GlowPlugIcon();

    // End of Outputs for SubSystem: '<S27>/mod_GlowPlugIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_HourMeterIcon'
    MX_Gateway_mod_HourMeterIcon();

    // End of Outputs for SubSystem: '<S27>/mod_HourMeterIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_HydraulicIcon'
    MX_Gateway_mod_HydraulicIcon();

    // End of Outputs for SubSystem: '<S27>/mod_HydraulicIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_JobClock1Icon'
    MX_Gateway_mod_JobClock1Icon();

    // End of Outputs for SubSystem: '<S27>/mod_JobClock1Icon'

    // Outputs for Atomic SubSystem: '<S27>/mod_JobClock2Icon'
    MX_Gateway_mod_JobClock2Icon();

    // End of Outputs for SubSystem: '<S27>/mod_JobClock2Icon'

    // Outputs for Atomic SubSystem: '<S27>/mod_LockoutIcon'
    MX_Gateway_mod_LockoutIcon();

    // End of Outputs for SubSystem: '<S27>/mod_LockoutIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_SeatBeltIcon'
    MX_Gateway_mod_SeatBeltIcon();

    // End of Outputs for SubSystem: '<S27>/mod_SeatBeltIcon'

    // Outputs for Atomic SubSystem: '<S27>/mod_TwoSpeedIcon'
    MX_Gateway_mod_TwoSpeedIcon();

    // End of Outputs for SubSystem: '<S27>/mod_TwoSpeedIcon'
  }

  // End of RateTransition: '<S27>/Rate Transition23'

  // RelationalOperator: '<S641>/Compare' incorporates:
  //   Constant: '<S28>/Constant2'
  //   Constant: '<S641>/Constant'

  MX_Gateway_B.Compare = (CONSTANT_DATA->KEYLESS_ENTRY_FUNCTION !=
    NON_FUNCTIONAL);
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    // Outputs for Atomic SubSystem: '<S28>/ElectricAutomation'
    MX_Gateway_ElectricAutomation();

    // End of Outputs for SubSystem: '<S28>/ElectricAutomation'
  }

  // Outputs for Enabled SubSystem: '<S28>/Keyless_Entry'
  MX_Gateway_Keyless_Entry();

  // End of Outputs for SubSystem: '<S28>/Keyless_Entry'

  // RateTransition: '<S28>/Rate Transition25'
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    MX_Gateway_B.RateTransition25_jeol = fdbk_CANThrottle;
  }

  // End of RateTransition: '<S28>/Rate Transition25'

  // Update for UnitDelay: '<S28>/Unit Delay7'
  MX_Gateway_DWork.UnitDelay7_DSTATE_oa3i = MX_Gateway_B.state_CommECU_njci;
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    // Update for UnitDelay: '<S25>/Unit Delay6'
    MX_Gateway_DWork.UnitDelay6_DSTATE = calc_VBattery;

    // Update for UnitDelay: '<S25>/Unit Delay7'
    MX_Gateway_DWork.UnitDelay7_DSTATE = calc_VBattery;
  }

  // Update for UnitDelay: '<S25>/Unit Delay2'
  MX_Gateway_DWork.UnitDelay2_DSTATE_he0j = state_Engine;

  // Update for UnitDelay: '<S25>/Unit Delay3'
  MX_Gateway_DWork.UnitDelay3_DSTATE = flt_EngineSpeed;

  // Update for UnitDelay: '<S25>/Unit Delay12'
  MX_Gateway_DWork.UnitDelay12_DSTATE = state_Engine;

  // Update for UnitDelay: '<S25>/Unit Delay11'
  MX_Gateway_DWork.UnitDelay11_DSTATE = state_Engine;

  // Update for UnitDelay: '<S28>/Unit Delay5'
  MX_Gateway_DWork.UnitDelay5_DSTATE = state_KSLock;

  // Update for UnitDelay: '<S28>/Unit Delay4'
  MX_Gateway_DWork.UnitDelay4_DSTATE = state_CommDeluxeG55;

  // Update for UnitDelay: '<S25>/Unit Delay8'
  MX_Gateway_DWork.UnitDelay8_DSTATE = state_Engine;

  // Update for UnitDelay: '<S25>/Unit Delay5'
  MX_Gateway_DWork.UnitDelay5_DSTATE_nojo = state_Engine;

  // Update for UnitDelay: '<S28>/Unit Delay6'
  MX_Gateway_DWork.UnitDelay6_DSTATE_gv5d = state_EngineSpeedDerate;

  // Update for UnitDelay: '<S28>/Unit Delay2'
  MX_Gateway_DWork.UnitDelay2_DSTATE_bf1p = state_CommStdPanel;

  // Update for UnitDelay: '<S28>/Unit Delay3'
  MX_Gateway_DWork.UnitDelay3_DSTATE_nlci = state_CommDeluxeG55;

  // Update for UnitDelay: '<S26>/Unit Delay9'
  MX_Gateway_DWork.UnitDelay9_DSTATE = state_StarterOutput;

  // Update for UnitDelay: '<S26>/Unit Delay10'
  MX_Gateway_DWork.UnitDelay10_DSTATE = state_StarterRelay;

  // Update for UnitDelay: '<S124>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE = cmd_AuxEnable_ST;

  // Update for UnitDelay: '<S123>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_e0ev = cmd_AuxEnable_ACD;

  // Update for UnitDelay: '<S25>/Unit Delay1'
  MX_Gateway_DWork.UnitDelay1_DSTATE_hggw = state_AuxEnable;

  // Update for UnitDelay: '<S25>/Unit Delay4'
  MX_Gateway_DWork.UnitDelay4_DSTATE_cldf = aux_Flow;

  // Update for UnitDelay: '<S25>/Unit Delay17'
  MX_Gateway_DWork.UnitDelay17_DSTATE = state_AuxEnable;

  // Update for UnitDelay: '<S25>/Unit Delay9'
  MX_Gateway_DWork.UnitDelay9_DSTATE_jr45 = aux_Flow;

  // Update for UnitDelay: '<S25>/Unit Delay15'
  MX_Gateway_DWork.UnitDelay15_DSTATE = check_RightNeutral;

  // Update for UnitDelay: '<S25>/Unit Delay14'
  MX_Gateway_DWork.UnitDelay14_DSTATE = aux_Inhibit;

  // Update for UnitDelay: '<S25>/Unit Delay10'
  MX_Gateway_DWork.UnitDelay10_DSTATE_mnd3 = mode_RightControl;

  // Update for UnitDelay: '<S25>/Unit Delay13'
  MX_Gateway_DWork.UnitDelay13_DSTATE = check_LeftNeutral;

  // Update for UnitDelay: '<S28>/Unit Delay8'
  MX_Gateway_DWork.UnitDelay8_DSTATE_lznp = state_AuxEnable;

  // Update for UnitDelay: '<S28>/Unit Delay9'
  MX_Gateway_DWork.UnitDelay9_DSTATE_lfbs = state_Diverter;
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    // Update for UnitDelay: '<S26>/Unit Delay5'
    MX_Gateway_DWork.UnitDelay5_DSTATE_h0ih = timer_FuelResolution;

    // Update for Atomic SubSystem: '<S28>/CAN_Throttle'
    MX_Gateway_CAN_Throttle_Update();

    // End of Update for SubSystem: '<S28>/CAN_Throttle'
  }

  // Update for UnitDelay: '<S26>/Unit Delay3'
  MX_Gateway_DWork.UnitDelay3_DSTATE_lqze = dout_FuelPri;

  // Update for UnitDelay: '<S28>/Unit Delay1'
  MX_Gateway_DWork.UnitDelay1_DSTATE_l0j2 = state_Engine;
  if (MX_Gateway_M->Timing.TaskCounters.TID[2] == 0) {
    // Update for UnitDelay: '<S702>/Delay Input1'
    MX_Gateway_DWork.DelayInput1_DSTATE_fsxx = MX_Gateway_B.RateTransition5_mczo;

    // Update for UnitDelay: '<S703>/Delay Input1'
    MX_Gateway_DWork.DelayInput1_DSTATE_aorm = MX_Gateway_B.RateTransition6_h5c1;

    // Update for UnitDelay: '<S704>/Delay Input1'
    MX_Gateway_DWork.DelayInput1_DSTATE_bihv = MX_Gateway_B.RateTransition7_obul;

    // Update for UnitDelay: '<S705>/Delay Input1'
    MX_Gateway_DWork.DelayInput1_DSTATE_f0dm = dout_GlowPlug;
  }

  // Update absolute time for base rate
  // The "clockTick0" counts the number of times the code of this task has
  //  been executed. The absolute time is the multiplication of "clockTick0"
  //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
  //  overflow during the application lifespan selected.
  //  Timer of this task consists of two 32 bit unsigned integers.
  //  The two integers represent the low bits Timing.clockTick0 and the high bits
  //  Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.

  if (!(++MX_Gateway_M->Timing.clockTick0)) {
    ++MX_Gateway_M->Timing.clockTickH0;
  }

  MX_Gateway_M->Timing.t[0] = MX_Gateway_M->Timing.clockTick0 *
    MX_Gateway_M->Timing.stepSize0 + MX_Gateway_M->Timing.clockTickH0 *
    MX_Gateway_M->Timing.stepSize0 * 4294967296.0;

  {
    // Update absolute timer for sample time: [0.01s, 0.0s]
    // The "clockTick1" counts the number of times the code of this task has
    //  been executed. The resolution of this integer timer is 0.01, which is the step size
    //  of the task. Size of "clockTick1" ensures timer will not overflow during the
    //  application lifespan selected.
    //  Timer of this task consists of two 32 bit unsigned integers.
    //  The two integers represent the low bits Timing.clockTick1 and the high bits
    //  Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.

    MX_Gateway_M->Timing.clockTick1++;
    if (!MX_Gateway_M->Timing.clockTick1) {
      MX_Gateway_M->Timing.clockTickH1++;
    }
  }

  rate_scheduler();
}

// Model initialize function
void MX_Gateway_initialize(void)
{
  // Registration code

  // initialize real-time model
  (void) memset((void *)MX_Gateway_M, 0,
                sizeof(RT_MODEL_MX_Gateway));

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&MX_Gateway_M->solverInfo,
                          &MX_Gateway_M->Timing.simTimeStep);
    rtsiSetTPtr(&MX_Gateway_M->solverInfo, &rtmGetTPtr(MX_Gateway_M));
    rtsiSetStepSizePtr(&MX_Gateway_M->solverInfo,
                       &MX_Gateway_M->Timing.stepSize0);
    rtsiSetErrorStatusPtr(&MX_Gateway_M->solverInfo, (&rtmGetErrorStatus
      (MX_Gateway_M)));
    rtsiSetRTModelPtr(&MX_Gateway_M->solverInfo, MX_Gateway_M);
  }

  rtsiSetSimTimeStep(&MX_Gateway_M->solverInfo, MAJOR_TIME_STEP);
  rtsiSetSolverName(&MX_Gateway_M->solverInfo,"FixedStepDiscrete");
  rtmSetTPtr(MX_Gateway_M, &MX_Gateway_M->Timing.tArray[0]);
  MX_Gateway_M->Timing.stepSize0 = 0.01;

  // block I/O
  (void) memset(((void *) &MX_Gateway_B), 0,
                sizeof(BlockIO_MX_Gateway));

  // exported global signals
  position_LeftPot = 0U;
  cmd_Throttle = 0U;
  PWD_NumberSelected = 0U;
  targetSpeed = 0U;
  rpm_Derate = 0U;
  torque_Derate = 0U;
  level_StarterAutomatedEngage = 0U;
  level_StarterAutomatedDisengage = 0U;
  time_StarterAutomated = 0U;
  count_GlowPlug = 0U;
  pos_ThrottlePrimary_In = 0U;
  rm_ThrottlePrimary = 0U;
  pos_ThrottlePrimary = 0U;
  percent_Throttle = 0U;
  rm_OffsetPot = 0U;
  position_OffsetPot = 0U;
  psi_LoadSense = 0U;
  bar_LoadMoment = 0U;
  gau_HOT = 0U;
  flt_HOT = 0U;
  rm_HOT = 0U;
  rm_FuelLevel = 0U;
  gau_FuelLevel = 0U;
  calc_EngineSpeed = 0U;
  flt_EngineSpeed = 0U;
  flt_EOP = 0U;
  gau_EOP = 0U;
  level_ShutdownEOP = 0U;
  level_WarningEOP = 0U;
  rm_EOP = 0U;
  rm_RightPot = 0U;
  position_RightPot = 0U;
  rm_LeftPot = 0U;
  gau_ECT = 0U;
  flt_ECT = 0U;
  rm_ECT = 0U;
  rm_Console = 0U;
  position_AuxPot = 0U;
  rm_AuxPot = 0U;
  count_AFPlugged = 0U;
  calc_VBattery = 0U;
  calcFlt_VBattery = 0U;
  bar_LoadSense = 0U;
  calc_ifbk_OffsetRod = 0U;
  calc_ifbk_OffsetBase = 0U;
  calc_ifbk_DumpValve = 0U;
  calc_ifbk_AuxRod = 0U;
  calc_ifbk_AuxBase = 0U;
  duty_TwoSpeed = 0U;
  hs_OffsetBase = 0U;
  hs_OffsetRod = 0U;
  hs_HydEnable = 0U;
  hs_HydBypass = 0U;
  duty_FuelSec = 0U;
  hs_DumpValve = 0U;
  hs_Diverter = 0U;
  hs_AuxBase = 0U;
  hs_AuxRod = 0U;
  errorCC_OffsetBase = 0;
  errorCC_OffsetRod = 0;
  errorCC_DumpValve = 0;
  errorCC_AuxBase = 0;
  errorCC_AuxRod = 0;
  percent_Derate = 0;
  state_CommECU = 0U;
  state_LoadMoment = 0U;
  state_TC = 0U;
  state_MachineLock = 0U;
  state_KSLock = 0U;
  state_KSPassword = 0U;
  pwd_Position = 0U;
  KSS_Display = 0U;
  state_KeylessEntryPowerHold = 0U;
  state_Engine = 0U;
  state_TurboPrime = 0U;
  cmdInverter = 0U;
  disp_LeftControl = 0U;
  disp_RightControl = 0U;
  mode_LeftControl = 0U;
  mode_RightControl = 0U;
  state_EngineSpeedDerate = 0U;
  state_HPMatch = 0U;
  state_CommSecondary = 0U;
  state_CommThrottle = 0U;
  state_CommStdPanel = 0U;
  state_CommJogShuttle = 0U;
  state_CommDeluxeG55 = 0U;
  state_CommKeylessEntry = 0U;
  state_CANThrottleCalDiag = 0U;
  state_AuxEnable = 0U;
  state_Detent = 0U;
  aux_Flow = 0U;
  state_DetentEnable = 0U;
  cmd_AuxRelease = 0U;
  state_AuxRelease = 0U;
  cmd_AutoIdle = 0U;
  state_Idle = 0U;
  state_AutoIdleEnable = 0U;
  icon_Rabbit = 0U;
  icon_Service = 0U;
  icon_Seatbelt = 0U;
  icon_RPM = 0U;
  icon_Lockout = 0U;
  icon_JobClock2 = 0U;
  icon_JobClock1 = 0U;
  icon_Hydraulic = 0U;
  icon_Hourmeter = 0U;
  icon_GlowPlug = 0U;
  icon_General = 0U;
  icon_Engine = 0U;
  icon_ECT = 0U;
  icon_Battery = 0U;
  icon_Aux = 0U;
  state_InfoPrimary = 0U;
  state_InfoButton = 0U;
  state_InfoSecondary = 0U;
  state_RightButton = 0U;
  state_LeftButton = 0U;
  enable_RightLeft = 0U;
  level_DisplayBacklight = 0U;
  level_IconBacklight = 0U;
  ind_Aux2 = 0U;
  ind_Aux1 = 0U;
  ind_AutoIdle = 0U;
  state_TwoSpeed = 0U;
  state_TwoSpeedIcon = 0U;
  state_SwitchedPwrOutput = 0U;
  state_SwitchedPwrRelay = 0U;
  state_StarterOutput = 0U;
  state_StarterRelay = 0U;
  state_PBValveOutput = 0U;
  state_PBValveRelay = 0U;
  state_OffsetBase = 0U;
  state_OffsetRod = 0U;
  state_LightsOutput = 0U;
  state_LightsRelay = 0U;
  state_HydExchange = 0U;
  state_HydEnable = 0U;
  state_HydBypass = 0U;
  state_GlowPlugOutput = 0U;
  state_GlowPlugRelay = 0U;
  timer_FuelResolution = 0U;
  error_FuelSec = 0U;
  state_FuelSec = 0U;
  state_ECUHold = 0U;
  state_HVACOutput = 0U;
  state_FuelPriOutput = 0U;
  state_FuelPriRelay = 0U;
  state_DumpValve = 0U;
  state_Diverter = 0U;
  state_AuxBase = 0U;
  state_AuxRod = 0U;
  state_VBattery = 0U;
  state_Alternator = 0U;
  state_ThrottlePrimary = 0U;
  derate_Throttle = 0U;
  state_SensorSupply2 = 0U;
  state_SensorSupply1 = 0U;
  state_OffsetPot = 0U;
  volts_LoadSense = 0U;
  state_LoadSense = 0U;
  volts_LoadMoment = 0U;
  state_Key = 0U;
  state_HOT = 0U;
  state_HCFilter1 = 0U;
  state_FuelTemp = 0U;
  state_FuelLevel = 0U;
  state_EngineStart = 0U;
  state_EOT = 0U;
  gain_EngineSpeed = 0U;
  state_EngineSpeed = 0U;
  state_EcoMode = 0U;
  state_EOP = 0U;
  state_RightPot = 0U;
  state_LeftPot = 0U;
  state_ECT = 0U;
  state_Console = 0U;
  state_PanelButtons = 0U;
  state_AuxPot = 0U;
  aux_DebounceButton = 0U;
  aux_DetentHold = 0U;
  state_AirFilter = 0U;
  mode_ControlChange = false;
  cabKeyDetect = false;
  ind_KeylessEntryLock = false;
  ind_KeylessEntryUnlock = false;
  flag_AuxEnableFlash = false;
  flag_AuxModeReminder = false;
  check_LeftNeutral = false;
  check_RightNeutral = false;
  aux_Inhibit = false;
  icon_Fuel = false;
  ind_Lock = false;
  ind_Unlock = false;
  ind_Light1 = false;
  dout_SwitchedPwr = false;
  dout_Starter = false;
  dout_PBValve = false;
  ls_OffsetBase = false;
  ls_OffsetRod = false;
  dout_Lights = false;
  dout_HydExchange = false;
  ls_HydEnable = false;
  ls_HydBypass = false;
  dout_GlowPlug = false;
  dout_HVACOutput = false;
  dout_FuelPri = false;
  ls_DumpValve = false;
  cmd_Diverter = false;
  ls_Diverter = false;
  dout_Buzzer = false;
  ls_AuxBase = false;
  ls_AuxRod = false;
  outputSelect_HOT = false;
  outputSelect_EOP = false;
  button_AuxReleaseAck = false;
  button_AuxReleaseBack = false;
  button_AuxReleaseExit = false;
  button_Info = false;
  button_Lights = false;
  button_AutoIdle = false;
  button_Aux = false;

  // states (dwork)
  (void) memset((void *)&MX_Gateway_DWork, 0,
                sizeof(D_Work_MX_Gateway));

  {
    int32_T i;

    // Start for Constant: '<S3>/Constant'
    can_Keypad[0] = ((uint8_T)1U);
    can_Keypad[1] = ((uint8_T)2U);
    can_Keypad[2] = ((uint8_T)3U);

    // Start for Constant: '<S3>/Constant1'
    for (i = 0; i < 5; i++) {
      msg_DeluxeButtons[i] = MX_Gateway_ConstP.Constant1_Value[i];
    }

    // End of Start for Constant: '<S3>/Constant1'

    // Start for Constant: '<S3>/Constant2'
    can_KeylessEntry[0] = ((uint8_T)1U);
    can_KeylessEntry[1] = ((uint8_T)2U);
    can_KeylessEntry[2] = ((uint8_T)3U);

    // Start for Constant: '<S3>/Constant3'
    for (i = 0; i < 8; i++) {
      msg_PanelButtonState[i] = MX_Gateway_ConstP.Constant3_Value[i];
    }

    // End of Start for Constant: '<S3>/Constant3'

    // Start for Constant: '<S3>/Constant4'
    for (i = 0; i < 8; i++) {
      msg_BJM2Right[i] = MX_Gateway_ConstP.pooled42[i];
    }

    // End of Start for Constant: '<S3>/Constant4'

    // Start for Constant: '<S3>/Constant7'
    msgAge_BJM2Right = ((uint16_T)0U);

    // Start for Constant: '<S3>/Constant8'
    msgAge_BJM2Left = ((uint16_T)0U);

    // Start for FromWorkspace: '<S16>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S21>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_pjz0.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_pjz0.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_cw5j.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S19>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_lqeh.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_lqeh.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_oicx.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S15>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_g5ct.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_g5ct.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_dvlg.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S14>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_kkec.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_kkec.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_iuxe.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S20>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_o1ux.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_o1ux.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_ar03.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S17>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_dksw.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_dksw.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_idc5.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S13>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_mrce.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_mrce.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_ohoz.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S22>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_gczn.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_gczn.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_kvba.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S18>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_gasw.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_gasw.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_p3t0.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S12>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_el1u.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_el1u.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_ifjj.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S23>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 0.94000000000000006,
        0.94000000000000006, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 5.0, 6.0, 6.0,
        7.0, 7.0, 8.0, 8.0, 9.0, 9.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 200.0, 0.0, 218.0, 210.0, 212.0,
        212.0, 2.0, 0.0, 222.0, 220.0, -2.0, 0.0, 188.0, 186.0, 188.0, 190.0,
        2.0, 0.0, 2.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_c3xy.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_c3xy.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_nius.PrevIndex = 0;
    }

    // Start for Constant: '<S1>/Constant1'
    for (i = 0; i < 5; i++) {
      ee_OwnerPassword[i] = MX_Gateway_ConstP.pooled43[i];
    }

    // End of Start for Constant: '<S1>/Constant1'

    // Start for Constant: '<S1>/Constant2'
    for (i = 0; i < 5; i++) {
      ee_MasterPassword[i] = MX_Gateway_ConstP.pooled43[i];
    }

    // End of Start for Constant: '<S1>/Constant2'

    // Start for Constant: '<S1>/Constant3'
    for (i = 0; i < 5; i++) {
      ee_User1Password[i] = MX_Gateway_ConstP.pooled43[i];
    }

    // End of Start for Constant: '<S1>/Constant3'

    // Start for Constant: '<S1>/Constant4'
    for (i = 0; i < 5; i++) {
      ee_User2Password[i] = MX_Gateway_ConstP.pooled43[i];
    }

    // End of Start for Constant: '<S1>/Constant4'

    // Start for FromWorkspace: '<S6>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 849.0,
        849.0, 849.0, 849.0, 849.0, 849.0, 512.0, 512.0, 512.0, 512.0, 512.0,
        512.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 400.0, 400.0, 400.0, 400.0, 400.0,
        400.0, 400.0, 400.0, 400.0, 400.0, 400.0, 400.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_iyga.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_iyga.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_opza.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S11>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_fic3.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_fic3.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_ioyl.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S8>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_dlz4.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_dlz4.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_fmyb.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S10>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_cn10.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_cn10.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_ir3w.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S7>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_jy1m.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_jy1m.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_gs0t.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S5>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_fa0x.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_fa0x.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_cgar.PrevIndex = 0;
    }

    // Start for FromWorkspace: '<S9>/FromWs'
    {
      static real_T pTimeValues0[] = { 0.0, 4.0, 4.0, 6.0, 6.0, 10.0 } ;

      static real_T pDataValues0[] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } ;

      MX_Gateway_DWork.FromWs_PWORK_ehvl.TimePtr = (void *) pTimeValues0;
      MX_Gateway_DWork.FromWs_PWORK_ehvl.DataPtr = (void *) pDataValues0;
      MX_Gateway_DWork.FromWs_IWORK_jni2.PrevIndex = 0;
    }

    // SystemInitialize for Atomic SubSystem: '<S25>/SensorSupply1'
    MX_Gateway_SensorSupply1_Init();

    // End of SystemInitialize for SubSystem: '<S25>/SensorSupply1'

    // SystemInitialize for Atomic SubSystem: '<S25>/SensorSupply2'
    MX_Gateway_SensorSupply2_Init();

    // End of SystemInitialize for SubSystem: '<S25>/SensorSupply2'

    // SystemInitialize for Atomic SubSystem: '<S25>/EOP'
    MX_Gateway_EOP_Init();

    // End of SystemInitialize for SubSystem: '<S25>/EOP'

    // SystemInitialize for Atomic SubSystem: '<S25>/EngineSpeed'
    MX_Gateway_EngineSpeed_Init();

    // End of SystemInitialize for SubSystem: '<S25>/EngineSpeed'

    // SystemInitialize for Atomic SubSystem: '<S25>/ECT'
    MX_Gateway_ECT_Init();

    // End of SystemInitialize for SubSystem: '<S25>/ECT'

    // SystemInitialize for Atomic SubSystem: '<S25>/HydOilTemp'
    MX_Gateway_HydOilTemp_Init();

    // End of SystemInitialize for SubSystem: '<S25>/HydOilTemp'

    // SystemInitialize for Atomic SubSystem: '<S28>/Machine_Lock'
    MX_Gateway_Machine_Lock_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Machine_Lock'

    // SystemInitialize for Atomic SubSystem: '<S25>/Engine_Start'
    Engine_Start_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Engine_Start'

    // SystemInitialize for Atomic SubSystem: '<S25>/Key'
    MX_Gateway_Key_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Key'

    // SystemInitialize for Atomic SubSystem: '<S25>/Fuel_Temperature'
    MX_Gatewa_Fuel_Temperature_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Fuel_Temperature'

    // SystemInitialize for Atomic SubSystem: '<S25>/Console_Sensor'
    MX_Gateway_Console_Sensor_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Console_Sensor'

    // SystemInitialize for Atomic SubSystem: '<S28>/Engine'
    MX_Gateway_Engine_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Engine'

    // SystemInitialize for Atomic SubSystem: '<S25>/VBattery'
    MX_Gateway_VBattery_Init();

    // End of SystemInitialize for SubSystem: '<S25>/VBattery'

    // SystemInitialize for Atomic SubSystem: '<S25>/FuelLevel'
    MX_Gateway_FuelLevel_Init();

    // End of SystemInitialize for SubSystem: '<S25>/FuelLevel'

    // SystemInitialize for Atomic SubSystem: '<S26>/SwitchedPower'
    MX_Gateway_SwitchedPower_Init();

    // End of SystemInitialize for SubSystem: '<S26>/SwitchedPower'

    // SystemInitialize for Atomic SubSystem: '<S26>/FuelSec_ECUHold'
    MX_Gateway_FuelSec_ECUHold_Init();

    // End of SystemInitialize for SubSystem: '<S26>/FuelSec_ECUHold'

    // SystemInitialize for Atomic SubSystem: '<S28>/Controller_State'
    MX_Gatewa_Controller_State_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Controller_State'

    // SystemInitialize for Atomic SubSystem: '<S25>/Buttons'
    MX_Gateway_Buttons_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Buttons'

    // SystemInitialize for Atomic SubSystem: '<S25>/Eco_Mode'
    MX_Gateway_Eco_Mode_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Eco_Mode'

    // SystemInitialize for Atomic SubSystem: '<S25>/Throttle'
    MX_Gateway_Throttle_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Throttle'

    // SystemInitialize for Atomic SubSystem: '<S26>/Hyd_Bypass'
    MX_Gateway_Hyd_Bypass_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Hyd_Bypass'

    // SystemInitialize for Chart: '<S119>/Aux_Pot'
    MX_Gateway_DWork.temporalCounter_i1_j2wz = 0U;
    MX_Gateway_DWork.bitsForTID1.is_active_c76_MX_Gateway = 0U;
    MX_Gateway_DWork.bitsForTID1.is_c76_MX_Gateway =
      MX_Gate_IN_NO_ACTIVE_CHILD_agec;
    aux_DebounceButton = 0U;
    aux_DetentHold = 0U;

    // SystemInitialize for Atomic SubSystem: '<S25>/Aux_Pot'
    MX_Gateway_Aux_Pot_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Aux_Pot'

    // SystemInitialize for Enabled SubSystem: '<S99>/Right Pot'
    MX_Gateway_RightPot_Init();

    // End of SystemInitialize for SubSystem: '<S99>/Right Pot'

    // SystemInitialize for Atomic SubSystem: '<S26>/Hyd_Enable'
    MX_Gateway_Hyd_Enable_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Hyd_Enable'

    // SystemInitialize for Enabled SubSystem: '<S98>/Normal_Pot'
    MX_Gateway_Normal_Pot_Init();

    // End of SystemInitialize for SubSystem: '<S98>/Normal_Pot'

    // SystemInitialize for Atomic SubSystem: '<S26>/GlowPlug'
    MX_Gateway_GlowPlug_Init();

    // End of SystemInitialize for SubSystem: '<S26>/GlowPlug'

    // SystemInitialize for Atomic SubSystem: '<S28>/EMEA Control Mode'
    MX_Gateway_EMEAControlMode_Init();

    // End of SystemInitialize for SubSystem: '<S28>/EMEA Control Mode'

    // SystemInitialize for Atomic SubSystem: '<S28>/Aux_Enable'
    MX_Gateway_Aux_Enable_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Aux_Enable'

    // SystemInitialize for Atomic SubSystem: '<S26>/Aux_Hydraulics'
    MX_Gateway_Aux_Hydraulics_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Aux_Hydraulics'

    // SystemInitialize for Atomic SubSystem: '<S26>/PB_Valve'
    MX_Gateway_PB_Valve_Init();

    // End of SystemInitialize for SubSystem: '<S26>/PB_Valve'

    // SystemInitialize for Enabled SubSystem: '<S111>/Load_Moment_Switch'
    MX_Gate_Load_Moment_Switch_Init();

    // End of SystemInitialize for SubSystem: '<S111>/Load_Moment_Switch'

    // SystemInitialize for Atomic SubSystem: '<S111>/LP_Filter_Adj_Gain'
    MX_Gate_LP_Filter_Adj_Gain_Init(&MX_Gateway_B.Output_ahzv,
      &MX_Gateway_DWork.LP_Filter_Adj_Gain);

    // End of SystemInitialize for SubSystem: '<S111>/LP_Filter_Adj_Gain'

    // SystemInitialize for Enabled SubSystem: '<S111>/Load_Moment_Sensor'
    MX_Gate_Load_Moment_Sensor_Init();

    // End of SystemInitialize for SubSystem: '<S111>/Load_Moment_Sensor'

    // SystemInitialize for Atomic SubSystem: '<S25>/Offset_Pot'
    MX_Gateway_Offset_Pot_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Offset_Pot'

    // SystemInitialize for Atomic SubSystem: '<S25>/Load_Sense'
    MX_Gateway_Load_Sense_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Load_Sense'

    // SystemInitialize for Atomic SubSystem: '<S26>/Lights'
    MX_Gateway_Lights_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Lights'

    // SystemInitialize for Atomic SubSystem: '<S26>/FuelPri_HVAC'
    MX_Gateway_FuelPri_HVAC_Init();

    // End of SystemInitialize for SubSystem: '<S26>/FuelPri_HVAC'

    // SystemInitialize for Atomic SubSystem: '<S26>/Starter'
    MX_Gateway_Starter_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Starter'

    // SystemInitialize for Atomic SubSystem: '<S26>/Diverter'
    MX_Gateway_Diverter_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Diverter'

    // SystemInitialize for Chart: '<S24>/Throttle Cal State'
    MX_Gateway_DWork.bitsForTID1.is_active_c41_MX_Gateway = 0U;
    MX_Gateway_DWork.bitsForTID1.is_c41_MX_Gateway =
      MX_Gate_IN_NO_ACTIVE_CHILD_agec;

    // SystemInitialize for Atomic SubSystem: '<S28>/CAN_Throttle'
    MX_Gateway_CAN_Throttle_Init();

    // End of SystemInitialize for SubSystem: '<S28>/CAN_Throttle'

    // SystemInitialize for Atomic SubSystem: '<S26>/Two_Speed'
    MX_Gateway_Two_Speed_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Two_Speed'

    // SystemInitialize for Atomic SubSystem: '<S26>/Hydraulic_Exchange'
    MX_Gate_Hydraulic_Exchange_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Hydraulic_Exchange'

    // SystemInitialize for Atomic SubSystem: '<S26>/Dump_Valve'
    MX_Gateway_Dump_Valve_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Dump_Valve'

    // SystemInitialize for Atomic SubSystem: '<S28>/Derate'
    MX_Gateway_Derate_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Derate'

    // SystemInitialize for Atomic SubSystem: '<S26>/Offset'
    MX_Gateway_Offset_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Offset'

    // SystemInitialize for Atomic SubSystem: '<S25>/AirFilter'
    MX_Gateway_AirFilter_Init();

    // End of SystemInitialize for SubSystem: '<S25>/AirFilter'

    // SystemInitialize for Atomic SubSystem: '<S25>/HCFilter1'
    MX_Gateway_HCFilter1_Init();

    // End of SystemInitialize for SubSystem: '<S25>/HCFilter1'

    // SystemInitialize for Atomic SubSystem: '<S25>/Engine_Oil_Temperature'
    MX__Engine_Oil_Temperature_Init();

    // End of SystemInitialize for SubSystem: '<S25>/Engine_Oil_Temperature'

    // SystemInitialize for Atomic SubSystem: '<S26>/Buzzer'
    MX_Gateway_Buzzer_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Buzzer'

    // SystemInitialize for Atomic SubSystem: '<S26>/Fuel_Resolution_Timer'
    MX_G_Fuel_Resolution_Timer_Init();

    // End of SystemInitialize for SubSystem: '<S26>/Fuel_Resolution_Timer'

    // SystemInitialize for Atomic SubSystem: '<S28>/AutoIdle'
    MX_Gateway_AutoIdle_Init();

    // End of SystemInitialize for SubSystem: '<S28>/AutoIdle'

    // SystemInitialize for Atomic SubSystem: '<S27>/AutoIdle_Ind'
    MX_Gateway_AutoIdle_Ind_Init();

    // End of SystemInitialize for SubSystem: '<S27>/AutoIdle_Ind'

    // SystemInitialize for Atomic SubSystem: '<S27>/Aux_Ind'
    MX_Gateway_Aux_Ind_Init();

    // End of SystemInitialize for SubSystem: '<S27>/Aux_Ind'

    // SystemInitialize for Atomic SubSystem: '<S27>/Backlighting'
    MX_Gateway_Backlighting_Init();

    // End of SystemInitialize for SubSystem: '<S27>/Backlighting'

    // SystemInitialize for Atomic SubSystem: '<S27>/FrontLight'
    MX_Gateway_FrontLight_Init();

    // End of SystemInitialize for SubSystem: '<S27>/FrontLight'

    // SystemInitialize for Atomic SubSystem: '<S28>/Throttle_Command'
    MX_Gatewa_Throttle_Command_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Throttle_Command'

    // SystemInitialize for Atomic SubSystem: '<S28>/Keyless_Start'
    MX_Gateway_Keyless_Start_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Keyless_Start'

    // SystemInitialize for Atomic SubSystem: '<S27>/InformationDisplay'
    MX_Gate_InformationDisplay_Init();

    // End of SystemInitialize for SubSystem: '<S27>/InformationDisplay'

    // SystemInitialize for Atomic SubSystem: '<S27>/Keyless_Indicators'
    MX_Gate_Keyless_Indicators_Init();

    // End of SystemInitialize for SubSystem: '<S27>/Keyless_Indicators'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_BatteryIcon'
    MX_Gateway_mod_BatteryIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_BatteryIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_ECTIcon'
    MX_Gateway_mod_ECTIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_ECTIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_RPMIcon'
    MX_Gateway_mod_RPMIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_RPMIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_EngineIcon'
    MX_Gateway_mod_EngineIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_EngineIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_FuelLevelIcon'
    MX_Gatew_mod_FuelLevelIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_FuelLevelIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_GeneralWarningIcon'
    MX__mod_GeneralWarningIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_GeneralWarningIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_GlowPlugIcon'
    MX_Gatewa_mod_GlowPlugIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_GlowPlugIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_HydraulicIcon'
    MX_Gatew_mod_HydraulicIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_HydraulicIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_LockoutIcon'
    MX_Gateway_mod_LockoutIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_LockoutIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_SeatBeltIcon'
    MX_Gatewa_mod_SeatBeltIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_SeatBeltIcon'

    // SystemInitialize for Atomic SubSystem: '<S27>/mod_TwoSpeedIcon'
    MX_Gatewa_mod_TwoSpeedIcon_Init();

    // End of SystemInitialize for SubSystem: '<S27>/mod_TwoSpeedIcon'

    // SystemInitialize for Atomic SubSystem: '<S28>/ElectricAutomation'
    MX_Gate_ElectricAutomation_Init();

    // End of SystemInitialize for SubSystem: '<S28>/ElectricAutomation'

    // SystemInitialize for Enabled SubSystem: '<S28>/Keyless_Entry'
    MX_Gateway_Keyless_Entry_Init();

    // End of SystemInitialize for SubSystem: '<S28>/Keyless_Entry'
  }
}

//
//  [EOF]

