//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : MX_Gateway


#include "mod_System.h"

// Include model header file for global data
#include "MX_Gateway.h"
#include "MX_Gateway_private.h"

// Named constants for Chart: '<S653>/Auto_Idle'
#define MX_Gate_IN_NO_ACTIVE_CHILD_an2j ((uint8_T)0U)
#define MX_Gatew_IN_NonFunctional_k5ri0 ((uint8_T)2U)
#define MX_Gatewa_IN_NonFunctional_k5ri ((uint8_T)1U)
#define MX_Gateway_IN_Deluxe_G55_dqoj  ((uint8_T)1U)
#define MX_Gateway_IN_Error            ((uint8_T)1U)
#define MX_Gateway_IN_Normal_jadr      ((uint8_T)2U)
#define MX_Gateway_IN_Normal_jadrg     ((uint8_T)3U)
#define MX_Gateway_IN_Off_ltyw         ((uint8_T)2U)
#define MX_Gateway_IN_Off_ltywd        ((uint8_T)1U)
#define MX_Gateway_IN_On_fhbz          ((uint8_T)3U)
#define MX_Gateway_IN_On_fhbze         ((uint8_T)2U)

// Named constants for Chart: '<S654>/Auto_Idle'
#define MX_Gate_IN_NO_ACTIVE_CHILD_dkkf ((uint8_T)0U)
#define MX_Gatew_IN_NON_FUNCTIONAL_aop1 ((uint8_T)3U)
#define MX_Gateway_IN_ACTIVE_dc5j      ((uint8_T)1U)
#define MX_Gateway_IN_Armbar_Delay     ((uint8_T)1U)
#define MX_Gateway_IN_Change           ((uint8_T)1U)
#define MX_Gateway_IN_Console_Up       ((uint8_T)2U)
#define MX_Gateway_IN_Delay_hh0k       ((uint8_T)3U)
#define MX_Gateway_IN_INACTIVE_p5he    ((uint8_T)2U)
#define MX_Gateway_IN_Idle             ((uint8_T)4U)
#define MX_Gateway_IN_Init_cr3r        ((uint8_T)2U)
#define MX_Gateway_IN_Initialize_b3if  ((uint8_T)5U)
#define MX_Gateway_IN_No_Change        ((uint8_T)3U)
#define MX_Gateway_IN_Reset_Movement   ((uint8_T)4U)
#define MX_Gateway_IN_Throttle         ((uint8_T)6U)

// Named constants for Chart: '<S639>/Aux_Control'
#define IN_Inactive_Out_Of_Neutral_gquu ((uint8_T)4U)
#define MX_G_IN_Inactive_Out_Of_Neutral ((uint8_T)5U)
#define MX_Gate_IN_Aux_Enable_State_ACD ((uint8_T)1U)
#define MX_Gate_IN_NO_ACTIVE_CHILD_l0ws ((uint8_T)0U)
#define MX_Gate_IN_Non_Functional_km5qd ((uint8_T)2U)
#define MX_Gatew_IN_Aux_Enable_State_ST ((uint8_T)2U)
#define MX_Gatew_IN_Inactive_Fault_h3so ((uint8_T)3U)
#define MX_Gatew_IN_Non_Functional_km5q ((uint8_T)3U)
#define MX_Gatewa_IN_EMEA_CONTROLS_giio ((uint8_T)1U)
#define MX_Gatewa_IN_Standard_Flow_aw1n ((uint8_T)4U)
#define MX_Gatewa_IN_WAIT_FOR_AUX_PRESS ((uint8_T)3U)
#define MX_Gateway_CALL_EVENT_ivqv     (-1)
#define MX_Gateway_IN_Ack              ((uint8_T)1U)
#define MX_Gateway_IN_Active_Normal    ((uint8_T)1U)
#define MX_Gateway_IN_Active_nhnn      ((uint8_T)1U)
#define MX_Gateway_IN_Aux_Relief_G5    ((uint8_T)1U)
#define MX_Gateway_IN_Confirm          ((uint8_T)2U)
#define MX_Gateway_IN_Detent_Base      ((uint8_T)1U)
#define MX_Gateway_IN_Detent_Rod       ((uint8_T)2U)
#define MX_Gateway_IN_Disabled         ((uint8_T)1U)
#define MX_Gateway_IN_Enabled          ((uint8_T)2U)
#define MX_Gateway_IN_Enabled_djid     ((uint8_T)1U)
#define MX_Gateway_IN_Functional_jgxb  ((uint8_T)3U)
#define MX_Gateway_IN_High_Flow        ((uint8_T)1U)
#define MX_Gateway_IN_Inactive_Fault   ((uint8_T)4U)
#define MX_Gateway_IN_Inactive_Latched ((uint8_T)1U)
#define MX_Gateway_IN_Inactive_Temp    ((uint8_T)2U)
#define MX_Gateway_IN_Inactive_cs2c    ((uint8_T)3U)
#define MX_Gateway_IN_Inactive_cs2c5   ((uint8_T)2U)
#define MX_Gateway_IN_Low_Flow         ((uint8_T)1U)
#define MX_Gateway_IN_Low_Flow_m2d1    ((uint8_T)2U)
#define MX_Gateway_IN_Medium_Flow      ((uint8_T)2U)
#define MX_Gateway_IN_Medium_Flow_btkm ((uint8_T)3U)
#define MX_Gateway_IN_NORMAL_CONTROLS  ((uint8_T)2U)
#define MX_Gateway_IN_No_Detent        ((uint8_T)2U)
#define MX_Gateway_IN_Not_Enabled      ((uint8_T)3U)
#define MX_Gateway_IN_Off_p5eh         ((uint8_T)2U)
#define MX_Gateway_IN_PHOENIX_K2       ((uint8_T)3U)
#define MX_Gateway_IN_Release_Base     ((uint8_T)3U)
#define MX_Gateway_IN_Release_Rod      ((uint8_T)4U)
#define MX_Gateway_IN_SIRIUS2          ((uint8_T)4U)
#define MX_Gateway_IN_SIRIUS2_HIFLOW   ((uint8_T)5U)
#define MX_Gateway_IN_Standard_Flow    ((uint8_T)3U)
#define MX_Gateway_IN_Wait_dwz2        ((uint8_T)5U)
#define MX_Gateway_event_disable_aux   (0)
#define MX_Gateway_event_disable_detent (1)

// Named constants for Chart: '<S664>/CAN_Throttle_Actuator'
#define MX_Gate_IN_NO_ACTIVE_CHILD_owkq ((uint8_T)0U)
#define MX_Gateway_IN_Cal_Check        ((uint8_T)1U)
#define MX_Gateway_IN_Cal_Fail         ((uint8_T)1U)
#define MX_Gateway_IN_Cal_In_Progress  ((uint8_T)2U)
#define MX_Gateway_IN_Cal_Inhibit      ((uint8_T)3U)
#define MX_Gateway_IN_Cal_Mode         ((uint8_T)1U)
#define MX_Gateway_IN_Debounce_jp5a    ((uint8_T)1U)
#define MX_Gateway_IN_Done             ((uint8_T)2U)
#define MX_Gateway_IN_EXTEND_ACTUATOR  ((uint8_T)3U)
#define MX_Gateway_IN_Fault            ((uint8_T)2U)
#define MX_Gateway_IN_INITIALIZE       ((uint8_T)4U)
#define MX_Gateway_IN_Init_Cal         ((uint8_T)1U)
#define MX_Gateway_IN_Normal_Mode      ((uint8_T)2U)
#define MX_Gateway_IN_Normal_pkv1      ((uint8_T)3U)
#define MX_Gateway_IN_Pos_High         ((uint8_T)1U)
#define MX_Gateway_IN_Pos_Low          ((uint8_T)2U)
#define MX_Gateway_IN_RECORD_MAX       ((uint8_T)5U)
#define MX_Gateway_IN_RECORD_MIN       ((uint8_T)6U)
#define MX_Gateway_IN_RETRACT_ACTUATOR ((uint8_T)7U)
#define MX_Gateway_IN_VALIDATE_POLARITY ((uint8_T)8U)
#define MX_Gateway_IN_VALIDATE_RANGE   ((uint8_T)9U)
#define MX_Gateway_IN_Wait_ltfg        ((uint8_T)2U)

// Named constants for Chart: '<S642>/Controller_State'
#define MX_Ga_IN_NO_COMMUNICATION_fhkjk ((uint8_T)4U)
#define MX_Gat_IN_NO_COMMUNICATION_fhkj ((uint8_T)3U)
#define MX_Gate_IN_NON_FUNCTIONAL_mt1cz ((uint8_T)2U)
#define MX_Gate_IN_NO_ACTIVE_CHILD_lotf ((uint8_T)0U)
#define MX_Gatew_IN_NON_FUNCTIONAL_mt1c ((uint8_T)1U)
#define MX_Gateway_IN_EVALUATE         ((uint8_T)1U)
#define MX_Gateway_IN_FUNCTIONAL_a5dn  ((uint8_T)1U)
#define MX_Gateway_IN_INACTIVE_nxrf    ((uint8_T)2U)
#define MX_Gateway_IN_NORMAL_dl5a      ((uint8_T)2U)
#define MX_Gateway_IN_NORMAL_dl5am     ((uint8_T)3U)

// Named constants for Chart: '<S643>/Derate'
#define MX_Gate_IN_NO_ACTIVE_CHILD_ae3j ((uint8_T)0U)
#define MX_Gatew_IN_NON_FUNCTIONAL_jyx5 ((uint8_T)3U)
#define MX_Gateway_IN_Cranking_ibul    ((uint8_T)1U)
#define MX_Gateway_IN_DEBOUNCE_h2c4    ((uint8_T)1U)
#define MX_Gateway_IN_DERATE           ((uint8_T)1U)
#define MX_Gateway_IN_DERATE_g4rc      ((uint8_T)2U)
#define MX_Gateway_IN_DISABLE_DERATE   ((uint8_T)2U)
#define MX_Gateway_IN_ECU_o15r         ((uint8_T)1U)
#define MX_Gateway_IN_NORMAL_nwss      ((uint8_T)4U)
#define MX_Gateway_IN_NORMAL_nwssk     ((uint8_T)1U)
#define MX_Gateway_IN_NO_ECU           ((uint8_T)2U)
#define MX_Gateway_IN_REQUEST_RECEIVED ((uint8_T)4U)
#define MX_Gateway_IN_SEND_MESSAGE     ((uint8_T)1U)
#define MX_Gateway_IN_SEND_REQUEST     ((uint8_T)5U)
#define MX_Gateway_IN_SHUTDOWN_o0ld    ((uint8_T)2U)
#define MX_Gateway_IN_UNRESPONSIVE     ((uint8_T)3U)
#define MX_Gateway_IN_UNRESPONSIVE_hw5u ((uint8_T)2U)
#define MX_Gateway_IN_WAIT_FOR_RESPONSE ((uint8_T)2U)

// Named constants for Chart: '<S644>/Control Modes'
#define IN_Left_Control_or_Diverter_Fau ((uint8_T)4U)
#define MX_Ga_IN_Mode_Offset_Aux1_g0rtz ((uint8_T)3U)
#define MX_Gat_IN_Mode_Aux4_Offset_bn0r ((uint8_T)3U)
#define MX_Gat_IN_Mode_Offset_Aux1_g0rt ((uint8_T)1U)
#define MX_Gat_IN_Mode_Offset_Aux4_kviy ((uint8_T)4U)
#define MX_Gate_IN_NO_ACTIVE_CHILD_h0dd ((uint8_T)0U)
#define MX_Gatew_IN_Mode_Aux4_Aux1_j4zq ((uint8_T)2U)
#define MX_Gatew_IN_Non_Functional_nbss ((uint8_T)1U)
#define MX_Gateway_IN_Aux_Enabled      ((uint8_T)1U)
#define MX_Gateway_IN_Control_Fault    ((uint8_T)1U)
#define MX_Gateway_IN_Delay_n3pi       ((uint8_T)1U)
#define MX_Gateway_IN_Enabled_p4xh     ((uint8_T)2U)
#define MX_Gateway_IN_Fault_Mode       ((uint8_T)1U)
#define MX_Gateway_IN_INIT_SystemCheck ((uint8_T)3U)
#define MX_Gateway_IN_Mode_Aux2_Aux1   ((uint8_T)1U)
#define MX_Gateway_IN_Mode_Aux2_Aux4   ((uint8_T)2U)
#define MX_Gateway_IN_Mode_Aux4_Aux1   ((uint8_T)1U)
#define MX_Gateway_IN_Mode_Aux4_Offset ((uint8_T)2U)
#define MX_Gateway_IN_Mode_None_Aux1   ((uint8_T)2U)
#define MX_Gateway_IN_Mode_None_Offset ((uint8_T)2U)
#define MX_Gateway_IN_Mode_Offset_Aux1 ((uint8_T)2U)
#define MX_Gateway_IN_Mode_Offset_Aux4 ((uint8_T)2U)
#define MX_Gateway_IN_Mode_Offset_None ((uint8_T)2U)
#define MX_Gateway_IN_Offset_Left      ((uint8_T)2U)
#define MX_Gateway_IN_Offset_Right     ((uint8_T)3U)
#define MX_Gateway_IN_OptionA          ((uint8_T)2U)
#define MX_Gateway_IN_OptionB          ((uint8_T)3U)
#define MX_Gateway_IN_OptionC          ((uint8_T)4U)

// Named constants for Chart: '<S644>/Left Handle Switch'
#define MX_Gat_IN_Default_InactiveCheck ((uint8_T)3U)
#define MX_Gatew_IN_DebounceActive_lwuo ((uint8_T)2U)
#define MX_Gateway_IN_Active_cxwq      ((uint8_T)1U)
#define MX_Gateway_IN_Inactive_aft1    ((uint8_T)4U)

// Named constants for Chart: '<S678>/DisplayAuxMode'
#define MX_Gatew_IN_ReminderOfLastState ((uint8_T)4U)
#define MX_Gateway_IN_A2FLASH_A1FLASH  ((uint8_T)1U)
#define MX_Gateway_IN_A2FLASH_A4FLASH  ((uint8_T)2U)
#define MX_Gateway_IN_A4FLASH_A1FLASH  ((uint8_T)3U)
#define MX_Gateway_IN_A4FLASH_OF       ((uint8_T)4U)
#define MX_Gateway_IN_Default          ((uint8_T)5U)
#define MX_Gateway_IN_Expired          ((uint8_T)1U)
#define MX_Gateway_IN_GLOW_OFF         ((uint8_T)1U)
#define MX_Gateway_IN_GlowCycle1       ((uint8_T)2U)
#define MX_Gateway_IN_GlowCycle2       ((uint8_T)3U)
#define MX_Gateway_IN_GlowOff          ((uint8_T)4U)
#define MX_Gateway_IN_GlowOff1         ((uint8_T)5U)
#define MX_Gateway_IN_Init_lslf        ((uint8_T)1U)
#define MX_Gateway_IN_No_Glow          ((uint8_T)6U)
#define MX_Gateway_IN_Normal_jlzq      ((uint8_T)2U)
#define MX_Gateway_IN_OFF_a3vv         ((uint8_T)2U)
#define MX_Gateway_IN_OF_A1FLASH       ((uint8_T)6U)
#define MX_Gateway_IN_OF_A4FLASH       ((uint8_T)7U)
#define MX_Gateway_IN_ON1              ((uint8_T)3U)
#define MX_Gateway_IN_ON_lgyf          ((uint8_T)3U)
#define MX_Gateway_IN_ON_lgyfn         ((uint8_T)2U)
#define MX_Gateway_IN_OffsetCheck      ((uint8_T)3U)

// Named constants for Chart: '<S644>/Right Handle Switch'
#define MX_Gateway_IN_Inactive_jlip    ((uint8_T)3U)
#define M_IN_Default_InactiveCheck_b5aa ((uint8_T)1U)

// Named constants for Chart: '<S645>/Chart1'
#define MX_Gate_IN_NO_ACTIVE_CHILD_oq0v ((uint8_T)0U)
#define MX_Gateway_IN_CONNECTED        ((uint8_T)1U)
#define MX_Gateway_IN_OPERATIONAL      ((uint8_T)2U)
#define MX_Gateway_IN_READY            ((uint8_T)3U)
#define MX_Gateway_IN_RUN_FWD          ((uint8_T)4U)
#define MX_Gateway_IN_STOP             ((uint8_T)5U)

// Named constants for Chart: '<S646>/Engine'
#define MX_G_IN_PREVENT_FUEL_MSG_ACTIVE ((uint8_T)4U)
#define MX_Gate_IN_NO_ACTIVE_CHILD_fnqb ((uint8_T)0U)
#define MX_Gatew_IN_HOUR_METER_EXCEEDED ((uint8_T)2U)
#define MX_Gateway_IN_CHECK_HOUR_METER ((uint8_T)1U)
#define MX_Gateway_IN_CRANKING_in3g    ((uint8_T)1U)
#define MX_Gateway_IN_NORMAL_om4i      ((uint8_T)1U)
#define MX_Gateway_IN_NOT_RUNNING      ((uint8_T)2U)
#define MX_Gateway_IN_NOT_RUNNING_psez ((uint8_T)1U)
#define MX_Gateway_IN_PAUSE            ((uint8_T)3U)
#define MX_Gateway_IN_RUNNING          ((uint8_T)3U)
#define MX_Gateway_IN_SHUTDOWN_k1ph    ((uint8_T)2U)
#define MX_Gateway_IN_ST_SHUTDOWN      ((uint8_T)3U)
#define MX_Gateway_IN_WAIT_TO_START    ((uint8_T)2U)
#define MX_IN_PREVENT_FUEL_MSG_INACTIVE ((uint8_T)5U)

// Named constants for Chart: '<S647>/CabKeyDetection'
#define MX_Gate_IN_NO_ACTIVE_CHILD_nkri ((uint8_T)0U)
#define MX_Gate_IN_WaitForSwitchedPower ((uint8_T)3U)
#define MX_Gatewa_IN_Engine_Not_Running ((uint8_T)2U)
#define MX_Gateway_IN_CabKeyCycle      ((uint8_T)1U)
#define MX_Gateway_IN_Detected         ((uint8_T)1U)
#define MX_Gateway_IN_Timer            ((uint8_T)2U)

// Named constants for Chart: '<S647>/Indicators'
#define MX_Gateway_IN_ACTIVE_ai5f      ((uint8_T)1U)
#define MX_Gateway_IN_BOTH_OFF         ((uint8_T)1U)
#define MX_Gateway_IN_FAIL_pabs        ((uint8_T)1U)
#define MX_Gateway_IN_FLASHING         ((uint8_T)1U)
#define MX_Gateway_IN_INACTIVE_k4dz    ((uint8_T)2U)
#define MX_Gateway_IN_LOCK             ((uint8_T)2U)
#define MX_Gateway_IN_NORMAL_e2vv      ((uint8_T)2U)
#define MX_Gateway_IN_TIMEOUT          ((uint8_T)2U)
#define MX_Gateway_IN_UNLOCK           ((uint8_T)3U)

// Named constants for Chart: '<S647>/Power_Hold'
#define MX_G_IN_KEYLESS_ENTRY_POWER_OFF ((uint8_T)2U)
#define MX_Ga_IN_KEYLESS_ENTRY_DETECTED ((uint8_T)1U)
#define MX_Ga_IN_WAIT_FOR_KEYLESS_ENTRY ((uint8_T)5U)
#define MX_Gatew_IN_KEYLESS_ENTRY_VALID ((uint8_T)3U)
#define MX_Gatew_IN_NON_FUNCTIONAL_k1dx ((uint8_T)4U)
#define MX_Gateway_IN_WAIT_FOR_NO_PRESS ((uint8_T)6U)

// Named constants for Chart: '<S648>/Panel_Lock'
#define MX_Ga_IN_OWNER_USER_SELECT_gzm1 ((uint8_T)2U)
#define MX_Gate_IN_NO_ACTIVE_CHILD_f01i ((uint8_T)0U)
#define MX_Gatew_IN_DISPLAY_DELAY_OWNER ((uint8_T)1U)
#define MX_Gatew_IN_DISPLAY_DELAY_USER1 ((uint8_T)1U)
#define MX_Gatew_IN_DISPLAY_DELAY_USER2 ((uint8_T)1U)
#define MX_Gatew_IN_VERIFY_SECOND_ENTRY ((uint8_T)6U)
#define MX_Gatewa_IN_VERIFY_FIRST_ENTRY ((uint8_T)5U)
#define MX_Gateway_IN_ASTERISK         ((uint8_T)1U)
#define MX_Gateway_IN_BUTTON_0         ((uint8_T)1U)
#define MX_Gateway_IN_BUTTON_1         ((uint8_T)2U)
#define MX_Gateway_IN_BUTTON_2         ((uint8_T)3U)
#define MX_Gateway_IN_BUTTON_3         ((uint8_T)4U)
#define MX_Gateway_IN_BUTTON_4         ((uint8_T)5U)
#define MX_Gateway_IN_BUTTON_5         ((uint8_T)6U)
#define MX_Gateway_IN_BUTTON_6         ((uint8_T)7U)
#define MX_Gateway_IN_BUTTON_74        ((uint8_T)8U)
#define MX_Gateway_IN_BUTTON_8         ((uint8_T)9U)
#define MX_Gateway_IN_BUTTON_9         ((uint8_T)10U)
#define MX_Gateway_IN_BUTTON_CHANGE_DB ((uint8_T)1U)
#define MX_Gateway_IN_CHANGE           ((uint8_T)1U)
#define MX_Gateway_IN_CHANGE_hqcz      ((uint8_T)2U)
#define MX_Gateway_IN_CODE             ((uint8_T)2U)
#define MX_Gateway_IN_CODE_ERROR       ((uint8_T)2U)
#define MX_Gateway_IN_CODE_ERROR1      ((uint8_T)1U)
#define MX_Gateway_IN_CODE_ERROR2      ((uint8_T)2U)
#define MX_Gateway_IN_DISPLAY_ASTRISK  ((uint8_T)1U)
#define MX_Gateway_IN_DISPLAY_ASTRISK1 ((uint8_T)2U)
#define MX_Gateway_IN_DISPLAY_CODE     ((uint8_T)2U)
#define MX_Gateway_IN_DISPLAY_DELAY    ((uint8_T)1U)
#define MX_Gateway_IN_DISPLAY_DELAY1   ((uint8_T)2U)
#define MX_Gateway_IN_DISPLAY_DELAY2   ((uint8_T)3U)
#define MX_Gateway_IN_DISPLAY_ENTER    ((uint8_T)2U)
#define MX_Gateway_IN_DISPLAY_OWNER    ((uint8_T)4U)
#define MX_Gateway_IN_DISPLAY_USER1    ((uint8_T)5U)
#define MX_Gateway_IN_DISPLAY_USER2    ((uint8_T)6U)
#define MX_Gateway_IN_ENTER_OWNER      ((uint8_T)1U)
#define MX_Gateway_IN_FAIL_nxgn        ((uint8_T)2U)
#define MX_Gateway_IN_GOOD_NEW         ((uint8_T)2U)
#define MX_Gateway_IN_GOOD_UNLOCK      ((uint8_T)3U)
#define MX_Gateway_IN_Init_k1cp        ((uint8_T)3U)
#define MX_Gateway_IN_LOCK_DB          ((uint8_T)5U)
#define MX_Gateway_IN_LOCK_o1ud        ((uint8_T)4U)
#define MX_Gateway_IN_MACHINE_LOCK     ((uint8_T)6U)
#define MX_Gateway_IN_MACHINE_UNLOCK   ((uint8_T)7U)
#define MX_Gateway_IN_NONE             ((uint8_T)11U)
#define MX_Gateway_IN_NOORMAL          ((uint8_T)3U)
#define MX_Gateway_IN_NOTHING          ((uint8_T)4U)
#define MX_Gateway_IN_NOTHING_njh0     ((uint8_T)8U)
#define MX_Gateway_IN_NOT_PRESSED      ((uint8_T)1U)
#define MX_Gateway_IN_OWNER_USER_SELECT ((uint8_T)3U)
#define MX_Gateway_IN_PASSWORD         ((uint8_T)4U)
#define MX_Gateway_IN_PRESSED          ((uint8_T)2U)
#define MX_Gateway_IN_RESET            ((uint8_T)3U)
#define MX_Gateway_IN_STORE            ((uint8_T)4U)
#define MX_Gateway_IN_UNLOCK_DB        ((uint8_T)10U)
#define MX_Gateway_IN_UNLOCK_gi5x      ((uint8_T)9U)
#define MX_Gateway_IN_WAIT_NEW         ((uint8_T)7U)
#define MX_Gateway_IN_WAIT_NEW1        ((uint8_T)8U)
#define MX_Gateway_IN_WAIT_NEW2        ((uint8_T)9U)
#define MX_Gateway_IN_WAIT_UNLOCK      ((uint8_T)5U)
#define MX_Gateway_IN_WAIT_UNLOCK_CHART ((uint8_T)6U)

// Named constants for Chart: '<S649>/Lock_Status'
#define MX_Gate_IN_NO_ACTIVE_CHILD_ja4m ((uint8_T)0U)
#define MX_Gatew_IN_KEYLESS_GENV_DELUXE ((uint8_T)2U)
#define MX_Gatew_IN_NON_FUNCTIONAL_iweg ((uint8_T)3U)
#define MX_Gateway_IN_DELUXE_G55       ((uint8_T)1U)
#define MX_Gateway_IN_LOCK_pixy        ((uint8_T)1U)
#define MX_Gateway_IN_UNLOCK_dcz1      ((uint8_T)2U)

// Named constants for Chart: '<S650>/Throttle_Command'
#define MX_Gat_IN_CAN_Throttle_Actuator ((uint8_T)1U)
#define MX_Gate_IN_NO_ACTIVE_CHILD_c3pq ((uint8_T)0U)
#define MX_Gateway_IN_AutoIdle         ((uint8_T)1U)
#define MX_Gateway_IN_AutoIdle_Reversed ((uint8_T)2U)
#define MX_Gateway_IN_CHECK_THROTTLE   ((uint8_T)1U)
#define MX_Gateway_IN_COLD_cwet        ((uint8_T)1U)
#define MX_Gateway_IN_EXTREMELY_COLD   ((uint8_T)2U)
#define MX_Gateway_IN_G2_Engine        ((uint8_T)2U)
#define MX_Gateway_IN_Invalid_nww4     ((uint8_T)3U)
#define MX_Gateway_IN_Normal_Throttle  ((uint8_T)2U)
#define MX_Gateway_IN_Normal_bkdx      ((uint8_T)2U)
#define MX_Gateway_IN_Normal_bkdx2     ((uint8_T)1U)
#define MX_Gateway_IN_Normal_bkdx2g    ((uint8_T)3U)
#define MX_Gateway_IN_TC_PROTECTION    ((uint8_T)2U)
#define MX_Gateway_IN_THROTTLE_MOVED   ((uint8_T)2U)
#define MX_Gateway_IN_TIMER_RESET      ((uint8_T)3U)
#define MX_Gateway_IN_Throttle_Actuator ((uint8_T)4U)
#define MX_Gateway_IN_WAIT_FOR_EOT     ((uint8_T)3U)
#define M_IN_WAIT_FOR_THROTTLE_MOVEMENT ((uint8_T)4U)

// Forward declaration for local functions
static void MX_Gateway_Enabled(void);
static void MX_Gateway_Functional_f20sl3(void);
static void MX_Gatew_enter_internal_Enabled(void);
static void MX_Gateway_Functional(void);
static void MX__enter_internal_Enabled_ls1c(void);
static void MX_Gateway_Functional_f20s(void);
static void MX_Gateway_SIRIUS2(void);
static void MX_enter_internal_Enabled_ls1cz(void);
static void MX_Gateway_Functional_f20sl(void);
static void MX_Gateway_SIRIUS2_HIFLOW(void);
static void MX_Gateway_Aux_Enable_State(void);
static void MX_Gateway_Detent_State(const uint8_T *FixPtRelationalOperator);

// Forward declaration for local functions
static void MX_Ga_DiverterFaultOverrideLeft(void);
static void enter_internal_Aux_Enable_cso3u(void);
static void MX_G_enter_internal_Offset_Left(void);
static void MX_G_DiverterFaultOverrideRight(void);
static void enter_internal_Aux_Enabl_cso3up(void);
static void MX__enter_internal_Offset_Right(void);
static void MX_Gateway_Offset_Right_jefh(const boolean_T *LogicalOperator2,
  const boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gateway_Aux_Enabled(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n);
static void MX_Gateway_OptionC(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gateway_OptionA(const boolean_T *LogicalOperator2);
static void MX_G_enter_internal_Aux_Enabled(void);
static void enter_internal_Aux_Enabled_cso3(void);
static void MX_Gateway_Offset_Right(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gateway_Offset_Left(const boolean_T *LogicalOperator2_ee3n);
static void MX_Gateway_OptionB(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss);
static void MX_Gateway_ReminderOfLastState(void);

// Forward declaration for local functions
static void MX_Gateway_KEYPAD(void);
static void MX_Gateway_CHANGE(void);

// System initialize for atomic system: '<S638>/Auto_Idle_Enable'
void MX_Gatewa_Auto_Idle_Enable_Init(void)
{
  // InitializeConditions for UnitDelay: '<S657>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_n1b2 = true;

  // SystemInitialize for Chart: '<S653>/Auto_Idle'
  MX_Gateway_DWork.bitsForTID2.is_Deluxe_G55 = MX_Gate_IN_NO_ACTIVE_CHILD_an2j;
  MX_Gateway_DWork.bitsForTID2.is_Normal_boqo = MX_Gate_IN_NO_ACTIVE_CHILD_an2j;
  MX_Gateway_DWork.bitsForTID2.is_Normal_fbep = MX_Gate_IN_NO_ACTIVE_CHILD_an2j;
  MX_Gateway_DWork.bitsForTID2.is_active_c2_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID2.is_c2_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_an2j;
  state_AutoIdleEnable = 0U;
}

// Output and update for atomic system: '<S638>/Auto_Idle_Enable'
void MX_Gateway_Auto_Idle_Enable(void)
{
  uint8_T rtb_FixPtRelationalOperato_cugd;

  // RelationalOperator: '<S657>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S657>/Delay Input1'

  rtb_FixPtRelationalOperato_cugd = (uint8_T)((int32_T)
    MX_Gateway_B.RateTransition3_hzvd > (int32_T)
    MX_Gateway_DWork.DelayInput1_DSTATE_n1b2);

  // Chart: '<S653>/Auto_Idle'
  // Gateway: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle
  // During: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle
  if ((uint32_T)MX_Gateway_DWork.bitsForTID2.is_active_c2_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle
    MX_Gateway_DWork.bitsForTID2.is_active_c2_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Enable/Auto_Idle 
    // Transition: '<S656>:75'
    if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL) {
      // Transition: '<S656>:76'
      MX_Gateway_DWork.bitsForTID2.is_c2_MX_Gateway = MX_Gateway_IN_Normal_jadr;

      // Entry Internal 'Normal': '<S656>:73'
      // Transition: '<S656>:69'
      MX_Gateway_DWork.bitsForTID2.is_Normal_fbep =
        MX_Gatewa_IN_NonFunctional_k5ri;

      // Entry 'NonFunctional': '<S656>:68'
      state_AutoIdleEnable = INACTIVE;
    } else {
      // Transition: '<S656>:89'
      MX_Gateway_DWork.bitsForTID2.is_c2_MX_Gateway =
        MX_Gateway_IN_Deluxe_G55_dqoj;

      // Entry Internal 'Deluxe_G55': '<S656>:77'
      // Transition: '<S656>:79'
      MX_Gateway_DWork.bitsForTID2.is_Deluxe_G55 =
        MX_Gatew_IN_NonFunctional_k5ri0;

      // Entry 'NonFunctional': '<S656>:86'
      state_AutoIdleEnable = INACTIVE;
    }
  } else if (MX_Gateway_DWork.bitsForTID2.is_c2_MX_Gateway ==
             MX_Gateway_IN_Deluxe_G55_dqoj) {
    // During 'Deluxe_G55': '<S656>:77'
    switch (MX_Gateway_DWork.bitsForTID2.is_Deluxe_G55) {
     case MX_Gateway_IN_Error:
      state_AutoIdleEnable = IN_ERROR;

      // During 'Error': '<S656>:91'
      if (MX_Gateway_B.RateTransition1_d4x3 == NORMAL) {
        // Transition: '<S656>:93'
        MX_Gateway_DWork.bitsForTID2.is_Deluxe_G55 = MX_Gateway_IN_Normal_jadrg;

        // Entry Internal 'Normal': '<S656>:90'
        // Transition: '<S656>:96'
        MX_Gateway_DWork.bitsForTID2.is_Normal_boqo = MX_Gateway_IN_Off_ltywd;

        // Entry 'Off': '<S656>:88'
        state_AutoIdleEnable = INACTIVE;
      }
      break;

     case MX_Gatew_IN_NonFunctional_k5ri0:
      state_AutoIdleEnable = INACTIVE;

      // During 'NonFunctional': '<S656>:86'
      if (CONSTANT_DATA->AUTOIDLE_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S656>:80'
        MX_Gateway_DWork.bitsForTID2.is_Deluxe_G55 = MX_Gateway_IN_Normal_jadrg;

        // Entry Internal 'Normal': '<S656>:90'
        // Transition: '<S656>:96'
        MX_Gateway_DWork.bitsForTID2.is_Normal_boqo = MX_Gateway_IN_Off_ltywd;

        // Entry 'Off': '<S656>:88'
      }
      break;

     default:
      // During 'Normal': '<S656>:90'
      if (MX_Gateway_B.RateTransition1_d4x3 != NORMAL) {
        // Transition: '<S656>:85'
        // Exit Internal 'Normal': '<S656>:90'
        MX_Gateway_DWork.bitsForTID2.is_Normal_boqo =
          MX_Gate_IN_NO_ACTIVE_CHILD_an2j;
        MX_Gateway_DWork.bitsForTID2.is_Deluxe_G55 = MX_Gateway_IN_Error;

        // Entry 'Error': '<S656>:91'
        state_AutoIdleEnable = IN_ERROR;
      } else if (MX_Gateway_DWork.bitsForTID2.is_Normal_boqo ==
                 MX_Gateway_IN_Off_ltywd) {
        state_AutoIdleEnable = INACTIVE;

        // During 'Off': '<S656>:88'
        if (MX_Gateway_B.RateTransition9_oyjk == ACTIVE) {
          // Transition: '<S656>:83'
          MX_Gateway_DWork.bitsForTID2.is_Normal_boqo = MX_Gateway_IN_On_fhbze;

          // Entry 'On': '<S656>:87'
          state_AutoIdleEnable = ACTIVE;
        }
      } else {
        state_AutoIdleEnable = ACTIVE;

        // During 'On': '<S656>:87'
        if (MX_Gateway_B.RateTransition9_oyjk != ACTIVE) {
          // Transition: '<S656>:84'
          MX_Gateway_DWork.bitsForTID2.is_Normal_boqo = MX_Gateway_IN_Off_ltywd;

          // Entry 'Off': '<S656>:88'
          state_AutoIdleEnable = INACTIVE;
        }
      }
      break;
    }
  } else {
    // During 'Normal': '<S656>:73'
    switch (MX_Gateway_DWork.bitsForTID2.is_Normal_fbep) {
     case MX_Gatewa_IN_NonFunctional_k5ri:
      state_AutoIdleEnable = INACTIVE;

      // During 'NonFunctional': '<S656>:68'
      if ((CONSTANT_DATA->AUTOIDLE_FUNCTION != NON_FUNCTIONAL) &&
          MX_Gateway_B.RateTransition11_e1mm) {
        // Transition: '<S656>:8'
        if ((int32_T)eeMirror.ee_AutoIdleEnabled != 0) {
          // Transition: '<S656>:11'
          MX_Gateway_DWork.bitsForTID2.is_Normal_fbep = MX_Gateway_IN_On_fhbz;

          // Entry 'On': '<S656>:10'
          state_AutoIdleEnable = ACTIVE;
          eeMirror.ee_AutoIdleEnabled = (int8_T)ACTIVE;
          matlab_UpdateEEVar();
        } else {
          // Transition: '<S656>:9'
          MX_Gateway_DWork.bitsForTID2.is_Normal_fbep = MX_Gateway_IN_Off_ltyw;

          // Entry 'Off': '<S656>:4'
          eeMirror.ee_AutoIdleEnabled = (int8_T)INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case MX_Gateway_IN_Off_ltyw:
      state_AutoIdleEnable = INACTIVE;

      // During 'Off': '<S656>:4'
      if (((int32_T)rtb_FixPtRelationalOperato_cugd != 0) &&
          (MX_Gateway_B.RateTransition1_d4x3 == NORMAL)) {
        // Transition: '<S656>:12'
        MX_Gateway_DWork.bitsForTID2.is_Normal_fbep = MX_Gateway_IN_On_fhbz;

        // Entry 'On': '<S656>:10'
        state_AutoIdleEnable = ACTIVE;
        eeMirror.ee_AutoIdleEnabled = (int8_T)ACTIVE;
        matlab_UpdateEEVar();
      }
      break;

     default:
      state_AutoIdleEnable = ACTIVE;

      // During 'On': '<S656>:10'
      if ((MX_Gateway_B.RateTransition1_d4x3 != NORMAL) || ((int32_T)
           rtb_FixPtRelationalOperato_cugd != 0)) {
        // Transition: '<S656>:30'
        // Transition: '<S656>:13'
        MX_Gateway_DWork.bitsForTID2.is_Normal_fbep = MX_Gateway_IN_Off_ltyw;

        // Entry 'Off': '<S656>:4'
        state_AutoIdleEnable = INACTIVE;
        eeMirror.ee_AutoIdleEnabled = (int8_T)INACTIVE;
        matlab_UpdateEEVar();
      }
      break;
    }
  }

  // End of Chart: '<S653>/Auto_Idle'

  // Update for UnitDelay: '<S657>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_n1b2 = MX_Gateway_B.RateTransition3_hzvd;
}

// System initialize for atomic system: '<S28>/AutoIdle'
void MX_Gateway_AutoIdle_Init(void)
{
  // SystemInitialize for Atomic SubSystem: '<S638>/Auto_Idle_Enable'
  MX_Gatewa_Auto_Idle_Enable_Init();

  // End of SystemInitialize for SubSystem: '<S638>/Auto_Idle_Enable'

  // SystemInitialize for Enabled SubSystem: '<S638>/Auto_Idle_Function'
  // SystemInitialize for Chart: '<S654>/Auto_Idle'
  MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gate_IN_NO_ACTIVE_CHILD_dkkf;
  MX_Gateway_DWork.temporalCounter_i2_hzvr = 0U;
  MX_Gateway_DWork.bitsForTID2.is_IDLE_STATE = MX_Gate_IN_NO_ACTIVE_CHILD_dkkf;
  MX_Gateway_DWork.bitsForTID2.is_Pot_Motion = MX_Gate_IN_NO_ACTIVE_CHILD_dkkf;
  MX_Gateway_DWork.temporalCounter_i1_okcq = 0U;
  MX_Gateway_DWork.bitsForTID2.is_active_c106_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID2.potMotion = false;
  MX_Gateway_DWork.previous_Throttle = 0;
  MX_Gateway_DWork.debounceIdle = 0U;
  MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
  MX_Gateway_B.cmd_AutoIdle_gn3f = 0U;

  // End of SystemInitialize for SubSystem: '<S638>/Auto_Idle_Function'
}

// Output and update for atomic system: '<S28>/AutoIdle'
void MX_Gateway_AutoIdle(void)
{
  boolean_T b;
  boolean_T c;
  boolean_T d;
  uint8_T rtb_state_Idle;
  uint16_T rtb_AutoIdleTime;
  uint16_T rtb_Switch_g1tt;

  // Truth Table: '<S638>/AutoIdleTime'
  // Truth Table Function 'MX_Gtwy_Control/System/AutoIdle/AutoIdleTime': '<S652>:1' 
  //  Gen5_5 Deluxe Display
  // Condition '#1': '<S652>:1:11'
  //  Gen5 Deluxe Display
  if ((CONSTANT_DATA->DELUXE_GEN5_FUNCTION != NON_FUNCTIONAL) &&
      (eeMirror.deluxe_G5 == ACTIVE)) {
    // Condition '#2': '<S652>:1:15'
    b = true;
  } else {
    b = false;
  }

  //  Gen5_5 data valid
  if (((int32_T)MX_Gateway_B.RateTransition4_jajp >= 4) && ((int32_T)
       MX_Gateway_B.RateTransition4_jajp <= 250)) {
    // Condition '#3': '<S652>:1:19'
    c = true;
  } else {
    c = false;
  }

  //  Gen5 data valid
  if (((int32_T)eeMirror.ee_autoIdleTime >= 4) && ((int32_T)
       eeMirror.ee_autoIdleTime <= 250)) {
    // Condition '#4': '<S652>:1:23'
    d = true;
  } else {
    d = false;
  }

  if ((CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) && c) {
    // Decision 'D1': '<S652>:1:25'
    //  Use can value
    //  (x10 for 100msec counts)
    //  Gen5_5 Display
    // Action '1': '<S652>:1:39'
    rtb_AutoIdleTime = (uint16_T)(int32_T)((int32_T)
      MX_Gateway_B.RateTransition4_jajp * 10);
  } else if (b && d) {
    //  Use eeprom value
    //  (x10 for 100msec counts)
    //  Gen5 Display
    // Action '2': '<S652>:1:47'
    rtb_AutoIdleTime = (uint16_T)(int32_T)((int32_T)eeMirror.ee_autoIdleTime *
      10);
  } else {
    //  Default
    //  Use constant data
    //  Standard Display
    // Action '3': '<S652>:1:54'
    rtb_AutoIdleTime = (uint16_T)CONSTANT_DATA->AUTOIDLE_IDLE_DELAY;
  }

  // End of Truth Table: '<S638>/AutoIdleTime'

  // Outputs for Atomic SubSystem: '<S638>/Auto_Idle_Enable'
  MX_Gateway_Auto_Idle_Enable();

  // End of Outputs for SubSystem: '<S638>/Auto_Idle_Enable'

  // Outputs for Enabled SubSystem: '<S638>/Auto_Idle_Function' incorporates:
  //   EnablePort: '<S654>/Enable'

  // RelationalOperator: '<S655>/Compare' incorporates:
  //   Constant: '<S655>/Constant'

  if (MX_Gateway_B.RateTransition64_ialx == SYS_NORMAL) {
    if (!MX_Gateway_DWork.Auto_Idle_Function_MODE) {
      // SystemReset for Chart: '<S654>/Auto_Idle'
      MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gate_IN_NO_ACTIVE_CHILD_dkkf;
      MX_Gateway_DWork.temporalCounter_i2_hzvr = 0U;
      MX_Gateway_DWork.bitsForTID2.is_IDLE_STATE =
        MX_Gate_IN_NO_ACTIVE_CHILD_dkkf;
      MX_Gateway_DWork.bitsForTID2.is_Pot_Motion =
        MX_Gate_IN_NO_ACTIVE_CHILD_dkkf;
      MX_Gateway_DWork.temporalCounter_i1_okcq = 0U;
      MX_Gateway_DWork.bitsForTID2.is_active_c106_MX_Gateway = 0U;
      MX_Gateway_DWork.bitsForTID2.potMotion = false;
      MX_Gateway_DWork.previous_Throttle = 0;
      MX_Gateway_DWork.debounceIdle = 0U;
      MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
      MX_Gateway_B.cmd_AutoIdle_gn3f = 0U;
      MX_Gateway_DWork.Auto_Idle_Function_MODE = true;
    }

    // Switch: '<S654>/Switch' incorporates:
    //   Constant: '<S654>/Constant1'
    //   Constant: '<S654>/Constant2'
    //   Constant: '<S659>/Constant'
    //   RelationalOperator: '<S659>/Compare'

    if (CONSTANT_DATA->THROTTLE_PRIMARY_FUNCTION == NON_FUNCTIONAL) {
      rtb_Switch_g1tt = WORD_UNAVAIL;
    } else {
      rtb_Switch_g1tt = percent_Throttle;
    }

    // End of Switch: '<S654>/Switch'

    // Chart: '<S654>/Auto_Idle'
    // Gateway: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle
    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_okcq < 65535U) {
      MX_Gateway_DWork.temporalCounter_i1_okcq = (uint16_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i1_okcq + 1);
    }

    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i2_hzvr < 65535U) {
      MX_Gateway_DWork.temporalCounter_i2_hzvr = (uint16_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i2_hzvr + 1);
    }

    // During: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle
    if ((uint32_T)MX_Gateway_DWork.bitsForTID2.is_active_c106_MX_Gateway == 0U)
    {
      // Entry: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle
      MX_Gateway_DWork.bitsForTID2.is_active_c106_MX_Gateway = 1U;

      // Entry Internal: MX_Gtwy_Control/System/AutoIdle/Auto_Idle_Function/Auto_Idle 
      // Entry Internal 'Pot_Motion': '<S658>:76'
      // Transition: '<S658>:78'
      MX_Gateway_DWork.bitsForTID2.is_Pot_Motion = MX_Gateway_IN_Init_cr3r;
      MX_Gateway_DWork.temporalCounter_i1_okcq = 0U;

      // Entry 'Init': '<S658>:77'
      MX_Gateway_DWork.bitsForTID2.potMotion = false;

      // Entry Internal 'Control': '<S658>:75'
      // Transition: '<S658>:17'
      MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Initialize_b3if;

      // Entry 'Initialize': '<S658>:70'
      MX_Gateway_B.cmd_AutoIdle_gn3f = INACTIVE;
      MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = true;

      // Entry Internal 'IDLE_STATE': '<S658>:116'
      // Transition: '<S658>:132'
      MX_Gateway_DWork.bitsForTID2.is_IDLE_STATE =
        MX_Gatew_IN_NON_FUNCTIONAL_aop1;

      // Entry 'NON_FUNCTIONAL': '<S658>:131'
      rtb_state_Idle = NON_FUNCTIONAL;

      // Entry Internal 'ENGINE_STARTED': '<S658>:140'
      // Transition: '<S658>:141'
      if (MX_Gateway_B.RateTransition22_aeuw == ENGINE_CRANKING) {
        // Transition: '<S658>:161'
        // Transition: '<S658>:164'
        MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = true;

        // Transition: '<S658>:166'
      } else {
        // Transition: '<S658>:165'
      }

      // Transition: '<S658>:168'
    } else {
      // During 'Pot_Motion': '<S658>:76'
      switch (MX_Gateway_DWork.bitsForTID2.is_Pot_Motion) {
       case MX_Gateway_IN_Change:
        // During 'Change': '<S658>:81'
        // Transition: '<S658>:172'
        MX_Gateway_DWork.bitsForTID2.is_Pot_Motion =
          MX_Gateway_IN_Reset_Movement;
        MX_Gateway_DWork.temporalCounter_i1_okcq = 0U;

        // Entry 'Reset_Movement': '<S658>:173'
        MX_Gateway_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        break;

       case MX_Gateway_IN_Init_cr3r:
        // During 'Init': '<S658>:77'
        if (((int32_T)MX_Gateway_DWork.temporalCounter_i1_okcq >= 5) &&
            (CONSTANT_DATA->THROTTLE_PRIMARY_FUNCTION != NON_FUNCTIONAL)) {
          // Transition: '<S658>:80'
          MX_Gateway_DWork.bitsForTID2.is_Pot_Motion = MX_Gateway_IN_No_Change;

          // Entry 'No_Change': '<S658>:79'
          MX_Gateway_DWork.bitsForTID2.potMotion = false;
          MX_Gateway_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        }
        break;

       case MX_Gateway_IN_No_Change:
        // During 'No_Change': '<S658>:79'
        if (((int32_T)(int16_T)rtb_Switch_g1tt > (int32_T)((int32_T)
              MX_Gateway_DWork.previous_Throttle + 25)) || ((int32_T)(int16_T)
             rtb_Switch_g1tt < (int32_T)((int32_T)
              MX_Gateway_DWork.previous_Throttle - 25))) {
          // Transition: '<S658>:82'
          MX_Gateway_DWork.bitsForTID2.is_Pot_Motion = MX_Gateway_IN_Change;

          // Entry 'Change': '<S658>:81'
          MX_Gateway_DWork.bitsForTID2.potMotion = true;
          MX_Gateway_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        }
        break;

       default:
        // During 'Reset_Movement': '<S658>:173'
        if ((MX_Gateway_DWork.temporalCounter_i1_okcq >= rtb_AutoIdleTime) ||
            (MX_Gateway_B.RateTransition24_ohus == ACTIVE)) {
          // Transition: '<S658>:175'
          MX_Gateway_DWork.bitsForTID2.is_Pot_Motion = MX_Gateway_IN_No_Change;

          // Entry 'No_Change': '<S658>:79'
          MX_Gateway_DWork.bitsForTID2.potMotion = false;
          MX_Gateway_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
        } else {
          if (((int32_T)(int16_T)rtb_Switch_g1tt > (int32_T)((int32_T)
                MX_Gateway_DWork.previous_Throttle + 10)) || ((int32_T)(int16_T)
               rtb_Switch_g1tt < (int32_T)((int32_T)
                MX_Gateway_DWork.previous_Throttle - 10))) {
            // Transition: '<S658>:174'
            MX_Gateway_DWork.bitsForTID2.is_Pot_Motion =
              MX_Gateway_IN_Reset_Movement;
            MX_Gateway_DWork.temporalCounter_i1_okcq = 0U;

            // Entry 'Reset_Movement': '<S658>:173'
            MX_Gateway_DWork.previous_Throttle = (int16_T)rtb_Switch_g1tt;
          }
        }
        break;
      }

      // During 'Control': '<S658>:75'
      switch (MX_Gateway_DWork.bitsForTID2.is_Control) {
       case MX_Gateway_IN_Armbar_Delay:
        // During 'Armbar_Delay': '<S658>:47'
        if (MX_Gateway_DWork.temporalCounter_i2_hzvr >=
            CONSTANT_DATA->AUTOIDLE_ARMBAR_DELAY) {
          // Transition: '<S658>:46'
          MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Idle;

          // Entry 'Idle': '<S658>:20'
          MX_Gateway_B.cmd_AutoIdle_gn3f = ACTIVE;
          MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
        } else {
          if (MX_Gateway_B.RateTransition24_ohus != ACTIVE) {
            // Transition: '<S658>:48'
            MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Console_Up;

            // Entry 'Console_Up': '<S658>:43'
            MX_Gateway_B.cmd_AutoIdle_gn3f = ACTIVE;
            MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
          }
        }
        break;

       case MX_Gateway_IN_Console_Up:
        MX_Gateway_B.cmd_AutoIdle_gn3f = ACTIVE;

        // During 'Console_Up': '<S658>:43'
        if (MX_Gateway_B.RateTransition24_ohus == ACTIVE) {
          // Transition: '<S658>:49'
          MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Armbar_Delay;
          MX_Gateway_DWork.temporalCounter_i2_hzvr = 0U;
        } else {
          if ((state_AutoIdleEnable != ACTIVE) ||
              (MX_Gateway_B.RateTransition22_aeuw == ENGINE_CRANKING) ||
              (MX_Gateway_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
              MX_Gateway_DWork.bitsForTID2.potMotion) {
            // Transition: '<S658>:45'
            MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Throttle;

            // Entry 'Throttle': '<S658>:16'
            MX_Gateway_B.cmd_AutoIdle_gn3f = INACTIVE;
          }
        }
        break;

       case MX_Gateway_IN_Delay_hh0k:
        // During 'Delay': '<S658>:33'
        b = !MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted;
        if ((MX_Gateway_DWork.temporalCounter_i2_hzvr >= rtb_AutoIdleTime) ||
            ((MX_Gateway_B.RateTransition24_ohus != ACTIVE) && b)) {
          // Transition: '<S658>:35'
          MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Idle;

          // Entry 'Idle': '<S658>:20'
          MX_Gateway_B.cmd_AutoIdle_gn3f = ACTIVE;
          MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
        } else {
          if ((MX_Gateway_B.RateTransition23_h1lr >=
               CONSTANT_DATA->AUTOIDLE_PRESSURE_OFF) || (state_AutoIdleEnable !=
               ACTIVE) || (MX_Gateway_B.RateTransition22_aeuw == ENGINE_CRANKING)
              || (MX_Gateway_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
              MX_Gateway_DWork.bitsForTID2.potMotion) {
            // Transition: '<S658>:34'
            MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Throttle;

            // Entry 'Throttle': '<S658>:16'
            MX_Gateway_B.cmd_AutoIdle_gn3f = INACTIVE;
          }
        }
        break;

       case MX_Gateway_IN_Idle:
        MX_Gateway_B.cmd_AutoIdle_gn3f = ACTIVE;

        // During 'Idle': '<S658>:20'
        if (MX_Gateway_B.RateTransition24_ohus != ACTIVE) {
          // Transition: '<S658>:44'
          MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Console_Up;

          // Entry 'Console_Up': '<S658>:43'
          MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
        } else {
          if ((MX_Gateway_B.RateTransition23_h1lr >=
               CONSTANT_DATA->AUTOIDLE_PRESSURE_OFF) || (state_AutoIdleEnable !=
               ACTIVE) || (MX_Gateway_B.RateTransition22_aeuw == ENGINE_CRANKING)
              || (MX_Gateway_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
              MX_Gateway_DWork.bitsForTID2.potMotion) {
            // Transition: '<S658>:24'
            MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Throttle;

            // Entry 'Throttle': '<S658>:16'
            MX_Gateway_B.cmd_AutoIdle_gn3f = INACTIVE;
          }
        }
        break;

       case MX_Gateway_IN_Initialize_b3if:
        MX_Gateway_B.cmd_AutoIdle_gn3f = INACTIVE;

        // During 'Initialize': '<S658>:70'
        if ((state_AutoIdleEnable == ACTIVE) &&
            (CONSTANT_DATA->AUTOIDLE_LOW_IDLE_START != NON_FUNCTIONAL)) {
          // Transition: '<S658>:58'
          MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Idle;

          // Entry 'Idle': '<S658>:20'
          MX_Gateway_B.cmd_AutoIdle_gn3f = ACTIVE;
          MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
        } else {
          // Transition: '<S658>:59'
          MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Throttle;

          // Entry 'Throttle': '<S658>:16'
        }
        break;

       default:
        MX_Gateway_B.cmd_AutoIdle_gn3f = INACTIVE;

        // During 'Throttle': '<S658>:16'
        b = !MX_Gateway_DWork.bitsForTID2.potMotion;
        if ((MX_Gateway_B.RateTransition23_h1lr <
             CONSTANT_DATA->AUTOIDLE_PRESSURE_ON) && (state_AutoIdleEnable ==
             ACTIVE) && (MX_Gateway_B.RateTransition22_aeuw == ENGINE_RUNNING) &&
            b) {
          // Transition: '<S658>:21'
          MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Delay_hh0k;
          MX_Gateway_DWork.temporalCounter_i2_hzvr = 0U;
        } else {
          b = !MX_Gateway_DWork.bitsForTID2.potMotion;
          c = !MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted;
          if ((MX_Gateway_B.RateTransition24_ohus != ACTIVE) &&
              (state_AutoIdleEnable == ACTIVE) &&
              (MX_Gateway_B.RateTransition22_aeuw == ENGINE_RUNNING) && c && b)
          {
            // Transition: '<S658>:138'
            MX_Gateway_DWork.bitsForTID2.is_Control = MX_Gateway_IN_Console_Up;

            // Entry 'Console_Up': '<S658>:43'
            MX_Gateway_B.cmd_AutoIdle_gn3f = ACTIVE;
            MX_Gateway_DWork.bitsForTID2.flag_EngineJustStarted = false;
          }
        }
        break;
      }

      // During 'IDLE_STATE': '<S658>:116'
      switch (MX_Gateway_DWork.bitsForTID2.is_IDLE_STATE) {
       case MX_Gateway_IN_ACTIVE_dc5j:
        rtb_state_Idle = ACTIVE;

        // During 'ACTIVE': '<S658>:130'
        if ((MX_Gateway_B.RateTransition23_h1lr >=
             CONSTANT_DATA->AUTOIDLE_PRESSURE_OFF) ||
            (MX_Gateway_B.RateTransition22_aeuw == ENGINE_CRANKING) ||
            (MX_Gateway_B.RateTransition22_aeuw == ENGINE_NOT_RUNNING) ||
            MX_Gateway_DWork.bitsForTID2.potMotion) {
          // Transition: '<S658>:119'
          MX_Gateway_DWork.bitsForTID2.is_IDLE_STATE =
            MX_Gateway_IN_INACTIVE_p5he;

          // Entry 'INACTIVE': '<S658>:120'
          rtb_state_Idle = INACTIVE;
          MX_Gateway_DWork.debounceIdle = 0U;
        }
        break;

       case MX_Gateway_IN_INACTIVE_p5he:
        rtb_state_Idle = INACTIVE;

        // During 'INACTIVE': '<S658>:120'
        if ((MX_Gateway_DWork.debounceIdle >=
             CONSTANT_DATA->IDLE_DEBOUNCE_ACTIVE) &&
            (CONSTANT_DATA->IDLE_DEBOUNCE_ACTIVE != UNLIMITED)) {
          // Transition: '<S658>:118'
          MX_Gateway_DWork.bitsForTID2.is_IDLE_STATE = MX_Gateway_IN_ACTIVE_dc5j;

          // Entry 'ACTIVE': '<S658>:130'
          rtb_state_Idle = ACTIVE;
        } else {
          // Transition: '<S658>:125'
          b = !MX_Gateway_DWork.bitsForTID2.potMotion;
          if ((MX_Gateway_B.RateTransition23_h1lr <
               CONSTANT_DATA->AUTOIDLE_PRESSURE_ON) &&
              (MX_Gateway_B.RateTransition22_aeuw == ENGINE_RUNNING) && b) {
            // Transition: '<S658>:126'
            // Transition: '<S658>:128'
            MX_Gateway_DWork.debounceIdle = (uint16_T)(int32_T)((int32_T)
              MX_Gateway_DWork.debounceIdle + 1);

            // Transition: '<S658>:129'
          } else {
            // Transition: '<S658>:127'
            MX_Gateway_DWork.debounceIdle = 0U;
          }
        }
        break;

       default:
        rtb_state_Idle = NON_FUNCTIONAL;

        // During 'NON_FUNCTIONAL': '<S658>:131'
        if (CONSTANT_DATA->IDLE_TIME_FUNCTION != NON_FUNCTIONAL) {
          // Transition: '<S658>:117'
          MX_Gateway_DWork.bitsForTID2.is_IDLE_STATE =
            MX_Gateway_IN_INACTIVE_p5he;

          // Entry 'INACTIVE': '<S658>:120'
          rtb_state_Idle = INACTIVE;
          MX_Gateway_DWork.debounceIdle = 0U;
        }
        break;
      }

      // During 'ENGINE_STARTED': '<S658>:140'
    }

    // End of Chart: '<S654>/Auto_Idle'

    // SignalConversion: '<S654>/OutportBufferForcmd_AutoIdle'
    cmd_AutoIdle = MX_Gateway_B.cmd_AutoIdle_gn3f;

    // SignalConversion: '<S654>/OutportBufferForstate_Idle'
    state_Idle = rtb_state_Idle;
  } else {
    if (MX_Gateway_DWork.Auto_Idle_Function_MODE) {
      MX_Gateway_DWork.Auto_Idle_Function_MODE = false;
    }
  }

  // End of RelationalOperator: '<S655>/Compare'
  // End of Outputs for SubSystem: '<S638>/Auto_Idle_Function'
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_Enabled(void)
{
  boolean_T guard1 = false;

  // During 'Enabled': '<S660>:1179'
  if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
      (state_Console != ACTIVE)) {
    // Transition: '<S660>:1165'
    // Exit Internal 'Enabled': '<S660>:1179'
    // Exit Internal 'Active': '<S660>:1197'
    MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
      MX_Gateway_IN_Inactive_cs2c5;

    // Entry 'Inactive': '<S660>:1209'
    state_AuxEnable = INACTIVE;
    cmd_AuxRelease = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;
    state_AuxRelease = INACTIVE;
  } else if ((state_RightPot == OORH) || (state_RightPot == OORL)) {
    // Transition: '<S660>:1164'
    // Exit Internal 'Enabled': '<S660>:1179'
    // Exit Internal 'Active': '<S660>:1197'
    MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
      MX_Gatew_IN_Inactive_Fault_h3so;

    // Entry 'Inactive_Fault': '<S660>:1210'
    state_AuxEnable = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;
  } else if (state_RightPot == NOT_IN_NEUTRAL) {
    // Transition: '<S660>:1167'
    // Exit Internal 'Enabled': '<S660>:1179'
    // Exit Internal 'Active': '<S660>:1197'
    MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
      IN_Inactive_Out_Of_Neutral_gquu;

    // Entry 'Inactive_Out_Of_Neutral': '<S660>:1211'
    state_AuxEnable = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;
  } else {
    guard1 = false;
    switch (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3) {
     case MX_Gateway_IN_Active_nhnn:
      // During 'Active': '<S660>:1197'
      if ((MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux) ||
          (MX_Gateway_B.FixPtRelationalOperator_hhgb || aux_Inhibit)) {
        // Transition: '<S660>:1190'
        // Transition: '<S660>:1254'
        guard1 = true;
      } else if (((int32_T)aux_DebounceButton != 0) && (mode_RightControl !=
                  MODE_RIGHT_AUX1)) {
        // Transition: '<S660>:1256'
        state_Buzzer = SINGLE_SHORT_BEEP;
        guard1 = true;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Active_evlz) {
         case MX_Gateway_IN_Low_Flow:
          aux_Flow = AUX_FLOW_LOW;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Low_Flow': '<S660>:1206'
          if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
               ACTIVE)) {
            // Transition: '<S660>:1201'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
              MX_Gateway_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S660>:1208'
            aux_Flow = AUX_FLOW_STANDARD;
            eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
            matlab_UpdateEEVar();
          } else {
            if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                 ACTIVE)) {
              // Transition: '<S660>:1187'
              state_Buzzer = SINGLE_SHORT_BEEP;
              MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
                MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
              MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
                MX_Gateway_IN_Off_p5eh;

              // Entry 'Off': '<S660>:1196'
              aux_Flow = AUX_FLOW_INACTIVE;
              state_AuxEnable = INACTIVE;
              eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
              matlab_UpdateEEVar();
            }
          }
          break;

         case MX_Gateway_IN_Medium_Flow:
          aux_Flow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Medium_Flow': '<S660>:1207'
          if ((int32_T)aux_DebounceButton != 0) {
            // Transition: '<S660>:1200'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Active_evlz = MX_Gateway_IN_Low_Flow;

            // Entry 'Low_Flow': '<S660>:1206'
            aux_Flow = AUX_FLOW_LOW;
            eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gateway_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S660>:1208'
          if ((int32_T)aux_DebounceButton != 0) {
            // Transition: '<S660>:1205'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
              MX_Gateway_IN_Medium_Flow;

            // Entry 'Medium_Flow': '<S660>:1207'
            aux_Flow = AUX_FLOW_MEDIUM;
            eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
            matlab_UpdateEEVar();
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gateway_IN_Off_p5eh:
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;

      // During 'Off': '<S660>:1196'
      if ((!aux_Inhibit) && (((int32_T)aux_DebounceButton != 0) || ((int32_T)
            MX_Gateway_B.FixPtRelationalOperator_ac0q != 0))) {
        // Transition: '<S660>:1189'
        state_Buzzer = SINGLE_SHORT_BEEP;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 = MX_Gateway_IN_Active_nhnn;

        // Entry 'Active': '<S660>:1197'
        MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
        if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
            MX_Gateway_IN_Standard_Flow) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
            MX_Gateway_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S660>:1208'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
          matlab_UpdateEEVar();
        }
      }
      break;

     case MX_Gatewa_IN_WAIT_FOR_AUX_PRESS:
      // During 'WAIT_FOR_AUX_PRESS': '<S660>:1287'
      if ((!aux_Inhibit) && (((int32_T)aux_DebounceButton != 0) || ((int32_T)
            MX_Gateway_B.FixPtRelationalOperator_ac0q != 0))) {
        // Transition: '<S660>:1292'
        state_Buzzer = SINGLE_SHORT_BEEP;

        // Transition: '<S660>:1331'
        if ((eeMirror.ee_AuxFlow == AUX_FLOW_LOW) && (!((int32_T)
              eeMirror.deluxe_G5 != 0)) && (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION
             != NON_FUNCTIONAL)) {
          // Transition: '<S660>:1281'
          MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
            MX_Gateway_IN_Active_nhnn;

          // Entry 'Active': '<S660>:1197'
          MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
          if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
              MX_Gateway_IN_Low_Flow) {
          } else {
            MX_Gateway_DWork.bitsForTID1.is_Active_evlz = MX_Gateway_IN_Low_Flow;

            // Entry 'Low_Flow': '<S660>:1206'
            aux_Flow = AUX_FLOW_LOW;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
            matlab_UpdateEEVar();
          }
        } else {
          // Transition: '<S660>:1275'
          if ((eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) && (!((int32_T)
                eeMirror.deluxe_G5 != 0)) &&
              (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
            // Transition: '<S660>:1270'
            MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
              MX_Gateway_IN_Active_nhnn;

            // Entry 'Active': '<S660>:1197'
            MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
                MX_Gateway_IN_Medium_Flow) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
                MX_Gateway_IN_Medium_Flow;

              // Entry 'Medium_Flow': '<S660>:1207'
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;
              eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
              matlab_UpdateEEVar();
            }
          } else {
            // Transition: '<S660>:1272'
            // Transition: '<S660>:1274'
            MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
              MX_Gateway_IN_Active_nhnn;

            // Entry 'Active': '<S660>:1197'
            MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
                MX_Gateway_IN_Standard_Flow) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
                MX_Gateway_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S660>:1208'
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              matlab_UpdateEEVar();
            }
          }
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }

    if (guard1) {
      // Exit Internal 'Active': '<S660>:1197'
      MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 = MX_Gateway_IN_Off_p5eh;

      // Entry 'Off': '<S660>:1196'
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_Functional_f20sl3(void)
{
  // During 'Functional': '<S660>:1156'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:1152'
    // Exit Internal 'Functional': '<S660>:1156'
    // Exit Internal 'Enabled': '<S660>:1179'
    // Exit Internal 'Active': '<S660>:1197'
    MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS =
      MX_Gatew_IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S660>:1235'
    // Transition: '<S660>:1236'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:1243'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:1154'
    // Exit Internal 'Functional': '<S660>:1156'
    // Exit Internal 'Enabled': '<S660>:1179'
    // Exit Internal 'Active': '<S660>:1197'
    MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS =
      MX_Gate_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S660>:1244'
    // Transition: '<S660>:1245'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:1252'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
    }
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz) {
     case MX_Gateway_IN_Enabled_djid:
      MX_Gateway_Enabled();
      break;

     case MX_Gateway_IN_Inactive_cs2c5:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxRelease = INACTIVE;

      // During 'Inactive': '<S660>:1209'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (state_Console == ACTIVE) && flag_InitEERead) {
        // Transition: '<S660>:1163'
        MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
          MX_Gateway_IN_Enabled_djid;

        // Entry Internal 'Enabled': '<S660>:1179'
        // Transition: '<S660>:1280'
        if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
          // Transition: '<S660>:1273'
          if (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 ==
              MX_Gateway_IN_Off_p5eh) {
          } else {
            MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
              MX_Gateway_IN_Off_p5eh;

            // Entry 'Off': '<S660>:1196'
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
        } else {
          // Transition: '<S660>:1288'
          if (((CONSTANT_DATA->EMEA_CONTROLS_OPTION_B == NON_FUNCTIONAL) &&
               (CONSTANT_DATA->EMEA_CONTROLS_OPTION_C == NON_FUNCTIONAL)) ||
              MX_Gateway_DWork.bitsForTID1.previouslyActive) {
            // Transition: '<S660>:1271'
            // Transition: '<S660>:1331'
            if ((eeMirror.ee_AuxFlow == AUX_FLOW_LOW) && (!((int32_T)
                  eeMirror.deluxe_G5 != 0)) &&
                (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
              // Transition: '<S660>:1281'
              if (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 ==
                  MX_Gateway_IN_Active_nhnn) {
              } else {
                MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
                  MX_Gateway_IN_Active_nhnn;

                // Entry 'Active': '<S660>:1197'
                MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
              }

              if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
                  MX_Gateway_IN_Low_Flow) {
              } else {
                MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
                  MX_Gateway_IN_Low_Flow;

                // Entry 'Low_Flow': '<S660>:1206'
                aux_Flow = AUX_FLOW_LOW;
                state_AuxEnable = ACTIVE_MODE_ONE;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
            } else {
              // Transition: '<S660>:1275'
              if ((eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) && (!((int32_T)
                    eeMirror.deluxe_G5 != 0)) &&
                  (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
                // Transition: '<S660>:1270'
                if (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 ==
                    MX_Gateway_IN_Active_nhnn) {
                } else {
                  MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
                    MX_Gateway_IN_Active_nhnn;

                  // Entry 'Active': '<S660>:1197'
                  MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
                }

                if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
                    MX_Gateway_IN_Medium_Flow) {
                } else {
                  MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
                    MX_Gateway_IN_Medium_Flow;

                  // Entry 'Medium_Flow': '<S660>:1207'
                  aux_Flow = AUX_FLOW_MEDIUM;
                  state_AuxEnable = ACTIVE_MODE_ONE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                  matlab_UpdateEEVar();
                }
              } else {
                // Transition: '<S660>:1272'
                // Transition: '<S660>:1274'
                if (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 ==
                    MX_Gateway_IN_Active_nhnn) {
                } else {
                  MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
                    MX_Gateway_IN_Active_nhnn;

                  // Entry 'Active': '<S660>:1197'
                  MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
                }

                if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
                    MX_Gateway_IN_Standard_Flow) {
                } else {
                  MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
                    MX_Gateway_IN_Standard_Flow;

                  // Entry 'Standard_Flow': '<S660>:1208'
                  aux_Flow = AUX_FLOW_STANDARD;
                  state_AuxEnable = ACTIVE_MODE_ONE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                  matlab_UpdateEEVar();
                }
              }
            }
          } else {
            // Transition: '<S660>:1291'
            MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
              MX_Gatewa_IN_WAIT_FOR_AUX_PRESS;
          }
        }
      }
      break;

     case MX_Gatew_IN_Inactive_Fault_h3so:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Fault': '<S660>:1210'
      if ((state_RightPot != OORH) && (state_RightPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S660>:1162'
        MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
          MX_Gateway_IN_Enabled_djid;
        if (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 ==
            MX_Gateway_IN_Off_p5eh) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 = MX_Gateway_IN_Off_p5eh;

          // Entry 'Off': '<S660>:1196'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case IN_Inactive_Out_Of_Neutral_gquu:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S660>:1211'
      if (state_Console != ACTIVE) {
        // Transition: '<S660>:1174'
        MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:1209'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      } else if ((state_RightPot == OORH) || (state_RightPot == OORL)) {
        // Transition: '<S660>:1166'
        MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
          MX_Gatew_IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S660>:1210'
      } else {
        if (state_RightPot != NOT_IN_NEUTRAL) {
          // Transition: '<S660>:1170'
          if ((!aux_Inhibit) && (((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gateway_B.FixPtRelationalOperator_ac0q != 0))) {
            // Transition: '<S660>:1169'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
              MX_Gateway_IN_Enabled_djid;
            if (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 ==
                MX_Gateway_IN_Active_nhnn) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
                MX_Gateway_IN_Active_nhnn;

              // Entry 'Active': '<S660>:1197'
              MX_Gateway_DWork.bitsForTID1.previouslyActive = true;
            }

            if (MX_Gateway_DWork.bitsForTID1.is_Active_evlz ==
                MX_Gateway_IN_Standard_Flow) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_evlz =
                MX_Gateway_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S660>:1208'
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              matlab_UpdateEEVar();
            }
          } else {
            // Transition: '<S660>:1172'
            MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
              MX_Gateway_IN_Enabled_djid;
            if (MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 ==
                MX_Gateway_IN_Off_p5eh) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 =
                MX_Gateway_IN_Off_p5eh;

              // Entry 'Off': '<S660>:1196'
              eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
              matlab_UpdateEEVar();
            }
          }
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gatew_enter_internal_Enabled(void)
{
  // Entry Internal 'Enabled': '<S660>:310'
  // Transition: '<S660>:375'
  if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
    // Transition: '<S660>:425'
    if (MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut == MX_Gateway_IN_Off_p5eh)
    {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut = MX_Gateway_IN_Off_p5eh;

      // Entry 'Off': '<S660>:295'
      aux_Flow = AUX_FLOW_INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    // Transition: '<S660>:424'
    if ((eeMirror.ee_AuxFlow == AUX_FLOW_LOW) &&
        (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
      // Transition: '<S660>:222'
      MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut = MX_Gateway_IN_Active_nhnn;
      if (MX_Gateway_DWork.bitsForTID1.is_Active_facj == MX_Gateway_IN_Low_Flow)
      {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Active_facj = MX_Gateway_IN_Low_Flow;

        // Entry 'Low_Flow': '<S660>:229'
        aux_Flow = AUX_FLOW_LOW;
        eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
        state_AuxEnable = ACTIVE_MODE_ONE;
        matlab_UpdateEEVar();
      }
    } else {
      // Transition: '<S660>:387'
      if ((eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) &&
          (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
        // Transition: '<S660>:225'
        MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut = MX_Gateway_IN_Active_nhnn;
        if (MX_Gateway_DWork.bitsForTID1.is_Active_facj ==
            MX_Gateway_IN_Medium_Flow) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Active_facj =
            MX_Gateway_IN_Medium_Flow;

          // Entry 'Medium_Flow': '<S660>:230'
          aux_Flow = AUX_FLOW_MEDIUM;
          eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      } else {
        // Transition: '<S660>:388'
        // Transition: '<S660>:362'
        MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut = MX_Gateway_IN_Active_nhnn;
        if (MX_Gateway_DWork.bitsForTID1.is_Active_facj ==
            MX_Gateway_IN_Standard_Flow) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Active_facj =
            MX_Gateway_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S660>:231'
          aux_Flow = AUX_FLOW_STANDARD;
          eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      }
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_Functional(void)
{
  // During 'Functional': '<S660>:395'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:535'
    // Exit Internal 'Functional': '<S660>:395'
    // Exit Internal 'Aux_Relief_G5': '<S660>:573'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;

    // Exit Internal 'Enabled': '<S660>:310'
    // Exit Internal 'Active': '<S660>:452'
    MX_Gateway_DWork.bitsForTID1.is_Active_facj =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2 = MX_Gatew_IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S660>:519'
    // Transition: '<S660>:520'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:526'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:537'
    // Exit Internal 'Functional': '<S660>:395'
    // Exit Internal 'Aux_Relief_G5': '<S660>:573'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;

    // Exit Internal 'Enabled': '<S660>:310'
    // Exit Internal 'Active': '<S660>:452'
    MX_Gateway_DWork.bitsForTID1.is_Active_facj =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2 = MX_Gate_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S660>:527'
    // Transition: '<S660>:528'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:534'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_Functional) {
     case MX_Gateway_IN_Aux_Relief_G5:
      // During 'Aux_Relief_G5': '<S660>:573'
      if (((state_Engine != ENGINE_NOT_RUNNING) && (state_Engine !=
            ENGINE_INITIALIZE)) || (state_EngineSpeed == NO_SIGNAL) ||
          (state_System != SYS_NORMAL)) {
        // Transition: '<S660>:575'
        // Exit Internal 'Aux_Relief_G5': '<S660>:573'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gateway_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S660>:232'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
        state_AuxRelease = INACTIVE;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5) {
         case MX_Gateway_IN_Ack:
          aux_Flow = AUX_RELEASE_ACK;

          // During 'Ack': '<S660>:578'
          if (button_AuxReleaseAck) {
            // Transition: '<S660>:581'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
              MX_Gateway_IN_Release_Base;
            MX_Gateway_DWork.temporalCounter_i2_lljs = 0U;

            // Entry 'Release_Base': '<S660>:580'
            aux_Flow = AUX_RELEASE_IN_PROGRESS;
            cmd_AuxRelease = BASE_ACTIVE;
          } else {
            if (button_AuxReleaseBack) {
              // Transition: '<S660>:584'
              MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
                MX_Gateway_IN_Wait_dwz2;

              // Entry 'Wait': '<S660>:576'
              aux_Flow = AUX_RELEASE_WAIT;
              cmd_AuxRelease = INACTIVE;
            }
          }
          break;

         case MX_Gateway_IN_Confirm:
          aux_Flow = AUX_RELEASE_CONFIRM;
          cmd_AuxRelease = INACTIVE;

          // During 'Confirm': '<S660>:589'
          if ((MX_Gateway_DWork.temporalCounter_i2_lljs >=
               CONSTANT_DATA->AUX_CONFIRM_TIME) || button_AuxReleaseExit) {
            // Transition: '<S660>:592'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
              MX_Gateway_IN_Wait_dwz2;

            // Entry 'Wait': '<S660>:576'
            aux_Flow = AUX_RELEASE_WAIT;
          }
          break;

         case MX_Gateway_IN_Release_Base:
          aux_Flow = AUX_RELEASE_IN_PROGRESS;
          cmd_AuxRelease = BASE_ACTIVE;

          // During 'Release_Base': '<S660>:580'
          if (MX_Gateway_DWork.temporalCounter_i2_lljs >=
              CONSTANT_DATA->AUX_RELEASE_TIME) {
            // Transition: '<S660>:583'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
              MX_Gateway_IN_Release_Rod;
            MX_Gateway_DWork.temporalCounter_i2_lljs = 0U;

            // Entry 'Release_Rod': '<S660>:582'
            cmd_AuxRelease = ROD_ACTIVE;
          }
          break;

         case MX_Gateway_IN_Release_Rod:
          cmd_AuxRelease = ROD_ACTIVE;

          // During 'Release_Rod': '<S660>:582'
          if (MX_Gateway_DWork.temporalCounter_i2_lljs >=
              CONSTANT_DATA->AUX_RELEASE_TIME) {
            // Transition: '<S660>:590'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
              MX_Gateway_IN_Confirm;
            MX_Gateway_DWork.temporalCounter_i2_lljs = 0U;

            // Entry 'Confirm': '<S660>:589'
            aux_Flow = AUX_RELEASE_CONFIRM;
            cmd_AuxRelease = INACTIVE;
          }
          break;

         case MX_Gateway_IN_Wait_dwz2:
          aux_Flow = AUX_RELEASE_WAIT;
          cmd_AuxRelease = INACTIVE;

          // During 'Wait': '<S660>:576'
          if ((int32_T)MX_Gateway_B.FixPtRelationalOperator_cuej != 0) {
            // Transition: '<S660>:579'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 = MX_Gateway_IN_Ack;

            // Entry 'Ack': '<S660>:578'
            aux_Flow = AUX_RELEASE_ACK;
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gateway_IN_Enabled:
      // During 'Enabled': '<S660>:310'
      if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
          (state_Console != ACTIVE)) {
        // Transition: '<S660>:216'
        // Exit Internal 'Enabled': '<S660>:310'
        // Exit Internal 'Active': '<S660>:452'
        MX_Gateway_DWork.bitsForTID1.is_Active_facj =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gateway_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S660>:232'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
        state_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S660>:392'
        // Exit Internal 'Enabled': '<S660>:310'
        // Exit Internal 'Active': '<S660>:452'
        MX_Gateway_DWork.bitsForTID1.is_Active_facj =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional =
          MX_Gateway_IN_Inactive_Fault;

        // Entry 'Inactive_Fault': '<S660>:391'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if (state_AuxPot == NOT_IN_NEUTRAL) {
        // Transition: '<S660>:405'
        // Exit Internal 'Enabled': '<S660>:310'
        // Exit Internal 'Active': '<S660>:452'
        MX_Gateway_DWork.bitsForTID1.is_Active_facj =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional =
          MX_G_IN_Inactive_Out_Of_Neutral;

        // Entry 'Inactive_Out_Of_Neutral': '<S660>:404'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut) {
         case MX_Gateway_IN_Active_nhnn:
          // During 'Active': '<S660>:452'
          if (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux) {
            // Transition: '<S660>:451'
            // Exit Internal 'Active': '<S660>:452'
            MX_Gateway_DWork.bitsForTID1.is_Active_facj =
              MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
              MX_Gateway_IN_Off_p5eh;

            // Entry 'Off': '<S660>:295'
            aux_Flow = AUX_FLOW_INACTIVE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            state_AuxEnable = INACTIVE;
            matlab_UpdateEEVar();
          } else {
            switch (MX_Gateway_DWork.bitsForTID1.is_Active_facj) {
             case MX_Gateway_IN_Low_Flow:
              aux_Flow = AUX_FLOW_LOW;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Low_Flow': '<S660>:229'
              if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
                   ACTIVE)) {
                // Transition: '<S660>:214'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active_facj =
                  MX_Gateway_IN_Standard_Flow;

                // Entry 'Standard_Flow': '<S660>:231'
                aux_Flow = AUX_FLOW_STANDARD;
                eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                     ACTIVE)) {
                  // Transition: '<S660>:314'
                  state_Buzzer = SINGLE_SHORT_BEEP;
                  MX_Gateway_DWork.bitsForTID1.is_Active_facj =
                    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
                    MX_Gateway_IN_Off_p5eh;

                  // Entry 'Off': '<S660>:295'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             case MX_Gateway_IN_Medium_Flow:
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Medium_Flow': '<S660>:230'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S660>:224'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active_facj =
                  MX_Gateway_IN_Low_Flow;

                // Entry 'Low_Flow': '<S660>:229'
                aux_Flow = AUX_FLOW_LOW;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gateway_IN_Standard_Flow:
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Standard_Flow': '<S660>:231'
              if (((int32_T)aux_DebounceButton != 0) &&
                  (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION != NON_FUNCTIONAL)) {
                // Transition: '<S660>:227'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active_facj =
                  MX_Gateway_IN_Medium_Flow;

                // Entry 'Medium_Flow': '<S660>:230'
                aux_Flow = AUX_FLOW_MEDIUM;
                eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) &&
                    (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION == NON_FUNCTIONAL)) {
                  // Transition: '<S660>:443'
                  MX_Gateway_DWork.bitsForTID1.is_Active_facj =
                    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
                    MX_Gateway_IN_Off_p5eh;

                  // Entry 'Off': '<S660>:295'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             default:
              // Unreachable state, for coverage only
              MX_Gateway_DWork.bitsForTID1.is_Active_facj =
                MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
              break;
            }
          }
          break;

         case MX_Gateway_IN_Off_p5eh:
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxEnable = INACTIVE;

          // During 'Off': '<S660>:295'
          if (((int32_T)aux_DebounceButton != 0) || ((int32_T)
               MX_Gateway_B.FixPtRelationalOperator_ac0q != 0)) {
            // Transition: '<S660>:296'
            if (CONSTANT_DATA->AUX_ADJ_FLOW_FUNCTION == NON_FUNCTIONAL) {
              // Transition: '<S660>:462'
              // Transition: '<S660>:461'
            } else {
              // Transition: '<S660>:459'
              state_Buzzer = SINGLE_SHORT_BEEP;
            }

            MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
              MX_Gateway_IN_Active_nhnn;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_facj ==
                MX_Gateway_IN_Standard_Flow) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_facj =
                MX_Gateway_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S660>:231'
              aux_Flow = AUX_FLOW_STANDARD;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              matlab_UpdateEEVar();
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gateway_IN_Inactive_cs2c:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;
      state_AuxRelease = INACTIVE;

      // During 'Inactive': '<S660>:232'
      if ((state_Engine != ENGINE_CRANKING) && ((state_Engine == ENGINE_RUNNING)
           || (CONSTANT_DATA->AUX_RELEASE_FUNCTION == NON_FUNCTIONAL) ||
           ((!((int32_T)eeMirror.deluxe_G5 != 0)) &&
            (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL))) &&
          (state_System == SYS_NORMAL) && (state_Console == ACTIVE) &&
          flag_InitEERead) {
        // Transition: '<S660>:215'
        MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gateway_IN_Enabled;
        MX_Gatew_enter_internal_Enabled();
      } else {
        if ((CONSTANT_DATA->AUX_RELEASE_FUNCTION != NON_FUNCTIONAL) &&
            ((state_Engine == ENGINE_NOT_RUNNING) || (state_Engine ==
              ENGINE_INITIALIZE)) && (state_EngineSpeed != NO_SIGNAL) &&
            (state_System == SYS_NORMAL) && ((int32_T)eeMirror.deluxe_G5 != 0) &&
            flag_InitEERead && (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION ==
                                NON_FUNCTIONAL)) {
          // Transition: '<S660>:574'
          MX_Gateway_DWork.bitsForTID1.is_Functional =
            MX_Gateway_IN_Aux_Relief_G5;

          // Entry Internal 'Aux_Relief_G5': '<S660>:573'
          // Transition: '<S660>:577'
          if (MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 ==
              MX_Gateway_IN_Wait_dwz2) {
          } else {
            MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
              MX_Gateway_IN_Wait_dwz2;

            // Entry 'Wait': '<S660>:576'
            aux_Flow = AUX_RELEASE_WAIT;
          }
        }
      }
      break;

     case MX_Gateway_IN_Inactive_Fault:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Fault': '<S660>:391'
      if ((state_AuxPot != OORH) && (state_AuxPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S660>:393'
        MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gateway_IN_Enabled;
        if (MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut ==
            MX_Gateway_IN_Off_p5eh) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut = MX_Gateway_IN_Off_p5eh;

          // Entry 'Off': '<S660>:295'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case MX_G_IN_Inactive_Out_Of_Neutral:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S660>:404'
      if (state_Console != ACTIVE) {
        // Transition: '<S660>:449'
        MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gateway_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S660>:232'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S660>:408'
        MX_Gateway_DWork.bitsForTID1.is_Functional =
          MX_Gateway_IN_Inactive_Fault;

        // Entry 'Inactive_Fault': '<S660>:391'
      } else {
        if (state_AuxPot != NOT_IN_NEUTRAL) {
          // Transition: '<S660>:410'
          if ((((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gateway_B.FixPtRelationalOperator_ac0q != 0)) && (aux_Flow !=
               AUX_FLOW_INACTIVE)) {
            // Transition: '<S660>:419'
            // Transition: '<S660>:420'
            state_Buzzer = SINGLE_SHORT_BEEP;
          } else {
            // Transition: '<S660>:418'
            // Transition: '<S660>:421'
          }

          // Transition: '<S660>:406'
          MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gateway_IN_Enabled;
          MX_Gatew_enter_internal_Enabled();
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gateway_DWork.bitsForTID1.is_Functional =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX__enter_internal_Enabled_ls1c(void)
{
  // Entry Internal 'Enabled': '<S660>:865'
  // Transition: '<S660>:871'
  if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
    // Transition: '<S660>:872'
    if (MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 == MX_Gateway_IN_Off_p5eh)
    {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 = MX_Gateway_IN_Off_p5eh;

      // Entry 'Off': '<S660>:884'
      aux_Flow = AUX_FLOW_INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    // Transition: '<S660>:873'
    if (eeMirror.ee_AuxFlow == AUX_FLOW_LOW) {
      // Transition: '<S660>:877'
      MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 = MX_Gateway_IN_Active_nhnn;
      if (MX_Gateway_DWork.bitsForTID1.is_Active_fumn == MX_Gateway_IN_Low_Flow)
      {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Active_fumn = MX_Gateway_IN_Low_Flow;

        // Entry 'Low_Flow': '<S660>:890'
        aux_Flow = AUX_FLOW_LOW;
        eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
        state_AuxEnable = ACTIVE_MODE_ONE;
        matlab_UpdateEEVar();
      }
    } else {
      // Transition: '<S660>:878'
      if (eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) {
        // Transition: '<S660>:879'
        MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 = MX_Gateway_IN_Active_nhnn;
        if (MX_Gateway_DWork.bitsForTID1.is_Active_fumn ==
            MX_Gateway_IN_Medium_Flow) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
            MX_Gateway_IN_Medium_Flow;

          // Entry 'Medium_Flow': '<S660>:891'
          aux_Flow = AUX_FLOW_MEDIUM;
          eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      } else {
        // Transition: '<S660>:880'
        // Transition: '<S660>:881'
        MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 = MX_Gateway_IN_Active_nhnn;
        if (MX_Gateway_DWork.bitsForTID1.is_Active_fumn ==
            MX_Gateway_IN_Standard_Flow) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
            MX_Gateway_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S660>:892'
          aux_Flow = AUX_FLOW_STANDARD;
          eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      }
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_Functional_f20s(void)
{
  // During 'Functional': '<S660>:846'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:842'
    // Exit Internal 'Functional': '<S660>:846'
    // Exit Internal 'Enabled': '<S660>:865'
    // Exit Internal 'Active': '<S660>:885'
    MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_SIRIUS2 = MX_Gatew_IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S660>:897'
    // Transition: '<S660>:898'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:905'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:844'
    // Exit Internal 'Functional': '<S660>:846'
    // Exit Internal 'Enabled': '<S660>:865'
    // Exit Internal 'Active': '<S660>:885'
    MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_SIRIUS2 = MX_Gate_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S660>:906'
    // Transition: '<S660>:907'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:914'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl) {
     case MX_Gateway_IN_Enabled_djid:
      // During 'Enabled': '<S660>:865'
      if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
          (state_Console != ACTIVE)) {
        // Transition: '<S660>:855'
        // Exit Internal 'Enabled': '<S660>:865'
        // Exit Internal 'Active': '<S660>:885'
        MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:894'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S660>:854'
        // Exit Internal 'Enabled': '<S660>:865'
        // Exit Internal 'Active': '<S660>:885'
        MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gatew_IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S660>:895'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if (state_AuxPot == NOT_IN_NEUTRAL) {
        // Transition: '<S660>:857'
        // Exit Internal 'Enabled': '<S660>:865'
        // Exit Internal 'Active': '<S660>:885'
        MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          IN_Inactive_Out_Of_Neutral_gquu;

        // Entry 'Inactive_Out_Of_Neutral': '<S660>:896'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0) {
         case MX_Gateway_IN_Active_nhnn:
          // During 'Active': '<S660>:885'
          if (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux) {
            // Transition: '<S660>:875'
            // Exit Internal 'Active': '<S660>:885'
            MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
              MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
              MX_Gateway_IN_Off_p5eh;

            // Entry 'Off': '<S660>:884'
            aux_Flow = AUX_FLOW_INACTIVE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            state_AuxEnable = INACTIVE;
            matlab_UpdateEEVar();
          } else {
            switch (MX_Gateway_DWork.bitsForTID1.is_Active_fumn) {
             case MX_Gateway_IN_Low_Flow:
              aux_Flow = AUX_FLOW_LOW;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Low_Flow': '<S660>:890'
              if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
                   ACTIVE)) {
                // Transition: '<S660>:887'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
                  MX_Gateway_IN_Standard_Flow;

                // Entry 'Standard_Flow': '<S660>:892'
                aux_Flow = AUX_FLOW_STANDARD;
                eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                     ACTIVE)) {
                  // Transition: '<S660>:874'
                  state_Buzzer = SINGLE_SHORT_BEEP;
                  MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
                    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
                    MX_Gateway_IN_Off_p5eh;

                  // Entry 'Off': '<S660>:884'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             case MX_Gateway_IN_Medium_Flow:
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Medium_Flow': '<S660>:891'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S660>:886'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
                  MX_Gateway_IN_Low_Flow;

                // Entry 'Low_Flow': '<S660>:890'
                aux_Flow = AUX_FLOW_LOW;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gateway_IN_Standard_Flow:
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Standard_Flow': '<S660>:892'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S660>:888'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
                  MX_Gateway_IN_Medium_Flow;

                // Entry 'Medium_Flow': '<S660>:891'
                aux_Flow = AUX_FLOW_MEDIUM;
                eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                matlab_UpdateEEVar();
              }
              break;

             default:
              // Unreachable state, for coverage only
              MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
                MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
              break;
            }
          }
          break;

         case MX_Gateway_IN_Off_p5eh:
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxEnable = INACTIVE;

          // During 'Off': '<S660>:884'
          if (((int32_T)aux_DebounceButton != 0) || ((int32_T)
               MX_Gateway_B.FixPtRelationalOperator_ac0q != 0)) {
            // Transition: '<S660>:876'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
              MX_Gateway_IN_Active_nhnn;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_fumn ==
                MX_Gateway_IN_Standard_Flow) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_fumn =
                MX_Gateway_IN_Standard_Flow;

              // Entry 'Standard_Flow': '<S660>:892'
              aux_Flow = AUX_FLOW_STANDARD;
              eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;
              matlab_UpdateEEVar();
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gateway_IN_Inactive_cs2c5:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive': '<S660>:894'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (state_Console == ACTIVE) && flag_InitEERead) {
        // Transition: '<S660>:853'
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gateway_IN_Enabled_djid;
        MX__enter_internal_Enabled_ls1c();
      }
      break;

     case MX_Gatew_IN_Inactive_Fault_h3so:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Fault': '<S660>:895'
      if ((state_AuxPot != OORH) && (state_AuxPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S660>:852'
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gateway_IN_Enabled_djid;
        if (MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 ==
            MX_Gateway_IN_Off_p5eh) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 = MX_Gateway_IN_Off_p5eh;

          // Entry 'Off': '<S660>:884'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case IN_Inactive_Out_Of_Neutral_gquu:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S660>:896'
      if (state_Console != ACTIVE) {
        // Transition: '<S660>:864'
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:894'
        cmd_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S660>:856'
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gatew_IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S660>:895'
      } else {
        if (state_AuxPot != NOT_IN_NEUTRAL) {
          // Transition: '<S660>:860'
          if ((((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gateway_B.FixPtRelationalOperator_ac0q != 0)) && (aux_Flow !=
               AUX_FLOW_INACTIVE)) {
            // Transition: '<S660>:859'
            // Transition: '<S660>:861'
            state_Buzzer = SINGLE_SHORT_BEEP;
          } else {
            // Transition: '<S660>:862'
            // Transition: '<S660>:863'
          }

          // Transition: '<S660>:858'
          MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
            MX_Gateway_IN_Enabled_djid;
          MX__enter_internal_Enabled_ls1c();
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_SIRIUS2(void)
{
  // During 'SIRIUS2': '<S660>:840'
  switch (MX_Gateway_DWork.bitsForTID1.is_SIRIUS2) {
   case MX_Gate_IN_Aux_Enable_State_ACD:
    // During 'Aux_Enable_State_ACD': '<S660>:906'
    if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
      // Transition: '<S660>:845'
      // Exit Internal 'Aux_Enable_State_ACD': '<S660>:906'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gateway_DWork.bitsForTID1.is_SIRIUS2 = MX_Gateway_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S660>:846'
      // Transition: '<S660>:851'
      if (MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl ==
          MX_Gateway_IN_Inactive_cs2c5) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:894'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz) {
       case MX_Gateway_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S660>:912'
        break;

       case MX_Gateway_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S660>:913'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S660>:911'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz =
            MX_Gateway_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S660>:914'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gateway_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S660>:914'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S660>:908'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz =
            MX_Gateway_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S660>:913'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
            // Transition: '<S660>:909'
            // Transition: '<S660>:910'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz =
              MX_Gateway_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S660>:912'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gatew_IN_Aux_Enable_State_ST:
    // During 'Aux_Enable_State_ST': '<S660>:897'
    if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
      // Transition: '<S660>:843'
      // Exit Internal 'Aux_Enable_State_ST': '<S660>:897'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gateway_DWork.bitsForTID1.is_SIRIUS2 = MX_Gateway_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S660>:846'
      // Transition: '<S660>:851'
      if (MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl ==
          MX_Gateway_IN_Inactive_cs2c5) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:894'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t) {
       case MX_Gateway_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S660>:903'
        break;

       case MX_Gateway_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S660>:904'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S660>:901'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t =
            MX_Gateway_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S660>:905'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gateway_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S660>:905'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S660>:899'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t =
            MX_Gateway_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S660>:904'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
            // Transition: '<S660>:900'
            // Transition: '<S660>:902'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t =
              MX_Gateway_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S660>:903'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gateway_IN_Functional_jgxb:
    MX_Gateway_Functional_f20s();
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gateway_DWork.bitsForTID1.is_SIRIUS2 = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_enter_internal_Enabled_ls1cz(void)
{
  // Entry Internal 'Enabled': '<S660>:687'
  // Transition: '<S660>:692'
  if (eeMirror.ee_AuxFlow == AUX_FLOW_INACTIVE) {
    // Transition: '<S660>:693'
    if (MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz == MX_Gateway_IN_Off_p5eh)
    {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz = MX_Gateway_IN_Off_p5eh;

      // Entry 'Off': '<S660>:704'
      aux_Flow = AUX_FLOW_INACTIVE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      state_AuxEnable = INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    // Transition: '<S660>:694'
    if (eeMirror.ee_AuxFlow == AUX_FLOW_LOW) {
      // Transition: '<S660>:699'
      MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz = MX_Gateway_IN_Active_nhnn;
      if (MX_Gateway_DWork.bitsForTID1.is_Active == MX_Gateway_IN_Low_Flow_m2d1)
      {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gateway_IN_Low_Flow_m2d1;

        // Entry 'Low_Flow': '<S660>:714'
        aux_Flow = AUX_FLOW_LOW;
        eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
        state_AuxEnable = ACTIVE_MODE_ONE;
        matlab_UpdateEEVar();
      }
    } else {
      // Transition: '<S660>:700'
      if (eeMirror.ee_AuxFlow == AUX_FLOW_MEDIUM) {
        // Transition: '<S660>:701'
        MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz = MX_Gateway_IN_Active_nhnn;
        if (MX_Gateway_DWork.bitsForTID1.is_Active ==
            MX_Gateway_IN_Medium_Flow_btkm) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Active =
            MX_Gateway_IN_Medium_Flow_btkm;

          // Entry 'Medium_Flow': '<S660>:715'
          aux_Flow = AUX_FLOW_MEDIUM;
          eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
          state_AuxEnable = ACTIVE_MODE_ONE;
          matlab_UpdateEEVar();
        }
      } else {
        // Transition: '<S660>:702'
        if (eeMirror.ee_AuxFlow == AUX_FLOW_STANDARD) {
          // Transition: '<S660>:703'
          MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
            MX_Gateway_IN_Active_nhnn;
          if (MX_Gateway_DWork.bitsForTID1.is_Active ==
              MX_Gatewa_IN_Standard_Flow_aw1n) {
          } else {
            MX_Gateway_DWork.bitsForTID1.is_Active =
              MX_Gatewa_IN_Standard_Flow_aw1n;

            // Entry 'Standard_Flow': '<S660>:716'
            aux_Flow = AUX_FLOW_STANDARD;
            eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            matlab_UpdateEEVar();
          }
        } else {
          // Transition: '<S660>:837'
          // Transition: '<S660>:836'
          MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
            MX_Gateway_IN_Active_nhnn;
          if (MX_Gateway_DWork.bitsForTID1.is_Active == MX_Gateway_IN_High_Flow)
          {
          } else {
            MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gateway_IN_High_Flow;

            // Entry 'High_Flow': '<S660>:834'
            aux_Flow = AUX_FLOW_HIGH;
            eeMirror.ee_AuxFlow = AUX_FLOW_HIGH;
            state_AuxEnable = ACTIVE_MODE_ONE;
            matlab_UpdateEEVar();
          }
        }
      }
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_Functional_f20sl(void)
{
  // During 'Functional': '<S660>:666'
  if ((cmd_AuxEnable_ST == ACTIVE) && (state_ST_CAN == NORMAL) &&
      (CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:662'
    // Exit Internal 'Functional': '<S660>:666'
    // Exit Internal 'Enabled': '<S660>:687'
    // Exit Internal 'Active': '<S660>:705'
    MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW =
      MX_Gatew_IN_Aux_Enable_State_ST;

    // Entry Internal 'Aux_Enable_State_ST': '<S660>:733'
    // Transition: '<S660>:734'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:741'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else if ((cmd_AuxEnable_ACD == ACTIVE) && (state_ACD_CAN == NORMAL) &&
             (CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL)) {
    // Transition: '<S660>:664'
    // Exit Internal 'Functional': '<S660>:666'
    // Exit Internal 'Enabled': '<S660>:687'
    // Exit Internal 'Active': '<S660>:705'
    MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW =
      MX_Gate_IN_Aux_Enable_State_ACD;

    // Entry Internal 'Aux_Enable_State_ACD': '<S660>:742'
    // Transition: '<S660>:743'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq ==
        MX_Gateway_IN_Standard_Flow) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq =
        MX_Gateway_IN_Standard_Flow;

      // Entry 'Standard_Flow': '<S660>:750'
      aux_Flow = AUX_FLOW_STANDARD;
      state_AuxEnable = ACTIVE_MODE_ONE;
      eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij) {
     case MX_Gateway_IN_Enabled_djid:
      // During 'Enabled': '<S660>:687'
      if ((state_Engine == ENGINE_CRANKING) || (state_System != SYS_NORMAL) ||
          (state_Console != ACTIVE)) {
        // Transition: '<S660>:675'
        // Exit Internal 'Enabled': '<S660>:687'
        // Exit Internal 'Active': '<S660>:705'
        MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:717'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S660>:674'
        // Exit Internal 'Enabled': '<S660>:687'
        // Exit Internal 'Active': '<S660>:705'
        MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gatew_IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S660>:718'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else if (state_AuxPot == NOT_IN_NEUTRAL) {
        // Transition: '<S660>:677'
        // Exit Internal 'Enabled': '<S660>:687'
        // Exit Internal 'Active': '<S660>:705'
        MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          IN_Inactive_Out_Of_Neutral_gquu;

        // Entry 'Inactive_Out_Of_Neutral': '<S660>:719'
        state_AuxEnable = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz) {
         case MX_Gateway_IN_Active_nhnn:
          // During 'Active': '<S660>:705'
          if (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux) {
            // Transition: '<S660>:697'
            // Exit Internal 'Active': '<S660>:705'
            MX_Gateway_DWork.bitsForTID1.is_Active =
              MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
              MX_Gateway_IN_Off_p5eh;

            // Entry 'Off': '<S660>:704'
            aux_Flow = AUX_FLOW_INACTIVE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            state_AuxEnable = INACTIVE;
            matlab_UpdateEEVar();
          } else {
            switch (MX_Gateway_DWork.bitsForTID1.is_Active) {
             case MX_Gateway_IN_High_Flow:
              aux_Flow = AUX_FLOW_HIGH;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'High_Flow': '<S660>:834'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S660>:838'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active =
                  MX_Gatewa_IN_Standard_Flow_aw1n;

                // Entry 'Standard_Flow': '<S660>:716'
                aux_Flow = AUX_FLOW_STANDARD;
                eeMirror.ee_AuxFlow = AUX_FLOW_STANDARD;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gateway_IN_Low_Flow_m2d1:
              aux_Flow = AUX_FLOW_LOW;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Low_Flow': '<S660>:714'
              if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable ==
                   ACTIVE)) {
                // Transition: '<S660>:709'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gateway_IN_High_Flow;

                // Entry 'High_Flow': '<S660>:834'
                aux_Flow = AUX_FLOW_HIGH;
                eeMirror.ee_AuxFlow = AUX_FLOW_HIGH;
                matlab_UpdateEEVar();
              } else {
                if (((int32_T)aux_DebounceButton != 0) && (state_DetentEnable !=
                     ACTIVE)) {
                  // Transition: '<S660>:695'
                  state_Buzzer = SINGLE_SHORT_BEEP;
                  MX_Gateway_DWork.bitsForTID1.is_Active =
                    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                  MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
                    MX_Gateway_IN_Off_p5eh;

                  // Entry 'Off': '<S660>:704'
                  aux_Flow = AUX_FLOW_INACTIVE;
                  eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
                  state_AuxEnable = INACTIVE;
                  matlab_UpdateEEVar();
                }
              }
              break;

             case MX_Gateway_IN_Medium_Flow_btkm:
              aux_Flow = AUX_FLOW_MEDIUM;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Medium_Flow': '<S660>:715'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S660>:708'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active =
                  MX_Gateway_IN_Low_Flow_m2d1;

                // Entry 'Low_Flow': '<S660>:714'
                aux_Flow = AUX_FLOW_LOW;
                eeMirror.ee_AuxFlow = AUX_FLOW_LOW;
                matlab_UpdateEEVar();
              }
              break;

             case MX_Gatewa_IN_Standard_Flow_aw1n:
              aux_Flow = AUX_FLOW_STANDARD;
              state_AuxEnable = ACTIVE_MODE_ONE;

              // During 'Standard_Flow': '<S660>:716'
              if ((int32_T)aux_DebounceButton != 0) {
                // Transition: '<S660>:713'
                state_Buzzer = SINGLE_SHORT_BEEP;
                MX_Gateway_DWork.bitsForTID1.is_Active =
                  MX_Gateway_IN_Medium_Flow_btkm;

                // Entry 'Medium_Flow': '<S660>:715'
                aux_Flow = AUX_FLOW_MEDIUM;
                eeMirror.ee_AuxFlow = AUX_FLOW_MEDIUM;
                matlab_UpdateEEVar();
              }
              break;

             default:
              // Unreachable state, for coverage only
              MX_Gateway_DWork.bitsForTID1.is_Active =
                MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
              break;
            }
          }
          break;

         case MX_Gateway_IN_Off_p5eh:
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxEnable = INACTIVE;

          // During 'Off': '<S660>:704'
          if (((int32_T)aux_DebounceButton != 0) || ((int32_T)
               MX_Gateway_B.FixPtRelationalOperator_ac0q != 0)) {
            // Transition: '<S660>:830'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
              MX_Gateway_IN_Active_nhnn;
            if (MX_Gateway_DWork.bitsForTID1.is_Active ==
                MX_Gateway_IN_High_Flow) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gateway_IN_High_Flow;

              // Entry 'High_Flow': '<S660>:834'
              aux_Flow = AUX_FLOW_HIGH;
              eeMirror.ee_AuxFlow = AUX_FLOW_HIGH;
              state_AuxEnable = ACTIVE_MODE_ONE;
              matlab_UpdateEEVar();
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gateway_IN_Inactive_cs2c5:
      state_AuxEnable = INACTIVE;
      cmd_AuxRelease = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive': '<S660>:717'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (state_Console == ACTIVE) && flag_InitEERead) {
        // Transition: '<S660>:673'
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gateway_IN_Enabled_djid;
        MX_enter_internal_Enabled_ls1cz();
      }
      break;

     case MX_Gatew_IN_Inactive_Fault_h3so:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Fault': '<S660>:718'
      if ((state_AuxPot != OORH) && (state_AuxPot != OORL) && (state_System ==
           SYS_NORMAL)) {
        // Transition: '<S660>:672'
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gateway_IN_Enabled_djid;
        if (MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz ==
            MX_Gateway_IN_Off_p5eh) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz = MX_Gateway_IN_Off_p5eh;

          // Entry 'Off': '<S660>:704'
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
      }
      break;

     case IN_Inactive_Out_Of_Neutral_gquu:
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;

      // During 'Inactive_Out_Of_Neutral': '<S660>:719'
      if (state_Console != ACTIVE) {
        // Transition: '<S660>:684'
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:717'
        cmd_AuxRelease = INACTIVE;
      } else if ((state_AuxPot == OORH) || (state_AuxPot == OORL)) {
        // Transition: '<S660>:676'
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gatew_IN_Inactive_Fault_h3so;

        // Entry 'Inactive_Fault': '<S660>:718'
      } else {
        if (state_AuxPot != NOT_IN_NEUTRAL) {
          // Transition: '<S660>:680'
          if ((((int32_T)aux_DebounceButton != 0) || ((int32_T)
                MX_Gateway_B.FixPtRelationalOperator_ac0q != 0)) && (aux_Flow !=
               AUX_FLOW_INACTIVE)) {
            // Transition: '<S660>:679'
            // Transition: '<S660>:681'
            state_Buzzer = SINGLE_SHORT_BEEP;
          } else {
            // Transition: '<S660>:682'
            // Transition: '<S660>:683'
          }

          // Transition: '<S660>:678'
          MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
            MX_Gateway_IN_Enabled_djid;
          MX_enter_internal_Enabled_ls1cz();
        }
      }
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_SIRIUS2_HIFLOW(void)
{
  // During 'SIRIUS2_HIFLOW': '<S660>:660'
  switch (MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW) {
   case MX_Gate_IN_Aux_Enable_State_ACD:
    // During 'Aux_Enable_State_ACD': '<S660>:742'
    if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
      // Transition: '<S660>:665'
      // Exit Internal 'Aux_Enable_State_ACD': '<S660>:742'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW =
        MX_Gateway_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S660>:666'
      // Transition: '<S660>:671'
      if (MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij ==
          MX_Gateway_IN_Inactive_cs2c5) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:717'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq) {
       case MX_Gateway_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S660>:748'
        break;

       case MX_Gateway_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S660>:749'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S660>:747'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq =
            MX_Gateway_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S660>:750'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gateway_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S660>:750'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S660>:744'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq =
            MX_Gateway_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S660>:749'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
            // Transition: '<S660>:745'
            // Transition: '<S660>:746'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq =
              MX_Gateway_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S660>:748'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gatew_IN_Aux_Enable_State_ST:
    // During 'Aux_Enable_State_ST': '<S660>:733'
    if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
      // Transition: '<S660>:663'
      // Exit Internal 'Aux_Enable_State_ST': '<S660>:733'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW =
        MX_Gateway_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S660>:666'
      // Transition: '<S660>:671'
      if (MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij ==
          MX_Gateway_IN_Inactive_cs2c5) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:717'
        state_AuxEnable = INACTIVE;
        cmd_AuxRelease = INACTIVE;
        aux_Flow = AUX_FLOW_INACTIVE;
      }
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin) {
       case MX_Gateway_IN_Inactive_Latched:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Latched': '<S660>:739'
        break;

       case MX_Gateway_IN_Inactive_Temp:
        state_AuxEnable = INACTIVE;

        // During 'Inactive_Temp': '<S660>:740'
        if (state_Engine != ENGINE_CRANKING) {
          // Transition: '<S660>:737'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin =
            MX_Gateway_IN_Standard_Flow;

          // Entry 'Standard_Flow': '<S660>:741'
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;
          eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
          matlab_UpdateEEVar();
        }
        break;

       case MX_Gateway_IN_Standard_Flow:
        aux_Flow = AUX_FLOW_STANDARD;
        state_AuxEnable = ACTIVE_MODE_ONE;

        // During 'Standard_Flow': '<S660>:741'
        if (state_Engine == ENGINE_CRANKING) {
          // Transition: '<S660>:735'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin =
            MX_Gateway_IN_Inactive_Temp;

          // Entry 'Inactive_Temp': '<S660>:740'
          state_AuxEnable = INACTIVE;
        } else {
          if ((state_AuxPot == OORH) || (state_AuxPot == OORL) || (state_Console
               == OORL) || (state_Console == OORH) || (state_AuxPot ==
               NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL) ||
              (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
            // Transition: '<S660>:736'
            // Transition: '<S660>:738'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin =
              MX_Gateway_IN_Inactive_Latched;

            // Entry 'Inactive_Latched': '<S660>:739'
            state_AuxEnable = INACTIVE;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gateway_IN_Functional_jgxb:
    MX_Gateway_Functional_f20sl();
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_Aux_Enable_State(void)
{
  // During 'Aux_Enable_State': '<S660>:210'
  switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State) {
   case MX_Gatewa_IN_EMEA_CONTROLS_giio:
    // During 'EMEA_CONTROLS': '<S660>:1150'
    switch (MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS) {
     case MX_Gate_IN_Aux_Enable_State_ACD:
      // During 'Aux_Enable_State_ACD': '<S660>:1244'
      if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
        // Transition: '<S660>:1155'
        // Exit Internal 'Aux_Enable_State_ACD': '<S660>:1244'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS =
          MX_Gateway_IN_Functional_jgxb;

        // Entry 'Functional': '<S660>:1156'
        MX_Gateway_DWork.bitsForTID1.previouslyActive = false;

        // Entry Internal 'Functional': '<S660>:1156'
        // Transition: '<S660>:1161'
        if (MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz ==
            MX_Gateway_IN_Inactive_cs2c5) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
            MX_Gateway_IN_Inactive_cs2c5;

          // Entry 'Inactive': '<S660>:1209'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41) {
         case MX_Gateway_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S660>:1250'
          break;

         case MX_Gateway_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S660>:1251'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S660>:1249'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 =
              MX_Gateway_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S660>:1252'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
          }
          break;

         case MX_Gateway_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S660>:1252'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S660>:1246'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 =
              MX_Gateway_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S660>:1251'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
              // Transition: '<S660>:1247'
              // Transition: '<S660>:1248'
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 =
                MX_Gateway_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S660>:1250'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gatew_IN_Aux_Enable_State_ST:
      // During 'Aux_Enable_State_ST': '<S660>:1235'
      if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
        // Transition: '<S660>:1153'
        // Exit Internal 'Aux_Enable_State_ST': '<S660>:1235'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS =
          MX_Gateway_IN_Functional_jgxb;

        // Entry 'Functional': '<S660>:1156'
        MX_Gateway_DWork.bitsForTID1.previouslyActive = false;

        // Entry Internal 'Functional': '<S660>:1156'
        // Transition: '<S660>:1161'
        if (MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz ==
            MX_Gateway_IN_Inactive_cs2c5) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
            MX_Gateway_IN_Inactive_cs2c5;

          // Entry 'Inactive': '<S660>:1209'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq) {
         case MX_Gateway_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S660>:1241'
          break;

         case MX_Gateway_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S660>:1242'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S660>:1239'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq =
              MX_Gateway_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S660>:1243'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gateway_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S660>:1243'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S660>:1237'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq =
              MX_Gateway_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S660>:1242'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
              // Transition: '<S660>:1238'
              // Transition: '<S660>:1240'
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq =
                MX_Gateway_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S660>:1241'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gateway_IN_Functional_jgxb:
      MX_Gateway_Functional_f20sl3();
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
    break;

   case MX_Gate_IN_Non_Functional_km5qd:
    state_AuxEnable = INACTIVE;
    aux_Flow = AUX_FLOW_INACTIVE;

    // During 'Non_Functional': '<S660>:217'
    if (CONSTANT_DATA->AUX_FUNCTION == AUX_EMEA_CONTROLS) {
      // Transition: '<S660>:1042'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State =
        MX_Gatewa_IN_EMEA_CONTROLS_giio;

      // Entry Internal 'EMEA_CONTROLS': '<S660>:1150'
      // Transition: '<S660>:1151'
      if (MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS ==
          MX_Gateway_IN_Functional_jgxb) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS =
          MX_Gateway_IN_Functional_jgxb;

        // Entry 'Functional': '<S660>:1156'
        MX_Gateway_DWork.bitsForTID1.previouslyActive = false;
      }

      // Entry Internal 'Functional': '<S660>:1156'
      // Transition: '<S660>:1161'
      if (MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz ==
          MX_Gateway_IN_Inactive_cs2c5) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
          MX_Gateway_IN_Inactive_cs2c5;

        // Entry 'Inactive': '<S660>:1209'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      }
    } else if (CONSTANT_DATA->AUX_FUNCTION == AUX_PHOENIX_K2) {
      // Transition: '<S660>:213'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State =
        MX_Gateway_IN_PHOENIX_K2;

      // Entry Internal 'PHOENIX_K2': '<S660>:658'
      // Transition: '<S660>:659'
      MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2 = MX_Gateway_IN_Functional_jgxb;

      // Entry Internal 'Functional': '<S660>:395'
      // Transition: '<S660>:401'
      if (MX_Gateway_DWork.bitsForTID1.is_Functional ==
          MX_Gateway_IN_Inactive_cs2c) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gateway_IN_Inactive_cs2c;

        // Entry 'Inactive': '<S660>:232'
        cmd_AuxRelease = INACTIVE;
        state_AuxRelease = INACTIVE;
      }
    } else {
      if (CONSTANT_DATA->AUX_FUNCTION == AUX_SIRIUS2) {
        // Transition: '<S660>:751'
        if (CONSTANT_DATA->AUX_HIGH_FLOW == NON_FUNCTIONAL) {
          // Transition: '<S660>:825'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State =
            MX_Gateway_IN_SIRIUS2;

          // Entry Internal 'SIRIUS2': '<S660>:840'
          // Transition: '<S660>:841'
          MX_Gateway_DWork.bitsForTID1.is_SIRIUS2 =
            MX_Gateway_IN_Functional_jgxb;

          // Entry Internal 'Functional': '<S660>:846'
          // Transition: '<S660>:851'
          if (MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl ==
              MX_Gateway_IN_Inactive_cs2c5) {
          } else {
            MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
              MX_Gateway_IN_Inactive_cs2c5;

            // Entry 'Inactive': '<S660>:894'
            cmd_AuxRelease = INACTIVE;
          }
        } else {
          // Transition: '<S660>:826'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State =
            MX_Gateway_IN_SIRIUS2_HIFLOW;

          // Entry Internal 'SIRIUS2_HIFLOW': '<S660>:660'
          // Transition: '<S660>:661'
          MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW =
            MX_Gateway_IN_Functional_jgxb;

          // Entry Internal 'Functional': '<S660>:666'
          // Transition: '<S660>:671'
          if (MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij ==
              MX_Gateway_IN_Inactive_cs2c5) {
          } else {
            MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
              MX_Gateway_IN_Inactive_cs2c5;

            // Entry 'Inactive': '<S660>:717'
            cmd_AuxRelease = INACTIVE;
          }
        }
      }
    }
    break;

   case MX_Gateway_IN_PHOENIX_K2:
    // During 'PHOENIX_K2': '<S660>:658'
    switch (MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2) {
     case MX_Gate_IN_Aux_Enable_State_ACD:
      // During 'Aux_Enable_State_ACD': '<S660>:527'
      if ((cmd_AuxEnable_ACD == INACTIVE) || (state_ACD_CAN != NORMAL)) {
        // Transition: '<S660>:538'
        // Exit Internal 'Aux_Enable_State_ACD': '<S660>:527'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2 =
          MX_Gateway_IN_Functional_jgxb;

        // Entry Internal 'Functional': '<S660>:395'
        // Transition: '<S660>:401'
        if (MX_Gateway_DWork.bitsForTID1.is_Functional ==
            MX_Gateway_IN_Inactive_cs2c) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Functional =
            MX_Gateway_IN_Inactive_cs2c;

          // Entry 'Inactive': '<S660>:232'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD) {
         case MX_Gateway_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S660>:532'
          break;

         case MX_Gateway_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S660>:533'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S660>:531'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD =
              MX_Gateway_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S660>:534'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gateway_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S660>:534'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S660>:529'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD =
              MX_Gateway_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S660>:533'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
              // Transition: '<S660>:530'
              // Transition: '<S660>:568'
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD =
                MX_Gateway_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S660>:532'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gatew_IN_Aux_Enable_State_ST:
      // During 'Aux_Enable_State_ST': '<S660>:519'
      if ((cmd_AuxEnable_ST == INACTIVE) || (state_ST_CAN != NORMAL)) {
        // Transition: '<S660>:536'
        // Exit Internal 'Aux_Enable_State_ST': '<S660>:519'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2 =
          MX_Gateway_IN_Functional_jgxb;

        // Entry Internal 'Functional': '<S660>:395'
        // Transition: '<S660>:401'
        if (MX_Gateway_DWork.bitsForTID1.is_Functional ==
            MX_Gateway_IN_Inactive_cs2c) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Functional =
            MX_Gateway_IN_Inactive_cs2c;

          // Entry 'Inactive': '<S660>:232'
          state_AuxEnable = INACTIVE;
          cmd_AuxRelease = INACTIVE;
          aux_Flow = AUX_FLOW_INACTIVE;
          state_AuxRelease = INACTIVE;
        }
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST) {
         case MX_Gateway_IN_Inactive_Latched:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Latched': '<S660>:524'
          break;

         case MX_Gateway_IN_Inactive_Temp:
          state_AuxEnable = INACTIVE;

          // During 'Inactive_Temp': '<S660>:525'
          if (state_Engine != ENGINE_CRANKING) {
            // Transition: '<S660>:523'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST =
              MX_Gateway_IN_Standard_Flow;

            // Entry 'Standard_Flow': '<S660>:526'
            aux_Flow = AUX_FLOW_STANDARD;
            state_AuxEnable = ACTIVE_MODE_ONE;
            eeMirror.ee_AuxFlow = AUX_FLOW_INACTIVE;
            matlab_UpdateEEVar();
          }
          break;

         case MX_Gateway_IN_Standard_Flow:
          aux_Flow = AUX_FLOW_STANDARD;
          state_AuxEnable = ACTIVE_MODE_ONE;

          // During 'Standard_Flow': '<S660>:526'
          if (state_Engine == ENGINE_CRANKING) {
            // Transition: '<S660>:521'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST =
              MX_Gateway_IN_Inactive_Temp;

            // Entry 'Inactive_Temp': '<S660>:525'
            state_AuxEnable = INACTIVE;
          } else {
            if ((state_AuxPot == OORH) || (state_AuxPot == OORL) ||
                (state_Console == OORL) || (state_Console == OORH) ||
                (state_AuxPot == NOT_IN_NEUTRAL) || (state_System != SYS_NORMAL)
                || (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_aux)) {
              // Transition: '<S660>:522'
              // Transition: '<S660>:567'
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST =
                MX_Gateway_IN_Inactive_Latched;

              // Entry 'Inactive_Latched': '<S660>:524'
              state_AuxEnable = INACTIVE;
            }
          }
          break;

         default:
          // Unreachable state, for coverage only
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          break;
        }
      }
      break;

     case MX_Gateway_IN_Functional_jgxb:
      MX_Gateway_Functional();
      break;

     default:
      // Unreachable state, for coverage only
      MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2 =
        MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
      break;
    }
    break;

   case MX_Gateway_IN_SIRIUS2:
    MX_Gateway_SIRIUS2();
    break;

   case MX_Gateway_IN_SIRIUS2_HIFLOW:
    MX_Gateway_SIRIUS2_HIFLOW();
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// Function for Chart: '<S639>/Aux_Control'
static void MX_Gateway_Detent_State(const uint8_T *FixPtRelationalOperator)
{
  int32_T b_previousEvent;
  boolean_T guard1 = false;

  // During 'Detent_State': '<S660>:262'
  switch (MX_Gateway_DWork.bitsForTID1.is_Detent_State) {
   case MX_Gatewa_IN_EMEA_CONTROLS_giio:
    // During 'EMEA_CONTROLS': '<S660>:1293'
    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Enable == 0U) {
    } else {
      // During 'Enable': '<S660>:282'
      guard1 = false;
      switch (MX_Gateway_DWork.bitsForTID1.is_Enable) {
       case MX_Gateway_IN_Disabled:
        state_DetentEnable = INACTIVE;

        // During 'Disabled': '<S660>:283'
        if ((state_AuxEnable == ACTIVE_MODE_ONE) &&
            (MX_Gateway_B.FixPtRelationalOperator_ac0q == ACTIVE) &&
            (state_PanelButtons == NORMAL) && (mode_RightControl ==
             MODE_RIGHT_AUX1)) {
          // Transition: '<S660>:285'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Enable = MX_Gateway_IN_Enabled;

          // Entry 'Enabled': '<S660>:284'
          state_DetentEnable = ACTIVE;
        }
        break;

       case MX_Gateway_IN_Enabled:
        state_DetentEnable = ACTIVE;

        // During 'Enabled': '<S660>:284'
        if ((state_PanelButtons != NORMAL) || (state_AuxEnable == INACTIVE) ||
            (state_Console != ACTIVE)) {
          // Transition: '<S660>:286'
          guard1 = true;
        } else if (MX_Gateway_B.FixPtRelationalOperator_ac0q == ACTIVE) {
          // Transition: '<S660>:450'
          b_previousEvent = MX_Gateway_DWork.sfEvent;
          MX_Gateway_DWork.sfEvent = MX_Gateway_event_disable_aux;
          if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Aux_Enable_State ==
              0U) {
          } else {
            MX_Gateway_Aux_Enable_State();
          }

          MX_Gateway_DWork.sfEvent = b_previousEvent;
          state_Buzzer = SINGLE_SHORT_BEEP;
          guard1 = true;
        } else {
          if ((MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_detent) ||
              (mode_RightControl != MODE_RIGHT_AUX1)) {
            // Transition: '<S660>:614'
            // Transition: '<S660>:1260'
            guard1 = true;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Enable = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }

      if (guard1) {
        MX_Gateway_DWork.bitsForTID1.is_Enable = MX_Gateway_IN_Disabled;

        // Entry 'Disabled': '<S660>:283'
        state_DetentEnable = INACTIVE;
      }
    }

    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Detent == 0U) {
    } else {
      // During 'Detent': '<S660>:920'
      switch (MX_Gateway_DWork.bitsForTID1.is_Detent) {
       case MX_Gateway_IN_Active_Normal:
        // During 'Active_Normal': '<S660>:271'
        if (((int32_T)aux_DebounceButton != 0) || (state_DetentEnable ==
             INACTIVE) || (state_AuxEnable == INACTIVE)) {
          // Transition: '<S660>:269'
          // Exit Internal 'Active_Normal': '<S660>:271'
          MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_No_Detent;

          // Entry 'No_Detent': '<S660>:279'
          state_Detent = NO_DETENT;
        } else {
          switch (MX_Gateway_DWork.bitsForTID1.is_Active_Normal) {
           case MX_Gateway_IN_Detent_Base:
            state_Detent = BASE_DETENT;

            // During 'Detent_Base': '<S660>:277'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_RightPot ==
                 ROD_ACTIVE)) {
              // Transition: '<S660>:275'
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
                MX_Gateway_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S660>:278'
              state_Detent = ROD_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S660>:265'
                MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
                  MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_No_Detent;

                // Entry 'No_Detent': '<S660>:279'
                state_Detent = NO_DETENT;
              }
            }
            break;

           case MX_Gateway_IN_Detent_Rod:
            state_Detent = ROD_DETENT;

            // During 'Detent_Rod': '<S660>:278'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_AuxPot ==
                 BASE_ACTIVE)) {
              // Transition: '<S660>:274'
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
                MX_Gateway_IN_Detent_Base;

              // Entry 'Detent_Base': '<S660>:277'
              state_Detent = BASE_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S660>:267'
                MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
                  MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_No_Detent;

                // Entry 'No_Detent': '<S660>:279'
                state_Detent = NO_DETENT;
              }
            }
            break;

           default:
            // Unreachable state, for coverage only
            MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
              MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
            break;
          }
        }
        break;

       case MX_Gateway_IN_No_Detent:
        state_Detent = NO_DETENT;

        // During 'No_Detent': '<S660>:279'
        if (((int32_T)*FixPtRelationalOperator != 0) && (mode_RightControl ==
             MODE_RIGHT_AUX1) && (state_DetentEnable == ACTIVE) &&
            (state_AuxEnable == ACTIVE_MODE_ONE) && (state_RightPot !=
             NOT_IN_NEUTRAL)) {
          // Transition: '<S660>:266'
          if (state_RightPot == ROD_ACTIVE) {
            // Transition: '<S660>:276'
            MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_Active_Normal;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_Normal ==
                MX_Gateway_IN_Detent_Rod) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
                MX_Gateway_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S660>:278'
              state_Detent = ROD_DETENT;
            }
          } else {
            // Transition: '<S660>:273'
            MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_Active_Normal;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_Normal ==
                MX_Gateway_IN_Detent_Base) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
                MX_Gateway_IN_Detent_Base;

              // Entry 'Detent_Base': '<S660>:277'
              state_Detent = BASE_DETENT;
            }
          }
        } else {
          if (((int32_T)*FixPtRelationalOperator != 0) && (mode_RightControl ==
               MODE_RIGHT_AUX1) && (state_DetentEnable == INACTIVE) &&
              (state_AuxEnable == ACTIVE_MODE_ONE) && (state_RightPot !=
               NOT_IN_NEUTRAL)) {
            // Transition: '<S660>:289'
            MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_Not_Enabled;
            MX_Gateway_DWork.temporalCounter_i1_deha = 0U;

            // Entry 'Not_Enabled': '<S660>:288'
            state_Detent = ERR_DETENT;
            state_Buzzer = DOUBLE_SHORT_BEEP;
          }
        }
        break;

       case MX_Gateway_IN_Not_Enabled:
        state_Detent = ERR_DETENT;

        // During 'Not_Enabled': '<S660>:288'
        if (MX_Gateway_DWork.temporalCounter_i1_deha >= (uint32_T)(int32_T)
            ((int32_T)CONSTANT_DATA->AUX_DETENT_FLASH_TIME * 10)) {
          // Transition: '<S660>:290'
          MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_No_Detent;

          // Entry 'No_Detent': '<S660>:279'
          state_Detent = NO_DETENT;
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gateway_IN_NORMAL_CONTROLS:
    // During 'NORMAL_CONTROLS': '<S660>:1301'
    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Enable_bqpi == 0U) {
    } else {
      // During 'Enable': '<S660>:1302'
      guard1 = false;
      switch (MX_Gateway_DWork.bitsForTID1.is_Enable_paeh) {
       case MX_Gateway_IN_Disabled:
        state_DetentEnable = INACTIVE;

        // During 'Disabled': '<S660>:1308'
        if ((state_AuxEnable == ACTIVE_MODE_ONE) &&
            (MX_Gateway_B.FixPtRelationalOperator_ac0q == ACTIVE) &&
            (state_PanelButtons == NORMAL)) {
          // Transition: '<S660>:1304'
          MX_Gateway_DWork.bitsForTID1.is_Enable_paeh = MX_Gateway_IN_Enabled;

          // Entry 'Enabled': '<S660>:1309'
          state_DetentEnable = ACTIVE;
        }
        break;

       case MX_Gateway_IN_Enabled:
        state_DetentEnable = ACTIVE;

        // During 'Enabled': '<S660>:1309'
        if ((state_PanelButtons != NORMAL) || (state_AuxEnable == INACTIVE) ||
            (state_Console != ACTIVE)) {
          // Transition: '<S660>:1305'
          guard1 = true;
        } else if (MX_Gateway_B.FixPtRelationalOperator_ac0q == ACTIVE) {
          // Transition: '<S660>:1306'
          b_previousEvent = MX_Gateway_DWork.sfEvent;
          MX_Gateway_DWork.sfEvent = MX_Gateway_event_disable_aux;
          if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Aux_Enable_State ==
              0U) {
          } else {
            MX_Gateway_Aux_Enable_State();
          }

          MX_Gateway_DWork.sfEvent = b_previousEvent;
          guard1 = true;
        } else {
          if (MX_Gateway_DWork.sfEvent == MX_Gateway_event_disable_detent) {
            // Transition: '<S660>:1307'
            guard1 = true;
          }
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Enable_paeh =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }

      if (guard1) {
        MX_Gateway_DWork.bitsForTID1.is_Enable_paeh = MX_Gateway_IN_Disabled;

        // Entry 'Disabled': '<S660>:1308'
        state_DetentEnable = INACTIVE;
      }
    }

    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Detent_dfp0 == 0U) {
    } else {
      // During 'Detent': '<S660>:1310'
      switch (MX_Gateway_DWork.bitsForTID1.is_Detent_my1d) {
       case MX_Gateway_IN_Active_Normal:
        // During 'Active_Normal': '<S660>:1318'
        if (((int32_T)aux_DebounceButton != 0) || (state_DetentEnable ==
             INACTIVE) || (state_AuxEnable == INACTIVE)) {
          // Transition: '<S660>:1317'
          // Exit Internal 'Active_Normal': '<S660>:1318'
          MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
            MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
          MX_Gateway_DWork.bitsForTID1.is_Detent_my1d = MX_Gateway_IN_No_Detent;

          // Entry 'No_Detent': '<S660>:1326'
          state_Detent = NO_DETENT;
        } else {
          switch (MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21) {
           case MX_Gateway_IN_Detent_Base:
            state_Detent = BASE_DETENT;

            // During 'Detent_Base': '<S660>:1324'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_AuxPot ==
                 ROD_ACTIVE)) {
              // Transition: '<S660>:1322'
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
                MX_Gateway_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S660>:1325'
              state_Detent = ROD_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S660>:1312'
                MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
                  MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gateway_DWork.bitsForTID1.is_Detent_my1d =
                  MX_Gateway_IN_No_Detent;

                // Entry 'No_Detent': '<S660>:1326'
                state_Detent = NO_DETENT;
              }
            }
            break;

           case MX_Gateway_IN_Detent_Rod:
            state_Detent = ROD_DETENT;

            // During 'Detent_Rod': '<S660>:1325'
            if (((int32_T)*FixPtRelationalOperator != 0) && (state_AuxPot ==
                 BASE_ACTIVE)) {
              // Transition: '<S660>:1321'
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
                MX_Gateway_IN_Detent_Base;

              // Entry 'Detent_Base': '<S660>:1324'
              state_Detent = BASE_DETENT;
            } else {
              if ((int32_T)*FixPtRelationalOperator != 0) {
                // Transition: '<S660>:1316'
                MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
                  MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
                MX_Gateway_DWork.bitsForTID1.is_Detent_my1d =
                  MX_Gateway_IN_No_Detent;

                // Entry 'No_Detent': '<S660>:1326'
                state_Detent = NO_DETENT;
              }
            }
            break;

           default:
            // Unreachable state, for coverage only
            MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
              MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
            break;
          }
        }
        break;

       case MX_Gateway_IN_No_Detent:
        state_Detent = NO_DETENT;

        // During 'No_Detent': '<S660>:1326'
        if (((int32_T)*FixPtRelationalOperator != 0) && (state_DetentEnable ==
             ACTIVE) && (state_AuxEnable == ACTIVE_MODE_ONE) && (state_AuxPot !=
             NOT_IN_NEUTRAL)) {
          // Transition: '<S660>:1314'
          if (state_AuxPot == ROD_ACTIVE) {
            // Transition: '<S660>:1323'
            MX_Gateway_DWork.bitsForTID1.is_Detent_my1d =
              MX_Gateway_IN_Active_Normal;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 ==
                MX_Gateway_IN_Detent_Rod) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
                MX_Gateway_IN_Detent_Rod;

              // Entry 'Detent_Rod': '<S660>:1325'
              state_Detent = ROD_DETENT;
            }
          } else {
            // Transition: '<S660>:1320'
            MX_Gateway_DWork.bitsForTID1.is_Detent_my1d =
              MX_Gateway_IN_Active_Normal;
            if (MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 ==
                MX_Gateway_IN_Detent_Base) {
            } else {
              MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
                MX_Gateway_IN_Detent_Base;

              // Entry 'Detent_Base': '<S660>:1324'
              state_Detent = BASE_DETENT;
            }
          }
        } else {
          if (((int32_T)*FixPtRelationalOperator != 0) && (state_DetentEnable ==
               INACTIVE) && (state_AuxEnable == ACTIVE_MODE_ONE) &&
              (state_AuxPot != NOT_IN_NEUTRAL)) {
            // Transition: '<S660>:1313'
            MX_Gateway_DWork.bitsForTID1.is_Detent_my1d =
              MX_Gateway_IN_Not_Enabled;
            MX_Gateway_DWork.temporalCounter_i1_deha = 0U;

            // Entry 'Not_Enabled': '<S660>:1327'
            state_Detent = ERR_DETENT;
            state_Buzzer = DOUBLE_SHORT_BEEP;
          }
        }
        break;

       case MX_Gateway_IN_Not_Enabled:
        state_Detent = ERR_DETENT;

        // During 'Not_Enabled': '<S660>:1327'
        if (MX_Gateway_DWork.temporalCounter_i1_deha >= (uint32_T)(int32_T)
            ((int32_T)CONSTANT_DATA->AUX_DETENT_FLASH_TIME * 10)) {
          // Transition: '<S660>:1315'
          MX_Gateway_DWork.bitsForTID1.is_Detent_my1d = MX_Gateway_IN_No_Detent;

          // Entry 'No_Detent': '<S660>:1326'
          state_Detent = NO_DETENT;
        }
        break;

       default:
        // Unreachable state, for coverage only
        MX_Gateway_DWork.bitsForTID1.is_Detent_my1d =
          MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
        break;
      }
    }
    break;

   case MX_Gatew_IN_Non_Functional_km5q:
    state_DetentEnable = INACTIVE;
    state_Detent = NO_DETENT;

    // During 'Non_Functional': '<S660>:1297'
    // Transition: '<S660>:1300'
    if (CONSTANT_DATA->RIGHT_POT_FUNCTION != NON_FUNCTIONAL) {
      // Transition: '<S660>:1294'
      MX_Gateway_DWork.bitsForTID1.is_Detent_State =
        MX_Gatewa_IN_EMEA_CONTROLS_giio;

      // Entry Internal 'EMEA_CONTROLS': '<S660>:1293'
      MX_Gateway_DWork.bitsForTID1.is_active_Enable = 1U;

      // Entry Internal 'Enable': '<S660>:282'
      // Transition: '<S660>:287'
      if (MX_Gateway_DWork.bitsForTID1.is_Enable == MX_Gateway_IN_Disabled) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Enable = MX_Gateway_IN_Disabled;

        // Entry 'Disabled': '<S660>:283'
      }

      MX_Gateway_DWork.bitsForTID1.is_active_Detent = 1U;

      // Entry Internal 'Detent': '<S660>:920'
      // Transition: '<S660>:263'
      if (MX_Gateway_DWork.bitsForTID1.is_Detent == MX_Gateway_IN_No_Detent) {
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gateway_IN_No_Detent;

        // Entry 'No_Detent': '<S660>:279'
      }
    } else {
      if (CONSTANT_DATA->AUX_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S660>:1329'
        MX_Gateway_DWork.bitsForTID1.is_Detent_State =
          MX_Gateway_IN_NORMAL_CONTROLS;

        // Entry Internal 'NORMAL_CONTROLS': '<S660>:1301'
        MX_Gateway_DWork.bitsForTID1.is_active_Enable_bqpi = 1U;

        // Entry Internal 'Enable': '<S660>:1302'
        // Transition: '<S660>:1303'
        if (MX_Gateway_DWork.bitsForTID1.is_Enable_paeh ==
            MX_Gateway_IN_Disabled) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Enable_paeh = MX_Gateway_IN_Disabled;

          // Entry 'Disabled': '<S660>:1308'
        }

        MX_Gateway_DWork.bitsForTID1.is_active_Detent_dfp0 = 1U;

        // Entry Internal 'Detent': '<S660>:1310'
        // Transition: '<S660>:1311'
        if (MX_Gateway_DWork.bitsForTID1.is_Detent_my1d ==
            MX_Gateway_IN_No_Detent) {
        } else {
          MX_Gateway_DWork.bitsForTID1.is_Detent_my1d = MX_Gateway_IN_No_Detent;

          // Entry 'No_Detent': '<S660>:1326'
        }
      }
    }
    break;

   default:
    // Unreachable state, for coverage only
    MX_Gateway_DWork.bitsForTID1.is_Detent_State =
      MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
    break;
  }
}

// System initialize for atomic system: '<S28>/Aux_Enable'
void MX_Gateway_Aux_Enable_Init(void)
{
  // SystemInitialize for Chart: '<S639>/Aux_Control'
  MX_Gateway_DWork.sfEvent = MX_Gateway_CALL_EVENT_ivqv;
  MX_Gateway_DWork.bitsForTID1.is_active_Aux_Enable_State = 0U;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_EMEA_CONTROLS =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_cd41 =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_bsaq =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Functional_gnsz =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Enabled_gte3 = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Active_evlz = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_PHOENIX_K2 = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Functional = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Relief_G5 =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.temporalCounter_i2_lljs = 0U;
  MX_Gateway_DWork.bitsForTID1.is_Enabled_a0ut = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Active_facj = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_SIRIUS2 = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_bpwz =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_k11t =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Functional_ovtl =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Enabled_loo0 = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Active_fumn = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_SIRIUS2_HIFLOW =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ACD_oudq =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State_ST_dwin =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Functional_l0ij =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Enabled_ohjz = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Active = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_active_Aux_Reset = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_Detent_State = 0U;
  MX_Gateway_DWork.bitsForTID1.is_Detent_State = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_active_Detent = 0U;
  MX_Gateway_DWork.bitsForTID1.is_Detent = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Active_Normal =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_active_Enable = 0U;
  MX_Gateway_DWork.bitsForTID1.is_Enable = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_active_Detent_dfp0 = 0U;
  MX_Gateway_DWork.bitsForTID1.is_Detent_my1d = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_Active_Normal_jd21 =
    MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.temporalCounter_i1_deha = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_Enable_bqpi = 0U;
  MX_Gateway_DWork.bitsForTID1.is_Enable_paeh = MX_Gate_IN_NO_ACTIVE_CHILD_l0ws;
  MX_Gateway_DWork.bitsForTID1.is_active_c42_MX_Gateway = 0U;
  MX_Gateway_DWork.state_ACD_old = 0U;
  MX_Gateway_DWork.state_ST_old = 0U;
  MX_Gateway_DWork.bitsForTID1.previouslyActive = false;
  state_AuxEnable = 0U;
  state_Detent = 0U;
  aux_Flow = 0U;
  state_DetentEnable = 0U;
  cmd_AuxRelease = 0U;
  state_AuxRelease = 0U;
}

// Output and update for atomic system: '<S28>/Aux_Enable'
void MX_Gateway_Aux_Enable(void)
{
  int32_T b_previousEvent;
  uint8_T FixPtRelationalOperator;

  // RelationalOperator: '<S662>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S662>/Delay Input1'

  FixPtRelationalOperator = (uint8_T)(din_Detent >
    MX_Gateway_DWork.DelayInput1_DSTATE_ebj2);

  // RelationalOperator: '<S663>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S663>/Delay Input1'

  MX_Gateway_B.FixPtRelationalOperator_ac0q = (uint8_T)(aux_DetentHold >
    MX_Gateway_DWork.DelayInput1_DSTATE_nxd0);

  // RelationalOperator: '<S661>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S661>/Delay Input1'

  MX_Gateway_B.FixPtRelationalOperator_cuej = (uint8_T)((int32_T)button_Aux <
    (int32_T)MX_Gateway_DWork.DelayInput1_DSTATE_di23);

  // Chart: '<S639>/Aux_Control'
  // Gateway: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
  MX_Gateway_DWork.sfEvent = MX_Gateway_CALL_EVENT_ivqv;
  if (MX_Gateway_DWork.temporalCounter_i1_deha < MAX_uint32_T) {
    MX_Gateway_DWork.temporalCounter_i1_deha++;
  }

  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i2_lljs < 65535U) {
    MX_Gateway_DWork.temporalCounter_i2_lljs = (uint16_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i2_lljs + 1);
  }

  // During: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c42_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
    MX_Gateway_DWork.bitsForTID1.is_active_c42_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Aux_Enable/Aux_Control
    MX_Gateway_DWork.bitsForTID1.is_active_Aux_Enable_State = 1U;

    // Entry Internal 'Aux_Enable_State': '<S660>:210'
    // Transition: '<S660>:212'
    if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State ==
        MX_Gate_IN_Non_Functional_km5qd) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enable_State =
        MX_Gate_IN_Non_Functional_km5qd;

      // Entry 'Non_Functional': '<S660>:217'
      state_AuxEnable = INACTIVE;
      aux_Flow = AUX_FLOW_INACTIVE;
    }

    MX_Gateway_DWork.bitsForTID1.is_active_Detent_State = 1U;

    // Entry Internal 'Detent_State': '<S660>:262'
    // Transition: '<S660>:1295'
    if (MX_Gateway_DWork.bitsForTID1.is_Detent_State ==
        MX_Gatew_IN_Non_Functional_km5q) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_Detent_State =
        MX_Gatew_IN_Non_Functional_km5q;

      // Entry 'Non_Functional': '<S660>:1297'
      state_DetentEnable = INACTIVE;
      state_Detent = NO_DETENT;
    }

    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Aux_Reset == 1U) {
    } else {
      MX_Gateway_DWork.bitsForTID1.is_active_Aux_Reset = 1U;

      // Entry 'Aux_Reset': '<S660>:545'
      MX_Gateway_DWork.state_ACD_old = state_ACD_CAN;
      MX_Gateway_DWork.state_ST_old = state_ST_CAN;
    }
  } else {
    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Aux_Enable_State == 0U)
    {
    } else {
      MX_Gateway_Aux_Enable_State();
    }

    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Detent_State == 0U) {
    } else {
      MX_Gateway_Detent_State(&FixPtRelationalOperator);
    }

    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Aux_Reset == 0U) {
    } else {
      // During 'Aux_Reset': '<S660>:545'
      // Transition: '<S660>:547'
      if ((CONSTANT_DATA->RACD_FUNCTION != NON_FUNCTIONAL) && (state_ACD_CAN !=
           MX_Gateway_DWork.state_ACD_old)) {
        // Transition: '<S660>:556'
        // Transition: '<S660>:557'
        b_previousEvent = MX_Gateway_DWork.sfEvent;
        MX_Gateway_DWork.sfEvent = MX_Gateway_event_disable_detent;
        if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Detent_State == 0U)
        {
        } else {
          MX_Gateway_Detent_State(&FixPtRelationalOperator);
        }

        MX_Gateway_DWork.sfEvent = b_previousEvent;
        MX_Gateway_DWork.state_ACD_old = state_ACD_CAN;

        // Transition: '<S660>:558'
      } else {
        // Transition: '<S660>:549'
      }

      // Transition: '<S660>:559'
      if ((CONSTANT_DATA->STAUX_FUNCTION != NON_FUNCTIONAL) && (state_ST_CAN !=
           MX_Gateway_DWork.state_ST_old)) {
        // Transition: '<S660>:560'
        // Transition: '<S660>:561'
        b_previousEvent = MX_Gateway_DWork.sfEvent;
        MX_Gateway_DWork.sfEvent = MX_Gateway_event_disable_detent;
        if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_Detent_State == 0U)
        {
        } else {
          MX_Gateway_Detent_State(&FixPtRelationalOperator);
        }

        MX_Gateway_DWork.sfEvent = b_previousEvent;
        MX_Gateway_DWork.state_ST_old = state_ST_CAN;

        // Transition: '<S660>:562'
      } else {
        // Transition: '<S660>:563'
      }

      // Transition: '<S660>:566'
    }
  }

  // End of Chart: '<S639>/Aux_Control'

  // Update for UnitDelay: '<S662>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_ebj2 = din_Detent;

  // Update for UnitDelay: '<S663>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_nxd0 = aux_DetentHold;

  // Update for UnitDelay: '<S661>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_di23 = button_Aux;
}

// System initialize for atomic system: '<S28>/CAN_Throttle'
void MX_Gateway_CAN_Throttle_Init(void)
{
  // SystemInitialize for Enabled SubSystem: '<S640>/CAN_Throttle'
  // SystemInitialize for Chart: '<S664>/CAN_Throttle_Actuator'
  MX_Gateway_DWork.bitsForTID2.is_Cal_Start = MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gateway_DWork.bitsForTID2.is_Cal_Check = MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gateway_DWork.temporalCounter_i1_h35t = 0U;
  MX_Gateway_DWork.bitsForTID2.is_Control_mfgs = MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gateway_DWork.bitsForTID2.is_Cal_Mode = MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gateway_DWork.temporalCounter_i3_oc3g = 0U;
  MX_Gateway_DWork.bitsForTID2.is_Get_Cal_Values =
    MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gateway_DWork.bitsForTID2.is_Monitor_nibw = MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
  MX_Gateway_DWork.temporalCounter_i2_a2cf = 0U;
  MX_Gateway_DWork.bitsForTID2.is_active_c78_MX_Gateway = 0U;
  MX_Gateway_DWork.count = 0U;
  MX_Gateway_DWork.previous_cal_state = 0U;
  MX_Gateway_DWork.range = 0U;
  MX_Gateway_B.cmd_CANThrottle = 0U;
  MX_Gateway_B.state_CANThrottle = 0U;
  MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 0U;

  // SystemInitialize for Outport: '<S664>/state_CANThrottle'
  MX_Gateway_B.OutportBufferForstate_CANThrott = ((uint8_T)8U);

  // End of SystemInitialize for SubSystem: '<S640>/CAN_Throttle'
}

// Outputs for atomic system: '<S28>/CAN_Throttle'
void MX_Gateway_CAN_Throttle(void)
{
  // local block i/o variables
  uint16_T rtb_Throttle_Cal_Scaling;
  uint16_T rtb_UnitDelay2;
  boolean_T rtb_Compare_nmxp;
  uint16_T rtb_Abs;
  int16_T rtb_Sum_btad;
  uint16_T rtb_TmpSignalConversionAtThrott[2];
  uint16_T rtb_TmpSignalConversionAtT_klno[2];
  boolean_T guard1 = false;

  // UnitDelay: '<S640>/Unit Delay2'
  rtb_UnitDelay2 = MX_Gateway_DWork.UnitDelay2_DSTATE;

  // Outputs for Enabled SubSystem: '<S640>/CAN_Throttle' incorporates:
  //   EnablePort: '<S664>/Enable'

  // Logic: '<S640>/Logical Operator1' incorporates:
  //   Constant: '<S640>/Constant2'
  //   Constant: '<S665>/Constant'
  //   Constant: '<S666>/Constant'
  //   RelationalOperator: '<S665>/Compare'
  //   RelationalOperator: '<S666>/Compare'

  if ((CONSTANT_DATA->CAN_THROTTLE_FUNCTION != NON_FUNCTIONAL) &&
      (MX_Gateway_B.RateTransition17_kjqh == SYS_NORMAL)) {
    if (!MX_Gateway_DWork.CAN_Throttle_MODE) {
      // SystemReset for Chart: '<S664>/CAN_Throttle_Actuator'
      MX_Gateway_DWork.bitsForTID2.is_Cal_Start =
        MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gateway_DWork.bitsForTID2.is_Cal_Check =
        MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gateway_DWork.temporalCounter_i1_h35t = 0U;
      MX_Gateway_DWork.bitsForTID2.is_Control_mfgs =
        MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gateway_DWork.bitsForTID2.is_Cal_Mode = MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gateway_DWork.temporalCounter_i3_oc3g = 0U;
      MX_Gateway_DWork.bitsForTID2.is_Get_Cal_Values =
        MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gateway_DWork.bitsForTID2.is_Monitor_nibw =
        MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
      MX_Gateway_DWork.temporalCounter_i2_a2cf = 0U;
      MX_Gateway_DWork.bitsForTID2.is_active_c78_MX_Gateway = 0U;
      MX_Gateway_DWork.count = 0U;
      MX_Gateway_DWork.previous_cal_state = 0U;
      MX_Gateway_DWork.range = 0U;
      MX_Gateway_B.cmd_CANThrottle = 0U;
      MX_Gateway_B.state_CANThrottle = 0U;
      MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 0U;
      MX_Gateway_DWork.CAN_Throttle_MODE = true;
    }

    // Sum: '<S664>/Sum' incorporates:
    //   UnitDelay: '<S640>/Unit Delay1'

    rtb_Sum_btad = (int16_T)(int32_T)((int32_T)
      MX_Gateway_DWork.UnitDelay1_DSTATE - (int32_T)rtb_UnitDelay2);

    // Abs: '<S664>/Abs'
    if ((int32_T)rtb_Sum_btad < 0) {
      rtb_Abs = (uint16_T)(int32_T)-(int32_T)rtb_Sum_btad;
    } else {
      rtb_Abs = (uint16_T)rtb_Sum_btad;
    }

    // End of Abs: '<S664>/Abs'

    // SignalConversion: '<S664>/TmpSignal ConversionAtThrottle_Cal_ScalingInport2' incorporates:
    //   Constant: '<S664>/THROTTLE_HIGH_IDLE'
    //   Constant: '<S664>/THROTTLE_LOW_IDLE'

    rtb_TmpSignalConversionAtThrott[0] = ((uint16_T)0U);
    rtb_TmpSignalConversionAtThrott[1] = ((uint16_T)1000U);

    // RelationalOperator: '<S668>/Compare' incorporates:
    //   Constant: '<S664>/THROTTLE_RETRACTED1'
    //   Constant: '<S668>/Constant'

    rtb_Compare_nmxp = (CONSTANT_DATA->CAN_THROTTLE_REVERSE == NON_FUNCTIONAL);

    // Switch: '<S664>/Switch'
    if (rtb_Compare_nmxp) {
      // SignalConversion: '<S664>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S664>/Data Store Read1'

      rtb_TmpSignalConversionAtT_klno[0] = eeMirror.ee_ThrottleCalExtended;
    } else {
      // SignalConversion: '<S664>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S664>/Data Store Read'

      rtb_TmpSignalConversionAtT_klno[0] = eeMirror.ee_ThrottleCalRetracted;
    }

    // End of Switch: '<S664>/Switch'

    // Switch: '<S664>/Switch1'
    if (rtb_Compare_nmxp) {
      // SignalConversion: '<S664>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S664>/Data Store Read'

      rtb_TmpSignalConversionAtT_klno[1] = eeMirror.ee_ThrottleCalRetracted;
    } else {
      // SignalConversion: '<S664>/TmpSignal ConversionAtThrottle_Cal_ScalingInport3' incorporates:
      //   DataStoreRead: '<S664>/Data Store Read1'

      rtb_TmpSignalConversionAtT_klno[1] = eeMirror.ee_ThrottleCalExtended;
    }

    // End of Switch: '<S664>/Switch1'

    // S-Function (sfix_look1_dyn): '<S664>/Throttle_Cal_Scaling'
    // Dynamic Look-Up Table Block: '<S664>/Throttle_Cal_Scaling'
    //  Input0  Data Type:  Integer        U16
    //  Input1  Data Type:  Integer        U16
    //  Input2  Data Type:  Integer        U16
    //  Output0 Data Type:  Integer        U16
    //  Lookup Method: Linear_Endpoint
    //

    LookUp_U16_U16( &(rtb_Throttle_Cal_Scaling),
                   &rtb_TmpSignalConversionAtT_klno[0], pos_ThrottlePrimary,
                   &rtb_TmpSignalConversionAtThrott[0], 1U);

    // Chart: '<S664>/CAN_Throttle_Actuator'
    // Gateway: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_h35t < 65535U) {
      MX_Gateway_DWork.temporalCounter_i1_h35t = (uint16_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i1_h35t + 1);
    }

    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i2_a2cf < 65535U) {
      MX_Gateway_DWork.temporalCounter_i2_a2cf = (uint16_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i2_a2cf + 1);
    }

    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i3_oc3g < 31U) {
      MX_Gateway_DWork.temporalCounter_i3_oc3g = (uint8_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i3_oc3g + 1);
    }

    // During: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
    if ((uint32_T)MX_Gateway_DWork.bitsForTID2.is_active_c78_MX_Gateway == 0U) {
      // Entry: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
      MX_Gateway_DWork.bitsForTID2.is_active_c78_MX_Gateway = 1U;

      // Entry Internal: MX_Gtwy_Control/System/CAN_Throttle/CAN_Throttle/CAN_Throttle_Actuator 
      // Entry Internal 'Get_Cal_Values': '<S667>:34'
      // Transition: '<S667>:35'
      MX_Gateway_DWork.bitsForTID2.is_Get_Cal_Values = MX_Gateway_IN_Wait_ltfg;

      // Entry Internal 'Cal_Start': '<S667>:1'
      // Transition: '<S667>:31'
      MX_Gateway_DWork.bitsForTID2.is_Cal_Start = MX_Gateway_IN_Cal_Check;

      // Entry 'Cal_Check': '<S667>:2'
      MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 0U;
      MX_Gateway_DWork.count = 0U;

      // Entry Internal 'Cal_Check': '<S667>:2'
      // Transition: '<S667>:5'
      MX_Gateway_DWork.bitsForTID2.is_Cal_Check = MX_Gateway_IN_Pos_Low;

      // Entry Internal 'Monitor': '<S667>:30'
      // Transition: '<S667>:87'
      MX_Gateway_DWork.bitsForTID2.is_Monitor_nibw = MX_Gateway_IN_Normal_pkv1;

      // Entry 'Normal': '<S667>:86'
      MX_Gateway_B.state_CANThrottle = NORMAL;

      // Entry Internal 'Control': '<S667>:29'
      // Transition: '<S667>:63'
      MX_Gateway_DWork.bitsForTID2.is_Control_mfgs = MX_Gateway_IN_Normal_Mode;

      // Entry 'Normal_Mode': '<S667>:60'
      MX_Gateway_B.cmd_CANThrottle = rtb_Throttle_Cal_Scaling;
    } else {
      // During 'Get_Cal_Values': '<S667>:34'
      if ((MX_Gateway_DWork.bitsForTID2.is_Get_Cal_Values ==
           MX_Gateway_IN_Init_Cal) || (!MX_Gateway_B.RateTransition26_pecm)) {
        // During 'Init_Cal': '<S667>:37'
        // During 'Init_Complete': '<S667>:140'
      } else {
        // During 'Wait': '<S667>:49'
        // Transition: '<S667>:36'
        MX_Gateway_DWork.bitsForTID2.is_Get_Cal_Values = MX_Gateway_IN_Init_Cal;

        // Entry Internal 'Init_Cal': '<S667>:37'
        // Transition: '<S667>:43'
        guard1 = false;
        if ((eeMirror.ee_ThrottleCalState == NORMAL) &&
            (eeMirror.ee_ThrottleCalExtended > eeMirror.ee_ThrottleCalRetracted)
            && (eeMirror.ee_ThrottleCalExtended <
                CONSTANT_DATA->CAN_THROTTLE_CAL_MAX) &&
            (eeMirror.ee_ThrottleCalRetracted >
             CONSTANT_DATA->CAN_THROTTLE_CAL_MIN)) {
          // Transition: '<S667>:44'
          // Transition: '<S667>:46'
          MX_Gateway_DWork.range = (uint16_T)(int32_T)((int32_T)
            eeMirror.ee_ThrottleCalExtended - (int32_T)
            eeMirror.ee_ThrottleCalRetracted);
          if (((int32_T)MX_Gateway_DWork.range < (int32_T)((int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM + (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL)) && ((int32_T)
               MX_Gateway_DWork.range > (int32_T)((int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM - (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL))) {
            // Transition: '<S667>:58'
            // Transition: '<S667>:59'
            // Transition: '<S667>:47'
          } else {
            // Transition: '<S667>:55'
            guard1 = true;
          }
        } else {
          // Transition: '<S667>:54'
          guard1 = true;
        }

        if (guard1) {
          // Transition: '<S667>:45'
          // use default values from constant data
          eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
          eeMirror.ee_ThrottleCalExtended =
            CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
          eeMirror.ee_ThrottleCalRetracted =
            CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
          matlab_UpdateEEVar();
        }

        // Transition: '<S667>:48'
      }

      // During 'Cal_Start': '<S667>:1'
      guard1 = false;
      switch (MX_Gateway_DWork.bitsForTID2.is_Cal_Start) {
       case MX_Gateway_IN_Cal_Check:
        // During 'Cal_Check': '<S667>:2'
        if ((MX_Gateway_B.RateTransition27_oxis == ENGINE_CRANKING) ||
            (MX_Gateway_B.RateTransition27_oxis == ENGINE_RUNNING)) {
          // Transition: '<S667>:10'
          // Exit Internal 'Cal_Check': '<S667>:2'
          MX_Gateway_DWork.bitsForTID2.is_Cal_Check =
            MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
          MX_Gateway_DWork.bitsForTID2.is_Cal_Start = MX_Gateway_IN_Cal_Inhibit;
          MX_Gateway_DWork.temporalCounter_i1_h35t = 0U;
        } else if ((int32_T)MX_Gateway_DWork.count > 3) {
          // Transition: '<S667>:13'
          // Exit Internal 'Cal_Check': '<S667>:2'
          MX_Gateway_DWork.bitsForTID2.is_Cal_Check =
            MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
          MX_Gateway_DWork.bitsForTID2.is_Cal_Start =
            MX_Gateway_IN_Cal_In_Progress;

          // Entry 'Cal_In_Progress': '<S667>:32'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.previous_cal_state = eeMirror.ee_ThrottleCalState;
          eeMirror.ee_ThrottleCalState = IN_CAL_MODE;
          matlab_UpdateEEVar();
        } else if (MX_Gateway_DWork.bitsForTID2.is_Cal_Check ==
                   MX_Gateway_IN_Pos_High) {
          // During 'Pos_High': '<S667>:4'
          if ((int32_T)pos_ThrottlePrimary < 475) {
            // Transition: '<S667>:7'
            MX_Gateway_DWork.bitsForTID2.is_Cal_Check = MX_Gateway_IN_Pos_Low;
          }
        } else {
          // During 'Pos_Low': '<S667>:3'
          if ((int32_T)pos_ThrottlePrimary > 525) {
            // Transition: '<S667>:6'
            MX_Gateway_DWork.bitsForTID2.is_Cal_Check = MX_Gateway_IN_Pos_High;

            // Entry 'Pos_High': '<S667>:4'
            MX_Gateway_DWork.count = (uint8_T)(int32_T)((int32_T)
              MX_Gateway_DWork.count + 1);
          }
        }
        break;

       case MX_Gateway_IN_Cal_In_Progress:
        // During 'Cal_In_Progress': '<S667>:32'
        if ((MX_Gateway_B.RateTransition28_otac != NORMAL) ||
            (MX_Gateway_B.state_CANThrottle != NORMAL) ||
            (MX_Gateway_B.RateTransition27_oxis == ENGINE_CRANKING) ||
            (MX_Gateway_B.RateTransition27_oxis == ENGINE_RUNNING)) {
          // Transition: '<S667>:28'
          eeMirror.ee_ThrottleCalState = MX_Gateway_DWork.previous_cal_state;
          matlab_UpdateEEVar();
          guard1 = true;
        } else {
          if (eeMirror.ee_ThrottleCalState != IN_CAL_MODE) {
            // Transition: '<S667>:50'
            guard1 = true;
          }
        }
        break;

       default:
        // During 'Cal_Inhibit': '<S667>:8'
        if (MX_Gateway_DWork.temporalCounter_i1_h35t >=
            CONSTANT_DATA->CAN_THROTTLE_CAL_DIAG_TIME) {
          MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 0U;
        }
        break;
      }

      if (guard1) {
        MX_Gateway_DWork.bitsForTID2.is_Cal_Start = MX_Gateway_IN_Cal_Inhibit;
        MX_Gateway_DWork.temporalCounter_i1_h35t = 0U;
      }

      // During 'Monitor': '<S667>:30'
      switch (MX_Gateway_DWork.bitsForTID2.is_Monitor_nibw) {
       case MX_Gateway_IN_Debounce_jp5a:
        // During 'Debounce': '<S667>:91'
        if ((rtb_Abs < CONSTANT_DATA->CAN_THROTTLE_ERROR_MAX) ||
            (eeMirror.ee_ThrottleCalState != NORMAL)) {
          // Transition: '<S667>:92'
          MX_Gateway_DWork.bitsForTID2.is_Monitor_nibw =
            MX_Gateway_IN_Normal_pkv1;

          // Entry 'Normal': '<S667>:86'
          MX_Gateway_B.state_CANThrottle = NORMAL;
        } else {
          if (MX_Gateway_DWork.temporalCounter_i2_a2cf >=
              CONSTANT_DATA->CAN_THROTTLE_DEBOUNCE_FAILURE) {
            // Transition: '<S667>:93'
            MX_Gateway_DWork.bitsForTID2.is_Monitor_nibw = MX_Gateway_IN_Fault;

            // Entry 'Fault': '<S667>:88'
            MX_Gateway_B.state_CANThrottle = FAILURE;
          }
        }
        break;

       case MX_Gateway_IN_Fault:
        MX_Gateway_B.state_CANThrottle = FAILURE;

        // During 'Fault': '<S667>:88'
        break;

       default:
        MX_Gateway_B.state_CANThrottle = NORMAL;

        // During 'Normal': '<S667>:86'
        if ((rtb_Abs > CONSTANT_DATA->CAN_THROTTLE_ERROR_MAX) &&
            (eeMirror.ee_ThrottleCalState == NORMAL)) {
          // Transition: '<S667>:89'
          MX_Gateway_DWork.bitsForTID2.is_Monitor_nibw =
            MX_Gateway_IN_Debounce_jp5a;
          MX_Gateway_DWork.temporalCounter_i2_a2cf = 0U;
        }
        break;
      }

      // During 'Control': '<S667>:29'
      if (MX_Gateway_DWork.bitsForTID2.is_Control_mfgs == MX_Gateway_IN_Cal_Mode)
      {
        // During 'Cal_Mode': '<S667>:12'
        if ((eeMirror.ee_ThrottleCalState == NOT_CALIBRATED) ||
            (eeMirror.ee_ThrottleCalState == NORMAL)) {
          // Transition: '<S667>:62'
          // Exit Internal 'Cal_Mode': '<S667>:12'
          switch (MX_Gateway_DWork.bitsForTID2.is_Cal_Mode) {
           case MX_Gateway_IN_RECORD_MAX:
            // Exit 'RECORD_MAX': '<S667>:19'
            eeMirror.ee_ThrottleCalExtended = (uint16_T)(int32_T)((int32_T)
              rtb_UnitDelay2 - (int32_T)CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
            matlab_UpdateEEVar();
            MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
              MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
            break;

           case MX_Gateway_IN_RECORD_MIN:
            // Exit 'RECORD_MIN': '<S667>:18'
            eeMirror.ee_ThrottleCalRetracted = (uint16_T)(int32_T)((int32_T)
              rtb_UnitDelay2 + (int32_T)CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
            matlab_UpdateEEVar();
            MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
              MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
            break;

           default:
            MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
              MX_Gate_IN_NO_ACTIVE_CHILD_owkq;
            break;
          }

          MX_Gateway_DWork.bitsForTID2.is_Control_mfgs =
            MX_Gateway_IN_Normal_Mode;

          // Entry 'Normal_Mode': '<S667>:60'
          MX_Gateway_B.cmd_CANThrottle = rtb_Throttle_Cal_Scaling;
        } else {
          switch (MX_Gateway_DWork.bitsForTID2.is_Cal_Mode) {
           case MX_Gateway_IN_Cal_Fail:
            // During 'Cal_Fail': '<S667>:64'
            break;

           case MX_Gateway_IN_Done:
            // During 'Done': '<S667>:84'
            break;

           case MX_Gateway_IN_EXTEND_ACTUATOR:
            // During 'EXTEND_ACTUATOR': '<S667>:15'
            if ((int32_T)MX_Gateway_DWork.temporalCounter_i3_oc3g >= 20) {
              // Transition: '<S667>:25'
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
                MX_Gateway_IN_RECORD_MAX;
              MX_Gateway_DWork.temporalCounter_i3_oc3g = 0U;
            }
            break;

           case MX_Gateway_IN_INITIALIZE:
            // During 'INITIALIZE': '<S667>:14'
            // Transition: '<S667>:22'
            MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
              MX_Gateway_IN_EXTEND_ACTUATOR;
            MX_Gateway_DWork.temporalCounter_i3_oc3g = 0U;

            // Entry 'EXTEND_ACTUATOR': '<S667>:15'
            MX_Gateway_B.cmd_CANThrottle = 1000U;

            // Extend 100%
            break;

           case MX_Gateway_IN_RECORD_MAX:
            // During 'RECORD_MAX': '<S667>:19'
            if (rtb_UnitDelay2 > CONSTANT_DATA->CAN_THROTTLE_CAL_MAX) {
              // Transition: '<S667>:65'
              MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 1U;

              // Exit 'RECORD_MAX': '<S667>:19'
              eeMirror.ee_ThrottleCalExtended = (uint16_T)(int32_T)((int32_T)
                rtb_UnitDelay2 - (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
              matlab_UpdateEEVar();
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode = MX_Gateway_IN_Cal_Fail;

              // Entry 'Cal_Fail': '<S667>:64'
              MX_Gateway_B.cmd_CANThrottle = 0U;
              eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
              eeMirror.ee_ThrottleCalExtended =
                CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
              eeMirror.ee_ThrottleCalRetracted =
                CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
              matlab_UpdateEEVar();
            } else {
              if ((int32_T)MX_Gateway_DWork.temporalCounter_i3_oc3g >= 10) {
                // Transition: '<S667>:24'
                // Exit 'RECORD_MAX': '<S667>:19'
                eeMirror.ee_ThrottleCalExtended = (uint16_T)(int32_T)((int32_T)
                  rtb_UnitDelay2 - (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
                matlab_UpdateEEVar();
                MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
                  MX_Gateway_IN_RETRACT_ACTUATOR;
                MX_Gateway_DWork.temporalCounter_i3_oc3g = 0U;

                // Entry 'RETRACT_ACTUATOR': '<S667>:16'
                MX_Gateway_B.cmd_CANThrottle = 0U;

                // Retract 0%
              }
            }
            break;

           case MX_Gateway_IN_RECORD_MIN:
            // During 'RECORD_MIN': '<S667>:18'
            if ((int32_T)MX_Gateway_DWork.temporalCounter_i3_oc3g >= 10) {
              // Transition: '<S667>:23'
              // Exit 'RECORD_MIN': '<S667>:18'
              eeMirror.ee_ThrottleCalRetracted = (uint16_T)(int32_T)((int32_T)
                rtb_UnitDelay2 + (int32_T)
                CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
              matlab_UpdateEEVar();
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
                MX_Gateway_IN_VALIDATE_POLARITY;
            } else {
              if (rtb_UnitDelay2 < CONSTANT_DATA->CAN_THROTTLE_CAL_MIN) {
                // Transition: '<S667>:66'
                MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 2U;

                // Exit 'RECORD_MIN': '<S667>:18'
                eeMirror.ee_ThrottleCalRetracted = (uint16_T)(int32_T)((int32_T)
                  rtb_UnitDelay2 + (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_DEADBAND);
                matlab_UpdateEEVar();
                MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
                  MX_Gateway_IN_Cal_Fail;

                // Entry 'Cal_Fail': '<S667>:64'
                MX_Gateway_B.cmd_CANThrottle = 0U;
                eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
                eeMirror.ee_ThrottleCalExtended =
                  CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
                eeMirror.ee_ThrottleCalRetracted =
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
                matlab_UpdateEEVar();
              }
            }
            break;

           case MX_Gateway_IN_RETRACT_ACTUATOR:
            // During 'RETRACT_ACTUATOR': '<S667>:16'
            if ((int32_T)MX_Gateway_DWork.temporalCounter_i3_oc3g >= 20) {
              // Transition: '<S667>:26'
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
                MX_Gateway_IN_RECORD_MIN;
              MX_Gateway_DWork.temporalCounter_i3_oc3g = 0U;
            }
            break;

           case MX_Gateway_IN_VALIDATE_POLARITY:
            // During 'VALIDATE_POLARITY': '<S667>:137'
            if (eeMirror.ee_ThrottleCalExtended <=
                eeMirror.ee_ThrottleCalRetracted) {
              // Transition: '<S667>:139'
              MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 3U;
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode = MX_Gateway_IN_Cal_Fail;

              // Entry 'Cal_Fail': '<S667>:64'
              MX_Gateway_B.cmd_CANThrottle = 0U;
              eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
              eeMirror.ee_ThrottleCalExtended =
                CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
              eeMirror.ee_ThrottleCalRetracted =
                CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S667>:138'
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode =
                MX_Gateway_IN_VALIDATE_RANGE;

              // Entry 'VALIDATE_RANGE': '<S667>:17'
              MX_Gateway_DWork.range = (uint16_T)(int32_T)((int32_T)
                eeMirror.ee_ThrottleCalExtended - (int32_T)
                eeMirror.ee_ThrottleCalRetracted);
            }
            break;

           default:
            // During 'VALIDATE_RANGE': '<S667>:17'
            if (((int32_T)MX_Gateway_DWork.range > (int32_T)((int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM + (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL)) || ((int32_T)
                 MX_Gateway_DWork.range < (int32_T)((int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_NOM - (int32_T)
                  CONSTANT_DATA->CAN_THROTTLE_CAL_RANGE_TOL))) {
              // Transition: '<S667>:67'
              MX_Gateway_B.state_CANThrottleCalDiag_jqz3 = 4U;
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode = MX_Gateway_IN_Cal_Fail;

              // Entry 'Cal_Fail': '<S667>:64'
              MX_Gateway_B.cmd_CANThrottle = 0U;
              eeMirror.ee_ThrottleCalState = NOT_CALIBRATED;
              eeMirror.ee_ThrottleCalExtended =
                CONSTANT_DATA->CAN_THROTTLE_CAL_EXTENDED_DEFAULT;
              eeMirror.ee_ThrottleCalRetracted =
                CONSTANT_DATA->CAN_THROTTLE_CAL_RETRACTED_DEFAULT;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S667>:85'
              MX_Gateway_DWork.bitsForTID2.is_Cal_Mode = MX_Gateway_IN_Done;

              // Entry 'Done': '<S667>:84'
              eeMirror.ee_ThrottleCalState = NORMAL;
              state_Buzzer = DOUBLE_SHORT_BEEP;
              matlab_UpdateEEVar();
            }
            break;
          }
        }
      } else {
        // During 'Normal_Mode': '<S667>:60'
        if (eeMirror.ee_ThrottleCalState == IN_CAL_MODE) {
          // Transition: '<S667>:61'
          MX_Gateway_DWork.bitsForTID2.is_Control_mfgs = MX_Gateway_IN_Cal_Mode;

          // Entry Internal 'Cal_Mode': '<S667>:12'
          // Transition: '<S667>:21'
          MX_Gateway_DWork.bitsForTID2.is_Cal_Mode = MX_Gateway_IN_INITIALIZE;

          // Entry 'INITIALIZE': '<S667>:14'
          MX_Gateway_B.cmd_CANThrottle = 0U;
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.previous_cal_state = eeMirror.ee_ThrottleCalState;
          eeMirror.ee_ThrottleCalState = IN_CAL_MODE;
          matlab_UpdateEEVar();
        } else {
          MX_Gateway_B.cmd_CANThrottle = rtb_Throttle_Cal_Scaling;
        }
      }
    }

    // End of Chart: '<S664>/CAN_Throttle_Actuator'

    // SignalConversion: '<S664>/OutportBufferForcmd_CANThrottle'
    MX_Gateway_B.OutportBufferForcmd_CANThrottle = MX_Gateway_B.cmd_CANThrottle;

    // SignalConversion: '<S664>/OutportBufferForstate_CANThrottle'
    MX_Gateway_B.OutportBufferForstate_CANThrott =
      MX_Gateway_B.state_CANThrottle;

    // SignalConversion: '<S664>/OutportBufferForstate_CANThrottleCalDiag'
    state_CANThrottleCalDiag = MX_Gateway_B.state_CANThrottleCalDiag_jqz3;
  } else {
    if (MX_Gateway_DWork.CAN_Throttle_MODE) {
      // Disable for Outport: '<S664>/cmd_CANThrottle'
      MX_Gateway_B.OutportBufferForcmd_CANThrottle = ((uint16_T)0U);

      // Disable for Outport: '<S664>/state_CANThrottle'
      MX_Gateway_B.OutportBufferForstate_CANThrott = ((uint8_T)8U);

      // Disable for Outport: '<S664>/state_CANThrottleCalDiag'
      state_CANThrottleCalDiag = ((uint8_T)0U);
      MX_Gateway_DWork.CAN_Throttle_MODE = false;
    }
  }

  // End of Logic: '<S640>/Logical Operator1'
  // End of Outputs for SubSystem: '<S640>/CAN_Throttle'
}

// Update for atomic system: '<S28>/CAN_Throttle'
void MX_Gateway_CAN_Throttle_Update(void)
{
  // Update for UnitDelay: '<S640>/Unit Delay2'
  MX_Gateway_DWork.UnitDelay2_DSTATE = MX_Gateway_B.RateTransition25_jeol;

  // Update for UnitDelay: '<S640>/Unit Delay1'
  MX_Gateway_DWork.UnitDelay1_DSTATE = cmd_Throttle;
}

// System initialize for atomic system: '<S28>/Controller_State'
void MX_Gatewa_Controller_State_Init(void)
{
  // SystemInitialize for Chart: '<S642>/Controller_State'
  MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55_fvjc =
    MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL = MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.bitsForTID1.is_ENGINE = MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.bitsForTID1.is_JOG_SHUTTLE = MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.bitsForTID1.is_KEYLESS_ENTRY =
    MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.bitsForTID1.is_SECONDARY = MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.temporalCounter_i1 = 0U;
  MX_Gateway_DWork.bitsForTID1.is_STD_PANEL = MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.bitsForTID1.is_THROTTLE = MX_Gate_IN_NO_ACTIVE_CHILD_lotf;
  MX_Gateway_DWork.bitsForTID1.is_active_c29_MX_Gateway = 0U;
  state_CommSecondary = 0U;
  MX_Gateway_B.state_CommECU_njci = 0U;
  state_CommThrottle = 0U;
  state_CommStdPanel = 0U;
  state_CommJogShuttle = 0U;
  state_CommDeluxeG55 = 0U;
  state_CommKeylessEntry = 0U;
}

// Output and update for atomic system: '<S28>/Controller_State'
void MX_Gateway_Controller_State(void)
{
  // Chart: '<S642>/Controller_State'
  if (MX_Gateway_DWork.temporalCounter_i1 < MAX_uint32_T) {
    MX_Gateway_DWork.temporalCounter_i1++;
  }

  // Gateway: MX_Gtwy_Control/System/Controller_State/Controller_State
  // During: MX_Gtwy_Control/System/Controller_State/Controller_State
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c29_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/Controller_State/Controller_State
    MX_Gateway_DWork.bitsForTID1.is_active_c29_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Controller_State/Controller_State
    // Entry Internal 'SECONDARY': '<S669>:45'
    // Transition: '<S669>:46'
    MX_Gateway_DWork.bitsForTID1.is_SECONDARY = MX_Gatew_IN_NON_FUNCTIONAL_mt1c;
    MX_Gateway_DWork.temporalCounter_i1 = 0U;

    // Entry 'NON_FUNCTIONAL': '<S669>:49'
    state_CommSecondary = INACTIVE;

    // Entry Internal 'THROTTLE': '<S669>:82'
    // Transition: '<S669>:83'
    MX_Gateway_DWork.bitsForTID1.is_THROTTLE = MX_Gatew_IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S669>:86'
    state_CommThrottle = INACTIVE;

    // Entry Internal 'ENGINE': '<S669>:95'
    // Transition: '<S669>:96'
    MX_Gateway_DWork.bitsForTID1.is_ENGINE = MX_Gatew_IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S669>:100'
    MX_Gateway_B.state_CommECU_njci = INACTIVE;

    // Entry Internal 'STD_PANEL': '<S669>:108'
    // Transition: '<S669>:109'
    MX_Gateway_DWork.bitsForTID1.is_STD_PANEL = MX_Gatew_IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S669>:112'
    state_CommStdPanel = INACTIVE;

    // Entry Internal 'JOG_SHUTTLE': '<S669>:128'
    // Transition: '<S669>:129'
    MX_Gateway_DWork.bitsForTID1.is_JOG_SHUTTLE =
      MX_Gatew_IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S669>:132'
    state_CommJogShuttle = INACTIVE;

    // Entry Internal 'DELUXE_G55': '<S669>:135'
    // Transition: '<S669>:136'
    MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55_fvjc =
      MX_Gate_IN_NON_FUNCTIONAL_mt1cz;

    // Entry 'NON_FUNCTIONAL': '<S669>:139'
    state_CommDeluxeG55 = INACTIVE;

    // Entry Internal 'KEYLESS_ENTRY': '<S669>:143'
    // Transition: '<S669>:144'
    MX_Gateway_DWork.bitsForTID1.is_KEYLESS_ENTRY =
      MX_Gatew_IN_NON_FUNCTIONAL_mt1c;

    // Entry 'NON_FUNCTIONAL': '<S669>:147'
    state_CommKeylessEntry = INACTIVE;
  } else {
    // During 'SECONDARY': '<S669>:45'
    switch (MX_Gateway_DWork.bitsForTID1.is_SECONDARY) {
     case MX_Gatew_IN_NON_FUNCTIONAL_mt1c:
      state_CommSecondary = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S669>:49'
      if ((CONSTANT_DATA->SECONDARY_FUNCTION != NON_FUNCTIONAL) &&
          (msgAge_Secondary < CONSTANT_DATA->SECONDARY_DEBOUNCE_MISSING)) {
        // Transition: '<S669>:47'
        MX_Gateway_DWork.bitsForTID1.is_SECONDARY = MX_Gateway_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S669>:51'
        state_CommSecondary = NORMAL;
      } else {
        if ((CONSTANT_DATA->SECONDARY_FUNCTION != NON_FUNCTIONAL) && ((uint32_T)
             (MX_Gateway_DWork.temporalCounter_i1 * 10U) >= (uint32_T)
             CONSTANT_DATA->SECONDARY_DEBOUNCE_MISSING) && (state_System ==
             SYS_NORMAL)) {
          // Transition: '<S669>:155'
          MX_Gateway_DWork.bitsForTID1.is_SECONDARY =
            MX_Gat_IN_NO_COMMUNICATION_fhkj;

          // Entry 'NO_COMMUNICATION': '<S669>:50'
          state_CommSecondary = NO_COMMUNICATION;
        }
      }
      break;

     case MX_Gateway_IN_NORMAL_dl5a:
      state_CommSecondary = NORMAL;

      // During 'NORMAL': '<S669>:51'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_Secondary >= CONSTANT_DATA->SECONDARY_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S669>:48'
        MX_Gateway_DWork.bitsForTID1.is_SECONDARY =
          MX_Gat_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S669>:50'
        state_CommSecondary = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommSecondary = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S669>:50'
      break;
    }

    // During 'THROTTLE': '<S669>:82'
    switch (MX_Gateway_DWork.bitsForTID1.is_THROTTLE) {
     case MX_Gatew_IN_NON_FUNCTIONAL_mt1c:
      state_CommThrottle = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S669>:86'
      if ((CONSTANT_DATA->THROTTLE_TYPE == ACTUATOR) ||
          (CONSTANT_DATA->THROTTLE_TYPE == CAN_ACTUATOR)) {
        // Transition: '<S669>:84'
        MX_Gateway_DWork.bitsForTID1.is_THROTTLE = MX_Gateway_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S669>:88'
        state_CommThrottle = NORMAL;
      }
      break;

     case MX_Gateway_IN_NORMAL_dl5a:
      state_CommThrottle = NORMAL;

      // During 'NORMAL': '<S669>:88'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_Throttle >= CONSTANT_DATA->THROTTLE_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S669>:85'
        MX_Gateway_DWork.bitsForTID1.is_THROTTLE =
          MX_Gat_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S669>:87'
        state_CommThrottle = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommThrottle = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S669>:87'
      break;
    }

    // During 'ENGINE': '<S669>:95'
    switch (MX_Gateway_DWork.bitsForTID1.is_ENGINE) {
     case MX_Gatew_IN_NON_FUNCTIONAL_mt1c:
      MX_Gateway_B.state_CommECU_njci = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S669>:100'
      if ((CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) && (msgAge_ECU <
           CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_RUNNING)) {
        // Transition: '<S669>:98'
        MX_Gateway_DWork.bitsForTID1.is_ENGINE = MX_Gateway_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S669>:101'
        MX_Gateway_B.state_CommECU_njci = NORMAL;
      } else {
        if ((CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) && (((msgAge_ECU >=
               CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_NOT_RUNNING) &&
              (state_Engine == ENGINE_NOT_RUNNING)) || ((msgAge_ECU >=
               CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_RUNNING) &&
              (state_Engine == ENGINE_RUNNING))) && (state_System == SYS_NORMAL)
            && ((int32_T)msgAge_ECU != 65535) && (error_FuelSec == NORMAL) &&
            (state_ECUHold == ACTIVE)) {
          // Transition: '<S669>:97'
          MX_Gateway_DWork.bitsForTID1.is_ENGINE =
            MX_Gat_IN_NO_COMMUNICATION_fhkj;

          // Entry 'NO_COMMUNICATION': '<S669>:102'
          MX_Gateway_B.state_CommECU_njci = NO_COMMUNICATION;
        }
      }
      break;

     case MX_Gateway_IN_NORMAL_dl5a:
      MX_Gateway_B.state_CommECU_njci = NORMAL;

      // During 'NORMAL': '<S669>:101'
      if ((state_System == SYS_NORMAL) && (((msgAge_ECU >=
             CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_NOT_RUNNING) &&
            (state_Engine == ENGINE_NOT_RUNNING)) || ((msgAge_ECU >=
             CONSTANT_DATA->ECU_DEBOUNCE_MISSING_ENGINE_RUNNING) &&
            (state_Engine == ENGINE_RUNNING))) && (error_FuelSec == NORMAL) &&
          (state_ECUHold == ACTIVE)) {
        // Transition: '<S669>:99'
        MX_Gateway_DWork.bitsForTID1.is_ENGINE = MX_Gat_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S669>:102'
        MX_Gateway_B.state_CommECU_njci = NO_COMMUNICATION;
      }
      break;

     default:
      MX_Gateway_B.state_CommECU_njci = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S669>:102'
      break;
    }

    // During 'STD_PANEL': '<S669>:108'
    switch (MX_Gateway_DWork.bitsForTID1.is_STD_PANEL) {
     case MX_Gatew_IN_NON_FUNCTIONAL_mt1c:
      state_CommStdPanel = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S669>:112'
      if ((eeMirror.deluxe_G5 != ACTIVE) && flag_InitEERead &&
          (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL)) {
        // Transition: '<S669>:110'
        MX_Gateway_DWork.bitsForTID1.is_STD_PANEL = MX_Gateway_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S669>:114'
        state_CommStdPanel = NORMAL;
      }
      break;

     case MX_Gateway_IN_NORMAL_dl5a:
      state_CommStdPanel = NORMAL;

      // During 'NORMAL': '<S669>:114'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_StdDisplay >= CONSTANT_DATA->PANEL_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S669>:111'
        MX_Gateway_DWork.bitsForTID1.is_STD_PANEL =
          MX_Gat_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S669>:113'
        state_CommStdPanel = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommStdPanel = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S669>:113'
      break;
    }

    // During 'JOG_SHUTTLE': '<S669>:128'
    switch (MX_Gateway_DWork.bitsForTID1.is_JOG_SHUTTLE) {
     case MX_Gatew_IN_NON_FUNCTIONAL_mt1c:
      state_CommJogShuttle = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S669>:132'
      if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S669>:130'
        MX_Gateway_DWork.bitsForTID1.is_JOG_SHUTTLE = MX_Gateway_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S669>:134'
        state_CommJogShuttle = NORMAL;
      }
      break;

     case MX_Gateway_IN_NORMAL_dl5a:
      state_CommJogShuttle = NORMAL;

      // During 'NORMAL': '<S669>:134'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_JogShuttle >= CONSTANT_DATA->JOG_SHUTTLE_DEBOUNCE_MISSING) &&
          (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S669>:131'
        MX_Gateway_DWork.bitsForTID1.is_JOG_SHUTTLE =
          MX_Gat_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S669>:133'
        state_CommJogShuttle = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommJogShuttle = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S669>:133'
      break;
    }

    // During 'DELUXE_G55': '<S669>:135'
    if (MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55_fvjc ==
        MX_Gateway_IN_FUNCTIONAL_a5dn) {
      // During 'FUNCTIONAL': '<S669>:191'
      switch (MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL) {
       case MX_Gateway_IN_EVALUATE:
        // During 'EVALUATE': '<S669>:193'
        if (msgAge_DeluxeG55 < CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)
        {
          // Transition: '<S669>:137'
          MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL =
            MX_Gateway_IN_NORMAL_dl5am;

          // Entry 'NORMAL': '<S669>:141'
          state_CommDeluxeG55 = NORMAL;
        } else if (((state_Engine == ENGINE_RUNNING) && (msgAge_DeluxeG55 >=
                     CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)) ||
                   ((state_Engine == ENGINE_NOT_RUNNING) && (msgAge_DeluxeG55 >=
          CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_NOT_RUNNING))) {
          // Transition: '<S669>:171'
          // Transition: '<S669>:168'
          MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL =
            MX_Ga_IN_NO_COMMUNICATION_fhkjk;

          // Entry 'NO_COMMUNICATION': '<S669>:140'
          state_CommDeluxeG55 = NO_COMMUNICATION;
        } else {
          if ((state_System != SYS_NORMAL) || (state_SwitchedPwrOutput != NORMAL)
              || (state_SwitchedPwrRelay != NORMAL)) {
            // Transition: '<S669>:195'
            MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL =
              MX_Gateway_IN_INACTIVE_nxrf;

            // Entry 'INACTIVE': '<S669>:192'
            state_CommDeluxeG55 = INACTIVE;
          }
        }
        break;

       case MX_Gateway_IN_INACTIVE_nxrf:
        state_CommDeluxeG55 = INACTIVE;

        // During 'INACTIVE': '<S669>:192'
        if ((state_System == SYS_NORMAL) && (state_SwitchedPwrOutput == NORMAL) &&
            (state_SwitchedPwrRelay == NORMAL)) {
          // Transition: '<S669>:138'
          MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL = MX_Gateway_IN_EVALUATE;
        }
        break;

       case MX_Gateway_IN_NORMAL_dl5am:
        state_CommDeluxeG55 = NORMAL;

        // During 'NORMAL': '<S669>:141'
        if (msgAge_DeluxeG55 >= CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)
        {
          // Transition: '<S669>:196'
          MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL = MX_Gateway_IN_EVALUATE;
        }
        break;

       default:
        state_CommDeluxeG55 = NO_COMMUNICATION;

        // During 'NO_COMMUNICATION': '<S669>:140'
        if (msgAge_DeluxeG55 < CONSTANT_DATA->DELUXE_G55_COMM_DEBOUNCE_RUNNING)
        {
          // Transition: '<S669>:172'
          MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL =
            MX_Gateway_IN_NORMAL_dl5am;

          // Entry 'NORMAL': '<S669>:141'
          state_CommDeluxeG55 = NORMAL;
        }
        break;
      }
    } else {
      state_CommDeluxeG55 = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S669>:139'
      if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S669>:182'
        MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55_fvjc =
          MX_Gateway_IN_FUNCTIONAL_a5dn;

        // Entry Internal 'FUNCTIONAL': '<S669>:191'
        // Transition: '<S669>:194'
        MX_Gateway_DWork.bitsForTID1.is_FUNCTIONAL = MX_Gateway_IN_INACTIVE_nxrf;

        // Entry 'INACTIVE': '<S669>:192'
      }
    }

    // During 'KEYLESS_ENTRY': '<S669>:143'
    switch (MX_Gateway_DWork.bitsForTID1.is_KEYLESS_ENTRY) {
     case MX_Gatew_IN_NON_FUNCTIONAL_mt1c:
      state_CommKeylessEntry = INACTIVE;

      // During 'NON_FUNCTIONAL': '<S669>:147'
      if (CONSTANT_DATA->KEYLESS_ENTRY_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S669>:145'
        MX_Gateway_DWork.bitsForTID1.is_KEYLESS_ENTRY =
          MX_Gateway_IN_NORMAL_dl5a;

        // Entry 'NORMAL': '<S669>:149'
        state_CommKeylessEntry = NORMAL;
      }
      break;

     case MX_Gateway_IN_NORMAL_dl5a:
      state_CommKeylessEntry = NORMAL;

      // During 'NORMAL': '<S669>:149'
      if ((state_Engine != ENGINE_CRANKING) && (state_System == SYS_NORMAL) &&
          (msgAge_KeylessEntry >= CONSTANT_DATA->KEYLESS_ENTRY_DEBOUNCE_MISSING)
          && (state_SwitchedPwrOutput == NORMAL) && (state_SwitchedPwrRelay ==
           NORMAL)) {
        // Transition: '<S669>:146'
        MX_Gateway_DWork.bitsForTID1.is_KEYLESS_ENTRY =
          MX_Gat_IN_NO_COMMUNICATION_fhkj;

        // Entry 'NO_COMMUNICATION': '<S669>:148'
        state_CommKeylessEntry = NO_COMMUNICATION;
      }
      break;

     default:
      state_CommKeylessEntry = NO_COMMUNICATION;

      // During 'NO_COMMUNICATION': '<S669>:148'
      break;
    }
  }

  // End of Chart: '<S642>/Controller_State'
}

// System initialize for atomic system: '<S28>/Derate'
void MX_Gateway_Derate_Init(void)
{
  // SystemInitialize for Chart: '<S643>/Derate'
  MX_Gateway_DWork.bitsForTID1.is_HP_MATCH = MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST = MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gateway_DWork.bitsForTID1.is_RPM_FAULT = MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gateway_DWork.bitsForTID1.is_SHUTDOWN = MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gateway_DWork.bitsForTID1.is_UNRESPONSIVE = MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gateway_DWork.bitsForTID1.is_SEND_MSG = MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gateway_DWork.bitsForTID1.is_active_c63_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c63_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
  MX_Gateway_DWork.debounceCount_ndty = 0U;
  MX_Gateway_DWork.derate_HPMatch = 0U;
  MX_Gateway_DWork.num_Trys = 0U;
  MX_Gateway_DWork.debounceRequest = 0U;
  percent_Derate = 0;
  rpm_Derate = 0U;
  state_EngineSpeedDerate = 0U;
  state_HPMatch = 0U;
  torque_Derate = 0U;
}

// Output and update for atomic system: '<S28>/Derate'
void MX_Gateway_Derate(void)
{
  // local block i/o variables
  uint16_T rtb_Torque;

  // Lookup: '<S643>/Torque'
  //
  //  About '<S643>/Torque':
  //  Input0  Data Type:  Integer        U16
  //  Output0 Data Type:  Integer        U16
  //  Lookup Method: Below
  //
  //  XData parameter uses the same data type and scaling as Input0
  //  YData parameter uses the same data type and scaling as Output0

  {
    uint32_T iLeft;
    BINARYSEARCH_U16_iL( &(iLeft), flt_EngineSpeed, (&(MXGTW_ECU_DERATE_RPM[0])),
                        19U);
    rtb_Torque = MXGTW_ECU_DERATE_TORQUE[iLeft];
  }

  // Chart: '<S643>/Derate'
  // Gateway: MX_Gtwy_Control/System/Derate/Derate
  // During: MX_Gtwy_Control/System/Derate/Derate
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c63_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/Derate/Derate
    MX_Gateway_DWork.bitsForTID1.is_active_c63_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Derate/Derate
    // Transition: '<S670>:436'
    MX_Gateway_DWork.bitsForTID1.is_c63_MX_Gateway = MX_Gateway_IN_NO_ECU;

    // Entry 'NO_ECU': '<S670>:435'
    state_HPMatch = NORMAL;
  } else if (MX_Gateway_DWork.bitsForTID1.is_c63_MX_Gateway ==
             MX_Gateway_IN_ECU_o15r) {
    // During 'ECU': '<S670>:351'
    // During 'DERATE_LEVEL': '<S670>:353'
    // Transition: '<S670>:370'
    percent_Derate = 100;

    // Transition: '<S670>:373'
    if ((int32_T)MX_Gateway_B.RateTransition18_gdsz < (int32_T)percent_Derate) {
      // Transition: '<S670>:383'
      // Transition: '<S670>:384'
      percent_Derate = (int8_T)MX_Gateway_B.RateTransition18_gdsz;
    } else {
      // Transition: '<S670>:385'
    }

    // Transition: '<S670>:480'
    if ((CONSTANT_DATA->HP_MATCH_FUNCTION != NON_FUNCTIONAL) && ((int32_T)
         MX_Gateway_DWork.derate_HPMatch < (int32_T)percent_Derate)) {
      // Transition: '<S670>:465'
      // Transition: '<S670>:466'
      percent_Derate = (int8_T)MX_Gateway_DWork.derate_HPMatch;
    } else {
      // Transition: '<S670>:463'
    }

    // Transition: '<S670>:390'
    if ((int32_T)CONSTANT_DATA->DERATE_METHOD == 1) {
      // Transition: '<S670>:490'
      // Transition: '<S670>:494'
      torque_Derate = (uint16_T)(int32_T)((int32_T)(uint32_T)((uint32_T)
        rtb_Torque * (uint32_T)(uint16_T)percent_Derate) / 100);
    } else {
      // Transition: '<S670>:492'
      torque_Derate = (uint16_T)percent_Derate;
    }

    // Transition: '<S670>:493'
    rpm_Derate = (uint16_T)(uint32_T)((uint32_T)ecu_isocMinRPM + (uint32_T)
      ((uint32_T)((uint32_T)(int32_T)((int32_T)ecu_isocMaxRPM - (int32_T)
      ecu_isocMinRPM) * (uint32_T)percent_Derate) / 100U));

    // During 'SEND_MSG': '<S670>:391'
    switch (MX_Gateway_DWork.bitsForTID1.is_SEND_MSG) {
     case MX_Gateway_IN_DERATE:
      // During 'DERATE': '<S670>:399'
      if ((int32_T)percent_Derate == 100) {
        // Transition: '<S670>:396'
        MX_Gateway_DWork.bitsForTID1.is_SEND_MSG = MX_Gateway_IN_DISABLE_DERATE;

        // Entry 'DISABLE_DERATE': '<S670>:400'
        SendMsg_Derate_Now();
      } else {
        SendMsg_Derate_Now();
      }
      break;

     case MX_Gateway_IN_DISABLE_DERATE:
      // During 'DISABLE_DERATE': '<S670>:400'
      // Transition: '<S670>:395'
      MX_Gateway_DWork.bitsForTID1.is_SEND_MSG = MX_Gateway_IN_NORMAL_nwss;
      break;

     case MX_Gatew_IN_NON_FUNCTIONAL_jyx5:
      // During 'NON_FUNCTIONAL': '<S670>:397'
      if (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S670>:393'
        MX_Gateway_DWork.bitsForTID1.is_SEND_MSG = MX_Gateway_IN_NORMAL_nwss;
      }
      break;

     default:
      // During 'NORMAL': '<S670>:398'
      if ((int32_T)percent_Derate < 100) {
        // Transition: '<S670>:394'
        MX_Gateway_DWork.bitsForTID1.is_SEND_MSG = MX_Gateway_IN_DERATE;
      }
      break;
    }

    // During 'RPM_FAULT': '<S670>:401'
    switch (MX_Gateway_DWork.bitsForTID1.is_RPM_FAULT) {
     case MX_Gateway_IN_NORMAL_nwssk:
      state_EngineSpeedDerate = NORMAL;

      // During 'NORMAL': '<S670>:412'
      if (((int32_T)percent_Derate < 100) && ((int32_T)flt_EngineSpeed >=
           (int32_T)((int32_T)rpm_Derate + (int32_T)
                     CONSTANT_DATA->DERATE_ENGINE_SPEED_HIGH_OFFSET))) {
        // Transition: '<S670>:403'
        MX_Gateway_DWork.bitsForTID1.is_RPM_FAULT = MX_Gateway_IN_UNRESPONSIVE;

        // Entry Internal 'UNRESPONSIVE': '<S670>:407'
        // Transition: '<S670>:408'
        MX_Gateway_DWork.bitsForTID1.is_UNRESPONSIVE =
          MX_Gateway_IN_DEBOUNCE_h2c4;

        // Entry 'DEBOUNCE': '<S670>:411'
        MX_Gateway_DWork.debounceCount_ndty = 0U;
      }
      break;

     case MX_Gateway_IN_SHUTDOWN_o0ld:
      // During 'SHUTDOWN': '<S670>:413'
      if ((state_EngineSpeedDerate != SHUTDOWN) && (((int32_T)percent_Derate ==
            100) || ((int32_T)flt_EngineSpeed < (int32_T)((int32_T)rpm_Derate +
             (int32_T)CONSTANT_DATA->DERATE_ENGINE_SPEED_HIGH_OFFSET)))) {
        // Transition: '<S670>:406'
        // Exit Internal 'SHUTDOWN': '<S670>:413'
        MX_Gateway_DWork.bitsForTID1.is_SHUTDOWN =
          MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gateway_DWork.bitsForTID1.is_RPM_FAULT = MX_Gateway_IN_NORMAL_nwssk;

        // Entry 'NORMAL': '<S670>:412'
        state_EngineSpeedDerate = NORMAL;
      } else if (MX_Gateway_DWork.bitsForTID1.is_SHUTDOWN ==
                 MX_Gateway_IN_DEBOUNCE_h2c4) {
        // During 'DEBOUNCE': '<S670>:417'
        if (MX_Gateway_DWork.debounceCount_ndty >=
            CONSTANT_DATA->DERATE_ENGINE_SPEED_DEBOUNCE_SHUTDOWN) {
          // Transition: '<S670>:415'
          MX_Gateway_DWork.bitsForTID1.is_SHUTDOWN = MX_Gateway_IN_SHUTDOWN_o0ld;

          // Entry 'SHUTDOWN': '<S670>:416'
          state_EngineSpeedDerate = SHUTDOWN;
        } else {
          MX_Gateway_DWork.debounceCount_ndty = (uint16_T)(int32_T)((int32_T)
            MX_Gateway_DWork.debounceCount_ndty + 1);
        }
      } else {
        state_EngineSpeedDerate = SHUTDOWN;

        // During 'SHUTDOWN': '<S670>:416'
      }
      break;

     default:
      // During 'UNRESPONSIVE': '<S670>:407'
      if (state_EngineSpeedDerate == UNRESPONSIVE) {
        // Transition: '<S670>:405'
        // Exit Internal 'UNRESPONSIVE': '<S670>:407'
        MX_Gateway_DWork.bitsForTID1.is_UNRESPONSIVE =
          MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gateway_DWork.bitsForTID1.is_RPM_FAULT = MX_Gateway_IN_SHUTDOWN_o0ld;

        // Entry Internal 'SHUTDOWN': '<S670>:413'
        // Transition: '<S670>:414'
        MX_Gateway_DWork.bitsForTID1.is_SHUTDOWN = MX_Gateway_IN_DEBOUNCE_h2c4;

        // Entry 'DEBOUNCE': '<S670>:417'
        MX_Gateway_DWork.debounceCount_ndty = 0U;
      } else if (((int32_T)percent_Derate == 100) || ((int32_T)flt_EngineSpeed <
                  (int32_T)((int32_T)rpm_Derate + (int32_T)
                            CONSTANT_DATA->DERATE_ENGINE_SPEED_HIGH_OFFSET))) {
        // Transition: '<S670>:404'
        // Exit Internal 'UNRESPONSIVE': '<S670>:407'
        MX_Gateway_DWork.bitsForTID1.is_UNRESPONSIVE =
          MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gateway_DWork.bitsForTID1.is_RPM_FAULT = MX_Gateway_IN_NORMAL_nwssk;

        // Entry 'NORMAL': '<S670>:412'
        state_EngineSpeedDerate = NORMAL;
      } else if (MX_Gateway_DWork.bitsForTID1.is_UNRESPONSIVE ==
                 MX_Gateway_IN_DEBOUNCE_h2c4) {
        // During 'DEBOUNCE': '<S670>:411'
        if (MX_Gateway_DWork.debounceCount_ndty >=
            CONSTANT_DATA->DERATE_ENGINE_SPEED_DEBOUNCE_HIGH) {
          // Transition: '<S670>:409'
          MX_Gateway_DWork.bitsForTID1.is_UNRESPONSIVE =
            MX_Gateway_IN_UNRESPONSIVE_hw5u;

          // Entry 'UNRESPONSIVE': '<S670>:410'
          state_EngineSpeedDerate = UNRESPONSIVE;
        } else {
          MX_Gateway_DWork.debounceCount_ndty = (uint16_T)(int32_T)((int32_T)
            MX_Gateway_DWork.debounceCount_ndty + 1);
        }
      } else {
        state_EngineSpeedDerate = UNRESPONSIVE;

        // During 'UNRESPONSIVE': '<S670>:410'
      }
      break;
    }

    // During 'HP_MATCH': '<S670>:445'
    switch (MX_Gateway_DWork.bitsForTID1.is_HP_MATCH) {
     case MX_Gateway_IN_Cranking_ibul:
      // During 'Cranking': '<S670>:481'
      if (state_Engine != ENGINE_CRANKING) {
        // Transition: '<S670>:483'
        MX_Gateway_DWork.bitsForTID1.is_HP_MATCH = MX_Gateway_IN_SEND_REQUEST;

        // Entry 'SEND_REQUEST': '<S670>:447'
        MX_Gateway_DWork.num_Trys = 0U;

        // Entry Internal 'SEND_REQUEST': '<S670>:447'
        // Transition: '<S670>:457'
        MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST =
          MX_Gateway_IN_SEND_MESSAGE;

        // Entry 'SEND_MESSAGE': '<S670>:455'
        SendMsg_SOFTRequest_Now();
      }
      break;

     case MX_Gateway_IN_DERATE_g4rc:
      state_HPMatch = FAILURE;

      // During 'DERATE': '<S670>:449'
      break;

     case MX_Gatew_IN_NON_FUNCTIONAL_jyx5:
      state_HPMatch = NORMAL;

      // During 'NON_FUNCTIONAL': '<S670>:446'
      if (CONSTANT_DATA->HP_MATCH_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S670>:451'
        MX_Gateway_DWork.bitsForTID1.is_HP_MATCH = MX_Gateway_IN_SEND_REQUEST;

        // Entry 'SEND_REQUEST': '<S670>:447'
        MX_Gateway_DWork.num_Trys = 0U;

        // Entry Internal 'SEND_REQUEST': '<S670>:447'
        // Transition: '<S670>:457'
        MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST =
          MX_Gateway_IN_SEND_MESSAGE;

        // Entry 'SEND_MESSAGE': '<S670>:455'
        SendMsg_SOFTRequest_Now();
      }
      break;

     case MX_Gateway_IN_REQUEST_RECEIVED:
      // During 'REQUEST_RECEIVED': '<S670>:448'
      if (ecu_HP != CONSTANT_DATA->MACHINE_HP) {
        // Transition: '<S670>:453'
        MX_Gateway_DWork.bitsForTID1.is_HP_MATCH = MX_Gateway_IN_DERATE_g4rc;

        // Entry 'DERATE': '<S670>:449'
        MX_Gateway_DWork.derate_HPMatch = CONSTANT_DATA->MATCH_DERATE_PERCENT;
        state_HPMatch = FAILURE;
      }
      break;

     default:
      // During 'SEND_REQUEST': '<S670>:447'
      if (ecu_HP != UNDEFINED) {
        // Transition: '<S670>:452'
        // Exit Internal 'SEND_REQUEST': '<S670>:447'
        MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST =
          MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gateway_DWork.bitsForTID1.is_HP_MATCH =
          MX_Gateway_IN_REQUEST_RECEIVED;
      } else if ((int32_T)MX_Gateway_DWork.num_Trys > 3) {
        // Transition: '<S670>:454'
        // Exit Internal 'SEND_REQUEST': '<S670>:447'
        MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST =
          MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gateway_DWork.bitsForTID1.is_HP_MATCH = MX_Gateway_IN_DERATE_g4rc;

        // Entry 'DERATE': '<S670>:449'
        MX_Gateway_DWork.derate_HPMatch = CONSTANT_DATA->MATCH_DERATE_PERCENT;
        state_HPMatch = FAILURE;
      } else if (state_Engine == ENGINE_CRANKING) {
        // Transition: '<S670>:482'
        // Exit Internal 'SEND_REQUEST': '<S670>:447'
        MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST =
          MX_Gate_IN_NO_ACTIVE_CHILD_ae3j;
        MX_Gateway_DWork.bitsForTID1.is_HP_MATCH = MX_Gateway_IN_Cranking_ibul;
      } else if (MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST ==
                 MX_Gateway_IN_SEND_MESSAGE) {
        // During 'SEND_MESSAGE': '<S670>:455'
        if ((state_CommECU == NORMAL) && (state_ECUHold == ACTIVE)) {
          // Transition: '<S670>:458'
          MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST =
            MX_Gateway_IN_WAIT_FOR_RESPONSE;

          // Entry 'WAIT_FOR_RESPONSE': '<S670>:456'
          MX_Gateway_DWork.debounceRequest = 0U;
        }
      } else {
        // During 'WAIT_FOR_RESPONSE': '<S670>:456'
        if ((int32_T)MX_Gateway_DWork.debounceRequest >= 180) {
          // Transition: '<S670>:459'
          MX_Gateway_DWork.num_Trys = (uint8_T)(int32_T)((int32_T)
            MX_Gateway_DWork.num_Trys + 1);
          MX_Gateway_DWork.bitsForTID1.is_SEND_REQUEST =
            MX_Gateway_IN_SEND_MESSAGE;

          // Entry 'SEND_MESSAGE': '<S670>:455'
          SendMsg_SOFTRequest_Now();
        } else {
          MX_Gateway_DWork.debounceRequest = (uint16_T)(int32_T)((int32_T)
            MX_Gateway_DWork.debounceRequest + 1);
        }
      }
      break;
    }
  } else {
    state_HPMatch = NORMAL;

    // During 'NO_ECU': '<S670>:435'
    if (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) {
      // Transition: '<S670>:437'
      MX_Gateway_DWork.bitsForTID1.is_c63_MX_Gateway = MX_Gateway_IN_ECU_o15r;

      // Entry Internal 'ECU': '<S670>:351'
      // Entry Internal 'SEND_MSG': '<S670>:391'
      // Transition: '<S670>:392'
      MX_Gateway_DWork.bitsForTID1.is_SEND_MSG = MX_Gatew_IN_NON_FUNCTIONAL_jyx5;

      // Entry Internal 'RPM_FAULT': '<S670>:401'
      // Transition: '<S670>:402'
      MX_Gateway_DWork.bitsForTID1.is_RPM_FAULT = MX_Gateway_IN_NORMAL_nwssk;

      // Entry 'NORMAL': '<S670>:412'
      state_EngineSpeedDerate = NORMAL;

      // Entry Internal 'HP_MATCH': '<S670>:445'
      // Transition: '<S670>:450'
      MX_Gateway_DWork.bitsForTID1.is_HP_MATCH = MX_Gatew_IN_NON_FUNCTIONAL_jyx5;

      // Entry 'NON_FUNCTIONAL': '<S670>:446'
      MX_Gateway_DWork.derate_HPMatch = 100U;
    }
  }

  // End of Chart: '<S643>/Derate'
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Ga_DiverterFaultOverrideLeft(void)
{
  // Graphical Function 'DiverterFaultOverrideLeft': '<S674>:1457'
  // Transition: '<S674>:1459'
  if (MX_Gateway_B.LogicalOperator_ns15) {
    // Transition: '<S674>:1461'
    // Transition: '<S674>:1467'
    mode_LeftControl = MODE_LEFT_NONE;

    // Transition: '<S674>:1468'
  } else {
    // Transition: '<S674>:1466'
  }

  // Transition: '<S674>:1465'
}

// Function for Chart: '<S644>/Control Modes'
static void enter_internal_Aux_Enable_cso3u(void)
{
  // Entry Internal 'Aux_Enabled': '<S674>:276'
  if (eeMirror.ee_ControlMode == EE_LT_OF_A4) {
    // Transition: '<S674>:1135'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
      MX_Gat_IN_Mode_Offset_Aux4_kviy;

    // Entry 'Mode_Offset_Aux4': '<S674>:264'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX4;
    eeMirror.ee_ControlMode = EE_LT_OF_A4;
    matlab_UpdateEEVar();
    MX_Ga_DiverterFaultOverrideLeft();
  } else if (eeMirror.ee_ControlMode == EE_LT_A2_A1) {
    // Transition: '<S674>:1136'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled = MX_Gateway_IN_Mode_Aux2_Aux1;

    // Entry 'Mode_Aux2_Aux1': '<S674>:280'
    mode_LeftControl = MODE_LEFT_AUX2;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_LT_A2_A1;
    matlab_UpdateEEVar();
    MX_Ga_DiverterFaultOverrideLeft();
  } else if (eeMirror.ee_ControlMode == EE_LT_A2_A4) {
    // Transition: '<S674>:1137'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled = MX_Gateway_IN_Mode_Aux2_Aux4;

    // Entry 'Mode_Aux2_Aux4': '<S674>:281'
    mode_LeftControl = MODE_LEFT_AUX2;
    mode_RightControl = MODE_RIGHT_AUX4;
    eeMirror.ee_ControlMode = EE_LT_A2_A4;
    matlab_UpdateEEVar();
    MX_Ga_DiverterFaultOverrideLeft();
  } else {
    // Transition: '<S674>:277'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
      MX_Ga_IN_Mode_Offset_Aux1_g0rtz;

    // Entry 'Mode_Offset_Aux1': '<S674>:263'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_LT_OF_A1;
    matlab_UpdateEEVar();
    MX_Ga_DiverterFaultOverrideLeft();
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_G_enter_internal_Offset_Left(void)
{
  boolean_T guard1 = false;

  // Entry Internal 'Offset_Left': '<S674>:254'
  guard1 = false;
  if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
    // Transition: '<S674>:255'
    if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
      // Transition: '<S674>:1155'
      MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
        MX_Gateway_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S674>:276'
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      enter_internal_Aux_Enable_cso3u();
    } else {
      // Transition: '<S674>:1158'
      aux_Inhibit = true;

      // Note 4
      // Transition: '<S674>:1156'
      guard1 = true;
    }
  } else {
    // Transition: '<S674>:1134'
    guard1 = true;
  }

  if (guard1) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
      MX_Gateway_IN_Mode_Offset_None;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S674>:262'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
    MX_Ga_DiverterFaultOverrideLeft();
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_G_DiverterFaultOverrideRight(void)
{
  // Graphical Function 'DiverterFaultOverrideRight': '<S674>:1475'
  // Transition: '<S674>:1483'
  if (MX_Gateway_B.LogicalOperator_ns15) {
    // Transition: '<S674>:1484'
    // Transition: '<S674>:1488'
    mode_RightControl = MODE_RIGHT_NONE;

    // Transition: '<S674>:1489'
  } else {
    // Transition: '<S674>:1486'
  }

  // Transition: '<S674>:1491'
}

// Function for Chart: '<S644>/Control Modes'
static void enter_internal_Aux_Enabl_cso3up(void)
{
  // Entry Internal 'Aux_Enabled': '<S674>:287'
  if (eeMirror.ee_ControlMode == EE_RT_A4_A1) {
    // Transition: '<S674>:1138'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
      MX_Gatew_IN_Mode_Aux4_Aux1_j4zq;

    // Entry 'Mode_Aux4_Aux1': '<S674>:274'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_RT_A4_A1;
    matlab_UpdateEEVar();
  } else if (eeMirror.ee_ControlMode == EE_RT_A2_A1) {
    // Transition: '<S674>:1139'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
      MX_Gateway_IN_Mode_Aux2_Aux1;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Aux2_Aux1': '<S674>:290'
    mode_LeftControl = MODE_LEFT_AUX2;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_RT_A2_A1;
    matlab_UpdateEEVar();
    MX_Ga_DiverterFaultOverrideLeft();
  } else {
    // Transition: '<S674>:325'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
      MX_Gat_IN_Mode_Aux4_Offset_bn0r;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Aux4_Offset': '<S674>:275'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_OFFSET;
    eeMirror.ee_ControlMode = EE_RT_A4_OF;
    matlab_UpdateEEVar();
    MX_G_DiverterFaultOverrideRight();
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX__enter_internal_Offset_Right(void)
{
  boolean_T guard1 = false;

  // Entry Internal 'Offset_Right': '<S674>:265'
  guard1 = false;
  if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
    // Transition: '<S674>:1140'
    if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
      // Transition: '<S674>:1163'
      MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
        MX_Gateway_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S674>:287'
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      enter_internal_Aux_Enabl_cso3up();
    } else {
      // Transition: '<S674>:1162'
      aux_Inhibit = true;

      // Note 4
      // Transition: '<S674>:1161'
      guard1 = true;
    }
  } else {
    // Transition: '<S674>:266'
    guard1 = true;
  }

  if (guard1) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
      MX_Gateway_IN_Mode_None_Offset;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S674>:273'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
    MX_G_DiverterFaultOverrideRight();
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Gateway_Offset_Right_jefh(const boolean_T *LogicalOperator2,
  const boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  boolean_T guard4 = false;

  // During 'Offset_Right': '<S674>:265'
  if (MX_Gateway_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
       (int32_T)OFFSET_SELECT_LEFT)) {
    // Transition: '<S674>:417'
    check_LeftNeutral = true;

    // Transition: '<S674>:422'
    if (*LogicalOperator2) {
      // Transition: '<S674>:423'
      state_Buzzer = SINGLE_MEDIUM_BEEP;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

      // Exit Internal 'Offset_Right': '<S674>:265'
      // Exit Internal 'Aux_Enabled': '<S674>:287'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu = MX_Gateway_IN_Offset_Left;
      MX_G_enter_internal_Offset_Left();
    } else {
      // Transition: '<S674>:418'
      // Exit Internal 'Offset_Right': '<S674>:265'
      // Exit Internal 'Aux_Enabled': '<S674>:287'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu = MX_Gateway_IN_Control_Fault;

      // Entry 'Control_Fault': '<S674>:429'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      aux_Inhibit = true;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();
    }
  } else {
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    if (MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r ==
        MX_Gateway_IN_Aux_Enabled) {
      // During 'Aux_Enabled': '<S674>:287'
      if (MX_Gateway_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S674>:271'
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();

        // Exit Internal 'Aux_Enabled': '<S674>:287'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
          MX_Gateway_IN_Mode_None_Offset;
        MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_None_Offset': '<S674>:273'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_OFFSET;
        MX_G_DiverterFaultOverrideRight();
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S674>:521'
        // Transition: '<S674>:512'
        // Transition: '<S674>:515'
        // Exit Internal 'Aux_Enabled': '<S674>:287'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
          MX_Gateway_IN_Control_Fault;

        // Entry 'Control_Fault': '<S674>:429'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp) {
         case MX_Gateway_IN_Mode_Aux2_Aux1:
          // During 'Mode_Aux2_Aux1': '<S674>:290'
          if (MX_Gateway_B.request) {
            // Transition: '<S674>:293'
            state_Buzzer = TRIPLE_SHORT_BEEP;
            MX_Gateway_B.display_request = true;
            guard3 = true;
          } else if (MX_Gateway_B.request_itgm) {
            // Transition: '<S674>:475'
            check_LeftNeutral = true;
            if (*LogicalOperator2) {
              // Transition: '<S674>:470'
              state_Buzzer = SINGLE_SHORT_BEEP;
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
                MX_Gatew_IN_Mode_Aux4_Aux1_j4zq;

              // Entry 'Mode_Aux4_Aux1': '<S674>:274'
              mode_LeftControl = MODE_LEFT_AUX4;
              mode_RightControl = MODE_RIGHT_AUX1;
              eeMirror.ee_ControlMode = EE_RT_A4_A1;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S674>:474'
              guard3 = true;
            }
          } else {
            check_LeftNeutral = false;
            MX_Ga_DiverterFaultOverrideLeft();
            if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
              MX_Gateway_B.display_request = false;
            }
          }
          break;

         case MX_Gatew_IN_Mode_Aux4_Aux1_j4zq:
          // During 'Mode_Aux4_Aux1': '<S674>:274'
          if (MX_Gateway_B.request) {
            // Transition: '<S674>:469'
            check_RightNeutral = true;
            if (*LogicalOperator2_ee3n) {
              // Transition: '<S674>:466'
              state_Buzzer = SINGLE_SHORT_BEEP;
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
                MX_Gat_IN_Mode_Aux4_Offset_bn0r;
              MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

              // Entry 'Mode_Aux4_Offset': '<S674>:275'
              mode_LeftControl = MODE_LEFT_AUX4;
              mode_RightControl = MODE_RIGHT_OFFSET;
              eeMirror.ee_ControlMode = EE_RT_A4_OF;
              matlab_UpdateEEVar();
              MX_G_DiverterFaultOverrideRight();
            } else {
              // Transition: '<S674>:467'
              guard4 = true;
            }
          } else if (MX_Gateway_B.request_itgm &&
                     (!MX_Gateway_B.LogicalOperator_ns15)) {
            // Transition: '<S674>:476'
            check_LeftNeutral = true;
            if (*LogicalOperator2) {
              // Transition: '<S674>:477'
              state_Buzzer = DOUBLE_SHORT_BEEP;
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
                MX_Gateway_IN_Mode_Aux2_Aux1;
              MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

              // Entry 'Mode_Aux2_Aux1': '<S674>:290'
              mode_LeftControl = MODE_LEFT_AUX2;
              mode_RightControl = MODE_RIGHT_AUX1;
              eeMirror.ee_ControlMode = EE_RT_A2_A1;
              matlab_UpdateEEVar();
              MX_Ga_DiverterFaultOverrideLeft();
            } else {
              // Transition: '<S674>:472'
              guard4 = true;
            }
          } else {
            check_LeftNeutral = false;
            check_RightNeutral = false;
          }
          break;

         default:
          // During 'Mode_Aux4_Offset': '<S674>:275'
          if (MX_Gateway_B.request_itgm) {
            // Transition: '<S674>:288'
            state_Buzzer = TRIPLE_SHORT_BEEP;
            MX_Gateway_B.display_request = true;
            guard2 = true;
          } else if (MX_Gateway_B.request) {
            // Transition: '<S674>:468'
            check_RightNeutral = true;
            if (*LogicalOperator2_ee3n) {
              // Transition: '<S674>:462'
              state_Buzzer = DOUBLE_SHORT_BEEP;
              MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
                MX_Gatew_IN_Mode_Aux4_Aux1_j4zq;

              // Entry 'Mode_Aux4_Aux1': '<S674>:274'
              mode_LeftControl = MODE_LEFT_AUX4;
              mode_RightControl = MODE_RIGHT_AUX1;
              eeMirror.ee_ControlMode = EE_RT_A4_A1;
              matlab_UpdateEEVar();
            } else {
              // Transition: '<S674>:464'
              guard2 = true;
            }
          } else {
            check_LeftNeutral = false;
            check_RightNeutral = false;
            MX_G_DiverterFaultOverrideRight();
            if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
              MX_Gateway_B.display_request = false;
            }
          }
          break;
        }
      }
    } else {
      // During 'Mode_None_Offset': '<S674>:273'
      if (MX_Gateway_B.request_itgm || MX_Gateway_B.request) {
        // Transition: '<S674>:269'
        state_Buzzer = TRIPLE_SHORT_BEEP;
        MX_Gateway_B.display_request = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;
        guard1 = true;
      } else if ((*FixPtRelationalOperator_l3ss) && (MX_Gateway_B.UnitDelay8 !=
                  INACTIVE) && (state_CommSecondary == NORMAL)) {
        // Transition: '<S674>:483'
        check_LeftNeutral = true;

        // Note 3
        if (*LogicalOperator2) {
          // Transition: '<S674>:481'
          MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
            MX_Gateway_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S674>:287'
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          enter_internal_Aux_Enabl_cso3up();
        } else {
          // Transition: '<S674>:480'
          aux_Inhibit = true;
          guard1 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        aux_Inhibit = false;
        MX_G_DiverterFaultOverrideRight();
        if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
          MX_Gateway_B.display_request = false;
        }

        if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 200U) {
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        }
      }
    }

    if (guard4) {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
        MX_Gatew_IN_Mode_Aux4_Aux1_j4zq;

      // Entry 'Mode_Aux4_Aux1': '<S674>:274'
      mode_LeftControl = MODE_LEFT_AUX4;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_RT_A4_A1;
      matlab_UpdateEEVar();
    }

    if (guard3) {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
        MX_Gateway_IN_Mode_Aux2_Aux1;
      MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Aux2_Aux1': '<S674>:290'
      mode_LeftControl = MODE_LEFT_AUX2;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_RT_A2_A1;
      matlab_UpdateEEVar();
      MX_Ga_DiverterFaultOverrideLeft();
    }

    if (guard2) {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
        MX_Gat_IN_Mode_Aux4_Offset_bn0r;
      MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Aux4_Offset': '<S674>:275'
      mode_LeftControl = MODE_LEFT_AUX4;
      mode_RightControl = MODE_RIGHT_OFFSET;
      eeMirror.ee_ControlMode = EE_RT_A4_OF;
      matlab_UpdateEEVar();
      MX_G_DiverterFaultOverrideRight();
    }

    if (guard1) {
      MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
        MX_Gateway_IN_Mode_None_Offset;
      MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_None_Offset': '<S674>:273'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_OFFSET;
      MX_G_DiverterFaultOverrideRight();
    }
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Gateway_Aux_Enabled(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  boolean_T guard4 = false;

  // During 'Aux_Enabled': '<S674>:276'
  if (MX_Gateway_B.UnitDelay8 == INACTIVE) {
    // Transition: '<S674>:260'
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();

    // Exit Internal 'Aux_Enabled': '<S674>:276'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
      MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
    MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
      MX_Gateway_IN_Mode_Offset_None;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S674>:262'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
    MX_Ga_DiverterFaultOverrideLeft();
  } else {
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    switch (MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled) {
     case MX_Gateway_IN_Mode_Aux2_Aux1:
      // During 'Mode_Aux2_Aux1': '<S674>:280'
      if (MX_Gateway_B.request && (state_CommSecondary == NORMAL)) {
        // Transition: '<S674>:446'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:440'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Gateway_IN_Mode_Aux2_Aux4;

          // Entry 'Mode_Aux2_Aux4': '<S674>:281'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_A2_A4;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:442'
          guard2 = true;
        }
      } else if (MX_Gateway_B.request_itgm &&
                 (!MX_Gateway_B.LogicalOperator_ns15)) {
        // Transition: '<S674>:452'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S674>:282'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Ga_IN_Mode_Offset_Aux1_g0rtz;

          // Entry 'Mode_Offset_Aux1': '<S674>:263'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:453'
          guard2 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Ga_DiverterFaultOverrideLeft();
      }
      break;

     case MX_Gateway_IN_Mode_Aux2_Aux4:
      // During 'Mode_Aux2_Aux4': '<S674>:281'
      if (MX_Gateway_B.request_itgm && (!MX_Gateway_B.LogicalOperator_ns15)) {
        // Transition: '<S674>:459'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S674>:457'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Gat_IN_Mode_Offset_Aux4_kviy;

          // Entry 'Mode_Offset_Aux4': '<S674>:264'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:460'
          guard3 = true;
        }
      } else if (MX_Gateway_B.request) {
        // Transition: '<S674>:447'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:444'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Gateway_IN_Mode_Aux2_Aux1;

          // Entry 'Mode_Aux2_Aux1': '<S674>:280'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_A2_A1;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:445'
          guard3 = true;
        }
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S674>:511'
        // Transition: '<S674>:512'
        // Transition: '<S674>:515'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
          MX_Gateway_IN_Control_Fault;

        // Entry 'Control_Fault': '<S674>:429'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Ga_DiverterFaultOverrideLeft();
      }
      break;

     case MX_Ga_IN_Mode_Offset_Aux1_g0rtz:
      // During 'Mode_Offset_Aux1': '<S674>:263'
      if (MX_Gateway_B.request_itgm && (!MX_Gateway_B.LogicalOperator_ns15)) {
        // Transition: '<S674>:283'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S674>:449'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Gateway_IN_Mode_Aux2_Aux1;

          // Entry 'Mode_Aux2_Aux1': '<S674>:280'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_A2_A1;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:450'
          guard4 = true;
        }
      } else if (MX_Gateway_B.request && (state_CommSecondary == NORMAL)) {
        // Transition: '<S674>:435'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:432'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Gat_IN_Mode_Offset_Aux4_kviy;

          // Entry 'Mode_Offset_Aux4': '<S674>:264'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:433'
          guard4 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Ga_DiverterFaultOverrideLeft();
      }
      break;

     default:
      // During 'Mode_Offset_Aux4': '<S674>:264'
      if (MX_Gateway_B.request) {
        // Transition: '<S674>:439'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:436'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Ga_IN_Mode_Offset_Aux1_g0rtz;

          // Entry 'Mode_Offset_Aux1': '<S674>:263'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:438'
          guard1 = true;
        }
      } else if (MX_Gateway_B.request_itgm &&
                 (!MX_Gateway_B.LogicalOperator_ns15)) {
        // Transition: '<S674>:456'
        check_LeftNeutral = true;
        if (*LogicalOperator2) {
          // Transition: '<S674>:454'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
            MX_Gateway_IN_Mode_Aux2_Aux4;

          // Entry 'Mode_Aux2_Aux4': '<S674>:281'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_A2_A4;
          matlab_UpdateEEVar();
          MX_Ga_DiverterFaultOverrideLeft();
        } else {
          // Transition: '<S674>:458'
          guard1 = true;
        }
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S674>:518'
        // Transition: '<S674>:519'
        // Transition: '<S674>:520'
        // Transition: '<S674>:512'
        // Transition: '<S674>:515'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
          MX_Gateway_IN_Control_Fault;

        // Entry 'Control_Fault': '<S674>:429'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        MX_Ga_DiverterFaultOverrideLeft();
      }
      break;
    }

    if (guard4) {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
        MX_Ga_IN_Mode_Offset_Aux1_g0rtz;

      // Entry 'Mode_Offset_Aux1': '<S674>:263'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_LT_OF_A1;
      matlab_UpdateEEVar();
      MX_Ga_DiverterFaultOverrideLeft();
    }

    if (guard3) {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled = MX_Gateway_IN_Mode_Aux2_Aux4;

      // Entry 'Mode_Aux2_Aux4': '<S674>:281'
      mode_LeftControl = MODE_LEFT_AUX2;
      mode_RightControl = MODE_RIGHT_AUX4;
      eeMirror.ee_ControlMode = EE_LT_A2_A4;
      matlab_UpdateEEVar();
      MX_Ga_DiverterFaultOverrideLeft();
    }

    if (guard2) {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled = MX_Gateway_IN_Mode_Aux2_Aux1;

      // Entry 'Mode_Aux2_Aux1': '<S674>:280'
      mode_LeftControl = MODE_LEFT_AUX2;
      mode_RightControl = MODE_RIGHT_AUX1;
      eeMirror.ee_ControlMode = EE_LT_A2_A1;
      matlab_UpdateEEVar();
      MX_Ga_DiverterFaultOverrideLeft();
    }

    if (guard1) {
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
        MX_Gat_IN_Mode_Offset_Aux4_kviy;

      // Entry 'Mode_Offset_Aux4': '<S674>:264'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_AUX4;
      eeMirror.ee_ControlMode = EE_LT_OF_A4;
      matlab_UpdateEEVar();
      MX_Ga_DiverterFaultOverrideLeft();
    }
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Gateway_OptionC(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;

  // During 'OptionC': '<S674>:247'
  guard1 = false;
  guard2 = false;
  guard3 = false;
  switch (MX_Gateway_DWork.bitsForTID1.is_OptionC) {
   case MX_Gateway_IN_Delay_n3pi:
    // During 'Delay': '<S674>:522'
    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 20U) {
      // Transition: '<S674>:523'
      if (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_RIGHT) {
        // Transition: '<S674>:407'
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:396'
          // Transition: '<S674>:413'
          // Transition: '<S674>:416'
          MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gateway_IN_Enabled_p4xh;
          MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
            MX_Gateway_IN_Offset_Right;
          MX__enter_internal_Offset_Right();
        } else {
          // Transition: '<S674>:409'
          check_RightNeutral = true;
          guard1 = true;
        }
      } else {
        // Transition: '<S674>:402'
        guard3 = true;
      }
    } else {
      if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S674>:524'
        guard3 = true;
      }
    }
    break;

   case MX_Gateway_IN_Enabled_p4xh:
    // During 'Enabled': '<S674>:395'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S674>:410'
      // Exit Internal 'Enabled': '<S674>:395'
      if (MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu ==
          MX_Gateway_IN_Control_Fault) {
        // Exit 'Control_Fault': '<S674>:429'
        aux_Inhibit = false;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Left': '<S674>:254'
        // Exit Internal 'Aux_Enabled': '<S674>:276'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Right': '<S674>:265'
        // Exit Internal 'Aux_Enabled': '<S674>:287'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      }

      MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gateway_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S674>:406'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      aux_Inhibit = false;
      MX_Gateway_B.display_request = false;
      check_LeftNeutral = false;
      check_RightNeutral = false;
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu) {
       case MX_Gateway_IN_Control_Fault:
        // During 'Control_Fault': '<S674>:429'
        if (MX_Gateway_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
             (int32_T)OFFSET_SELECT_RIGHT) && (state_CommSecondary == NORMAL)) {
          // Transition: '<S674>:430'
          check_RightNeutral = true;

          // Transition: '<S674>:428'
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S674>:426'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S674>:429'
            aux_Inhibit = false;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
              MX_Gateway_IN_Offset_Right;
            MX__enter_internal_Offset_Right();
          } else {
            // Transition: '<S674>:427'
            guard2 = true;
          }
        } else if (MX_Gateway_B.FixPtRelationalOperator_hhgb &&
                   (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_LEFT) &&
                   (state_CommSecondary == NORMAL)) {
          // Transition: '<S674>:431'
          check_LeftNeutral = true;

          // Transition: '<S674>:422'
          if (*LogicalOperator2) {
            // Transition: '<S674>:423'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S674>:429'
            aux_Inhibit = false;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
              MX_Gateway_IN_Offset_Left;
            MX_G_enter_internal_Offset_Left();
          } else {
            // Transition: '<S674>:418'
            guard2 = true;
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;

          // Note 2
        }
        break;

       case MX_Gateway_IN_Offset_Left:
        // During 'Offset_Left': '<S674>:254'
        if (MX_Gateway_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
             (int32_T)OFFSET_SELECT_RIGHT) && (state_CommSecondary == NORMAL)) {
          // Transition: '<S674>:424'
          check_RightNeutral = true;

          // Transition: '<S674>:428'
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S674>:426'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

            // Exit Internal 'Offset_Left': '<S674>:254'
            // Exit Internal 'Aux_Enabled': '<S674>:276'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
              MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
              MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
              MX_Gateway_IN_Offset_Right;
            MX__enter_internal_Offset_Right();
          } else {
            // Transition: '<S674>:427'
            // Exit Internal 'Offset_Left': '<S674>:254'
            // Exit Internal 'Aux_Enabled': '<S674>:276'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled =
              MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
              MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
              MX_Gateway_IN_Control_Fault;

            // Entry 'Control_Fault': '<S674>:429'
            mode_LeftControl = MODE_LEFT_NONE;
            mode_RightControl = MODE_RIGHT_NONE;
            aux_Inhibit = true;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_NA_NA;
            matlab_UpdateEEVar();
          }
        } else if (MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 ==
                   MX_Gateway_IN_Aux_Enabled) {
          MX_Gateway_Aux_Enabled(LogicalOperator2, LogicalOperator2_ee3n);
        } else {
          // During 'Mode_Offset_None': '<S674>:262'
          if (MX_Gateway_B.request_itgm || MX_Gateway_B.request) {
            // Transition: '<S674>:257'
            state_Buzzer = TRIPLE_SHORT_BEEP;
            MX_Gateway_B.display_request = true;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;
            MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
              MX_Gateway_IN_Mode_Offset_None;
            MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

            // Entry 'Mode_Offset_None': '<S674>:262'
            mode_LeftControl = MODE_LEFT_OFFSET;
            mode_RightControl = MODE_RIGHT_NONE;
            MX_Ga_DiverterFaultOverrideLeft();
          } else if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
            // Transition: '<S674>:256'
            MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
              MX_Gateway_IN_Aux_Enabled;

            // Entry 'Aux_Enabled': '<S674>:276'
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
            enter_internal_Aux_Enable_cso3u();
          } else {
            check_LeftNeutral = false;
            check_RightNeutral = false;
            aux_Inhibit = false;
            MX_Ga_DiverterFaultOverrideLeft();
            if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
              MX_Gateway_B.display_request = false;
            }

            if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 200U) {
              MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
            }
          }
        }
        break;

       default:
        MX_Gateway_Offset_Right_jefh(LogicalOperator2, LogicalOperator2_ee3n,
          FixPtRelationalOperator_l3ss);
        break;
      }
    }
    break;

   default:
    // During 'INIT_SystemCheck': '<S674>:406'
    if ((state_Console == ACTIVE) && (state_System == SYS_NORMAL) &&
        (state_Engine != ENGINE_CRANKING) && flag_InitEERead) {
      // Transition: '<S674>:405'
      if (state_CommSecondary == NORMAL) {
        // Transition: '<S674>:494'
        MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gateway_IN_Delay_n3pi;
        MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;
      } else {
        // Transition: '<S674>:495'
        if (state_CommSecondary == NO_COMMUNICATION) {
          // Transition: '<S674>:497'
          // Transition: '<S674>:408'
          // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
          if (*LogicalOperator2) {
            // Transition: '<S674>:398'
            MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gateway_IN_Enabled_p4xh;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
              MX_Gateway_IN_Offset_Left;
            MX_G_enter_internal_Offset_Left();
          } else {
            // Transition: '<S674>:412'
            check_LeftNeutral = true;

            // Transition: '<S674>:489'
            // Transition: '<S674>:491'
            // Transition: '<S674>:492'
            MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gateway_IN_Enabled_p4xh;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu =
              MX_Gateway_IN_Control_Fault;

            // Entry 'Control_Fault': '<S674>:429'
            mode_LeftControl = MODE_LEFT_NONE;
            mode_RightControl = MODE_RIGHT_NONE;
            aux_Inhibit = true;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_NA_NA;
            matlab_UpdateEEVar();
          }
        }
      }
    }
    break;
  }

  if (guard3) {
    // Transition: '<S674>:408'
    // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
    if (*LogicalOperator2) {
      // Transition: '<S674>:398'
      MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gateway_IN_Enabled_p4xh;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu = MX_Gateway_IN_Offset_Left;
      MX_G_enter_internal_Offset_Left();
    } else {
      // Transition: '<S674>:412'
      check_LeftNeutral = true;
      guard1 = true;
    }
  }

  if (guard2) {
    // Exit 'Control_Fault': '<S674>:429'
    MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu = MX_Gateway_IN_Control_Fault;

    // Entry 'Control_Fault': '<S674>:429'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }

  if (guard1) {
    // Transition: '<S674>:489'
    // Transition: '<S674>:491'
    // Transition: '<S674>:492'
    MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gateway_IN_Enabled_p4xh;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu = MX_Gateway_IN_Control_Fault;

    // Entry 'Control_Fault': '<S674>:429'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Gateway_OptionA(const boolean_T *LogicalOperator2)
{
  // During 'OptionA': '<S674>:162'
  switch (MX_Gateway_DWork.bitsForTID1.is_OptionA) {
   case MX_Gateway_IN_Delay_n3pi:
    // During 'Delay': '<S674>:1447'
    // Transition: '<S674>:1448'
    MX_Gateway_DWork.bitsForTID1.is_OptionA = MX_Gateway_IN_Enabled_p4xh;

    // Entry Internal 'Enabled': '<S674>:307'
    if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
      // Transition: '<S674>:1426'
      MX_Gateway_DWork.bitsForTID1.is_Enabled = MX_Gateway_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S674>:986'
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;

      // Entry Internal 'Aux_Enabled': '<S674>:986'
      if (MX_Gateway_DWork.stored_ControlMode == EE_LT_A2_A1) {
        // Transition: '<S674>:1446'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
          MX_Gateway_IN_Mode_Aux2_Aux1;

        // Entry 'Mode_Aux2_Aux1': '<S674>:116'
        mode_LeftControl = MODE_LEFT_AUX2;
        mode_RightControl = MODE_RIGHT_AUX1;
        MX_Gateway_DWork.stored_ControlMode = EE_LT_A2_A1;
      } else {
        // Transition: '<S674>:988'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
          MX_Gateway_IN_Mode_Offset_Aux1;

        // Entry 'Mode_Offset_Aux1': '<S674>:210'
        mode_LeftControl = MODE_LEFT_OFFSET;
        mode_RightControl = MODE_RIGHT_AUX1;
        MX_Gateway_DWork.stored_ControlMode = EE_LT_OF_A1;
        MX_Gateway_B.display_request = false;
      }
    } else {
      // Transition: '<S674>:324'
      MX_Gateway_DWork.bitsForTID1.is_Enabled = MX_Gateway_IN_Mode_Offset_None;
      MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Offset_None': '<S674>:113'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gateway_DWork.stored_ControlMode = EE_LT_OF_NA;
    }
    break;

   case MX_Gateway_IN_Enabled_p4xh:
    // During 'Enabled': '<S674>:307'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S674>:308'
      // Exit Internal 'Enabled': '<S674>:307'
      // Exit Internal 'Aux_Enabled': '<S674>:986'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Enabled = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_OptionA = MX_Gateway_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S674>:88'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gateway_B.display_request = false;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      check_LeftNeutral = false;
    } else if (MX_Gateway_DWork.bitsForTID1.is_Enabled ==
               MX_Gateway_IN_Aux_Enabled) {
      // During 'Aux_Enabled': '<S674>:986'
      if (MX_Gateway_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S674>:198'
        // Exit Internal 'Aux_Enabled': '<S674>:986'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Enabled = MX_Gateway_IN_Mode_Offset_None;
        MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_Offset_None': '<S674>:113'
        mode_LeftControl = MODE_LEFT_OFFSET;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gateway_DWork.stored_ControlMode = EE_LT_OF_NA;
      } else if (MX_Gateway_B.LogicalOperator_ns15) {
        // Transition: '<S674>:987'
        // Exit Internal 'Aux_Enabled': '<S674>:986'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Enabled =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_OptionA =
          IN_Left_Control_or_Diverter_Fau;

        // Entry 'Left_Control_or_Diverter_Fault': '<S674>:964'
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        check_LeftNeutral = false;

        // Entry Internal 'Left_Control_or_Diverter_Fault': '<S674>:964'
        // Transition: '<S674>:969'
        MX_Gateway_DWork.bitsForTID1.is_Left_Control_or_Diverter_Fau =
          MX_Gateway_IN_Fault_Mode;

        // Entry 'Fault_Mode': '<S674>:982'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gateway_DWork.stored_ControlMode = EE_NA_NA;
      } else if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb ==
                 MX_Gateway_IN_Mode_Aux2_Aux1) {
        // During 'Mode_Aux2_Aux1': '<S674>:116'
        if (MX_Gateway_B.request_itgm) {
          // Transition: '<S674>:336'
          check_LeftNeutral = true;
          if (*LogicalOperator2) {
            // Transition: '<S674>:123'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
              MX_Gateway_IN_Mode_Offset_Aux1;

            // Entry 'Mode_Offset_Aux1': '<S674>:210'
            mode_LeftControl = MODE_LEFT_OFFSET;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gateway_DWork.stored_ControlMode = EE_LT_OF_A1;
            MX_Gateway_B.display_request = false;
          } else {
            // Transition: '<S674>:337'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
              MX_Gateway_IN_Mode_Aux2_Aux1;

            // Entry 'Mode_Aux2_Aux1': '<S674>:116'
            mode_LeftControl = MODE_LEFT_AUX2;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gateway_DWork.stored_ControlMode = EE_LT_A2_A1;
          }
        } else {
          check_LeftNeutral = false;
        }
      } else {
        // During 'Mode_Offset_Aux1': '<S674>:210'
        if (MX_Gateway_B.request_itgm) {
          // Transition: '<S674>:333'
          check_LeftNeutral = true;
          if (*LogicalOperator2) {
            // Transition: '<S674>:119'
            state_Buzzer = DOUBLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
              MX_Gateway_IN_Mode_Aux2_Aux1;

            // Entry 'Mode_Aux2_Aux1': '<S674>:116'
            mode_LeftControl = MODE_LEFT_AUX2;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gateway_DWork.stored_ControlMode = EE_LT_A2_A1;
          } else {
            // Transition: '<S674>:334'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
              MX_Gateway_IN_Mode_Offset_Aux1;

            // Entry 'Mode_Offset_Aux1': '<S674>:210'
            mode_LeftControl = MODE_LEFT_OFFSET;
            mode_RightControl = MODE_RIGHT_AUX1;
            MX_Gateway_DWork.stored_ControlMode = EE_LT_OF_A1;
            MX_Gateway_B.display_request = false;
          }
        } else {
          check_LeftNeutral = false;
        }
      }
    } else {
      // During 'Mode_Offset_None': '<S674>:113'
      if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S674>:200'
        MX_Gateway_DWork.bitsForTID1.is_Enabled = MX_Gateway_IN_Aux_Enabled;

        // Entry 'Aux_Enabled': '<S674>:986'
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;

        // Entry Internal 'Aux_Enabled': '<S674>:986'
        if (MX_Gateway_DWork.stored_ControlMode == EE_LT_A2_A1) {
          // Transition: '<S674>:1446'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
            MX_Gateway_IN_Mode_Aux2_Aux1;

          // Entry 'Mode_Aux2_Aux1': '<S674>:116'
          mode_LeftControl = MODE_LEFT_AUX2;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gateway_DWork.stored_ControlMode = EE_LT_A2_A1;
        } else {
          // Transition: '<S674>:988'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
            MX_Gateway_IN_Mode_Offset_Aux1;

          // Entry 'Mode_Offset_Aux1': '<S674>:210'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gateway_DWork.stored_ControlMode = EE_LT_OF_A1;
          MX_Gateway_B.display_request = false;
        }
      } else if (MX_Gateway_B.request_itgm) {
        // Transition: '<S674>:197'
        // Transition: '<S674>:203'
        state_Buzzer = TRIPLE_SHORT_BEEP;
        MX_Gateway_B.display_request = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

        // Transition: '<S674>:202'
        MX_Gateway_DWork.bitsForTID1.is_Enabled = MX_Gateway_IN_Mode_Offset_None;
        MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_Offset_None': '<S674>:113'
        mode_LeftControl = MODE_LEFT_OFFSET;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gateway_DWork.stored_ControlMode = EE_LT_OF_NA;
      } else {
        check_LeftNeutral = false;
        if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
          MX_Gateway_B.display_request = false;
        }

        if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 200U) {
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        }
      }
    }
    break;

   case MX_Gateway_IN_INIT_SystemCheck:
    // During 'INIT_SystemCheck': '<S674>:88'
    if ((state_Console == ACTIVE) && (state_Engine != ENGINE_CRANKING) &&
        (state_System == SYS_NORMAL) && flag_InitEERead) {
      // Transition: '<S674>:115'
      if (*LogicalOperator2) {
        // Transition: '<S674>:672'
        MX_Gateway_DWork.bitsForTID1.is_OptionA = MX_Gateway_IN_Delay_n3pi;
      } else {
        // Transition: '<S674>:962'
        MX_Gateway_DWork.bitsForTID1.is_OptionA =
          IN_Left_Control_or_Diverter_Fau;

        // Entry 'Left_Control_or_Diverter_Fault': '<S674>:964'
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        check_LeftNeutral = false;

        // Entry Internal 'Left_Control_or_Diverter_Fault': '<S674>:964'
        // Transition: '<S674>:969'
        MX_Gateway_DWork.bitsForTID1.is_Left_Control_or_Diverter_Fau =
          MX_Gateway_IN_Fault_Mode;

        // Entry 'Fault_Mode': '<S674>:982'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gateway_DWork.stored_ControlMode = EE_NA_NA;
      }
    }
    break;

   default:
    // During 'Left_Control_or_Diverter_Fault': '<S674>:964'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S674>:985'
      // Exit Internal 'Left_Control_or_Diverter_Fault': '<S674>:964'
      MX_Gateway_DWork.bitsForTID1.is_Left_Control_or_Diverter_Fau =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_OptionA = MX_Gateway_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S674>:88'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gateway_B.display_request = false;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      check_LeftNeutral = false;
    } else if (MX_Gateway_DWork.bitsForTID1.is_Left_Control_or_Diverter_Fau ==
               MX_Gateway_IN_Fault_Mode) {
      // During 'Fault_Mode': '<S674>:982'
      if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S674>:975'
        MX_Gateway_DWork.bitsForTID1.is_Left_Control_or_Diverter_Fau =
          MX_Gateway_IN_Mode_None_Aux1;

        // Entry 'Mode_None_Aux1': '<S674>:984'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_AUX1;
      }
    } else {
      // During 'Mode_None_Aux1': '<S674>:984'
      if (MX_Gateway_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S674>:977'
        MX_Gateway_DWork.bitsForTID1.is_Left_Control_or_Diverter_Fau =
          MX_Gateway_IN_Fault_Mode;

        // Entry 'Fault_Mode': '<S674>:982'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gateway_DWork.stored_ControlMode = EE_NA_NA;
      }
    }
    break;
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_G_enter_internal_Aux_Enabled(void)
{
  // Entry Internal 'Aux_Enabled': '<S674>:1336'
  if (eeMirror.ee_ControlMode == EE_LT_OF_A4) {
    // Transition: '<S674>:1346'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
      MX_Gateway_IN_Mode_Offset_Aux4;

    // Entry 'Mode_Offset_Aux4': '<S674>:1375'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX4;
    eeMirror.ee_ControlMode = EE_LT_OF_A4;
    matlab_UpdateEEVar();
  } else {
    // Transition: '<S674>:1347'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
      MX_Gat_IN_Mode_Offset_Aux1_g0rt;

    // Entry 'Mode_Offset_Aux1': '<S674>:1376'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX1;
    MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_LT_OF_A1;
    matlab_UpdateEEVar();
  }
}

// Function for Chart: '<S644>/Control Modes'
static void enter_internal_Aux_Enabled_cso3(void)
{
  // Entry Internal 'Aux_Enabled': '<S674>:1395'
  if (eeMirror.ee_ControlMode == EE_RT_A4_A1) {
    // Transition: '<S674>:1402'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
      MX_Gateway_IN_Mode_Aux4_Aux1;

    // Entry 'Mode_Aux4_Aux1': '<S674>:1419'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_AUX1;
    eeMirror.ee_ControlMode = EE_RT_A4_A1;
    matlab_UpdateEEVar();
  } else {
    // Transition: '<S674>:1401'
    MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
      MX_Gateway_IN_Mode_Aux4_Offset;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Aux4_Offset': '<S674>:1420'
    mode_LeftControl = MODE_LEFT_AUX4;
    mode_RightControl = MODE_RIGHT_OFFSET;
    MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_RT_A4_OF;
    matlab_UpdateEEVar();
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Gateway_Offset_Right(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;

  // During 'Offset_Right': '<S674>:1381'
  guard1 = false;
  guard2 = false;
  if (MX_Gateway_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
       (int32_T)OFFSET_SELECT_LEFT)) {
    // Transition: '<S674>:1324'
    check_LeftNeutral = true;

    // Transition: '<S674>:1315'
    if (*LogicalOperator2) {
      // Transition: '<S674>:1311'
      state_Buzzer = SINGLE_MEDIUM_BEEP;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

      // Exit Internal 'Offset_Right': '<S674>:1381'
      // Exit Internal 'Aux_Enabled': '<S674>:1395'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gateway_IN_Offset_Left;

      // Entry Internal 'Offset_Left': '<S674>:1325'
      if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S674>:1328'
        if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
          // Transition: '<S674>:1330'
          MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
            MX_Gateway_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S674>:1336'
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          MX_G_enter_internal_Aux_Enabled();
        } else {
          // Transition: '<S674>:1331'
          aux_Inhibit = true;

          // Note 4
          // Transition: '<S674>:1333'
          guard1 = true;
        }
      } else {
        // Transition: '<S674>:1329'
        guard1 = true;
      }
    } else {
      // Transition: '<S674>:1313'
      // Exit Internal 'Offset_Right': '<S674>:1381'
      // Exit Internal 'Aux_Enabled': '<S674>:1395'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gateway_IN_Control_Fault;

      // Entry 'Control_Fault': '<S674>:1380'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      aux_Inhibit = true;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();
    }
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_Offset_Right) {
     case MX_Gateway_IN_Aux_Enabled:
      // During 'Aux_Enabled': '<S674>:1395'
      if (MX_Gateway_B.UnitDelay8 == INACTIVE) {
        // Transition: '<S674>:1394'
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();

        // Exit Internal 'Aux_Enabled': '<S674>:1395'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
          MX_Gateway_IN_Mode_None_Offset;
        MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_None_Offset': '<S674>:1422'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_OFFSET;
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S674>:1320'
        // Transition: '<S674>:1317'
        // Transition: '<S674>:1316'
        // Exit Internal 'Aux_Enabled': '<S674>:1395'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
          MX_Gateway_IN_Control_Fault;

        // Entry 'Control_Fault': '<S674>:1380'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 ==
                 MX_Gateway_IN_Mode_Aux4_Aux1) {
        // During 'Mode_Aux4_Aux1': '<S674>:1419'
        if (MX_Gateway_B.request) {
          // Transition: '<S674>:1407'
          check_RightNeutral = true;
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S674>:1406'
            state_Buzzer = SINGLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
              MX_Gateway_IN_Mode_Aux4_Offset;
            MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

            // Entry 'Mode_Aux4_Offset': '<S674>:1420'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_OFFSET;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_RT_A4_OF;
            matlab_UpdateEEVar();
          } else {
            // Transition: '<S674>:1408'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
              MX_Gateway_IN_Mode_Aux4_Aux1;

            // Entry 'Mode_Aux4_Aux1': '<S674>:1419'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_AUX1;
            eeMirror.ee_ControlMode = EE_RT_A4_A1;
            matlab_UpdateEEVar();
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;
        }
      } else {
        // During 'Mode_Aux4_Offset': '<S674>:1420'
        if (MX_Gateway_B.request) {
          // Transition: '<S674>:1403'
          check_RightNeutral = true;
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S674>:1404'
            state_Buzzer = DOUBLE_SHORT_BEEP;
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
              MX_Gateway_IN_Mode_Aux4_Aux1;

            // Entry 'Mode_Aux4_Aux1': '<S674>:1419'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_AUX1;
            eeMirror.ee_ControlMode = EE_RT_A4_A1;
            matlab_UpdateEEVar();
          } else {
            // Transition: '<S674>:1405'
            MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
              MX_Gateway_IN_Mode_Aux4_Offset;
            MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

            // Entry 'Mode_Aux4_Offset': '<S674>:1420'
            mode_LeftControl = MODE_LEFT_AUX4;
            mode_RightControl = MODE_RIGHT_OFFSET;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_RT_A4_OF;
            matlab_UpdateEEVar();
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;
          if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
            MX_Gateway_B.display_request = false;
          }
        }
      }
      break;

     default:
      // During 'Mode_None_Offset': '<S674>:1422'
      if (MX_Gateway_B.request) {
        // Transition: '<S674>:1393'
        state_Buzzer = TRIPLE_SHORT_BEEP;
        MX_Gateway_B.display_request = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;
        guard2 = true;
      } else if ((*FixPtRelationalOperator_l3ss) && (MX_Gateway_B.UnitDelay8 !=
                  INACTIVE) && (state_CommSecondary == NORMAL)) {
        // Transition: '<S674>:1390'
        check_LeftNeutral = true;

        // Note 3
        if (*LogicalOperator2) {
          // Transition: '<S674>:1391'
          MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
            MX_Gateway_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S674>:1395'
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          enter_internal_Aux_Enabled_cso3();
        } else {
          // Transition: '<S674>:1392'
          aux_Inhibit = true;
          guard2 = true;
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
        aux_Inhibit = false;
        if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
          MX_Gateway_B.display_request = false;
        }

        if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 200U) {
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        }
      }
      break;
    }
  }

  if (guard2) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
      MX_Gateway_IN_Mode_None_Offset;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S674>:1422'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
  }

  if (guard1) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Left = MX_Gateway_IN_Mode_Offset_None;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S674>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Gateway_Offset_Left(const boolean_T *LogicalOperator2_ee3n)
{
  boolean_T guard1 = false;

  // During 'Offset_Left': '<S674>:1325'
  if (MX_Gateway_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
       (int32_T)OFFSET_SELECT_RIGHT) && (state_CommSecondary == NORMAL)) {
    // Transition: '<S674>:1310'
    check_RightNeutral = true;

    // Transition: '<S674>:1314'
    if (*LogicalOperator2_ee3n) {
      // Transition: '<S674>:1323'
      state_Buzzer = SINGLE_MEDIUM_BEEP;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

      // Exit Internal 'Offset_Left': '<S674>:1325'
      // Exit Internal 'Aux_Enabled': '<S674>:1336'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gateway_IN_Offset_Right;

      // Entry Internal 'Offset_Right': '<S674>:1381'
      guard1 = false;
      if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S674>:1385'
        if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
          // Transition: '<S674>:1387'
          MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
            MX_Gateway_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S674>:1395'
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          enter_internal_Aux_Enabled_cso3();
        } else {
          // Transition: '<S674>:1388'
          aux_Inhibit = true;

          // Note 4
          // Transition: '<S674>:1389'
          guard1 = true;
        }
      } else {
        // Transition: '<S674>:1386'
        guard1 = true;
      }

      if (guard1) {
        MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
          MX_Gateway_IN_Mode_None_Offset;
        MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

        // Entry 'Mode_None_Offset': '<S674>:1422'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_OFFSET;
      }
    } else {
      // Transition: '<S674>:1321'
      // Exit Internal 'Offset_Left': '<S674>:1325'
      // Exit Internal 'Aux_Enabled': '<S674>:1336'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gateway_IN_Control_Fault;

      // Entry 'Control_Fault': '<S674>:1380'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      aux_Inhibit = true;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();
    }
  } else if (MX_Gateway_DWork.bitsForTID1.is_Offset_Left ==
             MX_Gateway_IN_Aux_Enabled) {
    // During 'Aux_Enabled': '<S674>:1336'
    if (MX_Gateway_B.UnitDelay8 == INACTIVE) {
      // Transition: '<S674>:1335'
      eeMirror.ee_ControlMode = EE_NA_NA;
      matlab_UpdateEEVar();

      // Exit Internal 'Aux_Enabled': '<S674>:1336'
      MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
        MX_Gateway_IN_Mode_Offset_None;
      MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Offset_None': '<S674>:1379'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_NONE;
    } else if (MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a ==
               MX_Gat_IN_Mode_Offset_Aux1_g0rt) {
      // During 'Mode_Offset_Aux1': '<S674>:1376'
      if (MX_Gateway_B.request && (state_CommSecondary == NORMAL)) {
        // Transition: '<S674>:1348'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:1349'
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
            MX_Gateway_IN_Mode_Offset_Aux4;

          // Entry 'Mode_Offset_Aux4': '<S674>:1375'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
        } else {
          // Transition: '<S674>:1350'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
            MX_Gat_IN_Mode_Offset_Aux1_g0rt;

          // Entry 'Mode_Offset_Aux1': '<S674>:1376'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
        }
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
      }
    } else {
      // During 'Mode_Offset_Aux4': '<S674>:1375'
      if (MX_Gateway_B.request) {
        // Transition: '<S674>:1353'
        check_RightNeutral = true;
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:1352'
          state_Buzzer = SINGLE_SHORT_BEEP;
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
            MX_Gat_IN_Mode_Offset_Aux1_g0rt;

          // Entry 'Mode_Offset_Aux1': '<S674>:1376'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX1;
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          eeMirror.ee_ControlMode = EE_LT_OF_A1;
          matlab_UpdateEEVar();
        } else {
          // Transition: '<S674>:1354'
          MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
            MX_Gateway_IN_Mode_Offset_Aux4;

          // Entry 'Mode_Offset_Aux4': '<S674>:1375'
          mode_LeftControl = MODE_LEFT_OFFSET;
          mode_RightControl = MODE_RIGHT_AUX4;
          eeMirror.ee_ControlMode = EE_LT_OF_A4;
          matlab_UpdateEEVar();
        }
      } else if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S674>:1351'
        // Transition: '<S674>:1317'
        // Transition: '<S674>:1316'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
          MX_Gateway_IN_Control_Fault;

        // Entry 'Control_Fault': '<S674>:1380'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        aux_Inhibit = true;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        eeMirror.ee_ControlMode = EE_NA_NA;
        matlab_UpdateEEVar();
      } else {
        check_LeftNeutral = false;
        check_RightNeutral = false;
      }
    }
  } else {
    // During 'Mode_Offset_None': '<S674>:1379'
    if (MX_Gateway_B.request) {
      // Transition: '<S674>:1332'
      state_Buzzer = TRIPLE_SHORT_BEEP;
      MX_Gateway_B.display_request = true;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;
      MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
        MX_Gateway_IN_Mode_Offset_None;
      MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

      // Entry 'Mode_Offset_None': '<S674>:1379'
      mode_LeftControl = MODE_LEFT_OFFSET;
      mode_RightControl = MODE_RIGHT_NONE;
    } else if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
      // Transition: '<S674>:1334'
      MX_Gateway_DWork.bitsForTID1.is_Offset_Left = MX_Gateway_IN_Aux_Enabled;

      // Entry 'Aux_Enabled': '<S674>:1336'
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      MX_G_enter_internal_Aux_Enabled();
    } else {
      check_LeftNeutral = false;
      check_RightNeutral = false;
      aux_Inhibit = false;
      if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 10U) {
        MX_Gateway_B.display_request = false;
      }

      if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 200U) {
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      }
    }
  }
}

// Function for Chart: '<S644>/Control Modes'
static void MX_Gateway_OptionB(const boolean_T *LogicalOperator2, const
  boolean_T *LogicalOperator2_ee3n, const boolean_T
  *FixPtRelationalOperator_l3ss)
{
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  boolean_T guard3 = false;
  boolean_T guard4 = false;
  boolean_T guard5 = false;
  boolean_T guard6 = false;
  boolean_T guard7 = false;
  boolean_T guard8 = false;

  // During 'OptionB': '<S674>:1262'
  guard1 = false;
  guard2 = false;
  guard3 = false;
  guard4 = false;
  guard5 = false;
  guard6 = false;
  guard7 = false;
  guard8 = false;
  switch (MX_Gateway_DWork.bitsForTID1.is_OptionB) {
   case MX_Gateway_IN_Delay_n3pi:
    // During 'Delay': '<S674>:1297'
    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq >= 20U) {
      // Transition: '<S674>:1279'
      if (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_RIGHT) {
        // Transition: '<S674>:1282'
        if (*LogicalOperator2_ee3n) {
          // Transition: '<S674>:1281'
          // Transition: '<S674>:1283'
          // Transition: '<S674>:1293'
          MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_Enabled_p4xh;
          MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
            MX_Gateway_IN_Offset_Right;

          // Entry Internal 'Offset_Right': '<S674>:1381'
          if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
            // Transition: '<S674>:1385'
            if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
              // Transition: '<S674>:1387'
              MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
                MX_Gateway_IN_Aux_Enabled;

              // Entry 'Aux_Enabled': '<S674>:1395'
              MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
              enter_internal_Aux_Enabled_cso3();
            } else {
              // Transition: '<S674>:1388'
              aux_Inhibit = true;

              // Note 4
              // Transition: '<S674>:1389'
              guard2 = true;
            }
          } else {
            // Transition: '<S674>:1386'
            guard2 = true;
          }
        } else {
          // Transition: '<S674>:1284'
          check_RightNeutral = true;
          guard3 = true;
        }
      } else {
        // Transition: '<S674>:1285'
        guard8 = true;
      }
    } else {
      if (state_CommSecondary == NO_COMMUNICATION) {
        // Transition: '<S674>:1280'
        guard8 = true;
      }
    }
    break;

   case MX_Gateway_IN_Enabled_p4xh:
    // During 'Enabled': '<S674>:1299'
    if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
        (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S674>:1275'
      // Exit Internal 'Enabled': '<S674>:1299'
      if (MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji ==
          MX_Gateway_IN_Control_Fault) {
        // Exit 'Control_Fault': '<S674>:1380'
        aux_Inhibit = false;
        MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      } else {
        MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Left': '<S674>:1325'
        // Exit Internal 'Aux_Enabled': '<S674>:1336'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

        // Exit Internal 'Offset_Right': '<S674>:1381'
        // Exit Internal 'Aux_Enabled': '<S674>:1395'
        MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
        MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
          MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      }

      MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_INIT_SystemCheck;

      // Entry 'INIT_SystemCheck': '<S674>:1294'
      mode_LeftControl = MODE_LEFT_NONE;
      mode_RightControl = MODE_RIGHT_NONE;
      MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
      aux_Inhibit = false;
      MX_Gateway_B.display_request = false;
      check_LeftNeutral = false;
      check_RightNeutral = false;
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji) {
       case MX_Gateway_IN_Control_Fault:
        // During 'Control_Fault': '<S674>:1380'
        if (MX_Gateway_B.FixPtRelationalOperator_hhgb && (can_OffsetSelectSw ==
             (int32_T)OFFSET_SELECT_RIGHT) && (state_CommSecondary == NORMAL)) {
          // Transition: '<S674>:1312'
          check_RightNeutral = true;

          // Transition: '<S674>:1314'
          if (*LogicalOperator2_ee3n) {
            // Transition: '<S674>:1323'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S674>:1380'
            aux_Inhibit = false;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
              MX_Gateway_IN_Offset_Right;

            // Entry Internal 'Offset_Right': '<S674>:1381'
            if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
              // Transition: '<S674>:1385'
              if (eeMirror.ee_ControlMode >= EE_RT_NA_OF) {
                // Transition: '<S674>:1387'
                MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
                  MX_Gateway_IN_Aux_Enabled;

                // Entry 'Aux_Enabled': '<S674>:1395'
                MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
                enter_internal_Aux_Enabled_cso3();
              } else {
                // Transition: '<S674>:1388'
                aux_Inhibit = true;

                // Note 4
                // Transition: '<S674>:1389'
                guard5 = true;
              }
            } else {
              // Transition: '<S674>:1386'
              guard5 = true;
            }
          } else {
            // Transition: '<S674>:1321'
            guard6 = true;
          }
        } else if (MX_Gateway_B.FixPtRelationalOperator_hhgb &&
                   (can_OffsetSelectSw == (int32_T)OFFSET_SELECT_LEFT) &&
                   (state_CommSecondary == NORMAL)) {
          // Transition: '<S674>:1322'
          check_LeftNeutral = true;

          // Transition: '<S674>:1315'
          if (*LogicalOperator2) {
            // Transition: '<S674>:1311'
            state_Buzzer = SINGLE_MEDIUM_BEEP;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = true;

            // Exit 'Control_Fault': '<S674>:1380'
            aux_Inhibit = false;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
              MX_Gateway_IN_Offset_Left;

            // Entry Internal 'Offset_Left': '<S674>:1325'
            if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
              // Transition: '<S674>:1328'
              if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
                // Transition: '<S674>:1330'
                MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
                  MX_Gateway_IN_Aux_Enabled;

                // Entry 'Aux_Enabled': '<S674>:1336'
                MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
                MX_G_enter_internal_Aux_Enabled();
              } else {
                // Transition: '<S674>:1331'
                aux_Inhibit = true;

                // Note 4
                // Transition: '<S674>:1333'
                guard7 = true;
              }
            } else {
              // Transition: '<S674>:1329'
              guard7 = true;
            }
          } else {
            // Transition: '<S674>:1313'
            guard6 = true;
          }
        } else {
          check_LeftNeutral = false;
          check_RightNeutral = false;

          // Note 2
        }
        break;

       case MX_Gateway_IN_Offset_Left:
        MX_Gateway_Offset_Left(LogicalOperator2_ee3n);
        break;

       default:
        MX_Gateway_Offset_Right(LogicalOperator2, LogicalOperator2_ee3n,
          FixPtRelationalOperator_l3ss);
        break;
      }
    }
    break;

   default:
    // During 'INIT_SystemCheck': '<S674>:1294'
    if ((state_Console == ACTIVE) && (state_System == SYS_NORMAL) &&
        (state_Engine != ENGINE_CRANKING) && flag_InitEERead) {
      // Transition: '<S674>:1276'
      if (state_CommSecondary == NORMAL) {
        // Transition: '<S674>:1277'
        MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_Delay_n3pi;
        MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;
      } else {
        // Transition: '<S674>:1278'
        if (state_CommSecondary == NO_COMMUNICATION) {
          // Transition: '<S674>:1286'
          // Transition: '<S674>:1289'
          // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
          if (*LogicalOperator2) {
            // Transition: '<S674>:1291'
            MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_Enabled_p4xh;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
              MX_Gateway_IN_Offset_Left;

            // Entry Internal 'Offset_Left': '<S674>:1325'
            if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
              // Transition: '<S674>:1328'
              if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
                // Transition: '<S674>:1330'
                MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
                  MX_Gateway_IN_Aux_Enabled;

                // Entry 'Aux_Enabled': '<S674>:1336'
                MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
                MX_G_enter_internal_Aux_Enabled();
              } else {
                // Transition: '<S674>:1331'
                aux_Inhibit = true;

                // Note 4
                // Transition: '<S674>:1333'
                guard1 = true;
              }
            } else {
              // Transition: '<S674>:1329'
              guard1 = true;
            }
          } else {
            // Transition: '<S674>:1288'
            check_LeftNeutral = true;

            // Transition: '<S674>:1287'
            // Transition: '<S674>:1290'
            // Transition: '<S674>:1292'
            MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_Enabled_p4xh;
            MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji =
              MX_Gateway_IN_Control_Fault;

            // Entry 'Control_Fault': '<S674>:1380'
            mode_LeftControl = MODE_LEFT_NONE;
            mode_RightControl = MODE_RIGHT_NONE;
            aux_Inhibit = true;
            MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
            eeMirror.ee_ControlMode = EE_NA_NA;
            matlab_UpdateEEVar();
          }
        }
      }
    }
    break;
  }

  if (guard8) {
    // Transition: '<S674>:1289'
    // [din_OffsetSelectSw == OFFSET_SELECT_LEFT]
    if (*LogicalOperator2) {
      // Transition: '<S674>:1291'
      MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_Enabled_p4xh;
      MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gateway_IN_Offset_Left;

      // Entry Internal 'Offset_Left': '<S674>:1325'
      if (MX_Gateway_B.UnitDelay8 != INACTIVE) {
        // Transition: '<S674>:1328'
        if (eeMirror.ee_ControlMode < EE_RT_NA_OF) {
          // Transition: '<S674>:1330'
          MX_Gateway_DWork.bitsForTID1.is_Offset_Left =
            MX_Gateway_IN_Aux_Enabled;

          // Entry 'Aux_Enabled': '<S674>:1336'
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          MX_G_enter_internal_Aux_Enabled();
        } else {
          // Transition: '<S674>:1331'
          aux_Inhibit = true;

          // Note 4
          // Transition: '<S674>:1333'
          guard4 = true;
        }
      } else {
        // Transition: '<S674>:1329'
        guard4 = true;
      }
    } else {
      // Transition: '<S674>:1288'
      check_LeftNeutral = true;
      guard3 = true;
    }
  }

  if (guard7) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Left = MX_Gateway_IN_Mode_Offset_None;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S674>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }

  if (guard6) {
    // Exit 'Control_Fault': '<S674>:1380'
    MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gateway_IN_Control_Fault;

    // Entry 'Control_Fault': '<S674>:1380'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }

  if (guard5) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
      MX_Gateway_IN_Mode_None_Offset;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S674>:1422'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
  }

  if (guard4) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Left = MX_Gateway_IN_Mode_Offset_None;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S674>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }

  if (guard3) {
    // Transition: '<S674>:1287'
    // Transition: '<S674>:1290'
    // Transition: '<S674>:1292'
    MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_Enabled_p4xh;
    MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gateway_IN_Control_Fault;

    // Entry 'Control_Fault': '<S674>:1380'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_NONE;
    aux_Inhibit = true;
    MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
  }

  if (guard2) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Right =
      MX_Gateway_IN_Mode_None_Offset;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_None_Offset': '<S674>:1422'
    mode_LeftControl = MODE_LEFT_NONE;
    mode_RightControl = MODE_RIGHT_OFFSET;
  }

  if (guard1) {
    MX_Gateway_DWork.bitsForTID1.is_Offset_Left = MX_Gateway_IN_Mode_Offset_None;
    MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;

    // Entry 'Mode_Offset_None': '<S674>:1379'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_NONE;
  }
}

// Function for Chart: '<S678>/DisplayAuxMode'
static void MX_Gateway_ReminderOfLastState(void)
{
  int32_T tmp;
  boolean_T guard1 = false;

  // During 'ReminderOfLastState': '<S682>:3'
  //  if time expires give up and stop remembering old state
  guard1 = false;
  if (MX_Gateway_DWork.flash_timer > CONSTANT_DATA->EMEA_CONTROLS_REMINDER_TIME)
  {
    // Transition: '<S682>:5'
    eeMirror.ee_ControlMode = EE_NA_NA;
    matlab_UpdateEEVar();
    guard1 = true;
  } else {
    //  Aux goes active or offset select switch was changed
    if ((MX_Gateway_B.UnitDelay8 != INACTIVE) || (eeMirror.ee_ControlMode ==
         EE_NA_NA)) {
      // Transition: '<S682>:7'
      guard1 = true;
    } else if ((state_Console != ACTIVE) || (state_System != SYS_NORMAL) ||
               (state_Engine == ENGINE_CRANKING)) {
      // Transition: '<S682>:167'
      // Exit Internal 'ReminderOfLastState': '<S682>:3'
      // Exit Internal 'FlashTimer': '<S682>:142'
      MX_Gateway_DWork.bitsForTID1.is_FlashTimer =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

      // Exit Internal 'Flasher': '<S682>:141'
      // Exit Internal 'A2FLASH_A1FLASH': '<S682>:34'
      MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_Flasher = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

      // Exit Internal 'A2FLASH_A4FLASH': '<S682>:75'
      MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

      // Exit Internal 'A4FLASH_A1FLASH': '<S682>:81'
      MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

      // Exit Internal 'A4FLASH_OF': '<S682>:46'
      MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

      // Exit Internal 'OF_A1FLASH': '<S682>:19'
      MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

      // Exit Internal 'OF_A4FLASH': '<S682>:28'
      MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway = MX_Gateway_IN_Init_lslf;

      // Entry 'Init': '<S682>:118'
      disp_LeftControl = mode_LeftControl;
      disp_RightControl = mode_RightControl;
      flag_AuxModeReminder = false;
    } else {
      // During 'Flasher': '<S682>:141'
      switch (MX_Gateway_DWork.bitsForTID1.is_Flasher) {
       case MX_Gateway_IN_A2FLASH_A1FLASH:
        // During 'A2FLASH_A1FLASH': '<S682>:34'
        switch (MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH) {
         case MX_Gateway_IN_GLOW_OFF:
          // During 'GLOW_OFF': '<S682>:129'
          if (!MX_Gateway_B.RateTransition12_piek) {
            // Transition: '<S682>:128'
            MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH =
              MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:38'
            disp_RightControl = MODE_RIGHT_AUX1;
            disp_LeftControl = MODE_LEFT_AUX2;
          }
          break;

         case MX_Gateway_IN_OFF_a3vv:
          // During 'OFF': '<S682>:39'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:37'
            MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH =
              MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:38'
            disp_RightControl = MODE_RIGHT_AUX1;
            disp_LeftControl = MODE_LEFT_AUX2;
          }
          break;

         default:
          // During 'ON': '<S682>:38'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:36'
            MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH =
              MX_Gateway_IN_OFF_a3vv;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'OFF': '<S682>:39'
            disp_RightControl = MODE_RIGHT_NONE;
            disp_LeftControl = MODE_LEFT_NONE;
          }
          break;
        }
        break;

       case MX_Gateway_IN_A2FLASH_A4FLASH:
        // During 'A2FLASH_A4FLASH': '<S682>:75'
        switch (MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH) {
         case MX_Gateway_IN_GLOW_OFF:
          // During 'GLOW_OFF': '<S682>:132'
          if (!MX_Gateway_B.RateTransition12_piek) {
            // Transition: '<S682>:131'
            MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH =
              MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:79'
            disp_RightControl = MODE_RIGHT_AUX4;
            disp_LeftControl = MODE_LEFT_AUX2;
          }
          break;

         case MX_Gateway_IN_OFF_a3vv:
          // During 'OFF': '<S682>:80'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:78'
            MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH =
              MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:79'
            disp_RightControl = MODE_RIGHT_AUX4;
            disp_LeftControl = MODE_LEFT_AUX2;
          }
          break;

         default:
          // During 'ON': '<S682>:79'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:77'
            MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH =
              MX_Gateway_IN_OFF_a3vv;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'OFF': '<S682>:80'
            disp_RightControl = MODE_RIGHT_NONE;
            disp_LeftControl = MODE_LEFT_NONE;
          }
          break;
        }
        break;

       case MX_Gateway_IN_A4FLASH_A1FLASH:
        // During 'A4FLASH_A1FLASH': '<S682>:81'
        switch (MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH) {
         case MX_Gateway_IN_GLOW_OFF:
          // During 'GLOW_OFF': '<S682>:138'
          if (!MX_Gateway_B.RateTransition12_piek) {
            // Transition: '<S682>:137'
            MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH =
              MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:85'
            disp_RightControl = MODE_RIGHT_AUX1;
            disp_LeftControl = MODE_LEFT_AUX4;
          }
          break;

         case MX_Gateway_IN_OFF_a3vv:
          // During 'OFF': '<S682>:86'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:84'
            MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH =
              MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:85'
            disp_RightControl = MODE_RIGHT_AUX1;
            disp_LeftControl = MODE_LEFT_AUX4;
          }
          break;

         default:
          // During 'ON': '<S682>:85'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:83'
            MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH =
              MX_Gateway_IN_OFF_a3vv;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'OFF': '<S682>:86'
            disp_RightControl = MODE_RIGHT_NONE;
            disp_LeftControl = MODE_LEFT_NONE;
          }
          break;
        }
        break;

       case MX_Gateway_IN_A4FLASH_OF:
        // During 'A4FLASH_OF': '<S682>:46'
        switch (MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF) {
         case MX_Gateway_IN_GLOW_OFF:
          // During 'GLOW_OFF': '<S682>:135'
          if (!MX_Gateway_B.RateTransition12_piek) {
            // Transition: '<S682>:134'
            MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF = MX_Gateway_IN_ON_lgyfn;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:50'
            disp_LeftControl = MODE_LEFT_AUX4;
          }
          break;

         case MX_Gateway_IN_ON_lgyfn:
          // During 'ON': '<S682>:50'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:48'
            MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF = MX_Gateway_IN_ON1;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON1': '<S682>:51'
            disp_LeftControl = MODE_LEFT_NONE;
          }
          break;

         default:
          // During 'ON1': '<S682>:51'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:49'
            MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF = MX_Gateway_IN_ON_lgyfn;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:50'
            disp_LeftControl = MODE_LEFT_AUX4;
          }
          break;
        }
        break;

       case MX_Gateway_IN_Default:
        // During 'Default': '<S682>:73'
        disp_LeftControl = mode_LeftControl;
        disp_RightControl = mode_RightControl;
        break;

       case MX_Gateway_IN_OF_A1FLASH:
        // During 'OF_A1FLASH': '<S682>:19'
        switch (MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH) {
         case MX_Gateway_IN_GLOW_OFF:
          // During 'GLOW_OFF': '<S682>:122'
          if (!MX_Gateway_B.RateTransition12_piek) {
            // Transition: '<S682>:24'
            MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH = MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:23'
            disp_RightControl = MODE_RIGHT_AUX1;
          }
          break;

         case MX_Gateway_IN_OFF_a3vv:
          // During 'OFF': '<S682>:25'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:27'
            MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH = MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:23'
            disp_RightControl = MODE_RIGHT_AUX1;
          }
          break;

         default:
          // During 'ON': '<S682>:23'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:26'
            MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH = MX_Gateway_IN_OFF_a3vv;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'OFF': '<S682>:25'
            disp_RightControl = MODE_RIGHT_NONE;
          }
          break;
        }
        break;

       default:
        // During 'OF_A4FLASH': '<S682>:28'
        switch (MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH) {
         case MX_Gateway_IN_GLOW_OFF:
          // During 'GLOW_OFF': '<S682>:127'
          if (!MX_Gateway_B.RateTransition12_piek) {
            // Transition: '<S682>:126'
            MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH = MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:32'
            disp_RightControl = MODE_RIGHT_AUX4;
          }
          break;

         case MX_Gateway_IN_OFF_a3vv:
          // During 'OFF': '<S682>:33'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:31'
            MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH = MX_Gateway_IN_ON_lgyf;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'ON': '<S682>:32'
            disp_RightControl = MODE_RIGHT_AUX4;
          }
          break;

         default:
          // During 'ON': '<S682>:32'
          if (MX_Gateway_DWork.temporalCounter_i1_dcja >=
              CONSTANT_DATA->EMEA_CONTROLS_FLASH_TIME) {
            // Transition: '<S682>:30'
            MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH = MX_Gateway_IN_OFF_a3vv;
            MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;

            // Entry 'OFF': '<S682>:33'
            disp_RightControl = MODE_RIGHT_NONE;
          }
          break;
        }
        break;
      }

      // During 'FlashTimer': '<S682>:142'
      switch (MX_Gateway_DWork.bitsForTID1.is_FlashTimer) {
       case MX_Gateway_IN_Expired:
        // During 'Expired': '<S682>:161'
        break;

       case MX_Gateway_IN_GlowCycle1:
        // During 'GlowCycle1': '<S682>:152'
        if (!MX_Gateway_B.RateTransition12_piek) {
          // Transition: '<S682>:155'
          MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gateway_IN_GlowOff;
        }
        break;

       case MX_Gateway_IN_GlowCycle2:
        // During 'GlowCycle2': '<S682>:159'
        if (!MX_Gateway_B.RateTransition12_piek) {
          // Transition: '<S682>:156'
          MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gateway_IN_GlowOff1;
        }
        break;

       case MX_Gateway_IN_GlowOff:
        // During 'GlowOff': '<S682>:154'
        if (MX_Gateway_B.RateTransition12_piek) {
          // Transition: '<S682>:158'
          MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gateway_IN_GlowCycle2;
        }
        break;

       case MX_Gateway_IN_GlowOff1:
        // During 'GlowOff1': '<S682>:157'
        if (MX_Gateway_DWork.flash_timer >
            CONSTANT_DATA->EMEA_CONTROLS_REMINDER_TIME) {
          // Transition: '<S682>:162'
          MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gateway_IN_Expired;
        } else {
          tmp = (int32_T)((int32_T)MX_Gateway_DWork.flash_timer + 1);
          if (tmp > 65535) {
            tmp = 65535;
          }

          MX_Gateway_DWork.flash_timer = (uint16_T)tmp;
        }
        break;

       default:
        // During 'No_Glow': '<S682>:150'
        if (MX_Gateway_B.RateTransition12_piek) {
          // Transition: '<S682>:153'
          MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gateway_IN_GlowCycle1;

          // Entry 'GlowCycle1': '<S682>:152'
          MX_Gateway_DWork.flash_timer = 0U;
        } else {
          tmp = (int32_T)((int32_T)MX_Gateway_DWork.flash_timer + 1);
          if (tmp > 65535) {
            tmp = 65535;
          }

          MX_Gateway_DWork.flash_timer = (uint16_T)tmp;
        }
        break;
      }
    }
  }

  if (guard1) {
    // Exit Internal 'ReminderOfLastState': '<S682>:3'
    // Exit Internal 'FlashTimer': '<S682>:142'
    MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'Flasher': '<S682>:141'
    // Exit Internal 'A2FLASH_A1FLASH': '<S682>:34'
    MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH =
      MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
    MX_Gateway_DWork.bitsForTID1.is_Flasher = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'A2FLASH_A4FLASH': '<S682>:75'
    MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH =
      MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'A4FLASH_A1FLASH': '<S682>:81'
    MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH =
      MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'A4FLASH_OF': '<S682>:46'
    MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'OF_A1FLASH': '<S682>:19'
    MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;

    // Exit Internal 'OF_A4FLASH': '<S682>:28'
    MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
    MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway = MX_Gateway_IN_Normal_jlzq;

    // Entry 'Normal': '<S682>:4'
    disp_LeftControl = mode_LeftControl;
    disp_RightControl = mode_RightControl;
    flag_AuxModeReminder = false;
  }
}

// System initialize for atomic system: '<S28>/EMEA Control Mode'
void MX_Gateway_EMEAControlMode_Init(void)
{
  // SystemInitialize for Chart: '<S644>/Right Handle Switch'
  MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.temporalCounter_i1_kvdn = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c99_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c99_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_B.request = false;

  // SystemInitialize for Chart: '<S644>/Left Handle Switch'
  MX_Gateway_DWork.temporalCounter_i1_o4hv = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c77_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_B.request_itgm = false;

  // SystemInitialize for Chart: '<S644>/Control Modes'
  MX_Gateway_DWork.bitsForTID1.is_OptionA = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Enabled = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_o1tb =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Left_Control_or_Diverter_Fau =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Enabled_nmji = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Offset_Left = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_go3a =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Offset_Right = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_n4x0 =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_OptionC = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Enabled_b3gu = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Offset_Left_jqr2 =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Offset_Right_bu5r =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Aux_Enabled_b3lp =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.temporalCounter_i1_gfbq = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c105_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c105_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.stored_ControlMode = 0U;
  MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
  mode_LeftControl = 0U;
  mode_RightControl = 0U;
  check_LeftNeutral = false;
  check_RightNeutral = false;
  aux_Inhibit = false;
  MX_Gateway_B.display_request = false;

  // SystemInitialize for Chart: '<S678>/DisplayAuxMode'
  MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_Flasher = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH = MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.temporalCounter_i1_dcja = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c100_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
  MX_Gateway_DWork.flash_timer = 0U;
  disp_LeftControl = 0U;
  disp_RightControl = 0U;
  flag_AuxModeReminder = false;
}

// Output and update for atomic system: '<S28>/EMEA Control Mode'
void MX_Gateway_EMEAControlMode(void)
{
  boolean_T LogicalOperator2;
  boolean_T LogicalOperator2_ee3n;
  boolean_T FixPtRelationalOperator_l3ss;

  // Chart: '<S644>/Right Handle Switch'
  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch
  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_kvdn < 65535U) {
    MX_Gateway_DWork.temporalCounter_i1_kvdn = (uint16_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i1_kvdn + 1);
  }

  // During: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c99_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch
    MX_Gateway_DWork.bitsForTID1.is_active_c99_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/Right Handle Switch 
    // Transition: '<S679>:78'
    MX_Gateway_DWork.bitsForTID1.is_c99_MX_Gateway =
      M_IN_Default_InactiveCheck_b5aa;

    // Entry 'Default_InactiveCheck': '<S679>:88'
    MX_Gateway_B.request = false;
  } else if (MX_Gateway_DWork.bitsForTID1.is_c99_MX_Gateway ==
             M_IN_Default_InactiveCheck_b5aa) {
    // During 'Default_InactiveCheck': '<S679>:88'
    if ((can_RightHandleSelectSw == (int32_T)INACTIVE) && (state_CommSecondary ==
         NORMAL)) {
      // Transition: '<S679>:89'
      MX_Gateway_DWork.bitsForTID1.is_c99_MX_Gateway = MX_Gateway_IN_Normal_jlzq;

      // Entry Internal 'Normal': '<S679>:107'
      // Transition: '<S679>:111'
      MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv = MX_Gateway_IN_Inactive_jlip;

      // Entry 'Inactive': '<S679>:77'
      MX_Gateway_B.request = false;
    }
  } else {
    // During 'Normal': '<S679>:107'
    if (state_CommSecondary != NORMAL) {
      // Transition: '<S679>:108'
      // Exit Internal 'Normal': '<S679>:107'
      MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv =
        MX_Gate_IN_NO_ACTIVE_CHILD_h0dd;
      MX_Gateway_DWork.bitsForTID1.is_c99_MX_Gateway =
        M_IN_Default_InactiveCheck_b5aa;

      // Entry 'Default_InactiveCheck': '<S679>:88'
      MX_Gateway_B.request = false;
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv) {
       case MX_Gateway_IN_Active_cxwq:
        // During 'Active': '<S679>:80'
        if (can_RightHandleSelectSw == (int32_T)INACTIVE) {
          // Transition: '<S679>:86'
          MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv =
            MX_Gateway_IN_Inactive_jlip;

          // Entry 'Inactive': '<S679>:77'
          MX_Gateway_B.request = false;
        } else {
          MX_Gateway_B.request = false;
        }
        break;

       case MX_Gatew_IN_DebounceActive_lwuo:
        // During 'DebounceActive': '<S679>:79'
        if (MX_Gateway_DWork.temporalCounter_i1_kvdn >=
            CONSTANT_DATA->EMEA_CONTROLS_HOLD_TIME) {
          // Transition: '<S679>:83'
          MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv =
            MX_Gateway_IN_Active_cxwq;

          // Entry 'Active': '<S679>:80'
          MX_Gateway_B.request = true;
        } else {
          if (can_RightHandleSelectSw == (int32_T)INACTIVE) {
            // Transition: '<S679>:82'
            MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv =
              MX_Gateway_IN_Inactive_jlip;

            // Entry 'Inactive': '<S679>:77'
            MX_Gateway_B.request = false;
          }
        }
        break;

       default:
        // During 'Inactive': '<S679>:77'
        if (can_RightHandleSelectSw == (int32_T)ACTIVE) {
          // Transition: '<S679>:81'
          MX_Gateway_DWork.bitsForTID1.is_Normal_hqrv =
            MX_Gatew_IN_DebounceActive_lwuo;
          MX_Gateway_DWork.temporalCounter_i1_kvdn = 0U;
        }
        break;
      }
    }
  }

  // End of Chart: '<S644>/Right Handle Switch'

  // Chart: '<S644>/Left Handle Switch'
  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch
  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_o4hv < 65535U) {
    MX_Gateway_DWork.temporalCounter_i1_o4hv = (uint16_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i1_o4hv + 1);
  }

  // During: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c77_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch
    MX_Gateway_DWork.bitsForTID1.is_active_c77_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/Left Handle Switch 
    // Transition: '<S677>:78'
    MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway =
      MX_Gat_IN_Default_InactiveCheck;

    // Entry 'Default_InactiveCheck': '<S677>:88'
    MX_Gateway_B.request_itgm = false;
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway) {
     case MX_Gateway_IN_Active_cxwq:
      // During 'Active': '<S677>:80'
      if (din_LeftHandleSelectSw == (int32_T)INACTIVE) {
        // Transition: '<S677>:86'
        MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway =
          MX_Gateway_IN_Inactive_aft1;

        // Entry 'Inactive': '<S677>:77'
        MX_Gateway_B.request_itgm = false;
      } else {
        MX_Gateway_B.request_itgm = false;
      }
      break;

     case MX_Gatew_IN_DebounceActive_lwuo:
      // During 'DebounceActive': '<S677>:79'
      if (MX_Gateway_DWork.temporalCounter_i1_o4hv >=
          CONSTANT_DATA->EMEA_CONTROLS_HOLD_TIME) {
        // Transition: '<S677>:83'
        MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway =
          MX_Gateway_IN_Active_cxwq;

        // Entry 'Active': '<S677>:80'
        MX_Gateway_B.request_itgm = true;
      } else {
        if (din_LeftHandleSelectSw == (int32_T)INACTIVE) {
          // Transition: '<S677>:82'
          MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway =
            MX_Gateway_IN_Inactive_aft1;

          // Entry 'Inactive': '<S677>:77'
          MX_Gateway_B.request_itgm = false;
        }
      }
      break;

     case MX_Gat_IN_Default_InactiveCheck:
      // During 'Default_InactiveCheck': '<S677>:88'
      if (din_LeftHandleSelectSw == (int32_T)INACTIVE) {
        // Transition: '<S677>:89'
        MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway =
          MX_Gateway_IN_Inactive_aft1;

        // Entry 'Inactive': '<S677>:77'
        MX_Gateway_B.request_itgm = false;
      }
      break;

     default:
      // During 'Inactive': '<S677>:77'
      if (din_LeftHandleSelectSw == (int32_T)ACTIVE) {
        // Transition: '<S677>:81'
        MX_Gateway_DWork.bitsForTID1.is_c77_MX_Gateway =
          MX_Gatew_IN_DebounceActive_lwuo;
        MX_Gateway_DWork.temporalCounter_i1_o4hv = 0U;
      }
      break;
    }
  }

  // End of Chart: '<S644>/Left Handle Switch'

  // Logic: '<S680>/Logical Operator2' incorporates:
  //   Constant: '<S683>/Constant'
  //   Constant: '<S684>/Constant'
  //   Constant: '<S685>/Constant'
  //   Constant: '<S686>/Constant'
  //   RelationalOperator: '<S683>/Compare'
  //   RelationalOperator: '<S684>/Compare'
  //   RelationalOperator: '<S685>/Compare'
  //   RelationalOperator: '<S686>/Compare'

  LogicalOperator2 = ((rm_LeftPot >= CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_LOW) &&
                      (rm_LeftPot <= CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_HIGH) &&
                      (state_LeftPot != OORH) && (state_LeftPot != OORL));

  // Logic: '<S681>/Logical Operator2' incorporates:
  //   Constant: '<S687>/Constant'
  //   Constant: '<S688>/Constant'
  //   Constant: '<S689>/Constant'
  //   Constant: '<S690>/Constant'
  //   RelationalOperator: '<S687>/Compare'
  //   RelationalOperator: '<S688>/Compare'
  //   RelationalOperator: '<S689>/Compare'
  //   RelationalOperator: '<S690>/Compare'

  LogicalOperator2_ee3n = ((rm_RightPot >=
    CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_LOW) && (rm_RightPot <=
    CONSTANT_DATA->EMEA_POT_CAL_DEADBAND_HIGH) && (state_RightPot != OORH) &&
    (state_RightPot != OORL));

  // Logic: '<S644>/Logical Operator' incorporates:
  //   Constant: '<S671>/Constant'
  //   Constant: '<S672>/Constant'
  //   Constant: '<S673>/Constant'
  //   RelationalOperator: '<S671>/Compare'
  //   RelationalOperator: '<S672>/Compare'
  //   RelationalOperator: '<S673>/Compare'

  MX_Gateway_B.LogicalOperator_ns15 = ((MX_Gateway_B.UnitDelay9_hk24 ==
    SHORT_TO_BATTERY) || (MX_Gateway_B.UnitDelay9_hk24 == SHORT_TO_GROUND) ||
    (MX_Gateway_B.UnitDelay9_hk24 == OPEN_CIRCUIT));

  // RelationalOperator: '<S676>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S676>/Delay Input1'

  FixPtRelationalOperator_l3ss = (MX_Gateway_B.UnitDelay8 !=
    MX_Gateway_DWork.DelayInput1_DSTATE_lrbn);

  // RelationalOperator: '<S675>/FixPt Relational Operator' incorporates:
  //   UnitDelay: '<S675>/Delay Input1'

  MX_Gateway_B.FixPtRelationalOperator_hhgb = (can_OffsetSelectSw !=
    MX_Gateway_DWork.DelayInput1_DSTATE_pfvq);

  // Chart: '<S644>/Control Modes'
  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_gfbq < 255U) {
    MX_Gateway_DWork.temporalCounter_i1_gfbq = (uint8_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i1_gfbq + 1);
  }

  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
  // During: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c105_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
    MX_Gateway_DWork.bitsForTID1.is_active_c105_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/Control Modes
    // Transition: '<S674>:164'
    MX_Gateway_DWork.bitsForTID1.is_c105_MX_Gateway =
      MX_Gatew_IN_Non_Functional_nbss;

    // Entry 'Non_Functional': '<S674>:163'
    mode_LeftControl = MODE_LEFT_OFFSET;
    mode_RightControl = MODE_RIGHT_AUX1;
    check_LeftNeutral = false;
    check_RightNeutral = false;
    MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
    aux_Inhibit = false;
    MX_Gateway_B.display_request = false;
    MX_Gateway_DWork.stored_ControlMode = EE_NA_NA;
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_c105_MX_Gateway) {
     case MX_Gatew_IN_Non_Functional_nbss:
      // During 'Non_Functional': '<S674>:163'
      if (CONSTANT_DATA->EMEA_CONTROLS_OPTION_A != NON_FUNCTIONAL) {
        // Transition: '<S674>:165'
        MX_Gateway_DWork.bitsForTID1.is_c105_MX_Gateway = MX_Gateway_IN_OptionA;

        // Entry Internal 'OptionA': '<S674>:162'
        // Transition: '<S674>:78'
        MX_Gateway_DWork.bitsForTID1.is_OptionA = MX_Gateway_IN_INIT_SystemCheck;

        // Entry 'INIT_SystemCheck': '<S674>:88'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gateway_B.display_request = false;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        check_LeftNeutral = false;
      } else if (CONSTANT_DATA->EMEA_CONTROLS_OPTION_B != NON_FUNCTIONAL) {
        // Transition: '<S674>:182'
        MX_Gateway_DWork.bitsForTID1.is_c105_MX_Gateway = MX_Gateway_IN_OptionB;

        // Entry Internal 'OptionB': '<S674>:1262'
        // Transition: '<S674>:1274'
        MX_Gateway_DWork.bitsForTID1.is_OptionB = MX_Gateway_IN_INIT_SystemCheck;

        // Entry 'INIT_SystemCheck': '<S674>:1294'
        mode_LeftControl = MODE_LEFT_NONE;
        mode_RightControl = MODE_RIGHT_NONE;
        MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
        aux_Inhibit = false;
        MX_Gateway_B.display_request = false;
        check_LeftNeutral = false;
        check_RightNeutral = false;
      } else {
        if (CONSTANT_DATA->EMEA_CONTROLS_OPTION_C != NON_FUNCTIONAL) {
          // Transition: '<S674>:183'
          MX_Gateway_DWork.bitsForTID1.is_c105_MX_Gateway =
            MX_Gateway_IN_OptionC;

          // Entry Internal 'OptionC': '<S674>:247'
          // Transition: '<S674>:411'
          MX_Gateway_DWork.bitsForTID1.is_OptionC =
            MX_Gateway_IN_INIT_SystemCheck;

          // Entry 'INIT_SystemCheck': '<S674>:406'
          mode_LeftControl = MODE_LEFT_NONE;
          mode_RightControl = MODE_RIGHT_NONE;
          MX_Gateway_B.flag_AuxEnableFlash_d0lk = false;
          aux_Inhibit = false;
          MX_Gateway_B.display_request = false;
          check_LeftNeutral = false;
          check_RightNeutral = false;
        }
      }
      break;

     case MX_Gateway_IN_OptionA:
      MX_Gateway_OptionA(&LogicalOperator2);
      break;

     case MX_Gateway_IN_OptionB:
      MX_Gateway_OptionB(&LogicalOperator2, &LogicalOperator2_ee3n,
                         &FixPtRelationalOperator_l3ss);
      break;

     default:
      MX_Gateway_OptionC(&LogicalOperator2, &LogicalOperator2_ee3n,
                         &FixPtRelationalOperator_l3ss);
      break;
    }
  }

  // End of Chart: '<S644>/Control Modes'

  // Chart: '<S678>/DisplayAuxMode'
  // Gateway: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_dcja < 65535U) {
    MX_Gateway_DWork.temporalCounter_i1_dcja = (uint16_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i1_dcja + 1);
  }

  // During: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c100_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
    MX_Gateway_DWork.bitsForTID1.is_active_c100_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/EMEA Control Mode/ModeDisplay/DisplayAuxMode 
    // Transition: '<S682>:2'
    MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway = MX_Gateway_IN_Init_lslf;

    // Entry 'Init': '<S682>:118'
    disp_LeftControl = mode_LeftControl;
    disp_RightControl = mode_RightControl;
    flag_AuxModeReminder = false;
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway) {
     case MX_Gateway_IN_Init_lslf:
      // During 'Init': '<S682>:118'
      // If previous mode did not have aux set just go to normal
      if ((((eeMirror.ee_ControlMode == EE_NA_NA) || (eeMirror.ee_ControlMode ==
             EE_LT_OF_NA) || (eeMirror.ee_ControlMode == EE_RT_NA_OF)) &&
           flag_InitEERead) || (CONSTANT_DATA->EMEA_CONTROLS_OPTION_A !=
           NON_FUNCTIONAL)) {
        // Transition: '<S682>:17'
        MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway =
          MX_Gateway_IN_Normal_jlzq;

        // Entry 'Normal': '<S682>:4'
        disp_LeftControl = mode_LeftControl;
        disp_RightControl = mode_RightControl;
        flag_AuxModeReminder = false;
      } else {
        // A control mode has been enabled
        if (flag_InitEERead && ((mode_LeftControl != MODE_LEFT_NONE) ||
                                (mode_RightControl != MODE_RIGHT_NONE)) &&
            (state_Console == ACTIVE) && (state_System == SYS_NORMAL) &&
            (state_Engine != ENGINE_CRANKING)) {
          // Transition: '<S682>:18'
          MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway =
            MX_Gateway_IN_OffsetCheck;
        }
      }
      break;

     case MX_Gateway_IN_Normal_jlzq:
      // During 'Normal': '<S682>:4'
      disp_LeftControl = mode_LeftControl;
      disp_RightControl = mode_RightControl;
      break;

     case MX_Gateway_IN_OffsetCheck:
      // During 'OffsetCheck': '<S682>:119'
      // offset select switch was changed
      if (((eeMirror.ee_ControlMode < EE_RT_NA_OF) && (mode_RightControl ==
            MODE_RIGHT_OFFSET)) || ((eeMirror.ee_ControlMode > EE_RT_NA_OF) &&
           (mode_LeftControl == MODE_LEFT_OFFSET))) {
        // Transition: '<S682>:121'
        MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway =
          MX_Gateway_IN_Normal_jlzq;

        // Entry 'Normal': '<S682>:4'
        disp_LeftControl = mode_LeftControl;
        disp_RightControl = mode_RightControl;
        flag_AuxModeReminder = false;
      } else {
        // Transition: '<S682>:120'
        MX_Gateway_DWork.bitsForTID1.is_c100_MX_Gateway =
          MX_Gatew_IN_ReminderOfLastState;

        // Entry 'ReminderOfLastState': '<S682>:3'
        flag_AuxModeReminder = true;

        // Entry Internal 'ReminderOfLastState': '<S682>:3'
        // Entry Internal 'Flasher': '<S682>:141'
        // Transition: '<S682>:14'
        if (eeMirror.ee_ControlMode == EE_LT_OF_A1) {
          // Transition: '<S682>:20'
          MX_Gateway_DWork.bitsForTID1.is_Flasher = MX_Gateway_IN_OF_A1FLASH;

          // Entry 'OF_A1FLASH': '<S682>:19'
          disp_LeftControl = MODE_LEFT_OFFSET;

          // Entry Internal 'OF_A1FLASH': '<S682>:19'
          // Transition: '<S682>:124'
          MX_Gateway_DWork.bitsForTID1.is_OF_A1FLASH = MX_Gateway_IN_GLOW_OFF;

          // Entry 'GLOW_OFF': '<S682>:122'
          disp_RightControl = MODE_RIGHT_NONE;
        } else {
          // Transition: '<S682>:59'
          if (eeMirror.ee_ControlMode == EE_LT_OF_A4) {
            // Transition: '<S682>:60'
            MX_Gateway_DWork.bitsForTID1.is_Flasher = MX_Gateway_IN_OF_A4FLASH;

            // Entry 'OF_A4FLASH': '<S682>:28'
            disp_LeftControl = MODE_LEFT_OFFSET;

            // Entry Internal 'OF_A4FLASH': '<S682>:28'
            // Transition: '<S682>:125'
            MX_Gateway_DWork.bitsForTID1.is_OF_A4FLASH = MX_Gateway_IN_GLOW_OFF;

            // Entry 'GLOW_OFF': '<S682>:127'
            disp_RightControl = MODE_RIGHT_NONE;
          } else {
            // Transition: '<S682>:62'
            if ((eeMirror.ee_ControlMode == EE_LT_A2_A1) ||
                (eeMirror.ee_ControlMode == EE_RT_A2_A1)) {
              // Transition: '<S682>:63'
              MX_Gateway_DWork.bitsForTID1.is_Flasher =
                MX_Gateway_IN_A2FLASH_A1FLASH;

              // Entry Internal 'A2FLASH_A1FLASH': '<S682>:34'
              // Transition: '<S682>:130'
              MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A1FLASH =
                MX_Gateway_IN_GLOW_OFF;

              // Entry 'GLOW_OFF': '<S682>:129'
              disp_RightControl = MODE_RIGHT_NONE;
              disp_LeftControl = MODE_LEFT_NONE;
            } else {
              // Transition: '<S682>:65'
              if (eeMirror.ee_ControlMode == EE_LT_A2_A4) {
                // Transition: '<S682>:66'
                MX_Gateway_DWork.bitsForTID1.is_Flasher =
                  MX_Gateway_IN_A2FLASH_A4FLASH;

                // Entry Internal 'A2FLASH_A4FLASH': '<S682>:75'
                // Transition: '<S682>:133'
                MX_Gateway_DWork.bitsForTID1.is_A2FLASH_A4FLASH =
                  MX_Gateway_IN_GLOW_OFF;

                // Entry 'GLOW_OFF': '<S682>:132'
                disp_RightControl = MODE_RIGHT_NONE;
                disp_LeftControl = MODE_LEFT_NONE;
              } else {
                // Transition: '<S682>:68'
                if (eeMirror.ee_ControlMode == EE_RT_A4_OF) {
                  // Transition: '<S682>:69'
                  MX_Gateway_DWork.bitsForTID1.is_Flasher =
                    MX_Gateway_IN_A4FLASH_OF;

                  // Entry 'A4FLASH_OF': '<S682>:46'
                  disp_RightControl = MODE_RIGHT_OFFSET;

                  // Entry Internal 'A4FLASH_OF': '<S682>:46'
                  // Transition: '<S682>:136'
                  MX_Gateway_DWork.bitsForTID1.is_A4FLASH_OF =
                    MX_Gateway_IN_GLOW_OFF;

                  // Entry 'GLOW_OFF': '<S682>:135'
                  disp_LeftControl = MODE_LEFT_NONE;
                } else {
                  // Transition: '<S682>:71'
                  if (eeMirror.ee_ControlMode == EE_RT_A4_A1) {
                    // Transition: '<S682>:72'
                    MX_Gateway_DWork.bitsForTID1.is_Flasher =
                      MX_Gateway_IN_A4FLASH_A1FLASH;

                    // Entry Internal 'A4FLASH_A1FLASH': '<S682>:81'
                    // Transition: '<S682>:139'
                    MX_Gateway_DWork.bitsForTID1.is_A4FLASH_A1FLASH =
                      MX_Gateway_IN_GLOW_OFF;

                    // Entry 'GLOW_OFF': '<S682>:138'
                    disp_RightControl = MODE_RIGHT_NONE;
                    disp_LeftControl = MODE_LEFT_NONE;
                  } else {
                    // Transition: '<S682>:74'
                    MX_Gateway_DWork.bitsForTID1.is_Flasher =
                      MX_Gateway_IN_Default;

                    // Entry 'Default': '<S682>:73'
                    disp_LeftControl = mode_LeftControl;
                    disp_RightControl = mode_RightControl;
                    flag_AuxModeReminder = false;
                  }
                }
              }
            }
          }
        }

        // Entry 'FlashTimer': '<S682>:142'
        MX_Gateway_DWork.flash_timer = 0U;

        // Entry Internal 'FlashTimer': '<S682>:142'
        // Transition: '<S682>:151'
        MX_Gateway_DWork.bitsForTID1.is_FlashTimer = MX_Gateway_IN_No_Glow;
      }
      break;

     default:
      MX_Gateway_ReminderOfLastState();
      break;
    }
  }

  // End of Chart: '<S678>/DisplayAuxMode'

  // Logic: '<S644>/Logical Operator1'
  flag_AuxEnableFlash = (flag_AuxModeReminder ||
    MX_Gateway_B.flag_AuxEnableFlash_d0lk);

  // Update for UnitDelay: '<S676>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_lrbn = MX_Gateway_B.UnitDelay8;

  // Update for UnitDelay: '<S675>/Delay Input1'
  MX_Gateway_DWork.DelayInput1_DSTATE_pfvq = can_OffsetSelectSw;
}

// System initialize for atomic system: '<S28>/ElectricAutomation'
void MX_Gate_ElectricAutomation_Init(void)
{
  // SystemInitialize for Chart: '<S645>/Chart1'
  MX_Gateway_DWork.bitsForTID2.is_active_c5_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_oq0v;
}

// Output and update for atomic system: '<S28>/ElectricAutomation'
void MX_Gateway_ElectricAutomation(void)
{
  uint32_T tmp;

  // Chart: '<S645>/Chart1'
  // Gateway: MX_Gtwy_Control/System/ElectricAutomation/Chart1
  // During: MX_Gtwy_Control/System/ElectricAutomation/Chart1
  if ((uint32_T)MX_Gateway_DWork.bitsForTID2.is_active_c5_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/ElectricAutomation/Chart1
    MX_Gateway_DWork.bitsForTID2.is_active_c5_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/ElectricAutomation/Chart1
    // Transition: '<S691>:193'
    MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway = MX_Gateway_IN_STOP;

    // Entry 'STOP': '<S691>:163'
    cmdInverter = CMD_INVERTER_GOTO_STOP;
  } else {
    switch (MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway) {
     case MX_Gateway_IN_CONNECTED:
      // During 'CONNECTED': '<S691>:164'
      if ((state_Inverter >= INVERTER_OPERATIONAL) && ((int32_T)din_RunEnter !=
           0)) {
        // Transition: '<S691>:179'
        // Exit 'CONNECTED': '<S691>:164'
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway =
          MX_Gateway_IN_OPERATIONAL;

        // Entry 'OPERATIONAL': '<S691>:165'
        cmdInverter = CMD_INVERTER_GOTO_READY;
      } else if ((state_Inverter <= INVERTER_OPERATIONAL) || (!((int32_T)
                   din_RunEnter != 0))) {
        // Transition: '<S691>:201'
        // Exit 'CONNECTED': '<S691>:164'
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway = MX_Gateway_IN_STOP;

        // Entry 'STOP': '<S691>:163'
        cmdInverter = CMD_INVERTER_GOTO_STOP;
      } else {
        cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      }
      break;

     case MX_Gateway_IN_OPERATIONAL:
      // During 'OPERATIONAL': '<S691>:165'
      if ((state_Inverter >= INVERTER_READY) && ((int32_T)din_RunEnter != 0)) {
        // Transition: '<S691>:180'
        // Exit 'OPERATIONAL': '<S691>:165'
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway = MX_Gateway_IN_READY;

        // Entry 'READY': '<S691>:168'
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      } else if ((state_Inverter < INVERTER_OPERATIONAL) || (!((int32_T)
                   din_RunEnter != 0))) {
        // Transition: '<S691>:200'
        // Exit 'OPERATIONAL': '<S691>:165'
        targetSpeed = 0U;
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway = MX_Gateway_IN_CONNECTED;

        // Entry 'CONNECTED': '<S691>:164'
        cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      } else {
        cmdInverter = CMD_INVERTER_GOTO_READY;
      }
      break;

     case MX_Gateway_IN_READY:
      // During 'READY': '<S691>:168'
      if ((state_Inverter >= INVERTER_RUN_FWD) && ((int32_T)din_RunEnter != 0))
      {
        // Transition: '<S691>:181'
        // Exit 'READY': '<S691>:168'
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway = MX_Gateway_IN_RUN_FWD;

        // Entry 'RUN_FWD': '<S691>:188'
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      } else if ((state_Inverter < INVERTER_READY) || (!((int32_T)din_RunEnter
                   != 0))) {
        // Transition: '<S691>:199'
        // Exit 'READY': '<S691>:168'
        targetSpeed = 0U;
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway =
          MX_Gateway_IN_OPERATIONAL;

        // Entry 'OPERATIONAL': '<S691>:165'
        cmdInverter = CMD_INVERTER_GOTO_READY;
      } else {
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      }
      break;

     case MX_Gateway_IN_RUN_FWD:
      // During 'RUN_FWD': '<S691>:188'
      if ((state_Inverter < INVERTER_RUN_FWD) || (!((int32_T)din_RunEnter != 0)))
      {
        // Transition: '<S691>:198'
        // Exit 'RUN_FWD': '<S691>:188'
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway = MX_Gateway_IN_READY;

        // Entry 'READY': '<S691>:168'
        cmdInverter = CMD_INVERTER_RUN_FWD;
        targetSpeed = 0U;
      } else {
        cmdInverter = CMD_INVERTER_RUN_FWD;
        tmp = (uint32_T)(10U * (uint32_T)ain_ThrottlePrimary);
        if (tmp > 65535U) {
          tmp = 65535U;
        }

        targetSpeed = (uint16_T)tmp;
      }
      break;

     default:
      // During 'STOP': '<S691>:163'
      if (state_Inverter >= INVERTER_CONNECTED) {
        // Transition: '<S691>:173'
        // Exit 'STOP': '<S691>:163'
        MX_Gateway_DWork.bitsForTID2.is_c5_MX_Gateway = MX_Gateway_IN_CONNECTED;

        // Entry 'CONNECTED': '<S691>:164'
        cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      } else {
        cmdInverter = CMD_INVERTER_GOTO_STOP;
      }
      break;
    }
  }

  // End of Chart: '<S645>/Chart1'
}

// System initialize for atomic system: '<S28>/Engine'
void MX_Gateway_Engine_Init(void)
{
  // SystemInitialize for Chart: '<S646>/Engine'
  MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir = MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
    MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING = MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gateway_DWork.bitsForTID1.is_active_c1_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c1_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
  MX_Gateway_DWork.debounceCount_n5vj = 0U;
  MX_Gateway_DWork.panelMissingDebounce = 0U;
  MX_Gateway_DWork.debouncePrimer = 0U;
  MX_Gateway_DWork.bitsForTID1.flag_PrimeComplete = false;
  state_Engine = 0U;
  state_TurboPrime = 0U;
}

// Output and update for atomic system: '<S28>/Engine'
void MX_Gateway_Engine(void)
{
  // Chart: '<S646>/Engine'
  // Gateway: MX_Gtwy_Control/System/Engine/Engine
  // During: MX_Gtwy_Control/System/Engine/Engine
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c1_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/Engine/Engine
    MX_Gateway_DWork.bitsForTID1.is_active_c1_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Engine/Engine
    // Transition: '<S692>:81'
    MX_Gateway_DWork.bitsForTID1.is_c1_MX_Gateway = MX_Gateway_IN_NORMAL_om4i;

    // Entry 'NORMAL': '<S692>:80'
    MX_Gateway_DWork.panelMissingDebounce = 0U;
    MX_Gateway_DWork.bitsForTID1.flag_PrimeComplete = false;
    state_TurboPrime = NORMAL;

    // Entry Internal 'NORMAL': '<S692>:80'
    // Transition: '<S692>:13'
    MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir = MX_Gateway_IN_NOT_RUNNING;
    MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING = MX_Gateway_IN_WAIT_TO_START;

    // Entry 'WAIT_TO_START': '<S692>:121'
    state_Engine = ENGINE_INITIALIZE;
    MX_Gateway_DWork.debounceCount_n5vj = 0U;
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_c1_MX_Gateway) {
     case MX_Gateway_IN_NORMAL_om4i:
      // During 'NORMAL': '<S692>:80'
      if ((can_ST_EStop == ACTIVE) || (can_ACD_EStop == ACTIVE)) {
        // Transition: '<S692>:19'
        // Exit Internal 'NORMAL': '<S692>:80'
        if (MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir ==
            MX_Gateway_IN_CRANKING_in3g) {
          // Exit Internal 'CRANKING': '<S692>:198'
          // Exit Internal 'FACTORY_TURBO_PRIMER': '<S692>:200'
          MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit 'CRANKING': '<S692>:198'
          state_TurboPrime = NORMAL;
          MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
        } else {
          MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit Internal 'NOT_RUNNING': '<S692>:1'
          MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
        }

        MX_Gateway_DWork.bitsForTID1.is_c1_MX_Gateway =
          MX_Gateway_IN_ST_SHUTDOWN;

        // Entry 'ST_SHUTDOWN': '<S692>:156'
        state_Engine = ENGINE_OFF;
        SendMsg_03_Now();
      } else if (state_Key == MULTIPLE) {
        // Transition: '<S692>:14'
        // Exit Internal 'NORMAL': '<S692>:80'
        if (MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir ==
            MX_Gateway_IN_CRANKING_in3g) {
          // Exit Internal 'CRANKING': '<S692>:198'
          // Exit Internal 'FACTORY_TURBO_PRIMER': '<S692>:200'
          MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit 'CRANKING': '<S692>:198'
          state_TurboPrime = NORMAL;
          MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
        } else {
          MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;

          // Exit Internal 'NOT_RUNNING': '<S692>:1'
          MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
            MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
        }

        MX_Gateway_DWork.bitsForTID1.is_c1_MX_Gateway =
          MX_Gateway_IN_SHUTDOWN_k1ph;

        // Entry 'SHUTDOWN': '<S692>:4'
        state_Engine = SHUTDOWN;
        SendMsg_03_Now();
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir) {
         case MX_Gateway_IN_CRANKING_in3g:
          // During 'CRANKING': '<S692>:198'
          if ((state_EngineStart != ACTIVE) || (state_Key != ACTIVE) ||
              (state_System != SYS_NORMAL) ||
              ((CONSTANT_DATA->EMEA_CONSOLE_CRANK_INHIBIT != NON_FUNCTIONAL) &&
               (state_Console != INACTIVE)) || (ecu_EngineStarterMode ==
               STARTER_INHIBITED)) {
            // Transition: '<S692>:12'
            // Exit Internal 'CRANKING': '<S692>:198'
            // Exit Internal 'FACTORY_TURBO_PRIMER': '<S692>:200'
            MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
              MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;

            // Exit 'CRANKING': '<S692>:198'
            state_TurboPrime = NORMAL;
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
              MX_Gateway_IN_NOT_RUNNING;

            // Entry Internal 'NOT_RUNNING': '<S692>:1'
            // Transition: '<S692>:120'
            MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
              MX_Gateway_IN_NOT_RUNNING_psez;

            // Entry 'NOT_RUNNING': '<S692>:119'
            state_Engine = ENGINE_NOT_RUNNING;
            SendMsg_03_Now();
          } else if (flt_EngineSpeed >= CONSTANT_DATA->ENGINE_SPEED_RUNNING) {
            // Transition: '<S692>:8'
            // Exit Internal 'CRANKING': '<S692>:198'
            // Exit Internal 'FACTORY_TURBO_PRIMER': '<S692>:200'
            MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
              MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;

            // Exit 'CRANKING': '<S692>:198'
            state_TurboPrime = NORMAL;
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir = MX_Gateway_IN_RUNNING;

            // Entry 'RUNNING': '<S692>:135'
            state_Engine = ENGINE_RUNNING;
            SendMsg_03_Now();
          } else {
            // During 'FACTORY_TURBO_PRIMER': '<S692>:200'
            switch (MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER) {
             case MX_Gateway_IN_CHECK_HOUR_METER:
              // During 'CHECK_HOUR_METER': '<S692>:208'
              // Transition: '<S692>:204'
              if ((CONSTANT_DATA->FACTORY_TURBO_PRIME_FUNCTION != NON_FUNCTIONAL)
                  && ((actualHourMeter <=
                       CONSTANT_DATA->FACTORY_TURBO_PRIME_HOUR_ENABLE) ||
                      (dv_TurboPrime == TURBO_PRIME_ACTIVE)) &&
                  (!MX_Gateway_DWork.bitsForTID1.flag_PrimeComplete)) {
                // Transition: '<S692>:203'
                MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
                  MX_G_IN_PREVENT_FUEL_MSG_ACTIVE;

                // Entry 'PREVENT_FUEL_MSG_ACTIVE': '<S692>:209'
                state_Engine = ENGINE_CRANKING;
                SendMsg_03_Now();
                MX_Gateway_DWork.debouncePrimer = 0U;
              } else {
                // Transition: '<S692>:205'
                MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
                  MX_Gatew_IN_HOUR_METER_EXCEEDED;

                // Entry 'HOUR_METER_EXCEEDED': '<S692>:210'
                state_Engine = ENGINE_CRANKING;
                SendMsg_03_Now();
              }
              break;

             case MX_Gatew_IN_HOUR_METER_EXCEEDED:
              state_Engine = ENGINE_CRANKING;

              // During 'HOUR_METER_EXCEEDED': '<S692>:210'
              break;

             case MX_Gateway_IN_PAUSE:
              state_Engine = ENGINE_NOT_RUNNING;

              // During 'PAUSE': '<S692>:213'
              if (MX_Gateway_DWork.debouncePrimer >=
                  CONSTANT_DATA->FACTORY_TURBO_PRIME_DEBOUNCE_WAIT) {
                // Transition: '<S692>:207'
                MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
                  MX_IN_PREVENT_FUEL_MSG_INACTIVE;

                // Entry 'PREVENT_FUEL_MSG_INACTIVE': '<S692>:212'
                state_Engine = ENGINE_CRANKING;
                SendMsg_03_Now();
              } else {
                MX_Gateway_DWork.debouncePrimer = (uint16_T)(int32_T)((int32_T)
                  MX_Gateway_DWork.debouncePrimer + 1);
                SendMsg_DPM2_Now();
              }
              break;

             case MX_G_IN_PREVENT_FUEL_MSG_ACTIVE:
              state_Engine = ENGINE_CRANKING;

              // During 'PREVENT_FUEL_MSG_ACTIVE': '<S692>:209'
              if (MX_Gateway_DWork.debouncePrimer >=
                  CONSTANT_DATA->FACTORY_TURBO_PRIME_DEBOUNCE_DISABLE_FUEL) {
                // Transition: '<S692>:206'
                MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
                  MX_Gateway_IN_PAUSE;

                // Entry 'PAUSE': '<S692>:213'
                state_Engine = ENGINE_NOT_RUNNING;
                SendMsg_03_Now();
                MX_Gateway_DWork.debouncePrimer = 0U;
                MX_Gateway_DWork.bitsForTID1.flag_PrimeComplete = true;
                state_TurboPrime = NORMAL;
              } else {
                SendMsg_DPM2_Now();
                MX_Gateway_DWork.debouncePrimer = (uint16_T)(int32_T)((int32_T)
                  MX_Gateway_DWork.debouncePrimer + 1);
                state_TurboPrime = ACTIVE;
              }
              break;

             default:
              state_Engine = ENGINE_CRANKING;

              // During 'PREVENT_FUEL_MSG_INACTIVE': '<S692>:212'
              break;
            }
          }
          break;

         case MX_Gateway_IN_NOT_RUNNING:
          // During 'NOT_RUNNING': '<S692>:1'
          if ((flt_EngineSpeed >= CONSTANT_DATA->ENGINE_SPEED_RUNNING) &&
              (state_System == SYS_NORMAL)) {
            // Transition: '<S692>:10'
            // Exit Internal 'NOT_RUNNING': '<S692>:1'
            MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
              MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir = MX_Gateway_IN_RUNNING;

            // Entry 'RUNNING': '<S692>:135'
            state_Engine = ENGINE_RUNNING;
            SendMsg_03_Now();
          } else if ((state_EngineStart == ACTIVE) && (state_Key == ACTIVE) &&
                     (state_System == SYS_NORMAL) &&
                     ((CONSTANT_DATA->EMEA_CONSOLE_CRANK_INHIBIT ==
                       NON_FUNCTIONAL) || (state_Console == INACTIVE)) &&
                     (((state_CommECU == NORMAL) && (ecu_EngineStarterMode !=
                        STARTER_INHIBITED) && (state_Engine ==
                        ENGINE_NOT_RUNNING)) || (CONSTANT_DATA->ECU_FUNCTION ==
                       NON_FUNCTIONAL))) {
            // Transition: '<S692>:7'
            // Exit Internal 'NOT_RUNNING': '<S692>:1'
            MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
              MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
              MX_Gateway_IN_CRANKING_in3g;

            // Entry Internal 'CRANKING': '<S692>:198'
            // Transition: '<S692>:199'
            // Entry Internal 'FACTORY_TURBO_PRIMER': '<S692>:200'
            // Transition: '<S692>:202'
            MX_Gateway_DWork.bitsForTID1.is_FACTORY_TURBO_PRIMER =
              MX_Gateway_IN_CHECK_HOUR_METER;
          } else if (MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING ==
                     MX_Gateway_IN_NOT_RUNNING_psez) {
            state_Engine = ENGINE_NOT_RUNNING;

            // During 'NOT_RUNNING': '<S692>:119'
          } else {
            state_Engine = ENGINE_INITIALIZE;

            // During 'WAIT_TO_START': '<S692>:121'
            if (((MX_Gateway_DWork.debounceCount_n5vj >=
                  CONSTANT_DATA->ECU_DEBOUNCE_WAIT_TO_START) && (state_CommECU ==
                  NORMAL)) || (CONSTANT_DATA->ECU_FUNCTION == NON_FUNCTIONAL)) {
              // Transition: '<S692>:122'
              MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
                MX_Gateway_IN_NOT_RUNNING_psez;

              // Entry 'NOT_RUNNING': '<S692>:119'
              state_Engine = ENGINE_NOT_RUNNING;
              SendMsg_03_Now();
            } else {
              MX_Gateway_DWork.debounceCount_n5vj = (uint16_T)(int32_T)((int32_T)
                MX_Gateway_DWork.debounceCount_n5vj + 1);
            }
          }
          break;

         default:
          state_Engine = ENGINE_RUNNING;

          // During 'RUNNING': '<S692>:135'
          if ((MX_Gateway_B.RateTransition13_gcbk == SHUTDOWN) ||
              (MX_Gateway_B.RateTransition57 == SHUTDOWN) ||
              (MX_Gateway_B.RateTransition19_fh5v == SHUTDOWN) ||
              (state_EngineSpeed == SHUTDOWN) ||
              (MX_Gateway_B.RateTransition2_c3je == SHUTDOWN) ||
              (state_KeylessPanel == NO_COMMUNICATION) || (((state_CommECU ==
                 NO_COMMUNICATION) || (MX_Gateway_B.UnitDelay10_kkg2 == SHUTDOWN))
               && (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL)) ||
              (MX_Gateway_DWork.panelMissingDebounce >
               CONSTANT_DATA->PANEL_SHUTDOWN_DEBOUNCE)) {
            // Transition: '<S692>:9'
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
              MX_Gate_IN_NO_ACTIVE_CHILD_fnqb;
            MX_Gateway_DWork.bitsForTID1.is_c1_MX_Gateway =
              MX_Gateway_IN_SHUTDOWN_k1ph;

            // Entry 'SHUTDOWN': '<S692>:4'
            state_Engine = SHUTDOWN;
            SendMsg_03_Now();
          } else if ((flt_EngineSpeed <= CONSTANT_DATA->ENGINE_SPEED_NOT_RUNNING)
                     || (state_System != SYS_NORMAL)) {
            // Transition: '<S692>:11'
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir =
              MX_Gateway_IN_NOT_RUNNING;

            // Entry Internal 'NOT_RUNNING': '<S692>:1'
            // Transition: '<S692>:120'
            MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
              MX_Gateway_IN_NOT_RUNNING_psez;

            // Entry 'NOT_RUNNING': '<S692>:119'
            state_Engine = ENGINE_NOT_RUNNING;
            SendMsg_03_Now();
          } else {
            // Transition: '<S692>:175'
            if ((CONSTANT_DATA->PANEL_SHUTDOWN_FUNCTION != NON_FUNCTIONAL) &&
                (din_RemoteKey != ACTIVE) && ((MX_Gateway_B.UnitDelay2_nwqf ==
                  NO_COMMUNICATION) || (state_DeluxeG5 == NO_COMMUNICATION) ||
                 (MX_Gateway_B.UnitDelay9_hk24 == NO_COMMUNICATION))) {
              // Transition: '<S692>:179'
              // Transition: '<S692>:181'
              MX_Gateway_DWork.panelMissingDebounce = (uint16_T)(int32_T)
                ((int32_T)MX_Gateway_DWork.panelMissingDebounce + 1);

              // Transition: '<S692>:182'
            } else {
              // Transition: '<S692>:177'
              MX_Gateway_DWork.panelMissingDebounce = 0U;
            }

            // Transition: '<S692>:184'
          }
          break;
        }
      }
      break;

     case MX_Gateway_IN_SHUTDOWN_k1ph:
      state_Engine = SHUTDOWN;

      // During 'SHUTDOWN': '<S692>:4'
      break;

     default:
      state_Engine = ENGINE_OFF;

      // During 'ST_SHUTDOWN': '<S692>:156'
      if ((can_ST_EStop == INACTIVE) && (can_ACD_EStop == INACTIVE)) {
        // Transition: '<S692>:20'
        MX_Gateway_DWork.bitsForTID1.is_c1_MX_Gateway =
          MX_Gateway_IN_NORMAL_om4i;

        // Entry 'NORMAL': '<S692>:80'
        MX_Gateway_DWork.panelMissingDebounce = 0U;
        MX_Gateway_DWork.bitsForTID1.flag_PrimeComplete = false;
        state_TurboPrime = NORMAL;

        // Entry Internal 'NORMAL': '<S692>:80'
        // Transition: '<S692>:13'
        MX_Gateway_DWork.bitsForTID1.is_NORMAL_m3ir = MX_Gateway_IN_NOT_RUNNING;
        MX_Gateway_DWork.bitsForTID1.is_NOT_RUNNING =
          MX_Gateway_IN_WAIT_TO_START;

        // Entry 'WAIT_TO_START': '<S692>:121'
        state_Engine = ENGINE_INITIALIZE;
        MX_Gateway_DWork.debounceCount_n5vj = 0U;
      }
      break;
    }
  }

  // End of Chart: '<S646>/Engine'
}

// System initialize for enable system: '<S28>/Keyless_Entry'
void MX_Gateway_Keyless_Entry_Init(void)
{
  // SystemInitialize for Chart: '<S647>/CabKeyDetection'
  MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.temporalCounter_i1_bmmc = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c101_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_B.cabKeyDetect_biu0 = false;

  // SystemInitialize for Chart: '<S647>/Indicators'
  MX_Gateway_DWork.bitsForTID1.is_FAIL = MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.bitsForTID1.is_FLASHING = MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.temporalCounter_i1_nzvt = 0U;
  MX_Gateway_DWork.temporalCounter_i2_n5yb = 0U;
  MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.bitsForTID1.is_active_c71_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c71_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_B.ind_KeylessEntryLock_hls2 = false;
  MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = false;

  // SystemInitialize for Chart: '<S647>/Power_Hold'
  MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c70_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_B.state_KeylessEntryPowerHol_onfv = 0U;
}

// System reset for enable system: '<S28>/Keyless_Entry'
void MX_Gateway_Keyless_Entry_Reset(void)
{
  // SystemReset for Chart: '<S647>/CabKeyDetection'
  MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.temporalCounter_i1_bmmc = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c101_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_B.cabKeyDetect_biu0 = false;

  // SystemReset for Chart: '<S647>/Indicators'
  MX_Gateway_DWork.bitsForTID1.is_FAIL = MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.bitsForTID1.is_FLASHING = MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.temporalCounter_i1_nzvt = 0U;
  MX_Gateway_DWork.temporalCounter_i2_n5yb = 0U;
  MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_DWork.bitsForTID1.is_active_c71_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c71_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_B.ind_KeylessEntryLock_hls2 = false;
  MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = false;

  // SystemReset for Chart: '<S647>/Power_Hold'
  MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c70_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
  MX_Gateway_B.state_KeylessEntryPowerHol_onfv = 0U;
}

// Disable for enable system: '<S28>/Keyless_Entry'
void MX_Gatewa_Keyless_Entry_Disable(void)
{
  // Disable for Outport: '<S647>/ind_KeylessEntryLock'
  ind_KeylessEntryLock = false;

  // Disable for Outport: '<S647>/ind_KeylessEntryUnlock'
  ind_KeylessEntryUnlock = false;
  MX_Gateway_DWork.Keyless_Entry_MODE = false;
}

// Output and update for enable system: '<S28>/Keyless_Entry'
void MX_Gateway_Keyless_Entry(void)
{
  // Outputs for Enabled SubSystem: '<S28>/Keyless_Entry' incorporates:
  //   EnablePort: '<S647>/Enable'

  if (MX_Gateway_B.Compare) {
    if (!MX_Gateway_DWork.Keyless_Entry_MODE) {
      MX_Gateway_Keyless_Entry_Reset();
      MX_Gateway_DWork.Keyless_Entry_MODE = true;
    }

    // Chart: '<S647>/CabKeyDetection'
    // Gateway: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_bmmc < 7U) {
      MX_Gateway_DWork.temporalCounter_i1_bmmc = (uint8_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i1_bmmc + 1);
    }

    // During: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c101_MX_Gateway == 0U)
    {
      // Entry: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
      MX_Gateway_DWork.bitsForTID1.is_active_c101_MX_Gateway = 1U;

      // Entry Internal: MX_Gtwy_Control/System/Keyless_Entry/CabKeyDetection
      // Transition: '<S693>:55'
      MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway =
        MX_Gatewa_IN_Engine_Not_Running;

      // Entry Internal 'Engine_Not_Running': '<S693>:54'
      // Transition: '<S693>:41'
      MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
        MX_Gate_IN_WaitForSwitchedPower;

      // Entry 'WaitForSwitchedPower': '<S693>:40'
      MX_Gateway_B.cabKeyDetect_biu0 = false;
    } else if (MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway ==
               MX_Gateway_IN_Detected) {
      // During 'Detected': '<S693>:45'
    } else {
      // During 'Engine_Not_Running': '<S693>:54'
      // Condition1
      if ((state_Engine == ENGINE_RUNNING) || (state_Engine == ENGINE_CRANKING))
      {
        // Transition: '<S693>:56'
        // Exit Internal 'Engine_Not_Running': '<S693>:54'
        MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
          MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway = MX_Gateway_IN_Detected;

        // Entry 'Detected': '<S693>:45'
        MX_Gateway_B.cabKeyDetect_biu0 = true;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running) {
         case MX_Gateway_IN_CabKeyCycle:
          // During 'CabKeyCycle': '<S693>:50'
          // Condition4
          if ((int32_T)din_RunEnter != 0) {
            // Transition: '<S693>:52'
            MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
              MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
            MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway =
              MX_Gateway_IN_Detected;

            // Entry 'Detected': '<S693>:45'
            MX_Gateway_B.cabKeyDetect_biu0 = true;
          }
          break;

         case MX_Gateway_IN_Timer:
          // During 'Timer': '<S693>:43'
          // Condition2
          if (((int32_T)MX_Gateway_DWork.temporalCounter_i1_bmmc >= 4) &&
              ((int32_T)din_RunEnter != 0)) {
            // Transition: '<S693>:46'
            MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
              MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
            MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway =
              MX_Gateway_IN_Detected;

            // Entry 'Detected': '<S693>:45'
            MX_Gateway_B.cabKeyDetect_biu0 = true;
          } else {
            if (!((int32_T)din_RunEnter != 0)) {
              // Transition: '<S693>:51'
              MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
                MX_Gateway_IN_CabKeyCycle;
            }
          }
          break;

         default:
          // During 'WaitForSwitchedPower': '<S693>:40'
          // Condition3
          if (!((int32_T)din_RunEnter != 0)) {
            // Transition: '<S693>:53'
            MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
              MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
            MX_Gateway_DWork.bitsForTID1.is_c101_MX_Gateway =
              MX_Gateway_IN_Detected;

            // Entry 'Detected': '<S693>:45'
            MX_Gateway_B.cabKeyDetect_biu0 = true;
          } else {
            if (din_SwPowerRelay) {
              // Transition: '<S693>:44'
              MX_Gateway_DWork.bitsForTID1.is_Engine_Not_Running =
                MX_Gateway_IN_Timer;
              MX_Gateway_DWork.temporalCounter_i1_bmmc = 0U;
            }
          }
          break;
        }
      }
    }

    // End of Chart: '<S647>/CabKeyDetection'

    // Chart: '<S647>/Indicators'
    // Gateway: MX_Gtwy_Control/System/Keyless_Entry/Indicators
    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_nzvt < 65535U) {
      MX_Gateway_DWork.temporalCounter_i1_nzvt = (uint16_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i1_nzvt + 1);
    }

    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i2_n5yb < 65535U) {
      MX_Gateway_DWork.temporalCounter_i2_n5yb = (uint16_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i2_n5yb + 1);
    }

    // During: MX_Gtwy_Control/System/Keyless_Entry/Indicators
    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c71_MX_Gateway == 0U) {
      // Entry: MX_Gtwy_Control/System/Keyless_Entry/Indicators
      MX_Gateway_DWork.bitsForTID1.is_active_c71_MX_Gateway = 1U;

      // Entry Internal: MX_Gtwy_Control/System/Keyless_Entry/Indicators
      // Transition: '<S694>:49'
      MX_Gateway_DWork.bitsForTID1.is_c71_MX_Gateway = MX_Gateway_IN_NORMAL_e2vv;

      // Entry Internal 'NORMAL': '<S694>:37'
      // Transition: '<S694>:28'
      MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gateway_IN_BOTH_OFF;

      // Entry 'BOTH_OFF': '<S694>:27'
      MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
      MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
    } else if (MX_Gateway_DWork.bitsForTID1.is_c71_MX_Gateway ==
               MX_Gateway_IN_FAIL_pabs) {
      // During 'FAIL': '<S694>:31'
      if (state_KeylessEntryPassword != KE_FAIL) {
        // Transition: '<S694>:42'
        // Exit Internal 'FAIL': '<S694>:31'
        // Exit Internal 'FLASHING': '<S694>:51'
        MX_Gateway_DWork.bitsForTID1.is_FLASHING =
          MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gateway_DWork.bitsForTID1.is_FAIL = MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gateway_DWork.bitsForTID1.is_c71_MX_Gateway =
          MX_Gateway_IN_NORMAL_e2vv;

        // Entry Internal 'NORMAL': '<S694>:37'
        // Transition: '<S694>:28'
        MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gateway_IN_BOTH_OFF;

        // Entry 'BOTH_OFF': '<S694>:27'
        MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
        MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
      } else if (MX_Gateway_DWork.bitsForTID1.is_FAIL == MX_Gateway_IN_FLASHING)
      {
        // During 'FLASHING': '<S694>:51'
        if (MX_Gateway_DWork.temporalCounter_i1_nzvt >=
            CONSTANT_DATA->KEYLESS_ENTRY_DETECTED_TIMEOUT) {
          // Transition: '<S694>:53'
          // Exit Internal 'FLASHING': '<S694>:51'
          MX_Gateway_DWork.bitsForTID1.is_FLASHING =
            MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
          MX_Gateway_DWork.bitsForTID1.is_FAIL = MX_Gateway_IN_TIMEOUT;

          // Entry 'TIMEOUT': '<S694>:50'
          MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
          MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
        } else if (MX_Gateway_DWork.bitsForTID1.is_FLASHING ==
                   MX_Gateway_IN_ACTIVE_ai5f) {
          // During 'ACTIVE': '<S694>:35'
          if (MX_Gateway_DWork.temporalCounter_i2_n5yb >=
              CONSTANT_DATA->KEYLESS_ENTRY_FLASH_RATE) {
            // Transition: '<S694>:34'
            MX_Gateway_DWork.bitsForTID1.is_FLASHING =
              MX_Gateway_IN_INACTIVE_k4dz;
            MX_Gateway_DWork.temporalCounter_i2_n5yb = 0U;

            // Entry 'INACTIVE': '<S694>:36'
            MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
            MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
          }
        } else {
          // During 'INACTIVE': '<S694>:36'
          if (MX_Gateway_DWork.temporalCounter_i2_n5yb >=
              CONSTANT_DATA->KEYLESS_ENTRY_FLASH_RATE) {
            // Transition: '<S694>:33'
            MX_Gateway_DWork.bitsForTID1.is_FLASHING = MX_Gateway_IN_ACTIVE_ai5f;
            MX_Gateway_DWork.temporalCounter_i2_n5yb = 0U;

            // Entry 'ACTIVE': '<S694>:35'
            MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
            MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE != 0);
          }
        }
      } else {
        // During 'TIMEOUT': '<S694>:50'
      }
    } else {
      // During 'NORMAL': '<S694>:37'
      if (state_KeylessEntryPassword == KE_FAIL) {
        // Transition: '<S694>:41'
        // Exit Internal 'NORMAL': '<S694>:37'
        MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 =
          MX_Gate_IN_NO_ACTIVE_CHILD_nkri;
        MX_Gateway_DWork.bitsForTID1.is_c71_MX_Gateway = MX_Gateway_IN_FAIL_pabs;

        // Entry Internal 'FAIL': '<S694>:31'
        // Transition: '<S694>:52'
        MX_Gateway_DWork.bitsForTID1.is_FAIL = MX_Gateway_IN_FLASHING;
        MX_Gateway_DWork.temporalCounter_i1_nzvt = 0U;

        // Entry Internal 'FLASHING': '<S694>:51'
        // Transition: '<S694>:32'
        MX_Gateway_DWork.bitsForTID1.is_FLASHING = MX_Gateway_IN_ACTIVE_ai5f;
        MX_Gateway_DWork.temporalCounter_i2_n5yb = 0U;

        // Entry 'ACTIVE': '<S694>:35'
        MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
        MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE != 0);
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0) {
         case MX_Gateway_IN_BOTH_OFF:
          // During 'BOTH_OFF': '<S694>:27'
          if (state_KeylessEntryLock == KE_LOCK) {
            // Transition: '<S694>:43'
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gateway_IN_LOCK;

            // Entry 'LOCK': '<S694>:29'
            MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
            MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
          } else {
            if (state_KeylessEntryLock == KE_UNLOCK) {
              // Transition: '<S694>:44'
              MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gateway_IN_UNLOCK;

              // Entry 'UNLOCK': '<S694>:30'
              MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
              MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE != 0);
            }
          }
          break;

         case MX_Gateway_IN_LOCK:
          // During 'LOCK': '<S694>:29'
          if (state_KeylessEntryLock == KE_UNLOCK) {
            // Transition: '<S694>:38'
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gateway_IN_UNLOCK;

            // Entry 'UNLOCK': '<S694>:30'
            MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)INACTIVE != 0);
            MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)ACTIVE != 0);
          }
          break;

         default:
          // During 'UNLOCK': '<S694>:30'
          if (state_KeylessEntryLock == KE_LOCK) {
            // Transition: '<S694>:40'
            MX_Gateway_DWork.bitsForTID1.is_NORMAL_aez0 = MX_Gateway_IN_LOCK;

            // Entry 'LOCK': '<S694>:29'
            MX_Gateway_B.ind_KeylessEntryLock_hls2 = ((int32_T)ACTIVE != 0);
            MX_Gateway_B.ind_KeylessEntryUnlock_jj1j = ((int32_T)INACTIVE != 0);
          }
          break;
        }
      }
    }

    // End of Chart: '<S647>/Indicators'

    // SignalConversion: '<S647>/OutportBufferForcabKeyDetect'
    cabKeyDetect = MX_Gateway_B.cabKeyDetect_biu0;

    // SignalConversion: '<S647>/OutportBufferForind_KeylessEntryLock'
    ind_KeylessEntryLock = MX_Gateway_B.ind_KeylessEntryLock_hls2;

    // SignalConversion: '<S647>/OutportBufferForind_KeylessEntryUnlock'
    ind_KeylessEntryUnlock = MX_Gateway_B.ind_KeylessEntryUnlock_jj1j;

    // Chart: '<S647>/Power_Hold'
    // Gateway: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
    if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_bptr < 65535U) {
      MX_Gateway_DWork.temporalCounter_i1_bptr = (uint16_T)(int32_T)((int32_T)
        MX_Gateway_DWork.temporalCounter_i1_bptr + 1);
    }

    // During: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
    if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c70_MX_Gateway == 0U) {
      // Entry: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
      MX_Gateway_DWork.bitsForTID1.is_active_c70_MX_Gateway = 1U;

      // Entry Internal: MX_Gtwy_Control/System/Keyless_Entry/Power_Hold
      // Transition: '<S696>:2'
      MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
        MX_Gatew_IN_NON_FUNCTIONAL_k1dx;

      // Entry 'NON_FUNCTIONAL': '<S696>:33'
      MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway) {
       case MX_Ga_IN_KEYLESS_ENTRY_DETECTED:
        // During 'KEYLESS_ENTRY_DETECTED': '<S696>:6'
        if (((int32_T)can_KeylessEntry[0] != 0) || ((int32_T)can_KeylessEntry[1]
             != 0) || ((int32_T)can_KeylessEntry[2] != 0)) {
          // Transition: '<S696>:7'
          MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
            MX_Ga_IN_KEYLESS_ENTRY_DETECTED;
          MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;
        } else {
          // Timeout after keypad entry started or machine key on
          if ((MX_Gateway_DWork.temporalCounter_i1_bptr >=
               CONSTANT_DATA->KEYLESS_ENTRY_DETECTED_TIMEOUT) ||
              MX_Gateway_B.cabKeyDetect_biu0) {
            // Transition: '<S696>:8'
            MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
              MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

            // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S696>:4'
            MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
          } else {
            if (state_KeylessEntryPassword == KE_PASS) {
              // Transition: '<S696>:10'
              MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
                MX_Gatew_IN_KEYLESS_ENTRY_VALID;
              MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;
            }
          }
        }
        break;

       case MX_G_IN_KEYLESS_ENTRY_POWER_OFF:
        MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;

        // During 'KEYLESS_ENTRY_POWER_OFF': '<S696>:4'
        break;

       case MX_Gatew_IN_KEYLESS_ENTRY_VALID:
        // During 'KEYLESS_ENTRY_VALID': '<S696>:9'
        if (((int32_T)can_KeylessEntry[0] != 0) || ((int32_T)can_KeylessEntry[1]
             != 0) || ((int32_T)can_KeylessEntry[2] != 0)) {
          // Transition: '<S696>:12'
          MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
            MX_Gatew_IN_KEYLESS_ENTRY_VALID;
          MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;
        } else {
          // Timeout after valid code entered or machine key on
          // might need different timeout locked versus unlocked
          if ((MX_Gateway_DWork.temporalCounter_i1_bptr >=
               CONSTANT_DATA->KEYLESS_ENTRY_VALID_TIMEOUT) ||
              MX_Gateway_B.cabKeyDetect_biu0) {
            // Transition: '<S696>:11'
            MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
              MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

            // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S696>:4'
            MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
          }
        }
        break;

       case MX_Gatew_IN_NON_FUNCTIONAL_k1dx:
        MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;

        // During 'NON_FUNCTIONAL': '<S696>:33'
        if (CONSTANT_DATA->KEYLESS_ENTRY_FUNCTION != NON_FUNCTIONAL) {
          // Transition: '<S696>:34'
          MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
            MX_Gateway_IN_WAIT_FOR_NO_PRESS;
          MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;

          // Entry 'WAIT_FOR_NO_PRESS': '<S696>:22'
          MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_ACTIVE;
        }
        break;

       case MX_Ga_IN_WAIT_FOR_KEYLESS_ENTRY:
        // During 'WAIT_FOR_KEYLESS_ENTRY': '<S696>:1'
        if (((int32_T)can_KeylessEntry[0] != 0) || ((int32_T)can_KeylessEntry[1]
             != 0) || ((int32_T)can_KeylessEntry[2] != 0)) {
          // Transition: '<S696>:3'
          MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
            MX_Ga_IN_KEYLESS_ENTRY_DETECTED;
          MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;
        } else {
          // No keypad press after powerup or machine key on
          if ((MX_Gateway_DWork.temporalCounter_i1_bptr >=
               CONSTANT_DATA->KEYLESS_ENTRY_WAIT_TIMEOUT) ||
              MX_Gateway_B.cabKeyDetect_biu0) {
            // Transition: '<S696>:5'
            MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
              MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

            // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S696>:4'
            MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
          }
        }
        break;

       default:
        MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_ACTIVE;

        // During 'WAIT_FOR_NO_PRESS': '<S696>:22'
        // Error condition - no CANand/or Sw Pwr to keypad
        if (((int32_T)MX_Gateway_DWork.temporalCounter_i1_bptr >= 100) ||
            MX_Gateway_B.cabKeyDetect_biu0) {
          // Transition: '<S696>:28'
          MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
            MX_G_IN_KEYLESS_ENTRY_POWER_OFF;

          // Entry 'KEYLESS_ENTRY_POWER_OFF': '<S696>:4'
          MX_Gateway_B.state_KeylessEntryPowerHol_onfv = KE_PWR_INACTIVE;
        } else {
          if (((int32_T)can_KeylessEntry[0] == 0) && ((int32_T)can_KeylessEntry
               [1] == 0) && ((int32_T)can_KeylessEntry[2] == 0)) {
            // Transition: '<S696>:23'
            MX_Gateway_DWork.bitsForTID1.is_c70_MX_Gateway =
              MX_Ga_IN_WAIT_FOR_KEYLESS_ENTRY;
            MX_Gateway_DWork.temporalCounter_i1_bptr = 0U;
          }
        }
        break;
      }
    }

    // End of Chart: '<S647>/Power_Hold'

    // SignalConversion: '<S647>/OutportBufferForstate_KeylessEntryPowerHold'
    state_KeylessEntryPowerHold = MX_Gateway_B.state_KeylessEntryPowerHol_onfv;
  } else {
    if (MX_Gateway_DWork.Keyless_Entry_MODE) {
      MX_Gatewa_Keyless_Entry_Disable();
    }
  }

  // End of Outputs for SubSystem: '<S28>/Keyless_Entry'
}

// Function for Chart: '<S648>/Panel_Lock'
static void MX_Gateway_KEYPAD(void)
{
  int32_T i;

  // During 'KEYPAD': '<S697>:9'
  switch (MX_Gateway_DWork.bitsForTID1.is_KEYPAD) {
   case MX_Gateway_IN_NOT_PRESSED:
    // During 'NOT_PRESSED': '<S697>:10'
    if ((((int32_T)can_Keypad[0] != 0) || ((int32_T)can_Keypad[1] != 0) ||
         ((int32_T)can_Keypad[2] != 0)) && ((state_KSPassword == ENTER_PWD) ||
         (state_KSPassword == ENTER_OWNER1) || (state_KSPassword == ENTER_OWNER2)))
    {
      // Transition: '<S697>:49'
      MX_Gateway_DWork.bitsForTID1.is_KEYPAD = MX_Gateway_IN_PRESSED;

      // Entry Internal 'PRESSED': '<S697>:11'
      // Transition: '<S697>:51'
      MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_NONE;
    } else {
      if (state_KSPassword == FAIL) {
        // Transition: '<S697>:62'
        MX_Gateway_DWork.bitsForTID1.is_KEYPAD = MX_Gateway_IN_RESET;
        MX_Gateway_DWork.temporalCounter_i1_ami0 = 0U;

        // Entry 'RESET': '<S697>:23'
        pwd_Position = 0U;
        for (i = 0; i < 5; i++) {
          pwd_Keyless[i] = 0U;
        }

        MX_Gateway_DWork.reset_PwdState = 1U;
      }
    }
    break;

   case MX_Gateway_IN_PRESSED:
    // During 'PRESSED': '<S697>:11'
    if (((int32_T)can_Keypad[0] == 0) && ((int32_T)can_Keypad[1] == 0) &&
        ((int32_T)can_Keypad[2] == 0)) {
      // Transition: '<S697>:50'
      // Exit Internal 'PRESSED': '<S697>:11'
      MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
      MX_Gateway_DWork.bitsForTID1.is_KEYPAD = MX_Gateway_IN_NOT_PRESSED;
    } else {
      switch (MX_Gateway_DWork.bitsForTID1.is_PRESSED) {
       case MX_Gateway_IN_BUTTON_0:
        // During 'BUTTON_0': '<S697>:14'
        break;

       case MX_Gateway_IN_BUTTON_1:
        // During 'BUTTON_1': '<S697>:13'
        break;

       case MX_Gateway_IN_BUTTON_2:
        // During 'BUTTON_2': '<S697>:15'
        break;

       case MX_Gateway_IN_BUTTON_3:
        // During 'BUTTON_3': '<S697>:16'
        break;

       case MX_Gateway_IN_BUTTON_4:
        // During 'BUTTON_4': '<S697>:17'
        break;

       case MX_Gateway_IN_BUTTON_5:
        // During 'BUTTON_5': '<S697>:18'
        break;

       case MX_Gateway_IN_BUTTON_6:
        // During 'BUTTON_6': '<S697>:19'
        break;

       case MX_Gateway_IN_BUTTON_74:
        // During 'BUTTON_74': '<S697>:20'
        break;

       case MX_Gateway_IN_BUTTON_8:
        // During 'BUTTON_8': '<S697>:21'
        break;

       case MX_Gateway_IN_BUTTON_9:
        // During 'BUTTON_9': '<S697>:22'
        break;

       default:
        // During 'NONE': '<S697>:12'
        if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_MASK_9) ==
            (int32_T)KEYPAD_PRESSED_9) {
          // Transition: '<S697>:61'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_9;

          // Entry 'BUTTON_9': '<S697>:22'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_9;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_8) ==
                   (int32_T)KEYPAD_PRESSED_8) {
          // Transition: '<S697>:60'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_8;

          // Entry 'BUTTON_8': '<S697>:21'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_8;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_7) ==
                   (int32_T)KEYPAD_PRESSED_7) {
          // Transition: '<S697>:59'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_74;

          // Entry 'BUTTON_74': '<S697>:20'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_7;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_6) ==
                   (int32_T)KEYPAD_PRESSED_6) {
          // Transition: '<S697>:58'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_6;

          // Entry 'BUTTON_6': '<S697>:19'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_6;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[1] & (int32_T)KEYPAD_MASK_5) ==
                   (int32_T)KEYPAD_PRESSED_5) {
          // Transition: '<S697>:57'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_5;

          // Entry 'BUTTON_5': '<S697>:18'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_5;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_4) ==
                   (int32_T)KEYPAD_PRESSED_4) {
          // Transition: '<S697>:56'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_4;

          // Entry 'BUTTON_4': '<S697>:17'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_4;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_3) ==
                   (int32_T)KEYPAD_PRESSED_3) {
          // Transition: '<S697>:55'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_3;

          // Entry 'BUTTON_3': '<S697>:16'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_3;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_2) ==
                   (int32_T)KEYPAD_PRESSED_2) {
          // Transition: '<S697>:54'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_2;

          // Entry 'BUTTON_2': '<S697>:15'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_2;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else if ((int32_T)((int32_T)can_Keypad[0] & (int32_T)KEYPAD_MASK_1) ==
                   (int32_T)KEYPAD_PRESSED_1) {
          // Transition: '<S697>:52'
          MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_1;

          // Entry 'BUTTON_1': '<S697>:13'
          pwd_Keyless[(int32_T)pwd_Position] = ASCII_1;
          pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
        } else {
          if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_MASK_0) ==
              (int32_T)KEYPAD_PRESSED_0) {
            // Transition: '<S697>:53'
            MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gateway_IN_BUTTON_0;

            // Entry 'BUTTON_0': '<S697>:14'
            pwd_Keyless[(int32_T)pwd_Position] = ASCII_0;
            pwd_Position = (uint8_T)(int32_T)((int32_T)pwd_Position + 1);
          }
        }
        break;
      }
    }
    break;

   default:
    // During 'RESET': '<S697>:23'
    if (((int32_T)MX_Gateway_DWork.temporalCounter_i1_ami0 >= 200) &&
        (state_KSPassword != FAIL)) {
      // Transition: '<S697>:63'
      MX_Gateway_DWork.bitsForTID1.is_KEYPAD = MX_Gateway_IN_NOT_PRESSED;
    }
    break;
  }
}

// Function for Chart: '<S648>/Panel_Lock'
static void MX_Gateway_CHANGE(void)
{
  int32_T i;

  // During 'CHANGE': '<S697>:30'
  if (state_KSPassword == FAIL) {
    // Transition: '<S697>:436'
    // Exit Internal 'CHANGE': '<S697>:30'
    // Exit Internal 'ENTER_OWNER': '<S697>:482'
    MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S697>:402'
    MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S697>:405'
    // Exit Internal 'DISPLAY_DELAY': '<S697>:508'
    MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY1': '<S697>:516'
    MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY2': '<S697>:521'
    MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'WAIT_NEW': '<S697>:4'
    MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_FAIL_nxgn;
    MX_Gateway_DWork.temporalCounter_i2 = 0U;

    // Entry 'FAIL': '<S697>:28'
    state_KSPassword = FAIL;
  } else if ((int32_T)state_KSPassword == 0) {
    // Transition: '<S697>:435'
    // Transition: '<S697>:74'
    // Exit Internal 'CHANGE': '<S697>:30'
    // Exit Internal 'ENTER_OWNER': '<S697>:482'
    MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S697>:402'
    MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'OWNER_USER_SELECT': '<S697>:405'
    // Exit Internal 'DISPLAY_DELAY': '<S697>:508'
    MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY1': '<S697>:516'
    MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'DISPLAY_DELAY2': '<S697>:521'
    MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
      MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

    // Exit Internal 'WAIT_NEW': '<S697>:4'
    MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
    MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_NOTHING;

    // Entry 'NOTHING': '<S697>:25'
    state_KSPassword = 0U;
    pwd_Position = 0U;
    for (i = 0; i < 5; i++) {
      pwd_Keyless[i] = 0U;
    }
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_CHANGE) {
     case MX_Gateway_IN_ENTER_OWNER:
      // During 'ENTER_OWNER': '<S697>:482'
      if (MX_Gateway_DWork.temporalCounter_i2 >=
          CONSTANT_DATA->KEYPAD_ENTER_TIME) {
        // Transition: '<S697>:507'
        // Exit Internal 'ENTER_OWNER': '<S697>:482'
        MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_WAIT_NEW1;

        // Entry 'WAIT_NEW1': '<S697>:437'
        state_KSPassword = FAIL;
      } else if (state_KSPassword == PASS) {
        // Transition: '<S697>:483'
        // Exit Internal 'ENTER_OWNER': '<S697>:482'
        MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_OWNER_USER_SELECT;

        // Entry Internal 'OWNER_USER_SELECT': '<S697>:402'
        // Transition: '<S697>:403'
        MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv =
          MX_Ga_IN_OWNER_USER_SELECT_gzm1;

        // Entry 'OWNER_USER_SELECT': '<S697>:405'
        state_KSPassword = ENTER_OWNER1;
        MX_Gateway_DWork.DBEnterTime = 0U;

        // Entry Internal 'OWNER_USER_SELECT': '<S697>:405'
        // Transition: '<S697>:410'
        MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
          MX_Gateway_IN_DISPLAY_OWNER;

        // Entry 'DISPLAY_OWNER': '<S697>:412'
        PWD_NumberSelected = (uint16_T)PW_OWNER;
        MX_Gateway_DWork.KSChangeDisp = DISPLAY_OWNER;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER) {
         case MX_Gateway_IN_DISPLAY_ASTRISK:
          // During 'DISPLAY_ASTRISK': '<S697>:499'
          if (pwd_Position == MAX_PWD_CHAR) {
            // Transition: '<S697>:503'
            MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER =
              MX_Gateway_IN_GOOD_UNLOCK;

            // Entry Internal 'GOOD_UNLOCK': '<S697>:484'
            // Transition: '<S697>:491'
            if (((ee_OwnerPassword[0] == pwd_Keyless[0]) && (ee_OwnerPassword[1]
                  == pwd_Keyless[1]) && (ee_OwnerPassword[2] == pwd_Keyless[2]) &&
                 (ee_OwnerPassword[3] == pwd_Keyless[3]) && (ee_OwnerPassword[4]
                  == pwd_Keyless[4])) || ((ee_MasterPassword[0] == pwd_Keyless[0])
                 && (ee_MasterPassword[1] == pwd_Keyless[1]) &&
                 (ee_MasterPassword[2] == pwd_Keyless[2]) && (ee_MasterPassword
                  [3] == pwd_Keyless[3]) && (ee_MasterPassword[4] ==
                  pwd_Keyless[4]))) {
              // Transition: '<S697>:492'
              // Transition: '<S697>:494'
              pwd_Position = 0U;
              for (i = 0; i < 5; i++) {
                pwd_Keyless[i] = 0U;
              }

              state_KSPassword = PASS;

              // Transition: '<S697>:498'
            } else {
              // Transition: '<S697>:504'
              pwd_Position = 0U;
              for (i = 0; i < 5; i++) {
                pwd_Keyless[i] = 0U;
              }

              state_KSPassword = FAIL;
            }
          }
          break;

         case MX_Gateway_IN_DISPLAY_CODE:
          // During 'DISPLAY_CODE': '<S697>:501'
          if ((int32_T)pwd_Position != 0) {
            // Transition: '<S697>:500'
            MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER =
              MX_Gateway_IN_DISPLAY_ASTRISK;

            // Entry 'DISPLAY_ASTRISK': '<S697>:499'
            MX_Gateway_DWork.KSChangeDisp = DISPLAY_ASTERISK;
          }
          break;

         default:
          // During 'GOOD_UNLOCK': '<S697>:484'
          break;
        }
      }
      break;

     case MX_Gateway_IN_GOOD_NEW:
      // During 'GOOD_NEW': '<S697>:29'
      if (((PWD_NumberSelected == PW_USER1) && (ee_User1Password[0] ==
            pwd_Keyless[0]) && (ee_User1Password[1] == pwd_Keyless[1]) &&
           (ee_User1Password[2] == pwd_Keyless[2]) && (ee_User1Password[3] ==
            pwd_Keyless[3]) && (ee_User1Password[4] == pwd_Keyless[4])) ||
          ((PWD_NumberSelected == PW_USER2) && (ee_User2Password[0] ==
            pwd_Keyless[0]) && (ee_User2Password[1] == pwd_Keyless[1]) &&
           (ee_User2Password[2] == pwd_Keyless[2]) && (ee_User2Password[3] ==
            pwd_Keyless[3]) && (ee_User2Password[4] == pwd_Keyless[4])) ||
          ((PWD_NumberSelected == PW_OWNER) && (ee_OwnerPassword[0] ==
            pwd_Keyless[0]) && (ee_OwnerPassword[1] == pwd_Keyless[1]) &&
           (ee_OwnerPassword[2] == pwd_Keyless[2]) && (ee_OwnerPassword[3] ==
            pwd_Keyless[3]) && (ee_OwnerPassword[4] == pwd_Keyless[4]))) {
        // Transition: '<S697>:446'
        // Transition: '<S697>:447'
        // Transition: '<S697>:72'
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_WAIT_NEW2;

        // Entry 'WAIT_NEW2': '<S697>:439'
        state_KSPassword = 0U;
      }
      break;

     case MX_Gateway_IN_OWNER_USER_SELECT:
      // During 'OWNER_USER_SELECT': '<S697>:402'
      if (MX_Gateway_DWork.DBEnterTime > CONSTANT_DATA->KEYPAD_ENTER_TIME) {
        // Transition: '<S697>:99'
        // Exit Internal 'OWNER_USER_SELECT': '<S697>:402'
        MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'OWNER_USER_SELECT': '<S697>:405'
        // Exit Internal 'DISPLAY_DELAY': '<S697>:508'
        MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY1': '<S697>:516'
        MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY2': '<S697>:521'
        MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_WAIT_NEW1;

        // Entry 'WAIT_NEW1': '<S697>:437'
        state_KSPassword = FAIL;
      } else if (pwd_Position == MAX_PWD_CHAR) {
        // Transition: '<S697>:92'
        // Exit Internal 'OWNER_USER_SELECT': '<S697>:402'
        MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'OWNER_USER_SELECT': '<S697>:405'
        // Exit Internal 'DISPLAY_DELAY': '<S697>:508'
        MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY1': '<S697>:516'
        MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'DISPLAY_DELAY2': '<S697>:521'
        MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gatewa_IN_VERIFY_FIRST_ENTRY;

        // Entry Internal 'VERIFY_FIRST_ENTRY': '<S697>:34'
        // Transition: '<S697>:95'
        if (!((pwd_Keyless[0] == ASCII_0) && (pwd_Keyless[1] == ASCII_0) &&
              (pwd_Keyless[2] == ASCII_0) && (pwd_Keyless[3] == ASCII_0) &&
              (pwd_Keyless[4] == ASCII_0))) {
          // Transition: '<S697>:96'
          // Transition: '<S697>:94'
          for (i = 0; i < 5; i++) {
            MX_Gateway_DWork.pwd_New[i] = pwd_Keyless[i];
          }

          for (i = 0; i < 5; i++) {
            pwd_Keyless[i] = 0U;
          }

          pwd_Position = 0U;
          state_KSPassword = PASS;

          // Transition: '<S697>:93'
        } else {
          // Transition: '<S697>:97'
          state_KSPassword = FAIL;
        }
      } else if (MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv ==
                 MX_Gateway_IN_DISPLAY_ASTRISK) {
        // During 'DISPLAY_ASTRISK': '<S697>:419'
        MX_Gateway_DWork.DBEnterTime = (uint16_T)(int32_T)((int32_T)
          MX_Gateway_DWork.DBEnterTime + 1);
      } else {
        // During 'OWNER_USER_SELECT': '<S697>:405'
        if ((int32_T)pwd_Position != 0) {
          // Transition: '<S697>:404'
          // Exit Internal 'OWNER_USER_SELECT': '<S697>:405'
          // Exit Internal 'DISPLAY_DELAY': '<S697>:508'
          MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
            MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
          MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
            MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

          // Exit Internal 'DISPLAY_DELAY1': '<S697>:516'
          MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
            MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

          // Exit Internal 'DISPLAY_DELAY2': '<S697>:521'
          MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
            MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
          MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv =
            MX_Gateway_IN_DISPLAY_ASTRISK;

          // Entry 'DISPLAY_ASTRISK': '<S697>:419'
          MX_Gateway_DWork.KSChangeDisp = DISPLAY_ASTERISK;
          MX_Gateway_DWork.DBEnterTime = 0U;
        } else {
          MX_Gateway_DWork.DBEnterTime = (uint16_T)(int32_T)((int32_T)
            MX_Gateway_DWork.DBEnterTime + 1);
          switch (MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT) {
           case MX_Gateway_IN_DISPLAY_DELAY:
            // During 'DISPLAY_DELAY': '<S697>:508'
            if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                 == (int32_T)KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel ==
                 NORMAL)) {
              // Transition: '<S697>:408'
              // Exit Internal 'DISPLAY_DELAY': '<S697>:508'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
                MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
              MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
                MX_Gateway_IN_DISPLAY_USER1;

              // Entry 'DISPLAY_USER1': '<S697>:426'
              PWD_NumberSelected = (uint16_T)PW_USER1;
              MX_Gateway_DWork.KSChangeDisp = DISPLAY_USER1;
            } else if ((MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY ==
                        MX_Gatew_IN_DISPLAY_DELAY_OWNER) && ((int32_T)
                        MX_Gateway_DWork.temporalCounter_i2 >= 100)) {
              // During 'DISPLAY_DELAY_OWNER': '<S697>:510'
              // Transition: '<S697>:509'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
                MX_Gateway_IN_DISPLAY_ENTER;

              // Entry 'DISPLAY_ENTER': '<S697>:471'
              MX_Gateway_DWork.KSChangeDisp = DISPLAY_OWNER1;
              MX_Gateway_DWork.DBEnterTime = 0U;
            } else {
              // During 'DISPLAY_ENTER': '<S697>:471'
            }
            break;

           case MX_Gateway_IN_DISPLAY_DELAY1:
            // During 'DISPLAY_DELAY1': '<S697>:516'
            if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                 == (int32_T)KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel ==
                 NORMAL)) {
              // Transition: '<S697>:433'
              // Exit Internal 'DISPLAY_DELAY1': '<S697>:516'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
                MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
              MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
                MX_Gateway_IN_DISPLAY_USER2;

              // Entry 'DISPLAY_USER2': '<S697>:467'
              PWD_NumberSelected = (uint16_T)PW_USER2;
              MX_Gateway_DWork.KSChangeDisp = DISPLAY_USER2;
            } else if ((MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 ==
                        MX_Gatew_IN_DISPLAY_DELAY_USER1) && ((int32_T)
                        MX_Gateway_DWork.temporalCounter_i2 >= 100)) {
              // During 'DISPLAY_DELAY_USER1': '<S697>:519'
              // Transition: '<S697>:518'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
                MX_Gateway_IN_DISPLAY_ENTER;

              // Entry 'DISPLAY_ENTER': '<S697>:520'
              MX_Gateway_DWork.KSChangeDisp = DISPLAY_OWNER1;
              MX_Gateway_DWork.DBEnterTime = 0U;
            } else {
              // During 'DISPLAY_ENTER': '<S697>:520'
            }
            break;

           case MX_Gateway_IN_DISPLAY_DELAY2:
            // During 'DISPLAY_DELAY2': '<S697>:521'
            if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                 == (int32_T)KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel ==
                 NORMAL)) {
              // Transition: '<S697>:407'
              // Exit Internal 'DISPLAY_DELAY2': '<S697>:521'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
                MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
              MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
                MX_Gateway_IN_DISPLAY_OWNER;

              // Entry 'DISPLAY_OWNER': '<S697>:412'
              PWD_NumberSelected = (uint16_T)PW_OWNER;
              MX_Gateway_DWork.KSChangeDisp = DISPLAY_OWNER;
            } else if ((MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 ==
                        MX_Gatew_IN_DISPLAY_DELAY_USER2) && ((int32_T)
                        MX_Gateway_DWork.temporalCounter_i2 >= 100)) {
              // During 'DISPLAY_DELAY_USER2': '<S697>:524'
              // Transition: '<S697>:523'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
                MX_Gateway_IN_DISPLAY_ENTER;

              // Entry 'DISPLAY_ENTER': '<S697>:525'
              MX_Gateway_DWork.KSChangeDisp = DISPLAY_OWNER1;
              MX_Gateway_DWork.DBEnterTime = 0U;
            } else {
              // During 'DISPLAY_ENTER': '<S697>:525'
            }
            break;

           case MX_Gateway_IN_DISPLAY_OWNER:
            PWD_NumberSelected = (uint16_T)PW_OWNER;

            // During 'DISPLAY_OWNER': '<S697>:412'
            if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                != (int32_T)KEYPAD_UNLOCK_PRESSED) {
              // Transition: '<S697>:463'
              MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
                MX_Gateway_IN_DISPLAY_DELAY;

              // Entry Internal 'DISPLAY_DELAY': '<S697>:508'
              // Transition: '<S697>:514'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
                MX_Gatew_IN_DISPLAY_DELAY_OWNER;
              MX_Gateway_DWork.temporalCounter_i2 = 0U;
            }
            break;

           case MX_Gateway_IN_DISPLAY_USER1:
            PWD_NumberSelected = (uint16_T)PW_USER1;

            // During 'DISPLAY_USER1': '<S697>:426'
            if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                != (int32_T)KEYPAD_UNLOCK_PRESSED) {
              // Transition: '<S697>:466'
              MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
                MX_Gateway_IN_DISPLAY_DELAY1;

              // Entry Internal 'DISPLAY_DELAY1': '<S697>:516'
              // Transition: '<S697>:517'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
                MX_Gatew_IN_DISPLAY_DELAY_USER1;
              MX_Gateway_DWork.temporalCounter_i2 = 0U;
            }
            break;

           default:
            PWD_NumberSelected = (uint16_T)PW_USER2;

            // During 'DISPLAY_USER2': '<S697>:467'
            if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                != (int32_T)KEYPAD_UNLOCK_PRESSED) {
              // Transition: '<S697>:469'
              MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
                MX_Gateway_IN_DISPLAY_DELAY2;

              // Entry Internal 'DISPLAY_DELAY2': '<S697>:521'
              // Transition: '<S697>:522'
              MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
                MX_Gatew_IN_DISPLAY_DELAY_USER2;
              MX_Gateway_DWork.temporalCounter_i2 = 0U;
            }
            break;
          }
        }
      }
      break;

     case MX_Gateway_IN_STORE:
      // During 'STORE': '<S697>:444'
      if ((int32_T)MX_Gateway_DWork.temporalCounter_i2 >= 100) {
        // Transition: '<S697>:445'
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_GOOD_NEW;
      }
      break;

     case MX_Gatewa_IN_VERIFY_FIRST_ENTRY:
      // During 'VERIFY_FIRST_ENTRY': '<S697>:34'
      if (state_KSPassword == PASS) {
        // Transition: '<S697>:75'
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_WAIT_NEW;
        MX_Gateway_DWork.temporalCounter_i2 = 0U;

        // Entry Internal 'WAIT_NEW': '<S697>:4'
        // Transition: '<S697>:451'
        MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW =
          MX_Gateway_IN_DISPLAY_ASTRISK1;

        // Entry 'DISPLAY_ASTRISK1': '<S697>:450'
        state_KSPassword = ENTER_OWNER2;
        MX_Gateway_DWork.KSChangeDisp = DISPLAY_OWNER2;
      }
      break;

     case MX_Gatew_IN_VERIFY_SECOND_ENTRY:
      // During 'VERIFY_SECOND_ENTRY': '<S697>:32'
      if (state_KSPassword == PASS) {
        // Transition: '<S697>:68'
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_STORE;
        MX_Gateway_DWork.temporalCounter_i2 = 0U;

        // Entry 'STORE': '<S697>:444'
        state_KSPassword = NEW;
        MX_Gateway_DWork.KSChangeDisp = DISPLAY_SAVED;
      }
      break;

     case MX_Gateway_IN_WAIT_NEW:
      // During 'WAIT_NEW': '<S697>:4'
      if (MX_Gateway_DWork.temporalCounter_i2 >=
          CONSTANT_DATA->KEYPAD_ENTER_TIME) {
        // Transition: '<S697>:42'
        // Exit Internal 'WAIT_NEW': '<S697>:4'
        MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_WAIT_NEW1;

        // Entry 'WAIT_NEW1': '<S697>:437'
        state_KSPassword = FAIL;
      } else if (pwd_Position == MAX_PWD_CHAR) {
        // Transition: '<S697>:91'
        // Exit Internal 'WAIT_NEW': '<S697>:4'
        MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gatew_IN_VERIFY_SECOND_ENTRY;

        // Entry Internal 'VERIFY_SECOND_ENTRY': '<S697>:32'
        // Transition: '<S697>:82'
        if ((MX_Gateway_DWork.pwd_New[0] == pwd_Keyless[0]) &&
            (MX_Gateway_DWork.pwd_New[1] == pwd_Keyless[1]) &&
            (MX_Gateway_DWork.pwd_New[2] == pwd_Keyless[2]) &&
            (MX_Gateway_DWork.pwd_New[3] == pwd_Keyless[3]) &&
            (MX_Gateway_DWork.pwd_New[4] == pwd_Keyless[4])) {
          // Transition: '<S697>:83'
          // Transition: '<S697>:85'
          state_KSPassword = PASS;

          // Transition: '<S697>:86'
        } else {
          // Transition: '<S697>:84'
          state_KSPassword = FAIL;
        }
      } else if ((MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW ==
                  MX_Gateway_IN_DISPLAY_ASTRISK) || (!((int32_T)pwd_Position !=
                   0))) {
        // During 'DISPLAY_ASTRISK': '<S697>:449'
      } else {
        // During 'DISPLAY_ASTRISK1': '<S697>:450'
        // Transition: '<S697>:448'
        MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW = MX_Gateway_IN_DISPLAY_ASTRISK;

        // Entry 'DISPLAY_ASTRISK': '<S697>:449'
        MX_Gateway_DWork.KSChangeDisp = DISPLAY_ASTERISK;
      }
      break;

     case MX_Gateway_IN_WAIT_NEW1:
      // During 'WAIT_NEW1': '<S697>:437'
      break;

     default:
      // During 'WAIT_NEW2': '<S697>:439'
      break;
    }
  }
}

// System initialize for atomic system: '<S28>/Keyless_Start'
void MX_Gateway_Keyless_Start_Init(void)
{
  int32_T i;

  // SystemInitialize for Chart: '<S648>/Panel_Lock'
  MX_Gateway_DWork.bitsForTID1.is_KEYPAD = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_PRESSED = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.temporalCounter_i1_ami0 = 0U;
  MX_Gateway_DWork.bitsForTID1.is_KS_DISPLAY = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_PASSWORD = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.temporalCounter_i4_j2w2 = 0U;
  MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.temporalCounter_i3_mfuj = 0U;
  MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT_k2iv =
    MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_OWNER_USER_SELECT =
    MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY =
    MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY1 =
    MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_DISPLAY_DELAY2 =
    MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.bitsForTID1.is_WAIT_NEW = MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
  MX_Gateway_DWork.temporalCounter_i2 = 0U;
  MX_Gateway_DWork.bitsForTID1.is_active_c60_MX_Gateway = 0U;
  MX_Gateway_DWork.debounceCount = 0U;
  MX_Gateway_DWork.reset_PwdState = 0U;
  for (i = 0; i < 5; i++) {
    MX_Gateway_DWork.pwd_New[i] = 0U;
  }

  MX_Gateway_DWork.KSChangeDisp = 0U;
  MX_Gateway_DWork.DBEnterTime = 0U;
  state_KSLock = 0U;
  state_KSPassword = 0U;
  pwd_Position = 0U;
  for (i = 0; i < 5; i++) {
    pwd_Keyless[i] = 0U;
  }

  KSS_Display = 0U;
  PWD_NumberSelected = 0U;

  // End of SystemInitialize for Chart: '<S648>/Panel_Lock'
}

// Output and update for atomic system: '<S28>/Keyless_Start'
void MX_Gateway_Keyless_Start(void)
{
  int32_T i;

  // Chart: '<S648>/Panel_Lock'
  // Gateway: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i1_ami0 < 255U) {
    MX_Gateway_DWork.temporalCounter_i1_ami0 = (uint8_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i1_ami0 + 1);
  }

  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i2 < 65535U) {
    MX_Gateway_DWork.temporalCounter_i2 = (uint16_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i2 + 1);
  }

  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i3_mfuj < 63U) {
    MX_Gateway_DWork.temporalCounter_i3_mfuj = (uint8_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i3_mfuj + 1);
  }

  if ((uint32_T)MX_Gateway_DWork.temporalCounter_i4_j2w2 < 127U) {
    MX_Gateway_DWork.temporalCounter_i4_j2w2 = (uint8_T)(int32_T)((int32_T)
      MX_Gateway_DWork.temporalCounter_i4_j2w2 + 1);
  }

  // During: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c60_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
    MX_Gateway_DWork.bitsForTID1.is_active_c60_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Keyless_Start/Panel_Lock
    // Entry Internal 'KEYPAD': '<S697>:9'
    // Transition: '<S697>:48'
    MX_Gateway_DWork.bitsForTID1.is_KEYPAD = MX_Gateway_IN_NOT_PRESSED;

    // Entry Internal 'KS_PASSWORD': '<S697>:24'
    // Transition: '<S697>:64'
    MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_NOTHING;

    // Entry 'NOTHING': '<S697>:25'
    state_KSPassword = 0U;
    pwd_Position = 0U;
    for (i = 0; i < 5; i++) {
      pwd_Keyless[i] = 0U;
    }

    // Entry Internal 'KS_LOCK': '<S697>:8'
    // Transition: '<S697>:36'
    MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_Init_k1cp;

    // Entry 'Init': '<S697>:531'
    state_KSLock = KS_NOTHING;

    // Entry Internal 'KS_DISPLAY': '<S697>:184'
    // Transition: '<S697>:304'
    MX_Gateway_DWork.bitsForTID1.is_KS_DISPLAY = MX_Gateway_IN_CODE_ERROR2;

    // Entry 'CODE_ERROR2': '<S697>:303'
    // Entry Internal 'CODE_ERROR2': '<S697>:303'
    // Transition: '<S697>:195'
    MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 = MX_Gateway_IN_NOORMAL;

    // Entry 'NOORMAL': '<S697>:218'
    KSS_Display = INACTIVE;
  } else {
    MX_Gateway_KEYPAD();

    // During 'KS_PASSWORD': '<S697>:24'
    switch (MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD) {
     case MX_Gateway_IN_CHANGE:
      MX_Gateway_CHANGE();
      break;

     case MX_Gateway_IN_FAIL_nxgn:
      // During 'FAIL': '<S697>:28'
      if (((int32_T)MX_Gateway_DWork.temporalCounter_i2 >= 100) && ((int32_T)
           MX_Gateway_DWork.reset_PwdState != 0)) {
        // Transition: '<S697>:73'
        // Transition: '<S697>:74'
        MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_NOTHING;

        // Entry 'NOTHING': '<S697>:25'
        state_KSPassword = 0U;
        pwd_Position = 0U;
        for (i = 0; i < 5; i++) {
          pwd_Keyless[i] = 0U;
        }
      }
      break;

     case MX_Gateway_IN_GOOD_UNLOCK:
      // During 'GOOD_UNLOCK': '<S697>:27'
      if (((int32_T)MX_Gateway_DWork.temporalCounter_i2 >= 50) && ((state_KSLock
            == KS_NOTHING) && (state_KSPassword != FAIL))) {
        // Transition: '<S697>:71'
        // Transition: '<S697>:74'
        MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_NOTHING;

        // Entry 'NOTHING': '<S697>:25'
        state_KSPassword = 0U;
        pwd_Position = 0U;
        for (i = 0; i < 5; i++) {
          pwd_Keyless[i] = 0U;
        }
      } else {
        if (state_KSPassword == FAIL) {
          // Transition: '<S697>:69'
          MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_FAIL_nxgn;
          MX_Gateway_DWork.temporalCounter_i2 = 0U;

          // Entry 'FAIL': '<S697>:28'
          state_KSPassword = FAIL;
        }
      }
      break;

     case MX_Gateway_IN_NOTHING:
      // During 'NOTHING': '<S697>:25'
      if (state_KSLock == KS_CHANGE) {
        // Transition: '<S697>:67'
        MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_CHANGE;

        // Entry 'CHANGE': '<S697>:30'
        state_KSPassword = ENTER_OWNER1;

        // Entry Internal 'CHANGE': '<S697>:30'
        // Transition: '<S697>:440'
        MX_Gateway_DWork.bitsForTID1.is_CHANGE = MX_Gateway_IN_ENTER_OWNER;
        MX_Gateway_DWork.temporalCounter_i2 = 0U;

        // Entry 'ENTER_OWNER': '<S697>:482'
        // Entry Internal 'ENTER_OWNER': '<S697>:482'
        // Transition: '<S697>:502'
        MX_Gateway_DWork.bitsForTID1.is_ENTER_OWNER = MX_Gateway_IN_DISPLAY_CODE;

        // Entry 'DISPLAY_CODE': '<S697>:501'
        MX_Gateway_DWork.KSChangeDisp = DISPLAY_CODE;
      } else {
        if (state_KSLock != KS_NOTHING) {
          // Transition: '<S697>:65'
          MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD =
            MX_Gateway_IN_WAIT_UNLOCK_CHART;

          // Entry 'WAIT_UNLOCK_CHART': '<S697>:26'
          state_KSPassword = ENTER_PWD;
        }
      }
      break;

     case MX_Gateway_IN_WAIT_UNLOCK:
      // During 'WAIT_UNLOCK': '<S697>:5'
      if (MX_Gateway_DWork.temporalCounter_i2 >=
          CONSTANT_DATA->KEYPAD_ENTER_TIME) {
        // Transition: '<S697>:90'
        MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_FAIL_nxgn;
        MX_Gateway_DWork.temporalCounter_i2 = 0U;

        // Entry 'FAIL': '<S697>:28'
        state_KSPassword = FAIL;
      } else {
        if (pwd_Position == MAX_PWD_CHAR) {
          // Transition: '<S697>:66'
          MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD =
            MX_Gateway_IN_GOOD_UNLOCK;
          MX_Gateway_DWork.temporalCounter_i2 = 0U;

          // Entry Internal 'GOOD_UNLOCK': '<S697>:27'
          // Transition: '<S697>:76'
          if (((ee_OwnerPassword[0] == pwd_Keyless[0]) && (ee_OwnerPassword[1] ==
                pwd_Keyless[1]) && (ee_OwnerPassword[2] == pwd_Keyless[2]) &&
               (ee_OwnerPassword[3] == pwd_Keyless[3]) && (ee_OwnerPassword[4] ==
                pwd_Keyless[4])) || ((ee_MasterPassword[0] == pwd_Keyless[0]) &&
               (ee_MasterPassword[1] == pwd_Keyless[1]) && (ee_MasterPassword[2]
                == pwd_Keyless[2]) && (ee_MasterPassword[3] == pwd_Keyless[3]) &&
               (ee_MasterPassword[4] == pwd_Keyless[4])) || (((state_KSLock ==
                 KS_UNLOCK) || (state_KSLock == KS_LOCK)) &&
               (((ee_User1Password[0] == pwd_Keyless[0]) && (ee_User1Password[1]
                  == pwd_Keyless[1]) && (ee_User1Password[2] == pwd_Keyless[2]) &&
                 (ee_User1Password[3] == pwd_Keyless[3]) && (ee_User1Password[4]
                  == pwd_Keyless[4])) || ((ee_User2Password[0] == pwd_Keyless[0])
                 && (ee_User2Password[1] == pwd_Keyless[1]) &&
                 (ee_User2Password[2] == pwd_Keyless[2]) && (ee_User2Password[3]
                  == pwd_Keyless[3]) && (ee_User2Password[4] == pwd_Keyless[4])))))
          {
            // Transition: '<S697>:78'
            // Transition: '<S697>:400'
            // Transition: '<S697>:397'
            // Transition: '<S697>:79'
            state_KSPassword = PASS;

            // Transition: '<S697>:80'
          } else {
            // Transition: '<S697>:396'
            // Transition: '<S697>:77'
            state_KSPassword = FAIL;
          }
        }
      }
      break;

     default:
      // During 'WAIT_UNLOCK_CHART': '<S697>:26'
      if ((int32_T)pwd_Position != 0) {
        // Transition: '<S697>:38'
        MX_Gateway_DWork.bitsForTID1.is_KS_PASSWORD = MX_Gateway_IN_WAIT_UNLOCK;
        MX_Gateway_DWork.temporalCounter_i2 = 0U;
      }
      break;
    }

    // During 'KS_LOCK': '<S697>:8'
    switch (MX_Gateway_DWork.bitsForTID1.is_KS_LOCK) {
     case MX_Gateway_IN_BUTTON_CHANGE_DB:
      // During 'BUTTON_CHANGE_DB': '<S697>:6'
      if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) == 0) ||
          ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK) == 0)
          || (state_KeylessPanel != NORMAL)) {
        // Transition: '<S697>:45'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S697>:3'
        state_KSLock = KS_NOTHING;
      } else if ((int32_T)MX_Gateway_DWork.debounceCount >= 200) {
        // Transition: '<S697>:46'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_CHANGE_hqcz;

        // Entry 'CHANGE': '<S697>:7'
        state_KSLock = KS_CHANGE;
      } else {
        MX_Gateway_DWork.debounceCount = (uint16_T)(int32_T)((int32_T)
          MX_Gateway_DWork.debounceCount + 1);
      }
      break;

     case MX_Gateway_IN_CHANGE_hqcz:
      state_KSLock = KS_CHANGE;

      // During 'CHANGE': '<S697>:7'
      if (((int32_T)state_KSPassword == 0) || (state_KSPassword == FAIL)) {
        // Transition: '<S697>:47'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S697>:3'
        state_KSLock = KS_NOTHING;
      }
      break;

     case MX_Gateway_IN_Init_k1cp:
      state_KSLock = KS_NOTHING;

      // During 'Init': '<S697>:531'
      if (flag_InitEERead) {
        // Transition: '<S697>:532'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S697>:3'
      }
      break;

     case MX_Gateway_IN_LOCK_o1ud:
      state_KSLock = KS_LOCK_MACHINE;

      // During 'LOCK': '<S697>:1'
      if (eeMirror.passwordLock == LOCKED) {
        // Transition: '<S697>:39'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_MACHINE_LOCK;

        // Entry 'MACHINE_LOCK': '<S697>:31'
        state_KSLock = KS_LOCK;
      } else {
        if (state_KSPassword == FAIL) {
          // Transition: '<S697>:37'
          MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

          // Entry 'NOTHING': '<S697>:3'
          state_KSLock = KS_NOTHING;
        }
      }
      break;

     case MX_Gateway_IN_LOCK_DB:
      // During 'LOCK_DB': '<S697>:296'
      if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK) ==
          (int32_T)KEYPAD_UNLOCK_PRESSED) {
        // Transition: '<S697>:301'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S697>:3'
        state_KSLock = KS_NOTHING;
      } else {
        if ((int32_T)MX_Gateway_DWork.temporalCounter_i3_mfuj >= 50) {
          // Transition: '<S697>:299'
          MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_LOCK_o1ud;

          // Entry 'LOCK': '<S697>:1'
          state_KSLock = KS_LOCK_MACHINE;
        }
      }
      break;

     case MX_Gateway_IN_MACHINE_LOCK:
      state_KSLock = KS_LOCK;

      // During 'MACHINE_LOCK': '<S697>:31'
      if (eeMirror.passwordLock == INACTIVE) {
        // Transition: '<S697>:89'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S697>:3'
        state_KSLock = KS_NOTHING;
      } else {
        if (state_KSPassword == PASS) {
          // Transition: '<S697>:87'
          MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_MACHINE_UNLOCK;

          // Entry 'MACHINE_UNLOCK': '<S697>:33'
          state_KSLock = KS_UNLOCK;
        }
      }
      break;

     case MX_Gateway_IN_MACHINE_UNLOCK:
      state_KSLock = KS_UNLOCK;

      // During 'MACHINE_UNLOCK': '<S697>:33'
      if ((state_MachineLock == UNLOCK) || (eeMirror.passwordLock == INACTIVE))
      {
        // Transition: '<S697>:88'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S697>:3'
        state_KSLock = KS_NOTHING;
      }
      break;

     case MX_Gateway_IN_NOTHING_njh0:
      state_KSLock = KS_NOTHING;

      // During 'NOTHING': '<S697>:3'
      if ((state_MachineLock == LOCKED) && (eeMirror.passwordLock == ACTIVE)) {
        // Transition: '<S697>:81'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_MACHINE_LOCK;

        // Entry 'MACHINE_LOCK': '<S697>:31'
        state_KSLock = KS_LOCK;
      } else if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK)
                  == (int32_T)KEYPAD_UNLOCK_PRESSED) && ((int32_T)((int32_T)
                   can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) == 0) &&
                 (eeMirror.passwordLock == LOCKED) && (state_KeylessPanel ==
                  NORMAL) && ((MX_Gateway_B.UnitDelay1_gwnh ==
                   ENGINE_NOT_RUNNING) || (MX_Gateway_B.UnitDelay1_gwnh ==
                   ENGINE_INITIALIZE))) {
        // Transition: '<S697>:40'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_UNLOCK_DB;
        MX_Gateway_DWork.temporalCounter_i3_mfuj = 0U;
      } else if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) ==
                  (int32_T)KEYPAD_LOCK_PRESSED) && ((int32_T)((int32_T)
                   can_Keypad[2] & (int32_T)KEYPAD_UNLOCK_MASK) == (int32_T)
                  KEYPAD_UNLOCK_PRESSED) && (state_KeylessPanel == NORMAL) &&
                 ((MX_Gateway_B.UnitDelay1_gwnh == ENGINE_NOT_RUNNING) ||
                  (MX_Gateway_B.UnitDelay1_gwnh == ENGINE_INITIALIZE))) {
        // Transition: '<S697>:44'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_BUTTON_CHANGE_DB;

        // Entry 'BUTTON_CHANGE_DB': '<S697>:6'
        MX_Gateway_DWork.debounceCount = 0U;
      } else {
        if (((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) ==
             (int32_T)KEYPAD_LOCK_PRESSED) && ((int32_T)((int32_T)can_Keypad[2]
              & (int32_T)KEYPAD_UNLOCK_MASK) == 0) && (eeMirror.passwordLock ==
             UNLOCK) && (state_KeylessPanel == NORMAL) &&
            ((MX_Gateway_B.UnitDelay1_gwnh == ENGINE_NOT_RUNNING) ||
             (MX_Gateway_B.UnitDelay1_gwnh == ENGINE_INITIALIZE))) {
          // Transition: '<S697>:35'
          MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_LOCK_DB;
          MX_Gateway_DWork.temporalCounter_i3_mfuj = 0U;
        }
      }
      break;

     case MX_Gateway_IN_UNLOCK_gi5x:
      state_KSLock = KS_UNLOCK_MACHINE;

      // During 'UNLOCK': '<S697>:2'
      if ((eeMirror.passwordLock == UNLOCK) || (state_KSPassword == FAIL)) {
        // Transition: '<S697>:43'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

        // Entry 'NOTHING': '<S697>:3'
        state_KSLock = KS_NOTHING;
      }
      break;

     default:
      // During 'UNLOCK_DB': '<S697>:294'
      if ((int32_T)MX_Gateway_DWork.temporalCounter_i3_mfuj >= 50) {
        // Transition: '<S697>:295'
        MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_UNLOCK_gi5x;

        // Entry 'UNLOCK': '<S697>:2'
        state_KSLock = KS_UNLOCK_MACHINE;
      } else {
        if ((int32_T)((int32_T)can_Keypad[2] & (int32_T)KEYPAD_LOCK_MASK) ==
            (int32_T)KEYPAD_LOCK_PRESSED) {
          // Transition: '<S697>:300'
          MX_Gateway_DWork.bitsForTID1.is_KS_LOCK = MX_Gateway_IN_NOTHING_njh0;

          // Entry 'NOTHING': '<S697>:3'
          state_KSLock = KS_NOTHING;
        }
      }
      break;
    }

    // During 'KS_DISPLAY': '<S697>:184'
    if (MX_Gateway_DWork.bitsForTID1.is_KS_DISPLAY == MX_Gateway_IN_CODE_ERROR1)
    {
      // During 'CODE_ERROR1': '<S697>:302'
    } else {
      // During 'CODE_ERROR2': '<S697>:303'
      if (state_KeylessPanel == NO_COMMUNICATION) {
        // Transition: '<S697>:305'
        // Exit Internal 'CODE_ERROR2': '<S697>:303'
        MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;

        // Exit Internal 'PASSWORD': '<S697>:211'
        MX_Gateway_DWork.bitsForTID1.is_PASSWORD =
          MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
        MX_Gateway_DWork.bitsForTID1.is_KS_DISPLAY = MX_Gateway_IN_CODE_ERROR1;

        // Entry 'CODE_ERROR1': '<S697>:302'
        KSS_Display = DISPLAY_DELUXE_ERROR;
      } else {
        switch (MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2) {
         case MX_Gateway_IN_CHANGE:
          // During 'CHANGE': '<S697>:200'
          if (state_KSPassword == FAIL) {
            // Transition: '<S697>:191'
            MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 =
              MX_Gateway_IN_CODE_ERROR;
            MX_Gateway_DWork.temporalCounter_i4_j2w2 = 0U;

            // Entry 'CODE_ERROR': '<S697>:210'
            KSS_Display = DISPLAY_ERROR;
          } else if (state_KSLock == KS_NOTHING) {
            // Transition: '<S697>:193'
            MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 = MX_Gateway_IN_NOORMAL;

            // Entry 'NOORMAL': '<S697>:218'
            KSS_Display = INACTIVE;
          } else {
            KSS_Display = MX_Gateway_DWork.KSChangeDisp;
          }
          break;

         case MX_Gateway_IN_CODE_ERROR:
          // During 'CODE_ERROR': '<S697>:210'
          if (((int32_T)MX_Gateway_DWork.temporalCounter_i4_j2w2 >= 100) &&
              (state_KSPassword != FAIL)) {
            // Transition: '<S697>:192'
            MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 = MX_Gateway_IN_NOORMAL;

            // Entry 'NOORMAL': '<S697>:218'
            KSS_Display = INACTIVE;
          }
          break;

         case MX_Gateway_IN_NOORMAL:
          // During 'NOORMAL': '<S697>:218'
          if (state_KSLock == KS_CHANGE) {
            // Transition: '<S697>:194'
            MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 = MX_Gateway_IN_CHANGE;
          } else {
            if ((eeMirror.keypad != INACTIVE) && ((((int32_T)state_MachineLock
                   != 0) && (state_KSLock == KS_LOCK)) || (state_KSLock ==
                  KS_UNLOCK_MACHINE) || (state_KSLock == KS_LOCK_MACHINE))) {
              // Transition: '<S697>:196'
              MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 =
                MX_Gateway_IN_PASSWORD;
              MX_Gateway_DWork.temporalCounter_i4_j2w2 = 0U;

              // Entry Internal 'PASSWORD': '<S697>:211'
              // Transition: '<S697>:212'
              MX_Gateway_DWork.bitsForTID1.is_PASSWORD = MX_Gateway_IN_CODE;

              // Entry 'CODE': '<S697>:216'
              KSS_Display = DISPLAY_CODE;
            }
          }
          break;

         default:
          // During 'PASSWORD': '<S697>:211'
          if (state_KSPassword == FAIL) {
            // Transition: '<S697>:187'
            // Exit Internal 'PASSWORD': '<S697>:211'
            MX_Gateway_DWork.bitsForTID1.is_PASSWORD =
              MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
            MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 =
              MX_Gateway_IN_CODE_ERROR;
            MX_Gateway_DWork.temporalCounter_i4_j2w2 = 0U;

            // Entry 'CODE_ERROR': '<S697>:210'
            KSS_Display = DISPLAY_ERROR;
          } else if (((int32_T)MX_Gateway_DWork.temporalCounter_i4_j2w2 >= 50) &&
                     ((!((int32_T)state_MachineLock != 0)) && ((state_KSLock ==
                        KS_UNLOCK) || (state_KSLock == KS_NOTHING)) &&
                      (state_KSPassword != FAIL))) {
            // Transition: '<S697>:198'
            // Exit Internal 'PASSWORD': '<S697>:211'
            MX_Gateway_DWork.bitsForTID1.is_PASSWORD =
              MX_Gate_IN_NO_ACTIVE_CHILD_f01i;
            MX_Gateway_DWork.bitsForTID1.is_CODE_ERROR2 = MX_Gateway_IN_NOORMAL;

            // Entry 'NOORMAL': '<S697>:218'
            KSS_Display = INACTIVE;
          } else if ((MX_Gateway_DWork.bitsForTID1.is_PASSWORD ==
                      MX_Gateway_IN_ASTERISK) || (!((int32_T)pwd_Position != 0)))
          {
            // During 'ASTERISK': '<S697>:217'
          } else {
            // During 'CODE': '<S697>:216'
            // Transition: '<S697>:214'
            MX_Gateway_DWork.bitsForTID1.is_PASSWORD = MX_Gateway_IN_ASTERISK;

            // Entry 'ASTERISK': '<S697>:217'
            KSS_Display = DISPLAY_ASTERISK;
          }
          break;
        }
      }
    }
  }

  // End of Chart: '<S648>/Panel_Lock'
}

// System initialize for atomic system: '<S28>/Machine_Lock'
void MX_Gateway_Machine_Lock_Init(void)
{
  // SystemInitialize for Chart: '<S649>/Lock_Status'
  MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55 = MX_Gate_IN_NO_ACTIVE_CHILD_ja4m;
  MX_Gateway_DWork.bitsForTID1.is_KEYLESS_GENV_DELUXE =
    MX_Gate_IN_NO_ACTIVE_CHILD_ja4m;
  MX_Gateway_DWork.bitsForTID1.is_active_c7_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID1.is_c7_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_ja4m;
  state_MachineLock = 0U;
}

// Output and update for atomic system: '<S28>/Machine_Lock'
void MX_Gateway_Machine_Lock(void)
{
  // Chart: '<S649>/Lock_Status'
  // Gateway: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
  // During: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
  if ((uint32_T)MX_Gateway_DWork.bitsForTID1.is_active_c7_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
    MX_Gateway_DWork.bitsForTID1.is_active_c7_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Machine_Lock/Lock_Status
    // Transition: '<S698>:82'
    MX_Gateway_DWork.bitsForTID1.is_c7_MX_Gateway =
      MX_Gatew_IN_NON_FUNCTIONAL_iweg;

    // Entry 'NON_FUNCTIONAL': '<S698>:81'
    state_MachineLock = ACTIVE;
  } else {
    switch (MX_Gateway_DWork.bitsForTID1.is_c7_MX_Gateway) {
     case MX_Gateway_IN_DELUXE_G55:
      // During 'DELUXE_G55': '<S698>:61'
      if (MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55 == MX_Gateway_IN_LOCK_pixy)
      {
        state_MachineLock = ACTIVE;

        // During 'LOCK': '<S698>:79'
        if ((state_System == SYS_NORMAL) && (MX_Gateway_B.UnitDelay10_kkg2 ==
             NORMAL) && (state_DeluxeG55 == DELUXE_G55_FUNCTION_UNLOCKED) &&
            (auth_DeluxeG55 == AUTHENTICATED)) {
          // Transition: '<S698>:68'
          MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55 = MX_Gateway_IN_UNLOCK_dcz1;

          // Entry 'UNLOCK': '<S698>:80'
          state_MachineLock = INACTIVE;
        }
      } else {
        state_MachineLock = INACTIVE;

        // During 'UNLOCK': '<S698>:80'
      }
      break;

     case MX_Gatew_IN_KEYLESS_GENV_DELUXE:
      // During 'KEYLESS_GENV_DELUXE': '<S698>:60'
      if (MX_Gateway_DWork.bitsForTID1.is_KEYLESS_GENV_DELUXE ==
          MX_Gateway_IN_LOCK_pixy) {
        state_MachineLock = ACTIVE;

        // During 'LOCK': '<S698>:1'
        if (flag_InitEERead && (state_System == SYS_NORMAL) && (((!((int32_T)
                eeMirror.keypad != 0)) && (!((int32_T)eeMirror.deluxe_G5 != 0)) &&
              (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION == NON_FUNCTIONAL)) ||
             (eeMirror.passwordLock == INACTIVE) || (((int32_T)eeMirror.keypad
               != 0) && (state_KeylessPanel == NORMAL) &&
              (MX_Gateway_B.UnitDelay2_nwqf == KS_UNLOCK)) || (((int32_T)
               eeMirror.deluxe_G5 != 0) && (state_DeluxeG5 == NORMAL) &&
              ((int32_T)ddp_MachineLock != 0)))) {
          // Transition: '<S698>:40'
          // no devices on machine that require locking
          // Transition: '<S698>:43'
          // Transition: '<S698>:46'
          // Transition: '<S698>:49'
          // Transition: '<S698>:52'
          MX_Gateway_DWork.bitsForTID1.is_KEYLESS_GENV_DELUXE =
            MX_Gateway_IN_UNLOCK_dcz1;

          // Entry 'UNLOCK': '<S698>:2'
          state_MachineLock = INACTIVE;
        } else {
          // Transition: '<S698>:45'
          // No password lock
          // Transition: '<S698>:48'
          // Keyless Keypad installed, communicating and unlocked
          // Transition: '<S698>:51'
          // Gen 5 Deluxe installed, communicating and unlocked
        }
      } else {
        state_MachineLock = INACTIVE;

        // During 'UNLOCK': '<S698>:2'
        if ((eeMirror.keypad == ACTIVE) && (MX_Gateway_B.UnitDelay2_nwqf ==
             KS_LOCK)) {
          // Transition: '<S698>:4'
          MX_Gateway_DWork.bitsForTID1.is_KEYLESS_GENV_DELUXE =
            MX_Gateway_IN_LOCK_pixy;

          // Entry 'LOCK': '<S698>:1'
          state_MachineLock = ACTIVE;
        }
      }
      break;

     default:
      state_MachineLock = ACTIVE;

      // During 'NON_FUNCTIONAL': '<S698>:81'
      if (CONSTANT_DATA->DELUXE_GEN5_5_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S698>:85'
        MX_Gateway_DWork.bitsForTID1.is_c7_MX_Gateway = MX_Gateway_IN_DELUXE_G55;

        // Entry Internal 'DELUXE_G55': '<S698>:61'
        // Transition: '<S698>:67'
        MX_Gateway_DWork.bitsForTID1.is_DELUXE_G55 = MX_Gateway_IN_LOCK_pixy;

        // Entry 'LOCK': '<S698>:79'
      } else {
        // Transition: '<S698>:83'
        MX_Gateway_DWork.bitsForTID1.is_c7_MX_Gateway =
          MX_Gatew_IN_KEYLESS_GENV_DELUXE;

        // Entry Internal 'KEYLESS_GENV_DELUXE': '<S698>:60'
        // Transition: '<S698>:3'
        MX_Gateway_DWork.bitsForTID1.is_KEYLESS_GENV_DELUXE =
          MX_Gateway_IN_LOCK_pixy;

        // Entry 'LOCK': '<S698>:1'
      }
      break;
    }
  }

  // End of Chart: '<S649>/Lock_Status'
}

// System initialize for atomic system: '<S28>/Throttle_Command'
void MX_Gatewa_Throttle_Command_Init(void)
{
  // SystemInitialize for Chart: '<S650>/Throttle_Command'
  MX_Gateway_DWork.bitsForTID2.is_CAN_Throttle_Actuator =
    MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.bitsForTID2.is_G2_Engine = MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.bitsForTID2.is_Normal_gtqy = MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION =
    MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.bitsForTID2.is_COLD = MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.bitsForTID2.is_EXTREMELY_COLD =
    MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.bitsForTID2.is_Throttle_Actuator =
    MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.bitsForTID2.is_active_c98_MX_Gateway = 0U;
  MX_Gateway_DWork.bitsForTID2.is_c98_MX_Gateway =
    MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
  MX_Gateway_DWork.Throttle_diff = 0;
  MX_Gateway_DWork.Throttle_old = 0U;
  MX_Gateway_DWork.debounceEvent = 0U;
  MX_Gateway_DWork.debounceTC = 0U;
  cmd_Throttle = 0U;
  state_TC = 0U;
}

// Output and update for atomic system: '<S28>/Throttle_Command'
void MX_Gateway_Throttle_Command(void)
{
  // Chart: '<S650>/Throttle_Command'
  // Gateway: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
  // During: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
  if ((uint32_T)MX_Gateway_DWork.bitsForTID2.is_active_c98_MX_Gateway == 0U) {
    // Entry: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
    MX_Gateway_DWork.bitsForTID2.is_active_c98_MX_Gateway = 1U;

    // Entry Internal: MX_Gtwy_Control/System/Throttle_Command/Throttle_Command
    // Transition: '<S699>:121'
    if (CONSTANT_DATA->THROTTLE_PRIMARY_FUNCTION == NON_FUNCTIONAL) {
      // Transition: '<S699>:140'
      MX_Gateway_DWork.bitsForTID2.is_c98_MX_Gateway =
        MX_Gateway_IN_Throttle_Actuator;

      // Entry Internal 'Throttle_Actuator': '<S699>:120'
      // Transition: '<S699>:127'
      MX_Gateway_DWork.bitsForTID2.is_Throttle_Actuator =
        MX_Gateway_IN_Normal_bkdx;

      // Entry 'Normal': '<S699>:125'
      cmd_Throttle = WORD_UNAVAIL;
    } else {
      // Transition: '<S699>:142'
      if (CONSTANT_DATA->ECU_FUNCTION != NON_FUNCTIONAL) {
        // Transition: '<S699>:143'
        MX_Gateway_DWork.bitsForTID2.is_c98_MX_Gateway = MX_Gateway_IN_G2_Engine;

        // Entry Internal 'G2_Engine': '<S699>:131'
        // Transition: '<S699>:179'
        MX_Gateway_DWork.bitsForTID2.is_G2_Engine = MX_Gateway_IN_WAIT_FOR_EOT;

        // Entry 'WAIT_FOR_EOT': '<S699>:157'
        cmd_Throttle = 0U;
        MX_Gateway_DWork.debounceTC = 0U;
        state_TC = INACTIVE;
      } else {
        // Transition: '<S699>:145'
        if (CONSTANT_DATA->CAN_THROTTLE_FUNCTION != NON_FUNCTIONAL) {
          // Transition: '<S699>:146'
          MX_Gateway_DWork.bitsForTID2.is_c98_MX_Gateway =
            MX_Gat_IN_CAN_Throttle_Actuator;

          // Entry Internal 'CAN_Throttle_Actuator': '<S699>:130'
          // Transition: '<S699>:134'
          MX_Gateway_DWork.bitsForTID2.is_CAN_Throttle_Actuator =
            MX_Gateway_IN_Normal_bkdx2g;

          // Entry 'Normal': '<S699>:132'
          cmd_Throttle = MX_Gateway_B.OutportBufferForcmd_CANThrottle;
        } else {
          // Transition: '<S699>:148'
          MX_Gateway_DWork.bitsForTID2.is_c98_MX_Gateway =
            MX_Gateway_IN_Invalid_nww4;

          // Entry 'Invalid': '<S699>:147'
          cmd_Throttle = CONSTANT_DATA->LOW_IDLE_COMMAND;
        }
      }
    }
  } else {
    switch (MX_Gateway_DWork.bitsForTID2.is_c98_MX_Gateway) {
     case MX_Gat_IN_CAN_Throttle_Actuator:
      // During 'CAN_Throttle_Actuator': '<S699>:130'
      switch (MX_Gateway_DWork.bitsForTID2.is_CAN_Throttle_Actuator) {
       case MX_Gateway_IN_AutoIdle:
        // During 'AutoIdle': '<S699>:133'
        if (cmd_AutoIdle != ACTIVE) {
          // Transition: '<S699>:136'
          MX_Gateway_DWork.bitsForTID2.is_CAN_Throttle_Actuator =
            MX_Gateway_IN_Normal_bkdx2g;

          // Entry 'Normal': '<S699>:132'
          cmd_Throttle = MX_Gateway_B.OutportBufferForcmd_CANThrottle;
        }
        break;

       case MX_Gateway_IN_AutoIdle_Reversed:
        // During 'AutoIdle_Reversed': '<S699>:212'
        if (cmd_AutoIdle != ACTIVE) {
          // Transition: '<S699>:214'
          MX_Gateway_DWork.bitsForTID2.is_CAN_Throttle_Actuator =
            MX_Gateway_IN_Normal_bkdx2g;

          // Entry 'Normal': '<S699>:132'
          cmd_Throttle = MX_Gateway_B.OutportBufferForcmd_CANThrottle;
        }
        break;

       default:
        // During 'Normal': '<S699>:132'
        if ((cmd_AutoIdle == ACTIVE) && (CONSTANT_DATA->CAN_THROTTLE_REVERSE ==
             NON_FUNCTIONAL)) {
          // Transition: '<S699>:135'
          MX_Gateway_DWork.bitsForTID2.is_CAN_Throttle_Actuator =
            MX_Gateway_IN_AutoIdle;

          // Entry 'AutoIdle': '<S699>:133'
          cmd_Throttle = eeMirror.ee_ThrottleCalExtended;
        } else if ((cmd_AutoIdle == ACTIVE) &&
                   (CONSTANT_DATA->CAN_THROTTLE_REVERSE != NON_FUNCTIONAL)) {
          // Transition: '<S699>:213'
          MX_Gateway_DWork.bitsForTID2.is_CAN_Throttle_Actuator =
            MX_Gateway_IN_AutoIdle_Reversed;

          // Entry 'AutoIdle_Reversed': '<S699>:212'
          cmd_Throttle = eeMirror.ee_ThrottleCalRetracted;
        } else {
          cmd_Throttle = MX_Gateway_B.OutportBufferForcmd_CANThrottle;
        }
        break;
      }
      break;

     case MX_Gateway_IN_G2_Engine:
      // During 'G2_Engine': '<S699>:131'
      switch (MX_Gateway_DWork.bitsForTID2.is_G2_Engine) {
       case MX_Gateway_IN_Normal_bkdx2:
        // During 'Normal': '<S699>:155'
        if (MX_Gateway_DWork.bitsForTID2.is_Normal_gtqy ==
            MX_Gateway_IN_AutoIdle) {
          // During 'AutoIdle': '<S699>:100'
          if (cmd_AutoIdle != ACTIVE) {
            // Transition: '<S699>:103'
            MX_Gateway_DWork.bitsForTID2.is_Normal_gtqy =
              MX_Gateway_IN_Normal_Throttle;

            // Entry 'Normal_Throttle': '<S699>:60'
            cmd_Throttle = percent_Throttle;
          }
        } else {
          // During 'Normal_Throttle': '<S699>:60'
          if (cmd_AutoIdle == ACTIVE) {
            // Transition: '<S699>:102'
            MX_Gateway_DWork.bitsForTID2.is_Normal_gtqy = MX_Gateway_IN_AutoIdle;

            // Entry 'AutoIdle': '<S699>:100'
            cmd_Throttle = CONSTANT_DATA->LOW_IDLE_COMMAND;
          } else {
            cmd_Throttle = percent_Throttle;
          }
        }
        break;

       case MX_Gateway_IN_TC_PROTECTION:
        // During 'TC_PROTECTION': '<S699>:158'
        if ((flt_EOP >= CONSTANT_DATA->TC_PROTECT_EOP_LOW) &&
            (MX_Gateway_B.RateTransition20_mrae == NORMAL) &&
            ((MX_Gateway_DWork.debounceTC >=
              CONSTANT_DATA->TC_PROTECT_DEBOUNCE_ENABLE) &&
             (CONSTANT_DATA->TC_PROTECT_DEBOUNCE_ENABLE != UNLIMITED))) {
          // Transition: '<S699>:177'
          // Exit Internal 'TC_PROTECTION': '<S699>:158'
          // Exit Internal 'COLD': '<S699>:162'
          MX_Gateway_DWork.bitsForTID2.is_COLD = MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
          MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION =
            MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;

          // Exit Internal 'EXTREMELY_COLD': '<S699>:168'
          MX_Gateway_DWork.bitsForTID2.is_EXTREMELY_COLD =
            MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
          MX_Gateway_DWork.bitsForTID2.is_G2_Engine =
            M_IN_WAIT_FOR_THROTTLE_MOVEMENT;

          // Entry 'WAIT_FOR_THROTTLE_MOVEMENT': '<S699>:174'
          state_TC = NORMAL;
          MX_Gateway_DWork.Throttle_old = percent_Throttle;
          state_Buzzer = DOUBLE_SHORT_BEEP;
          MX_Gateway_DWork.Throttle_diff = 0;
        } else {
          switch (MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION) {
           case MX_Gateway_IN_COLD_cwet:
            // During 'COLD': '<S699>:162'
            if (state_EOT == EXTREMELY_LOW) {
              // Transition: '<S699>:161'
              // Exit Internal 'COLD': '<S699>:162'
              MX_Gateway_DWork.bitsForTID2.is_COLD =
                MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
              MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION =
                MX_Gateway_IN_EXTREMELY_COLD;

              // Entry 'EXTREMELY_COLD': '<S699>:168'
              cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_EXT_LOW;

              // Entry Internal 'EXTREMELY_COLD': '<S699>:168'
              // Transition: '<S699>:169'
              MX_Gateway_DWork.bitsForTID2.is_EXTREMELY_COLD =
                MX_Gateway_IN_CHECK_THROTTLE;

              // Entry 'CHECK_THROTTLE': '<S699>:172'
              state_TC = EXTREMELY_LOW;
              MX_Gateway_DWork.Throttle_old = percent_Throttle;
            } else if (MX_Gateway_B.RateTransition10_mue4 != ENGINE_RUNNING) {
              // Transition: '<S699>:204'
              // Exit Internal 'COLD': '<S699>:162'
              MX_Gateway_DWork.bitsForTID2.is_COLD =
                MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
              MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION =
                MX_Gateway_IN_TIMER_RESET;
            } else {
              MX_Gateway_DWork.debounceTC = (uint16_T)(int32_T)((int32_T)
                MX_Gateway_DWork.debounceTC + 1);
              if (MX_Gateway_DWork.bitsForTID2.is_COLD ==
                  MX_Gateway_IN_CHECK_THROTTLE) {
                // During 'CHECK_THROTTLE': '<S699>:166'
                if ((int32_T)MX_Gateway_DWork.Throttle_diff >= (int32_T)
                    CONSTANT_DATA->TC_PROTECT_THROTTLE_DIFFERENCE) {
                  // Transition: '<S699>:164'
                  MX_Gateway_DWork.bitsForTID2.is_COLD =
                    MX_Gateway_IN_THROTTLE_MOVED;

                  // Entry 'THROTTLE_MOVED': '<S699>:167'
                  state_TC = EVENT;
                  MX_Gateway_DWork.debounceEvent = 0U;
                  state_Buzzer = TRIPLE_SHORT_BEEP;
                  MX_Gateway_DWork.Throttle_diff = 0;
                } else {
                  MX_Gateway_DWork.Throttle_diff = (int16_T)(int32_T)((int32_T)
                    percent_Throttle - (int32_T)MX_Gateway_DWork.Throttle_old);
                  if ((int32_T)MX_Gateway_DWork.Throttle_diff < 0) {
                    MX_Gateway_DWork.Throttle_diff = (int16_T)(int32_T)-(int32_T)
                      MX_Gateway_DWork.Throttle_diff;
                  }
                }
              } else {
                // During 'THROTTLE_MOVED': '<S699>:167'
                if ((MX_Gateway_DWork.debounceEvent >=
                     CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_LOW_EVENT) &&
                    (CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_LOW_EVENT !=
                     UNLIMITED)) {
                  // Transition: '<S699>:165'
                  MX_Gateway_DWork.bitsForTID2.is_COLD =
                    MX_Gateway_IN_CHECK_THROTTLE;

                  // Entry 'CHECK_THROTTLE': '<S699>:166'
                  state_TC = LOW;
                  MX_Gateway_DWork.Throttle_old = percent_Throttle;
                } else {
                  MX_Gateway_DWork.debounceEvent = (uint16_T)(int32_T)((int32_T)
                    MX_Gateway_DWork.debounceEvent + 1);
                }
              }
            }
            break;

           case MX_Gateway_IN_EXTREMELY_COLD:
            // During 'EXTREMELY_COLD': '<S699>:168'
            if (state_EOT != EXTREMELY_LOW) {
              // Transition: '<S699>:160'
              // Exit Internal 'EXTREMELY_COLD': '<S699>:168'
              MX_Gateway_DWork.bitsForTID2.is_EXTREMELY_COLD =
                MX_Gate_IN_NO_ACTIVE_CHILD_c3pq;
              MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION =
                MX_Gateway_IN_COLD_cwet;

              // Entry 'COLD': '<S699>:162'
              cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_LOW;
              MX_Gateway_DWork.debounceTC = 0U;

              // Entry Internal 'COLD': '<S699>:162'
              // Transition: '<S699>:163'
              MX_Gateway_DWork.bitsForTID2.is_COLD =
                MX_Gateway_IN_CHECK_THROTTLE;

              // Entry 'CHECK_THROTTLE': '<S699>:166'
              state_TC = LOW;
              MX_Gateway_DWork.Throttle_old = percent_Throttle;
            } else if (MX_Gateway_DWork.bitsForTID2.is_EXTREMELY_COLD ==
                       MX_Gateway_IN_CHECK_THROTTLE) {
              // During 'CHECK_THROTTLE': '<S699>:172'
              if ((int32_T)MX_Gateway_DWork.Throttle_diff >= (int32_T)
                  CONSTANT_DATA->TC_PROTECT_THROTTLE_DIFFERENCE) {
                // Transition: '<S699>:170'
                MX_Gateway_DWork.bitsForTID2.is_EXTREMELY_COLD =
                  MX_Gateway_IN_THROTTLE_MOVED;

                // Entry 'THROTTLE_MOVED': '<S699>:173'
                state_TC = EVENT;
                MX_Gateway_DWork.debounceEvent = 0U;
                state_Buzzer = TRIPLE_SHORT_BEEP;
                MX_Gateway_DWork.Throttle_diff = 0;
              } else {
                MX_Gateway_DWork.Throttle_diff = (int16_T)(int32_T)((int32_T)
                  percent_Throttle - (int32_T)MX_Gateway_DWork.Throttle_old);
                if ((int32_T)MX_Gateway_DWork.Throttle_diff < 0) {
                  MX_Gateway_DWork.Throttle_diff = (int16_T)(int32_T)-(int32_T)
                    MX_Gateway_DWork.Throttle_diff;
                }
              }
            } else {
              // During 'THROTTLE_MOVED': '<S699>:173'
              if ((MX_Gateway_DWork.debounceEvent >=
                   CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_EXT_LOW_EVENT) &&
                  (CONSTANT_DATA->TC_PROTECT_THROTTLE_DEBOUNCE_EXT_LOW_EVENT !=
                   UNLIMITED)) {
                // Transition: '<S699>:171'
                MX_Gateway_DWork.bitsForTID2.is_EXTREMELY_COLD =
                  MX_Gateway_IN_CHECK_THROTTLE;

                // Entry 'CHECK_THROTTLE': '<S699>:172'
                state_TC = EXTREMELY_LOW;
                MX_Gateway_DWork.Throttle_old = percent_Throttle;
              } else {
                MX_Gateway_DWork.debounceEvent = (uint16_T)(int32_T)((int32_T)
                  MX_Gateway_DWork.debounceEvent + 1);
              }
            }
            break;

           default:
            // During 'TIMER_RESET': '<S699>:203'
            if (MX_Gateway_B.RateTransition10_mue4 == ENGINE_RUNNING) {
              // Transition: '<S699>:205'
              MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION =
                MX_Gateway_IN_COLD_cwet;

              // Entry 'COLD': '<S699>:162'
              cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_LOW;
              MX_Gateway_DWork.debounceTC = 0U;

              // Entry Internal 'COLD': '<S699>:162'
              // Transition: '<S699>:163'
              MX_Gateway_DWork.bitsForTID2.is_COLD =
                MX_Gateway_IN_CHECK_THROTTLE;

              // Entry 'CHECK_THROTTLE': '<S699>:166'
              state_TC = LOW;
              MX_Gateway_DWork.Throttle_old = percent_Throttle;
            }
            break;
          }
        }
        break;

       case MX_Gateway_IN_WAIT_FOR_EOT:
        // During 'WAIT_FOR_EOT': '<S699>:157'
        if (((state_EOT == NORMAL) && (MX_Gateway_B.RateTransition10_mue4 ==
              ENGINE_RUNNING)) || (CONSTANT_DATA->TC_PROTECT_FUNCTION ==
             NON_FUNCTIONAL)) {
          // Transition: '<S699>:180'
          MX_Gateway_DWork.bitsForTID2.is_G2_Engine = MX_Gateway_IN_Normal_bkdx2;

          // Entry Internal 'Normal': '<S699>:155'
          // Transition: '<S699>:63'
          MX_Gateway_DWork.bitsForTID2.is_Normal_gtqy =
            MX_Gateway_IN_Normal_Throttle;

          // Entry 'Normal_Throttle': '<S699>:60'
          cmd_Throttle = percent_Throttle;
        } else {
          if (((state_EOT == LOW) || (state_EOT == EXTREMELY_LOW)) &&
              (CONSTANT_DATA->TC_PROTECT_FUNCTION != NON_FUNCTIONAL) &&
              (MX_Gateway_B.RateTransition10_mue4 == ENGINE_RUNNING)) {
            // Transition: '<S699>:175'
            MX_Gateway_DWork.bitsForTID2.is_G2_Engine =
              MX_Gateway_IN_TC_PROTECTION;

            // Entry Internal 'TC_PROTECTION': '<S699>:158'
            // Transition: '<S699>:159'
            MX_Gateway_DWork.bitsForTID2.is_TC_PROTECTION =
              MX_Gateway_IN_COLD_cwet;

            // Entry 'COLD': '<S699>:162'
            cmd_Throttle = CONSTANT_DATA->TC_PROTECT_THROTTLE_LOW;
            MX_Gateway_DWork.debounceTC = 0U;

            // Entry Internal 'COLD': '<S699>:162'
            // Transition: '<S699>:163'
            MX_Gateway_DWork.bitsForTID2.is_COLD = MX_Gateway_IN_CHECK_THROTTLE;

            // Entry 'CHECK_THROTTLE': '<S699>:166'
            state_TC = LOW;
            MX_Gateway_DWork.Throttle_old = percent_Throttle;
          }
        }
        break;

       default:
        // During 'WAIT_FOR_THROTTLE_MOVEMENT': '<S699>:174'
        if ((int32_T)MX_Gateway_DWork.Throttle_diff >= (int32_T)
            CONSTANT_DATA->TC_PROTECT_THROTTLE_DIFFERENCE) {
          // Transition: '<S699>:178'
          MX_Gateway_DWork.bitsForTID2.is_G2_Engine = MX_Gateway_IN_Normal_bkdx2;

          // Entry Internal 'Normal': '<S699>:155'
          // Transition: '<S699>:63'
          MX_Gateway_DWork.bitsForTID2.is_Normal_gtqy =
            MX_Gateway_IN_Normal_Throttle;

          // Entry 'Normal_Throttle': '<S699>:60'
          cmd_Throttle = percent_Throttle;
        } else {
          MX_Gateway_DWork.Throttle_diff = (int16_T)(int32_T)((int32_T)
            percent_Throttle - (int32_T)MX_Gateway_DWork.Throttle_old);
          if ((int32_T)MX_Gateway_DWork.Throttle_diff < 0) {
            MX_Gateway_DWork.Throttle_diff = (int16_T)(int32_T)-(int32_T)
              MX_Gateway_DWork.Throttle_diff;
          }
        }
        break;
      }
      break;

     case MX_Gateway_IN_Invalid_nww4:
      // During 'Invalid': '<S699>:147'
      break;

     default:
      // During 'Throttle_Actuator': '<S699>:120'
      if (MX_Gateway_DWork.bitsForTID2.is_Throttle_Actuator ==
          MX_Gateway_IN_AutoIdle) {
        // During 'AutoIdle': '<S699>:126'
        if (cmd_AutoIdle != ACTIVE) {
          // Transition: '<S699>:129'
          MX_Gateway_DWork.bitsForTID2.is_Throttle_Actuator =
            MX_Gateway_IN_Normal_bkdx;

          // Entry 'Normal': '<S699>:125'
          cmd_Throttle = WORD_UNAVAIL;
        }
      } else {
        // During 'Normal': '<S699>:125'
        if (cmd_AutoIdle == ACTIVE) {
          // Transition: '<S699>:128'
          MX_Gateway_DWork.bitsForTID2.is_Throttle_Actuator =
            MX_Gateway_IN_AutoIdle;

          // Entry 'AutoIdle': '<S699>:126'
          cmd_Throttle = CONSTANT_DATA->LOW_IDLE_COMMAND;
        }
      }
      break;
    }
  }

  // End of Chart: '<S650>/Throttle_Command'
}

//
//  [EOF]

