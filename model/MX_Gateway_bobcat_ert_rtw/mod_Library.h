//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : MX_Gateway


#ifndef RTW_HEADER_mod_Library_h_
#define RTW_HEADER_mod_Library_h_
#ifndef MX_Gateway_COMMON_INCLUDES_
# define MX_Gateway_COMMON_INCLUDES_
#include "rtwtypes.h"
#include "rtw_continuous.h"
#include "rtw_solver.h"
#endif                                 // MX_Gateway_COMMON_INCLUDES_

#include "MX_Gateway_types.h"

// Block states (auto storage) for system '<S96>/LP_Filter'
typedef struct {
  int16_T FixPtUnitDelay1_DSTATE;      // '<S171>/FixPt Unit Delay1'
  uint8_T FixPtUnitDelay2_DSTATE;      // '<S171>/FixPt Unit Delay2'
} rtDW_LP_Filter_MX_Gateway;

// Block states (auto storage) for system '<S173>/LP_Filter'
typedef struct {
  int16_T FixPtUnitDelay1_DSTATE;      // '<S180>/FixPt Unit Delay1'
  uint8_T FixPtUnitDelay2_DSTATE;      // '<S180>/FixPt Unit Delay2'
} rtDW_LP_Filter_MX_Gateway_ntkm;

// Block states (auto storage) for system '<S173>/LP_Filter_Adj_Gain'
typedef struct {
  struct {
    uint_T is_c1_MX_Library:2;         // '<S177>/LP_Filter_Adj_Gain'
    uint_T is_active_c1_MX_Library:1;  // '<S177>/LP_Filter_Adj_Gain'
  } bitsForTID2;
} rtDW_LP_Filter_Adj_Gain_MX_Gate;

// Block states (auto storage) for system '<S173>/Remove_OOR_Levels'
typedef struct {
  uint16_T fltValue_old;               // '<S179>/RemoveOORLevels'
} rtDW_Remove_OOR_Levels_MX_Gatew;

// Block states (auto storage) for system '<S105>/LP_Filter_Adj_Gain'
typedef struct {
  struct {
    uint_T is_c1_MX_Library:2;         // '<S223>/LP_Filter_Adj_Gain'
    uint_T is_active_c1_MX_Library:1;  // '<S223>/LP_Filter_Adj_Gain'
  } bitsForTID2;
} rtDW_LP_Filter_Adj_Gain_MX_j5ng;

// Block states (auto storage) for system '<S239>/LP_Filter_Adj_System'
typedef struct {
  struct {
    uint_T is_c2_MX_Library:2;         // '<S241>/LP_Fitler_Adj_Gain'
    uint_T is_active_c2_MX_Library:1;  // '<S241>/LP_Fitler_Adj_Gain'
  } bitsForTID2;
} rtDW_LP_Filter_Adj_System_MX_Ga;

// Block signals for system '<S351>/control_loop'
typedef struct {
  int16_T DiscreteTimeIntegrator;      // '<S359>/Discrete-Time Integrator'
} rtB_control_loop_MX_Gateway;

// Block states (auto storage) for system '<S351>/control_loop'
typedef struct {
  int16_T DiscreteTimeIntegrator_DSTATE;// '<S359>/Discrete-Time Integrator'
  boolean_T control_loop_MODE;         // '<S351>/control_loop'
} rtDW_control_loop_MX_Gateway;

// Block states (auto storage) for system '<S351>/hc_pair_OpenLoop'
typedef struct {
  struct {
    uint_T is_ACTIVE:3;                // '<S361>/Fault monitor'
    uint_T is_OUTPUT:3;                // '<S361>/Fault monitor'
    uint_T is_OC_STG:2;                // '<S361>/Fault monitor'
    uint_T is_OPEN_CIRCUIT:2;          // '<S361>/Fault monitor'
    uint_T is_SHORT_TO_GROUND:2;       // '<S361>/Fault monitor'
    uint_T is_SHORT_TO_BATTERY:2;      // '<S361>/Fault monitor'
    uint_T is_FAULT:2;                 // '<S361>/Fault monitor'
    uint_T is_OVERCURRENT:2;           // '<S361>/Fault monitor'
    uint_T is_active_c63_MX_Library:1; // '<S361>/Fault monitor'
  } bitsForTID1;

  uint16_T db_cnt;                     // '<S361>/Fault monitor'
  uint16_T db_cnt_oc;                  // '<S361>/Fault monitor'
  uint8_T temporalCounter_i1;          // '<S361>/Fault monitor'
} rtDW_hc_pair_OpenLoop_MX_Gatewa;

// Block signals for system '<S328>/hc_pair_ClosedLoop_v5'
typedef struct {
  uint16_T DataTypeConversion;         // '<S359>/Data Type Conversion'
  rtB_control_loop_MX_Gateway control_loop;// '<S351>/control_loop'
} rtB_hc_pair_ClosedLoop_v5_MX_Ga;

// Block states (auto storage) for system '<S328>/hc_pair_ClosedLoop_v5'
typedef struct {
  uint8_T UnitDelay1_DSTATE;           // '<S351>/Unit Delay1'
  boolean_T UnitDelay_DSTATE;          // '<S351>/Unit Delay'
  rtDW_hc_pair_OpenLoop_MX_Gatewa hc_pair_OpenLoop;// '<S351>/hc_pair_OpenLoop'
  rtDW_control_loop_MX_Gateway control_loop;// '<S351>/control_loop'
} rtDW_hc_pair_ClosedLoop_v5_MX_G;

// Block states (auto storage) for system '<S328>/oc_stg_detection'
typedef struct {
  struct {
    uint_T is_c5_MX_Library:3;         // '<S352>/oc_operation_detection'
    uint_T is_active_c5_MX_Library:1;  // '<S352>/oc_operation_detection'
  } bitsForTID1;

  uint16_T debounceCount;              // '<S352>/oc_operation_detection'
  uint8_T temporalCounter_i1;          // '<S352>/oc_operation_detection'
} rtDW_oc_stg_detection_MX_Gatewa;

// Block signals for system '<S321>/hc_pair_control'
typedef struct {
  int32_T Output;                      // '<S354>/LP_Filter_Adj_Gain'
  uint16_T icmd_Out;                   // '<S328>/control'
  uint8_T diag_state_out;              // '<S352>/oc_operation_detection'
  uint8_T diag_state;                  // '<S361>/Fault monitor'
  uint8_T oc_state;                    // '<S361>/Fault monitor'
  boolean_T enable_LoSide;             // '<S328>/control'
  rtB_hc_pair_ClosedLoop_v5_MX_Ga hc_pair_ClosedLoop_v5;// '<S328>/hc_pair_ClosedLoop_v5' 
} rtB_output_pair_ClosedLoop_MX_G;

// Block states (auto storage) for system '<S321>/hc_pair_control'
typedef struct {
  struct {
    uint_T is_c39_MX_Library:2;        // '<S328>/control'
    uint_T is_STGOFF_DIAG_ACTIVE:2;    // '<S328>/control'
    uint_T is_STGOFF_DIAG_INACTIVE:2;  // '<S328>/control'
    uint_T is_DIAG_CHECK:2;            // '<S328>/control'
    uint_T is_FUNCTIONAL:2;            // '<S328>/control'
    uint_T is_active_c39_MX_Library:1; // '<S328>/control'
  } bitsForTID1;

  uint16_T debounceCount;              // '<S328>/control'
  uint8_T UnitDelay1_DSTATE;           // '<S328>/Unit Delay1'
  uint8_T UnitDelay4_DSTATE;           // '<S328>/Unit Delay4'
  rtDW_oc_stg_detection_MX_Gatewa oc_stg_detection;// '<S328>/oc_stg_detection'
  rtDW_hc_pair_ClosedLoop_v5_MX_G hc_pair_ClosedLoop_v5;// '<S328>/hc_pair_ClosedLoop_v5' 
  rtDW_LP_Filter_Adj_Gain_MX_Gate LP_Filter_Adj_Gain;// '<S349>/LP_Filter_Adj_Gain' 
} rtDW_output_pair_ClosedLoop_MX_;

// Block signals for system '<S386>/output_pair_open_loop'
typedef struct {
  int32_T Output;                      // '<S399>/LP_Filter_Adj_Gain'
  uint8_T diag_state_out;              // '<S397>/oc_operation_detection'
  uint8_T diag_state;                  // '<S401>/Fault monitor'
  uint8_T oc_state;                    // '<S401>/Fault monitor'
  boolean_T enable_LoSide;             // '<S389>/control'
} rtB_output_pair_OpenLoop_MX_Gat;

// Block states (auto storage) for system '<S386>/output_pair_open_loop'
typedef struct {
  struct {
    uint_T is_c51_MX_Library:2;        // '<S389>/control'
    uint_T is_STGOFF_DIAG_ACTIVE:2;    // '<S389>/control'
    uint_T is_STGOFF_DIAG_INACTIVE:2;  // '<S389>/control'
    uint_T is_DIAG_CHECK:2;            // '<S389>/control'
    uint_T is_FUNCTIONAL:2;            // '<S389>/control'
    uint_T is_active_c51_MX_Library:1; // '<S389>/control'
  } bitsForTID1;

  uint16_T debounceCount;              // '<S389>/control'
  uint8_T UnitDelay2_DSTATE;           // '<S389>/Unit Delay2'
  uint8_T UnitDelay3_DSTATE;           // '<S389>/Unit Delay3'
  rtDW_oc_stg_detection_MX_Gatewa oc_stg_detection;// '<S389>/oc_stg_detection'
  rtDW_hc_pair_OpenLoop_MX_Gatewa hc_pair_OpenLoop;// '<S389>/hc_pair_OpenLoop'
  rtDW_LP_Filter_Adj_Gain_MX_Gate LP_Filter_Adj_Gain;// '<S394>/LP_Filter_Adj_Gain' 
} rtDW_output_pair_OpenLoop_MX_Ga;

// Block signals for system '<S427>/relay_oc'
typedef struct {
  uint8_T state_Relay;                 // '<S432>/relay_error_state'
  uint8_T state_Output;                // '<S432>/relay_error_state'
} rtB_relay_oc_MX_Gateway;

// Block states (auto storage) for system '<S427>/relay_oc'
typedef struct {
  struct {
    uint_T is_OUTPUT:3;                // '<S432>/relay_error_state'
    uint_T is_NORMAL:2;                // '<S432>/relay_error_state'
    uint_T is_ERROR_OFF:2;             // '<S432>/relay_error_state'
    uint_T is_ERROR_ON:2;              // '<S432>/relay_error_state'
    uint_T is_STATE_OUTPUT:2;          // '<S432>/relay_error_state'
    uint_T is_NORMAL_food:2;           // '<S432>/relay_error_state'
    uint_T is_ERROR_ON_lmya:2;         // '<S432>/relay_error_state'
    uint_T is_ERROR_OFF_cild:2;        // '<S432>/relay_error_state'
    uint_T is_OPEN_CIRCUIT:2;          // '<S432>/relay_error_state'
    uint_T is_FAILURE:2;               // '<S432>/relay_error_state'
    uint_T is_STATE_RELAY:2;           // '<S432>/relay_error_state'
    uint_T is_RELAY:2;                 // '<S432>/relay_error_state'
    uint_T is_active_c3_MX_Library:1;  // '<S432>/relay_error_state'
  } bitsForTID1;

  uint16_T debounceOutput;             // '<S432>/relay_error_state'
  uint16_T debounceRelay;              // '<S432>/relay_error_state'
  boolean_T relay_oc_MODE;             // '<S427>/relay_oc'
} rtDW_relay_oc_MX_Gateway;

// Block signals for system '<S308>/hc_hsd'
typedef struct {
  uint8_T state;                       // '<S443>/Fault monitor'
} rtB_hc_hsd_MX_Gateway;

// Block states (auto storage) for system '<S308>/hc_hsd'
typedef struct {
  struct {
    uint_T is_c4_MX_Library:3;         // '<S443>/Fault monitor'
    uint_T is_OPEN_CIRCUIT:2;          // '<S443>/Fault monitor'
    uint_T is_SHORT_TO_GROUND:2;       // '<S443>/Fault monitor'
    uint_T is_SHORT_TO_BATTERY:2;      // '<S443>/Fault monitor'
    uint_T is_active_c4_MX_Library:1;  // '<S443>/Fault monitor'
  } bitsForTID1;

  uint16_T db_cnt;                     // '<S443>/Fault monitor'
  boolean_T hc_hsd_MODE;               // '<S308>/hc_hsd'
} rtDW_hc_hsd_MX_Gateway;

// Block signals for system '<S579>/hc_Output'
typedef struct {
  uint16_T duty_Output;                // '<S583>/control'
  uint8_T state;                       // '<S590>/Fault monitor'
  rtB_hc_hsd_MX_Gateway hc_hsd;        // '<S583>/hc_hsd'
} rtB_output_single_OpenLoop_MX_G;

// Block states (auto storage) for system '<S579>/hc_Output'
typedef struct {
  struct {
    uint_T is_c41_MX_Library:2;        // '<S583>/control'
    uint_T is_FUNCTIONAL:2;            // '<S583>/control'
    uint_T is_active_c41_MX_Library:1; // '<S583>/control'
  } bitsForTID1;

  uint8_T UnitDelay_DSTATE;            // '<S583>/Unit Delay'
  rtDW_hc_hsd_MX_Gateway hc_hsd;       // '<S583>/hc_hsd'
} rtDW_output_single_OpenLoop_MX_;

extern void MX_Gateway_ErrorCode(uint8_T rtu_failure, uint16_T *rty_ecode,
  uint16_T rtp_FUNCTION);
extern void MX_Gateway_LP_Filter_Init(rtDW_LP_Filter_MX_Gateway *localDW);
extern void MX_Gateway_LP_Filter(int16_T rtu_In, int16_T *rty_Out,
  rtDW_LP_Filter_MX_Gateway *localDW);
extern void MX_Gatewa_Ratiometric_Converter(uint16_T rtu_SensorInput, uint16_T
  rtu_SensorSupply, uint16_T *rty_Ratiometric, uint16_T rtp_multiplier);
extern void MX_Gateway_LP_Filter_kaxm_Init(rtDW_LP_Filter_MX_Gateway_ntkm
  *localDW);
extern void MX_Gateway_LP_Filter_ntmf_Reset(rtDW_LP_Filter_MX_Gateway_ntkm
  *localDW);
extern void MX_Gateway_LP_Filter_dijo(uint16_T rtu_In, int16_T *rty_Out,
  rtDW_LP_Filter_MX_Gateway_ntkm *localDW);
extern void MX_Gate_LP_Filter_Adj_Gain_Init(int32_T *rty_Output,
  rtDW_LP_Filter_Adj_Gain_MX_Gate *localDW);
extern void MX_Gat_LP_Filter_Adj_Gain_Reset(int32_T *rty_Output,
  rtDW_LP_Filter_Adj_Gain_MX_Gate *localDW);
extern void MX_Gateway_LP_Filter_Adj_Gain(uint8_T rtu_Gain, int16_T rtu_Input,
  int32_T *rty_Output, rtDW_LP_Filter_Adj_Gain_MX_Gate *localDW);
extern void MX_Gatew_Remove_OOR_Levels_Init(uint16_T *rty_fltValue_out,
  rtDW_Remove_OOR_Levels_MX_Gatew *localDW);
extern void MX_Gate_Remove_OOR_Levels_Reset(uint16_T *rty_fltValue_out,
  rtDW_Remove_OOR_Levels_MX_Gatew *localDW);
extern void MX_Gateway_Remove_OOR_Levels(uint16_T rtu_fltValue_in, uint16_T
  *rty_fltValue_out, rtDW_Remove_OOR_Levels_MX_Gatew *localDW, uint16_T
  rtp_OORH_LEVEL, uint16_T rtp_OORL_LEVEL);
extern void MX_LP_Filter_Adj_Gain_bqur_Init(int32_T *rty_Output,
  rtDW_LP_Filter_Adj_Gain_MX_j5ng *localDW);
extern void MX_Gate_LP_Filter_Adj_Gain_hwrc(uint8_T rtu_Gain, int16_T rtu_Input,
  int32_T *rty_Output, rtDW_LP_Filter_Adj_Gain_MX_j5ng *localDW);
extern void MX_Ga_LP_Filter_Adj_System_Init(int32_T *rty_Output,
  rtDW_LP_Filter_Adj_System_MX_Ga *localDW);
extern void MX_G_LP_Filter_Adj_System_Reset(int32_T *rty_Output,
  rtDW_LP_Filter_Adj_System_MX_Ga *localDW);
extern void MX_Gateway_LP_Filter_Adj_System(uint8_T rtu_Gain, int16_T rtu_Input,
  uint8_T rtu_state_System, int32_T *rty_Output, rtDW_LP_Filter_Adj_System_MX_Ga
  *localDW);
extern void MX_Gateway_control_loop_Init(rtDW_control_loop_MX_Gateway *localDW);
extern void MX_Gateway_control_loop_Reset(rtDW_control_loop_MX_Gateway *localDW);
extern void MX_Gateway_control_loop_Disable(int16_T *rty_error, uint16_T
  *rty_duty, rtB_control_loop_MX_Gateway *localB, rtDW_control_loop_MX_Gateway
  *localDW);
extern void MX_Gateway_control_loop(boolean_T rtu_Enable, uint16_T rtu_i_cmd,
  uint16_T rtu_i_fbk, int16_T *rty_error, uint16_T *rty_duty,
  rtB_control_loop_MX_Gateway *localB, rtDW_control_loop_MX_Gateway *localDW,
  uint16_T rtp_KP, uint16_T rtp_KI);
extern void MX_Gatewa_hc_pair_OpenLoop_Init(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_oc_state, uint8_T *rty_diag_state,
  rtDW_hc_pair_OpenLoop_MX_Gatewa *localDW);
extern void MX_Gatew_hc_pair_OpenLoop_Reset(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_oc_state, uint8_T *rty_diag_state,
  rtDW_hc_pair_OpenLoop_MX_Gatewa *localDW);
extern void MX_Gateway_hc_pair_OpenLoop(uint16_T rtu_duty, boolean_T rtu_enable,
  boolean_T rtu_diag_enable, uint16_T rtu_afbk, uint16_T rtu_Vbatt, uint16_T
  rtu_ifbk, uint8_T rtu_ocstg_check, uint16_T *rty_hs_cmd, boolean_T *rty_ls_cmd,
  uint8_T *rty_oc_state, uint8_T *rty_diag_state,
  rtDW_hc_pair_OpenLoop_MX_Gatewa *localDW, uint16_T rtp_IFBK_MAX, uint16_T
  rtp_NZ_DUTY, uint16_T rtp_NZ_IFBK, uint16_T rtp_OC_DB_CNT, uint16_T
  rtp_OPEN_DB_CNT, uint16_T rtp_OSTG_DB_CNT, uint16_T rtp_STB_DB_CNT, uint16_T
  rtp_STG_DB_CNT);
extern void MX_G_hc_pair_ClosedLoop_v5_Init(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_oc_state, uint8_T *rty_diag_state,
  rtDW_hc_pair_ClosedLoop_v5_MX_G *localDW);
extern void MX__hc_pair_ClosedLoop_v5_Reset(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_oc_state, uint8_T *rty_diag_state,
  rtDW_hc_pair_ClosedLoop_v5_MX_G *localDW);
extern void M_hc_pair_ClosedLoop_v5_Disable(int16_T *rty_error,
  rtB_hc_pair_ClosedLoop_v5_MX_Ga *localB, rtDW_hc_pair_ClosedLoop_v5_MX_G
  *localDW);
extern void MX_Gatewa_hc_pair_ClosedLoop_v5(uint16_T rtu_i_cmd, boolean_T
  rtu_enable_LoSide, boolean_T rtu_diag_enable, uint16_T rtu_afbk, uint16_T
  rtu_Vbatt, uint16_T rtu_i_fbk, uint8_T rtu_ocstg_check, uint16_T *rty_hs_cmd,
  boolean_T *rty_ls_cmd, uint8_T *rty_oc_state, uint8_T *rty_diag_state, int16_T
  *rty_error, rtB_hc_pair_ClosedLoop_v5_MX_Ga *localB,
  rtDW_hc_pair_ClosedLoop_v5_MX_G *localDW, uint16_T rtp_KP, uint16_T rtp_KI,
  uint16_T rtp_IFBK_MAX, uint16_T rtp_NZ_DUTY, uint16_T rtp_NZ_IFBK, uint16_T
  rtp_OC_DB_CNT, uint16_T rtp_OPEN_DB_CNT, uint16_T rtp_OSTG_DB_CNT, uint16_T
  rtp_STB_DB_CNT, uint16_T rtp_STG_DB_CNT, uint8_T rtp_BIDIRECTIONAL_CTRL);
extern void MX_Gatewa_oc_stg_detection_Init(uint8_T *rty_diag_state_out, uint8_T
  *rty_ocstg_check, rtDW_oc_stg_detection_MX_Gatewa *localDW);
extern void MX_Gatew_oc_stg_detection_Reset(uint8_T *rty_diag_state_out, uint8_T
  *rty_ocstg_check, rtDW_oc_stg_detection_MX_Gatewa *localDW);
extern void MX_Gateway_oc_stg_detection(uint8_T rtu_oc_state, uint8_T
  rtu_diag_state_in, uint8_T *rty_diag_state_out, uint8_T *rty_ocstg_check,
  rtDW_oc_stg_detection_MX_Gatewa *localDW, uint16_T rtp_OPEN_DB_CNT, uint16_T
  rtp_STG_DB_CNT);
extern void MX__output_pair_ClosedLoop_Init(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_state_Output, rtB_output_pair_ClosedLoop_MX_G
  *localB, rtDW_output_pair_ClosedLoop_MX_ *localDW);
extern void MX_output_pair_ClosedLoop_Reset(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_state_Output, rtB_output_pair_ClosedLoop_MX_G
  *localB, rtDW_output_pair_ClosedLoop_MX_ *localDW);
extern void output_pair_ClosedLoop_Disable(int16_T *rty_errorCC,
  rtB_output_pair_ClosedLoop_MX_G *localB, rtDW_output_pair_ClosedLoop_MX_
  *localDW);
extern void MX_Gatew_output_pair_ClosedLoop(uint16_T rtu_i_cmd, boolean_T
  rtu_enable_STGOffDiag, uint16_T rtu_afbk_A2D, uint16_T rtu_ifbk_A2D, uint8_T
  rtu_state_Vbattery, uint8_T rtu_state_Engine, uint16_T rtu_calc_Vbattery,
  uint16_T rtu_ain_PrecRef, uint16_T *rty_hs_cmd, boolean_T *rty_ls_cmd, int16_T
  *rty_errorCC, uint16_T *rty_calc_ifbk, uint8_T *rty_state_Output,
  rtB_output_pair_ClosedLoop_MX_G *localB, rtDW_output_pair_ClosedLoop_MX_
  *localDW, uint16_T rtp_OPEN_DB_CNT, uint16_T rtp_STG_DB_CNT, uint16_T rtp_KP,
  uint16_T rtp_KI, uint16_T rtp_IFBK_MAX, uint16_T rtp_NZ_DUTY, uint16_T
  rtp_NZ_IFBK, uint16_T rtp_OC_DB_CNT, uint16_T rtp_OSTG_DB_CNT, uint16_T
  rtp_STB_DB_CNT, uint8_T rtp_BIDIRECTIONAL_CTRL, uint16_T rtp_AFBK_GAIN,
  uint16_T rtp_IFBK_GAIN);
extern void MX_Gateway_Voltage_Limiter(uint16_T rtu_calc_VBattery, uint16_T
  rtu_duty_in, uint16_T *rty_duty_out, uint16_T rtp_MAX_VOLTS);
extern void MX_Ga_output_pair_OpenLoop_Init(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_state_Output, rtB_output_pair_OpenLoop_MX_Gat
  *localB, rtDW_output_pair_OpenLoop_MX_Ga *localDW);
extern void MX_G_output_pair_OpenLoop_Reset(uint16_T *rty_hs_cmd, boolean_T
  *rty_ls_cmd, uint8_T *rty_state_Output, rtB_output_pair_OpenLoop_MX_Gat
  *localB, rtDW_output_pair_OpenLoop_MX_Ga *localDW);
extern void MX_Gateway_output_pair_OpenLoop(boolean_T rtu_cmd_Output, boolean_T
  rtu_enable_STGOffDiag, uint8_T rtu_state_Engine, uint16_T rtu_afbk_A2D,
  uint16_T rtu_ifbk_A2D, uint8_T rtu_state_VBattery, uint16_T rtu_calc_VBattery,
  uint16_T rtu_ain_PrecRef, uint16_T *rty_hs_cmd, boolean_T *rty_ls_cmd, uint8_T
  *rty_state_Output, rtB_output_pair_OpenLoop_MX_Gat *localB,
  rtDW_output_pair_OpenLoop_MX_Ga *localDW, uint16_T rtp_MAX_VOLTS, uint16_T
  rtp_OPEN_DB_CNT, uint16_T rtp_STG_DB_CNT, uint16_T rtp_IFBK_MAX, uint16_T
  rtp_NZ_DUTY, uint16_T rtp_NZ_IFBK, uint16_T rtp_OC_DB_CNT, uint16_T
  rtp_OSTG_DB_CNT, uint16_T rtp_STB_DB_CNT, uint8_T rtp_FEEDBACK_ENABLE,
  uint16_T rtp_AFBK_GAIN, uint16_T rtp_IFBK_GAIN);
extern void MX_Gateway_relay_oc_Init(uint8_T *rty_state_Output, uint8_T
  *rty_state_Relay, rtB_relay_oc_MX_Gateway *localB, rtDW_relay_oc_MX_Gateway
  *localDW);
extern void MX_Gateway_relay_oc_Disable(uint8_T *rty_state_Output, uint8_T
  *rty_state_Relay, rtDW_relay_oc_MX_Gateway *localDW);
extern void MX_Gateway_relay_oc(boolean_T rtu_Enable, boolean_T rtu_cmd,
  boolean_T rtu_dfbk, boolean_T rtu_din, uint8_T *rty_state_Output, uint8_T
  *rty_state_Relay, rtB_relay_oc_MX_Gateway *localB, rtDW_relay_oc_MX_Gateway
  *localDW, uint16_T rtp_ERROR_OFF_DB_CNT, uint16_T rtp_ERROR_ON_DB_CNT,
  uint16_T rtp_NORMAL_DB_CNT);
extern void MX_Gateway_hc_hsd_Init(uint8_T *rty_state, rtB_hc_hsd_MX_Gateway
  *localB, rtDW_hc_hsd_MX_Gateway *localDW);
extern void MX_Gateway_hc_hsd_Reset(rtB_hc_hsd_MX_Gateway *localB,
  rtDW_hc_hsd_MX_Gateway *localDW);
extern void MX_Gateway_hc_hsd_Disable(uint8_T *rty_state, rtDW_hc_hsd_MX_Gateway
  *localDW);
extern void MX_Gateway_hc_hsd(boolean_T rtu_Enable, uint16_T rtu_duty, uint16_T
  rtu_afbk, uint16_T rtu_Vbatt, uint8_T *rty_state, rtB_hc_hsd_MX_Gateway
  *localB, rtDW_hc_hsd_MX_Gateway *localDW, uint16_T rtp_OPEN_DB_CNT, uint16_T
  rtp_STB_DB_CNT, uint16_T rtp_STG_DB_CNT);
extern void MX__output_single_OpenLoop_Init(uint8_T *rty_state,
  rtB_output_single_OpenLoop_MX_G *localB, rtDW_output_single_OpenLoop_MX_
  *localDW);
extern void MX_output_single_OpenLoop_Reset(uint8_T *rty_state,
  rtB_output_single_OpenLoop_MX_G *localB, rtDW_output_single_OpenLoop_MX_
  *localDW);
extern void output_single_OpenLoop_Disable(rtB_output_single_OpenLoop_MX_G
  *localB, rtDW_output_single_OpenLoop_MX_ *localDW);
extern void MX_Gatew_output_single_OpenLoop(uint16_T rtu_cmd, uint8_T
  rtu_state_Vbattery, uint16_T rtu_calc_VBattery, uint16_T rtu_afbk_A2D, uint8_T
  *rty_state, uint16_T *rty_duty_Output, rtB_output_single_OpenLoop_MX_G *localB,
  rtDW_output_single_OpenLoop_MX_ *localDW, uint16_T rtp_MAX_VOLTS, uint16_T
  rtp_OPEN_DB_CNT, uint16_T rtp_STB_DB_CNT, uint16_T rtp_STG_DB_CNT, uint8_T
  rtp_FUNCTION, uint16_T rtp_AFBK_GAIN);

#endif                                 // RTW_HEADER_mod_Library_h_

//
//  [EOF]

