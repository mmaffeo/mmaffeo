//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : MX_Gateway


#ifndef RTW_HEADER_mod_Inputs_h_
#define RTW_HEADER_mod_Inputs_h_
#ifndef MX_Gateway_COMMON_INCLUDES_
# define MX_Gateway_COMMON_INCLUDES_
#include "rtwtypes.h"
#include "rtw_continuous.h"
#include "rtw_solver.h"
#endif                                 // MX_Gateway_COMMON_INCLUDES_

#include "MX_Gateway_types.h"

// Child system includes
#include "mod_Library.h"

// Block states (auto storage) for system '<S298>/LP_Fitler_Adj_Gain'
typedef struct {
  struct {
    uint_T is_c12_MX_Gateway:2;        // '<S298>/LP_Fitler_Adj_Gain'
    uint_T is_active_c12_MX_Gateway:1; // '<S298>/LP_Fitler_Adj_Gain'
  } bitsForTID2;
} rtDW_LP_Fitler_Adj_Gain_MX_Gate;

extern void MX_Gateway_Truth_Table(uint8_T rtu_state, uint8_T *rty_gauge);
extern void MX_Gate_LP_Fitler_Adj_Gain_Init(int32_T *rty_Output,
  rtDW_LP_Fitler_Adj_Gain_MX_Gate *localDW);
extern void MX_Gateway_LP_Fitler_Adj_Gain(uint8_T rtu_Gain, int16_T rtu_Input,
  int32_T *rty_Output, rtDW_LP_Fitler_Adj_Gain_MX_Gate *localDW);
extern void MX_Gateway_AirFilter_Init(void);
extern void MX_Gateway_AirFilter(void);
extern void MX_Gateway_Aux_Pot_Init(void);
extern void MX_Gateway_Aux_Pot(void);
extern void MX_Gateway_Buttons_Init(void);
extern void MX_Gateway_Buttons(void);
extern void MX_Gateway_Console_Sensor_Init(void);
extern void MX_Gateway_Console_Sensor(void);
extern void MX_Gateway_ECT_Init(void);
extern void MX_Gateway_ECT(void);
extern void MX_Gateway_Normal_Pot_Init(void);
extern void MX_Gateway_Normal_Pot_Reset(void);
extern void MX_Gateway_Normal_Pot_Disable(void);
extern void MX_Gateway_Normal_Pot(void);
extern void MX_Gateway_RightPot_Init(void);
extern void MX_Gateway_RightPot_Reset(void);
extern void MX_Gateway_RightPot_Disable(void);
extern void MX_Gateway_RightPot(void);
extern void MX_Gateway_EOP_Init(void);
extern void MX_Gateway_EOP(void);
extern void MX_Gateway_Eco_Mode_Init(void);
extern void MX_Gateway_Eco_Mode(void);
extern void MX_Gateway_EngineSpeed_Init(void);
extern void MX_Gateway_EngineSpeed(void);
extern void MX__Engine_Oil_Temperature_Init(void);
extern void MX_Gatew_Engine_Oil_Temperature(void);
extern void Engine_Start_Init(void);
extern void Engine_Start(void);
extern void MX_Gateway_FuelLevel_Init(void);
extern void MX_Gateway_FuelLevel(void);
extern void MX_Gatewa_Fuel_Temperature_Init(void);
extern void MX_Gateway_Fuel_Temperature(void);
extern void MX_Gateway_HCFilter1_Init(void);
extern void MX_Gateway_HCFilter1(void);
extern void MX_Gateway_HydOilTemp_Init(void);
extern void MX_Gateway_HydOilTemp(void);
extern void MX_Gateway_Joystick_Pots(void);
extern void MX_Gateway_Key_Init(void);
extern void MX_Gateway_Key(void);
extern void MX_Gate_Load_Moment_Sensor_Init(void);
extern void MX_Gat_Load_Moment_Sensor_Reset(void);
extern void MX_G_Load_Moment_Sensor_Disable(void);
extern void MX_Gateway_Load_Moment_Sensor(void);
extern void MX_Gate_Load_Moment_Switch_Init(void);
extern void MX_Gat_Load_Moment_Switch_Reset(void);
extern void MX_G_Load_Moment_Switch_Disable(void);
extern void MX_Gateway_Load_Moment_Switch(void);
extern void MX_Gateway_Load_Sense_Init(void);
extern void MX_Gateway_Load_Sense(void);
extern void MX_Gateway_Offset_Pot_Init(void);
extern void MX_Gateway_Offset_Pot(void);
extern void MX_Gateway_SensorSupply1_Init(void);
extern void MX_Gateway_SensorSupply1(void);
extern void MX_Gateway_SensorSupply2_Init(void);
extern void MX_Gateway_SensorSupply2(void);
extern void MX_Gateway_Throttle_Init(void);
extern void MX_Gateway_Throttle(void);
extern void MX_Gateway_VBattery_Init(void);
extern void MX_Gateway_VBattery(void);

#endif                                 // RTW_HEADER_mod_Inputs_h_

//
//  [EOF]

