//
//  Copyright (c) 2009 Bobcat Company as an unpublished work.
//  All Rights Reserved.
//
//  The information contained herein is confidential property of Bobcat Company.
//  The use, copying, transfer or disclosure of such information is prohibited except
//  by express written agreement with Bobcat Company.
//
//  Code Generated by Simulink Real-Time Workshop
//
//  Simulink model                       : Chart1


#include "Chart1.h"
#include "Chart1_private.h"

// Named constants for Chart: '<Root>/Chart1'
#define Chart1_IN_CONNECTED            ((uint8_T)1U)
#define Chart1_IN_NO_ACTIVE_CHILD      ((uint8_T)0U)
#define Chart1_IN_OPERATIONAL          ((uint8_T)2U)
#define Chart1_IN_READY                ((uint8_T)3U)
#define Chart1_IN_RUN_FWD              ((uint8_T)4U)
#define Chart1_IN_STOP                 ((uint8_T)5U)

// Exported block signals
uint8_T cmdInverter;                   // '<Root>/Chart1'

// Block states (auto storage)
D_Work_Chart1 Chart1_DWork;

// External inputs (root inport signals with auto storage)
ExternalInputs_Chart1 Chart1_U;

// External outputs (root outports fed by signals with auto storage)
ExternalOutputs_Chart1 Chart1_Y;

// Model step function
void Chart1_step(void)
{
  uint32_T tmp;

  // Chart: '<Root>/Chart1' incorporates:
  //   Inport: '<Root>/in_Speed'
  //   Inport: '<Root>/state_Inverter'

  // Gateway: Chart1
  // During: Chart1
  if ((uint32_T)Chart1_DWork.bitsForTID0.is_active_c5_Chart1 == 0U) {
    // Entry: Chart1
    Chart1_DWork.bitsForTID0.is_active_c5_Chart1 = 1U;

    // Entry Internal: Chart1
    // Transition: '<S1>:193'
    if (state_Inverter == INVERTER_STOP) {
      // Transition: '<S1>:172'
      Chart1_DWork.bitsForTID0.is_c5_Chart1 = Chart1_IN_STOP;

      // Entry 'STOP': '<S1>:163'
      cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
    } else {
      // Transition: '<S1>:186'
      if (state_Inverter == INVERTER_CONNECTED) {
        // Transition: '<S1>:173'
        Chart1_DWork.bitsForTID0.is_c5_Chart1 = Chart1_IN_CONNECTED;

        // Entry 'CONNECTED': '<S1>:164'
        cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      } else {
        // Transition: '<S1>:187'
        if (state_Inverter == INVERTER_OPERATIONAL) {
          // Transition: '<S1>:179'
          Chart1_DWork.bitsForTID0.is_c5_Chart1 = Chart1_IN_OPERATIONAL;

          // Entry 'OPERATIONAL': '<S1>:165'
          cmdInverter = CMD_INVERTER_GOTO_READY;
        } else {
          // Transition: '<S1>:178'
          if (state_Inverter == INVERTER_READY) {
            // Transition: '<S1>:180'
            Chart1_DWork.bitsForTID0.is_c5_Chart1 = Chart1_IN_READY;

            // Entry 'READY': '<S1>:168'
            cmdInverter = CMD_INVERTER_RUN_FWD;

            // Outport: '<Root>/speed'
            Chart1_Y.speed = 0U;
          } else {
            // Transition: '<S1>:192'
            if (state_Inverter == INVERTER_RUN_FWD) {
              // Transition: '<S1>:181'
              Chart1_DWork.bitsForTID0.is_c5_Chart1 = Chart1_IN_RUN_FWD;

              // Entry 'RUN_FWD': '<S1>:188'
              cmdInverter = CMD_INVERTER_RUN_FWD;

              // Outport: '<Root>/speed'
              Chart1_Y.speed = 0U;
            }
          }
        }
      }
    }
  } else {
    switch (Chart1_DWork.bitsForTID0.is_c5_Chart1) {
     case Chart1_IN_CONNECTED:
      // During 'CONNECTED': '<S1>:164'
      cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      break;

     case Chart1_IN_OPERATIONAL:
      // During 'OPERATIONAL': '<S1>:165'
      cmdInverter = CMD_INVERTER_GOTO_READY;
      break;

     case Chart1_IN_READY:
      // During 'READY': '<S1>:168'
      cmdInverter = CMD_INVERTER_RUN_FWD;

      // Outport: '<Root>/speed'
      Chart1_Y.speed = 0U;
      break;

     case Chart1_IN_RUN_FWD:
      // During 'RUN_FWD': '<S1>:188'
      cmdInverter = CMD_INVERTER_RUN_FWD;
      tmp = (uint32_T)(10U * (uint32_T)Chart1_U.in_Speed);
      if (tmp > 65535U) {
        tmp = 65535U;
      }

      // Outport: '<Root>/speed' incorporates:
      //   Inport: '<Root>/in_Speed'

      Chart1_Y.speed = (uint16_T)tmp;
      break;

     default:
      // During 'STOP': '<S1>:163'
      cmdInverter = CMD_INVERTER_GOTO_OPERATIONAL;
      break;
    }
  }

  // End of Chart: '<Root>/Chart1'
}

// Model initialize function
void Chart1_initialize(void)
{
  // Registration code

  // block I/O

  // exported global signals
  cmdInverter = 0U;

  // states (dwork)
  (void) memset((void *)&Chart1_DWork, 0,
                sizeof(D_Work_Chart1));

  // external inputs
  Chart1_U.in_Speed = 0U;

  // external outputs
  (void) memset((void *)&Chart1_Y, 0,
                sizeof(ExternalOutputs_Chart1));

  // SystemInitialize for Chart: '<Root>/Chart1'
  Chart1_DWork.bitsForTID0.is_active_c5_Chart1 = 0U;
  Chart1_DWork.bitsForTID0.is_c5_Chart1 = Chart1_IN_NO_ACTIVE_CHILD;
}

//
//  [EOF]

